#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[Equivalence of functions under laws]{Equivalence of typeclass methods under laws}
\subtitle{Why flatMap is "equivalent" to flatten and map}
\author{Sergei Winitzki}
\date{2021-05-08}
\institute[ABTB]{Academy by the Bay}
\setbeamertemplate{headline}{} % disable headline at top
\setbeamertemplate{navigation symbols}{} % disable navigation bar at bottom
\usepackage[all]{xy} % xypic
%\makeatletter
% Macros to assist LyX with XYpic when using scaling.
\newcommand{\xyScaleX}[1]{%
\makeatletter
\xydef@\xymatrixcolsep@{#1}
\makeatother
} % end of \xyScaleX
\makeatletter
\newcommand{\xyScaleY}[1]{%
\makeatletter
\xydef@\xymatrixrowsep@{#1}
\makeatother
} % end of \xyScaleY

% Double-stroked fonts to replace the non-working \mathbb{1}.
\usepackage{bbold}
\DeclareMathAlphabet{\bbnumcustom}{U}{BOONDOX-ds}{m}{n} % Use BOONDOX-ds or bbold.
\newcommand{\custombb}[1]{\bbnumcustom{#1}}
% The LyX document will define a macro \bbnum{#1} that calls \custombb{#1}.

\usepackage{relsize} % make math symbols larger or smaller
\usepackage{stmaryrd} % some extra symbols such as \fatsemi
% Note: using \forwardcompose inside a \text{} will cause a LaTeX error!
\newcommand{\forwardcompose}{\hspace{1.5pt}\ensuremath\mathsmaller{\fatsemi}\hspace{1.5pt}}


% Make underline green.
\definecolor{greenunder}{rgb}{0.1,0.6,0.2}
%\newcommand{\munderline}[1]{{\color{greenunder}\underline{{\color{black}#1}}\color{black}}}
\def\mathunderline#1#2{\color{#1}\underline{{\color{black}#2}}\color{black}}
% The LyX document will define a macro \gunderline{#1} that will use \mathunderline with the color `greenunder`.
%\def\gunderline#1{\mathunderline{greenunder}{#1}} % This is now defined by LyX itself with GUI support.

% Scala syntax highlighting. See https://tex.stackexchange.com/questions/202479/unable-to-define-scala-language-with-listings
%\usepackage[T1]{fontenc}
%\usepackage[utf8]{inputenc}
%\usepackage{beramono}
%\usepackage{listings}
% The listing settings are now supported by LyX in a separate section "Listings".
\usepackage{xcolor}

\definecolor{scalakeyword}{rgb}{0.16,0.07,0.5}
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{aqua}{rgb}{0.9,0.96,0.999}
\definecolor{scalatype}{rgb}{0.2,0.3,0.2}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "language=Scala,morekeywords={{scala}},otherkeywords={=,=>,<-,<\%,<:,>:,\#,@,:,[,],.,???},keywordstyle={\color{scalakeyword}},morekeywords={[2]{String,Short,Int,Long,Char,Boolean,Double,Float,BigDecimal,Seq,Map,Set,List,Option,Either,Future,Vector,Range,IndexedSeq,Try,true,false,None,Some,Left,Right,Nothing,Any,Array,Unit,Iterator,Stream}},keywordstyle={[2]{\color{scalatype}}},frame=tb,aboveskip={1.5mm},belowskip={0.5mm},showstringspaces=false,columns=fullflexible,keepspaces=true,basicstyle={\smaller\ttfamily},extendedchars=true,numbers=none,numberstyle={\tiny\color{gray}},commentstyle={\color{dkgreen}},stringstyle={\color{mauve}},frame=single,framerule={0.0mm},breaklines=true,breakatwhitespace=true,tabsize=3,framexleftmargin={0.5mm},framexrightmargin={0.5mm},xleftmargin={1.5mm},xrightmargin={1.5mm},framextopmargin={0.5mm},framexbottommargin={0.5mm},fillcolor={\color{aqua}},rulecolor={\color{aqua}},rulesepcolor={\color{aqua}},backgroundcolor={\color{aqua}},mathescape=false,extendedchars=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\gunderline}[1]{\mathunderline{greenunder}{#1}}
{\underline{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\bef}{\forwardcompose}
{\fatsemi}
\end_inset


\begin_inset FormulaMacro
\newcommand{\bbnum}[1]{\custombb{#1}}
{\underline{#1}}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Beginning of slides.
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Equivalent formulations of typeclasses I
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Monads can be defined via 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map
\end_layout

\end_inset

, and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

, 
\emph on
or
\emph default
 via 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is often said that these methods are 
\begin_inset Quotes eld
\end_inset

equivalent
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Itemize
P.
\begin_inset space ~
\end_inset

Wadler, 
\begin_inset Quotes eld
\end_inset


\emph on
Monads for functional programming
\emph default

\begin_inset Quotes erd
\end_inset

 (1995)
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename wadler-excerpt.png
	lyxscale 40
	width 60col%

\end_inset


\begin_inset VSpace -40baselineskip%
\end_inset


\end_layout

\begin_layout Standard
Applicative functors may be defined via 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ap
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

 
\emph on
or
\emph default
 via 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map2
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
P.
\begin_inset space ~
\end_inset

Chuisano and R.
\begin_inset space ~
\end_inset

Bjarnason, 
\begin_inset Quotes eld
\end_inset


\emph on
Functional programming in Scala
\emph default

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename fpis-excerpt.png
	lyxscale 40
	width 45col%

\end_inset


\begin_inset VSpace -80baselineskip%
\end_inset


\end_layout

\begin_layout Standard
This must be right, but questions remain...
\end_layout

\begin_layout Itemize
What does it mean that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x
\end_layout

\end_inset

 is 
\begin_inset Quotes eld
\end_inset

equivalent in expressiveness
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

y
\end_layout

\end_inset

?
\end_layout

\begin_layout Itemize
How can it be that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map2[A, B, C]
\end_layout

\end_inset

 is 
\begin_inset Quotes eld
\end_inset

equivalent
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ap[A, B]
\end_layout

\end_inset

?
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Equivalent formulations of typeclasses II.
 More examples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
We know that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

 is 
\emph on
equal
\emph default
 to the composition of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 can be expressed via 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def flatten[A](ffa: F[F[A]]): F[A] = ffa.flatMap(identity)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def flatMap[A, B](p: F[A])(f: A => F[B]): F[B] = p.map(f).flatten
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\text{flatten}=\text{flatMap}\left(\text{id}\right)\quad,\quad\quad p\triangleright\text{flatMap}\left(f\right)=p\triangleright f^{\uparrow F}\triangleright\text{flatten}
\]

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

 method can be expressed via 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

wu
\end_layout

\end_inset

 and vice versa:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def wu: F[Unit] = pure(())
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def pure[A](a: A): F[A] = wu.map(_ => a)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\text{wu}=\text{pure}(1)\quad,\quad\quad\text{pure}\left(a\right)=\text{wu}\triangleright(\_\rightarrow a)^{\uparrow F}
\]

\end_inset

The 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

filter
\end_layout

\end_inset

 method can be expressed via 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

deflate
\end_layout

\end_inset

 and vice versa:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def deflate[A](foa: F[Option[A]]): F[A] =
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  foa.filter(_.nonEmpty).map(_.get)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def filter[A](fa: F[A])(p: A => Boolean): F[A] =
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  deflate(fa.map { a => if (p(a)) Some(a) else None } )
\end_layout

\begin_layout Standard
Notation: 
\begin_inset Formula $x\triangleright f$
\end_inset

 means 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

f(x)
\end_layout

\end_inset

 or in Scala 2.13, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x.pipe(f)
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $f^{\uparrow F}$
\end_inset

 means 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

_.map(f)
\end_layout

\end_inset

 for the functor 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Confusing issue 1: 
\begin_inset Quotes eld
\end_inset

equivalence
\begin_inset Quotes erd
\end_inset

 of values?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Yes, we can express 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 through 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

, but so what?
\end_layout

\begin_layout Itemize
Is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

5
\end_layout

\end_inset

 
\begin_inset Quotes eld
\end_inset

equivalent
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

10
\end_layout

\end_inset

 in expressive power?
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def five: Int = ten / 2
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def ten: Int = five * 2
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Confusing issue 2: 
\begin_inset Quotes eld
\end_inset

equivalence
\begin_inset Quotes erd
\end_inset

 of functions with different sets of type parameters?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
How can 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure[A]: A => F[A]
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

wu: F[Unit]
\end_layout

\end_inset

 be equivalent?
\end_layout

\begin_deeper
\begin_layout Itemize
An extra type parameter means there are many more implementations
\end_layout

\end_deeper
\begin_layout Itemize
Example of a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

 that is 
\emph on
not
\emph default
 equivalent to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

wu
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def badPure[A](x: A): List[A] = x match {
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  case i: Int   => List(i + 123)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  case _        => List(x)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
}
\end_layout

\begin_layout Itemize
The corresponding 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

wu = List(())
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
We cannot restore 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

badPure
\end_layout

\end_inset

 from 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

wu
\end_layout

\end_inset

: the corresponding 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

 is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List(_)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Equivalence under naturality laws I: example
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The problem with 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

badPure
\end_layout

\end_inset

 is that it does not work the same for all types
\end_layout

\begin_layout Itemize
The code of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

badPure
\end_layout

\end_inset

 is not 
\series bold
fully parametric
\end_layout

\begin_layout Itemize
To enforce full parametricity, we require a naturality law: 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure(f(x)) == pure(x).map(f)
\end_layout

\end_inset


\begin_inset Formula 
\[
x\triangleright f\triangleright\text{pure}=x\triangleright\text{pure}\triangleright f^{\uparrow F}\quad,\quad\quad f^{:A\rightarrow B}\bef\text{pure}^{B}=\text{pure}^{A}\bef f^{\uparrow F}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{2.8pc}\xyScaleX{5.5pc}\mathtt{A}\ar[d]\sb(0.5){~\mathtt{f}}\ar[r]\sp(0.5){\mathtt{pure[A]}} & \mathtt{F[A]}\ar[d]\sp(0.5){\mathtt{\_.map(f)}\text{ for }\mathtt{F}}\\
\mathtt{B}\ar[r]\sp(0.5){\mathtt{pure[B]}} & \mathtt{F[B]}
}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Equivalence under naturality laws II: general formulation
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The precise meaning of the 
\begin_inset Quotes eld
\end_inset

equivalent expressive power
\begin_inset Quotes erd
\end_inset

 of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure[A]
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

wu
\end_layout

\end_inset

:
\end_layout

\begin_layout Itemize
\begin_inset VSpace -100baselineskip%
\end_inset

the set of all functions 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure[A]: A => F[A]
\end_layout

\end_inset

 satisfying the naturality law is in a one-to-one correspondence with the
 set of all values 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

wu: F[Unit]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Proof:
\end_layout

\begin_layout Enumerate
Start with 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

 that satisfies the naturality law; define 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

wu = pure(())
\end_layout

\end_inset

; then define 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure2(x) = wu.map(_ => x)
\end_layout

\end_inset

.
 Show that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure2 == pure
\end_layout

\end_inset

:
\begin_inset Formula 
\begin{align*}
{\color{green}\text{for an arbitrary }x:}\quad & \text{pu}_{2}(x)=\gunderline{\text{wu}}\triangleright(\_\rightarrow x)^{\uparrow F}=1\triangleright\gunderline{\text{pu}\triangleright(\_\rightarrow x)^{\uparrow F}}\\
{\color{green}\text{use naturality law}:}\quad & =\gunderline{1\triangleright(\_\rightarrow x)}\triangleright\text{pu}=x\triangleright\text{pu}=\text{pu}\left(x\right)\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Enumerate
Start with 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

wu: F[Unit]
\end_layout

\end_inset

; define 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure(x) = wu.map(_ => x)
\end_layout

\end_inset

; then define 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

wu2 = pure(())
\end_layout

\end_inset

.
 Show that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

wu2 == wu
\end_layout

\end_inset

:
\begin_inset Formula 
\[
\text{wu}_{2}=\text{pure}\left(1\right)=\text{wu}\triangleright(\gunderline{\_\rightarrow1})^{\uparrow F}=\text{wu}\triangleright\gunderline{\text{id}^{\uparrow F}}=\text{wu}\triangleright\text{id}=\text{wu}
\]

\end_inset

The function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure(x) = wu.map(_ => x)
\end_layout

\end_inset

 satisfies the naturality law:
\begin_inset Formula 
\begin{align*}
 & \text{pure}\left(x\right)\triangleright f^{\uparrow F}=\text{wu}\triangleright(\_\rightarrow\gunderline{x)^{\uparrow F}\triangleright f^{\uparrow F}}=\text{wu}\triangleright(\_\rightarrow x\triangleright f)^{\uparrow F}\\
 & =\text{wu}\triangleright(\_\rightarrow f(x))^{\uparrow F}=\text{pure}\left(f(x)\right)
\end{align*}

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Equivalence under naturality laws III: general pattern
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
To prove the equivalence of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p: P[A, B, C]
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

q: Q[A, B, C]
\end_layout

\end_inset

 under assumption of some naturality laws:
\end_layout

\begin_layout Itemize
Implement functions 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p2q
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

q2p
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def p2q[A, B, C]: P[A, B, C] => Q[A, B, C] = ...
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def q2p[A, B, C]: Q[A, B, C] => P[A, B, C] = ...
\end_layout

\begin_layout Itemize
Show that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

q2p(p2q(p)) == p
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p2q(q2p(q)) == q
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Show that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p2q(p)
\end_layout

\end_inset

 satisfies 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

q
\end_layout

\end_inset

's laws, and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

q2p(q)
\end_layout

\end_inset

 satisfies 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p
\end_layout

\end_inset

's laws
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

set of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p: P[A, B, C]
\end_layout

\end_inset

 satisfying a law
\begin_inset Quotes erd
\end_inset

 is a 
\series bold
refined type
\end_layout

\begin_layout Itemize
The Scala compiler cannot verify laws automatically
\end_layout

\begin_layout Itemize
Testing cannot verify laws since type parameters cannot be arbitrary
\end_layout

\begin_layout Itemize
Laws must be verified via symbolic reasoning about code
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Equivalence under naturality laws IV: further examples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Equivalence of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten[A]
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap[A, B]
\end_layout

\end_inset

 requires a naturality law for 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap[A, B]
\end_layout

\end_inset

 with respect to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
p.flatMap(f andThen g) == p.map(f).flatMap(g)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\text{flatMap}\left(f\bef g\right)=f^{\uparrow F}\bef\text{flatMap}\left(g\right)
\]

\end_inset


\end_layout

\begin_layout Itemize
Equivalence of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ap
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

zip
\end_layout

\end_inset

 requires a naturality law for each of them
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def ap[A, B]: F[A => B] => F[A] => F[B] = ...
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
ap(r)(p).map(f) == ap(r.map(x => x andThen f))(p)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def zip[A, B]: (F[A], F[B]) => F[(A, B)] = ...
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
zip(p.map(f), q) == zip(p, q).map { case (a, b) => (f(a), b) }
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Conclusions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Formulated the 
\begin_inset Quotes eld
\end_inset

equivalence of expressive power
\begin_inset Quotes erd
\end_inset

 rigorously
\end_layout

\begin_deeper
\begin_layout Itemize
It is a one-to-one correspondence between
\emph on
 refined types
\end_layout

\end_deeper
\begin_layout Itemize
In most cases, the equivalence holds only after imposing naturality laws
\end_layout

\begin_layout Itemize
Naturality laws constrain code and may eliminate a type parameter 
\end_layout

\begin_deeper
\begin_layout Itemize
Naturality laws will hold automatically for fully parametric code
\end_layout

\end_deeper
\begin_layout Itemize
Functions with simpler type signatures are simpler to reason about
\end_layout

\begin_deeper
\begin_layout Itemize
Proofs of laws are often easier for 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 than for 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Full details in the upcoming book — 
\size small

\begin_inset CommandInset href
LatexCommand href
target "https://github.com/winitzki/sofp"

\end_inset


\end_layout

\begin_layout Standard

\emph on
The Science of Functional Programming: A tutorial, with examples in Scala
\end_layout

\begin_layout Standard

\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset VSpace -40baselineskip%
\end_inset

The book will explain (with examples and exercises):
\end_layout

\begin_layout Itemize
techniques of symbolic reasoning about types
\end_layout

\begin_layout Itemize
techniques for symbolic calculations with code
\end_layout

\begin_layout Itemize
deriving and verifying laws symbolically (as equations for code)
\end_layout

\begin_layout Itemize
real-life motivations for (and applications of) these techniques
\end_layout

\end_inset


\begin_inset space ~
\end_inset

 
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "30col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename book-draft-cover.png
	lyxscale 20
	width 2.5cm

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
End of slides.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
