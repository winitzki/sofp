#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[FP in System F$\omega$ using Dhall]{Functional programming in System F$\omega$ using Dhall}
\author{Sergei Winitzki}
\date{2024-05-05}
\institute[ABTB]{Academy by the Bay 2024}
\setbeamertemplate{headline}{} % disable headline at top
\setbeamertemplate{navigation symbols}{} % disable navigation bar at bottom
\usepackage[all]{xy} % xypic
%\makeatletter
% Macros to assist LyX with XYpic when using scaling.
\newcommand{\xyScaleX}[1]{%
\makeatletter
\xydef@\xymatrixcolsep@{#1}
\makeatother
} % end of \xyScaleX
\makeatletter
\newcommand{\xyScaleY}[1]{%
\makeatletter
\xydef@\xymatrixrowsep@{#1}
\makeatother
} % end of \xyScaleY

% Double-stroked fonts to replace the non-working \mathbb{1}.
\usepackage{bbold}
\DeclareMathAlphabet{\bbnumcustom}{U}{BOONDOX-ds}{m}{n} % Use BOONDOX-ds or bbold.
\newcommand{\custombb}[1]{\bbnumcustom{#1}}
% The LyX document will define a macro \bbnum{#1} that calls \custombb{#1}.

\usepackage{relsize} % make math symbols larger or smaller
\usepackage{stmaryrd} % some extra symbols such as \fatsemi
% Note: using \forwardcompose inside a \text{} will cause a LaTeX error!
\newcommand{\forwardcompose}{\hspace{1.5pt}\ensuremath\mathsmaller{\fatsemi}\hspace{1.5pt}}


% Make underline green.
\definecolor{greenunder}{rgb}{0.1,0.6,0.2}
%\newcommand{\munderline}[1]{{\color{greenunder}\underline{{\color{black}#1}}\color{black}}}
\def\mathunderline#1#2{\color{#1}\underline{{\color{black}#2}}\color{black}}
% The LyX document will define a macro \gunderline{#1} that will use \mathunderline with the color `greenunder`.
%\def\gunderline#1{\mathunderline{greenunder}{#1}} % This is now defined by LyX itself with GUI support.

% Scala syntax highlighting. See https://tex.stackexchange.com/questions/202479/unable-to-define-scala-language-with-listings
%\usepackage[T1]{fontenc}
%\usepackage[utf8]{inputenc}
%\usepackage{beramono}
%\usepackage{listings}
% The listing settings are now supported by LyX in a separate section "Listings".
\usepackage{xcolor}

\definecolor{scalakeyword}{rgb}{0.16,0.07,0.5}
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{aqua}{rgb}{0.9,0.96,0.999}
\definecolor{scalatype}{rgb}{0.2,0.3,0.2}
\usepackage[nocenter]{qtree}
\usepackage{relsize}
\renewcommand\arraystretch{1.4}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "language=Scala,morekeywords={{scala}},otherkeywords={=,=>,<-,<\%,<:,>:,\#,@,:,[,],.,???},keywordstyle={\color{scalakeyword}},morekeywords={[2]{String,Short,Int,Long,Char,Boolean,Double,Float,BigDecimal,Seq,Map,Set,List,Option,Either,Future,Vector,Range,IndexedSeq,Try,true,false,None,Some,Left,Right,Nothing,Any,Array,Unit,Iterator,Stream}},keywordstyle={[2]{\color{scalatype}}},frame=tb,aboveskip={1.5mm},belowskip={0.5mm},showstringspaces=false,columns=fullflexible,keepspaces=true,basicstyle={\smaller\ttfamily},extendedchars=true,numbers=none,numberstyle={\tiny\color{gray}},commentstyle={\color{dkgreen}},stringstyle={\color{mauve}},frame=single,framerule={0.0mm},breaklines=true,breakatwhitespace=true,tabsize=3,framexleftmargin={0.5mm},framexrightmargin={0.5mm},xleftmargin={1.5mm},xrightmargin={1.5mm},framextopmargin={0.5mm},framexbottommargin={0.5mm},fillcolor={\color{aqua}},rulecolor={\color{aqua}},rulesepcolor={\color{aqua}},backgroundcolor={\color{aqua}},mathescape=false,extendedchars=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\gunderline}[1]{\mathunderline{greenunder}{#1}}
{\underline{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\bef}{\forwardcompose}
{\fatsemi}
\end_inset


\begin_inset FormulaMacro
\newcommand{\bbnum}[1]{\custombb{#1}}
{\underline{#1}}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Beginning of slides.
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Outline
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The core of modern functional programming is System F
\begin_inset Formula $\omega$
\end_inset


\end_layout

\begin_layout Itemize
Algebraic data types
\end_layout

\begin_layout Itemize
Type parameters and type constructors
\end_layout

\begin_layout Itemize
Higher-kinded types
\end_layout

\begin_deeper
\begin_layout Itemize
Haskell and Scala share the core of System F
\begin_inset Formula $\omega$
\end_inset


\end_layout

\begin_layout Itemize
OCaml, F#, Swift, Rust only have System F (no HKT)
\end_layout

\begin_deeper
\begin_layout Itemize
Cannot have typeclasses for type constructors
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
The 
\begin_inset CommandInset href
LatexCommand href
name "Dhall language"
target "https://dhall-lang.org"
literal "false"

\end_inset

 can be used as System F
\begin_inset Formula $\omega$
\end_inset

 
\end_layout

\begin_layout Itemize
A language for programmable configuration file templates
\end_layout

\begin_layout Itemize
Can be also used for exploring advanced FP idioms
\end_layout

\begin_layout Itemize
What I learned from my Dhall experience:
\end_layout

\begin_deeper
\begin_layout Itemize
Difference between λ(a : A) → (b : B) and 
\begin_inset Formula $\forall$
\end_inset

(a : A) → B
\end_layout

\begin_layout Itemize
We can make recursion safe
\end_layout

\begin_layout Itemize
Encodings of dependent types and GADTs
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Functions with type parameters
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
OCaml:
\end_layout

\begin_layout LyX-Code
let first : 'a * 'b -> 'a  = fun (x, y) -> x ;;
\end_layout

\begin_layout Standard
Haskell:
\end_layout

\begin_layout LyX-Code
first :: (a, b) -> a
\end_layout

\begin_layout LyX-Code
first (x, y) = x
\end_layout

\begin_layout Standard
Scala:
\end_layout

\begin_layout LyX-Code
def first[A, B] : ((A, B)) => A
\end_layout

\begin_layout LyX-Code
  = { case (x, y) => x }
\end_layout

\begin_layout Standard
Java:
\end_layout

\begin_layout LyX-Code
public static <X, Y> X first(X x, Y y) { return x; }
\end_layout

\begin_layout Standard
Go:
\end_layout

\begin_layout LyX-Code
func identity[A, B any](a A, b B) A { return a }
\end_layout

\begin_layout Standard
Swift:
\end_layout

\begin_layout LyX-Code
func first<A, B>(of a: A, and b: B) -> A {
\end_layout

\begin_layout LyX-Code
  return a
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Programming with functions and nothing else
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The core language of System F:
\end_layout

\begin_layout Itemize
Value parameters and type parameters
\end_layout

\begin_layout LyX-Code
a : A
\end_layout

\begin_layout LyX-Code
A : Type
\end_layout

\begin_layout Itemize
Create a function
\end_layout

\begin_layout LyX-Code
( λ(a : A) → (body : B) ) : (
\begin_inset Formula $\forall$
\end_inset

(a : A) → B )
\end_layout

\begin_layout LyX-Code
( λ(A : Type) → (body : B) ) : ( 
\begin_inset Formula $\forall$
\end_inset

(A : Type) → B )
\end_layout

\begin_layout Itemize
Use a function
\end_layout

\begin_layout LyX-Code
f x 
\emph on
or equivalently
\emph default
 ( (f : A → B) (x : A) ) : B
\end_layout

\begin_layout LyX-Code
f A 
\emph on
or equivalently
\emph default
 ( (f : Type → B) (A : Type) ) : B
\end_layout

\begin_layout Itemize
System F
\begin_inset Formula $\omega$
\end_inset

 adds 
\emph on
type constructor parameters
\end_layout

\begin_layout LyX-Code
λ(F : Type → Type) → (body : B) : 
\begin_inset Formula $\forall$
\end_inset

(F : Type → Type) → B
\end_layout

\begin_layout LyX-Code
λ(F : (Type → Type) → Type → Type) → ...
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Why use System F / System F
\begin_inset Formula $\omega$
\end_inset


\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Pro
\end_layout

\begin_layout Itemize
PL theory is simpler
\end_layout

\begin_deeper
\begin_layout Itemize
A small language that is easy to implement as a sublanguage
\end_layout

\begin_layout Itemize
LISP with type safety
\end_layout

\end_deeper
\begin_layout Itemize
Programs always terminate (
\begin_inset Quotes eld
\end_inset

strong normalization
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
Contra
\end_layout

\begin_layout Itemize
No built-in data structures
\end_layout

\begin_layout Itemize
No direct support for recursion
\end_layout

\begin_layout Itemize
Very verbose
\end_layout

\begin_layout Standard
To improve usability:
\end_layout

\begin_layout Itemize
Add built-in types (
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Bool
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Natural
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Text
\end_layout

\end_inset

, etc.)
\end_layout

\begin_layout Itemize
Add syntax for named values, products, co-products, pattern matching
\end_layout

\begin_layout Itemize
Add a module system
\end_layout

\begin_layout Itemize
Add type inference
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
System F
\begin_inset Formula $\omega$
\end_inset

 can encode standard data types
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Void type
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\forall$
\end_inset

(A : Type) → A
\end_layout

\begin_layout Standard
Unit type
\begin_inset VSpace -100baselineskip%
\end_inset


\end_layout

\begin_layout LyX-Code
( λ(A : Type) → λ(x : A) → x ) : ( 
\begin_inset Formula $\forall$
\end_inset

(A : Type) → A → A )
\end_layout

\begin_layout Standard
Product of types 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 (denoted by 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 
\begin_inset Formula $\times$
\end_inset

 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

)
\end_layout

\begin_layout LyX-Code
λ(A : Type) → λ(B : Type) →
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $\forall$
\end_inset

(R : Type) → (A → B → R) → R
\end_layout

\begin_layout Standard
Co-product of types 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 (denoted by 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 
\begin_inset Formula $+$
\end_inset

 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

)
\end_layout

\begin_layout LyX-Code
λ(A : Type) → λ(B : Type) →
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $\forall$
\end_inset

(R : Type) → (A → R) → (B → R) → R
\end_layout

\begin_layout Standard
Least fixpoint of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A = F A
\end_layout

\end_inset

 (denoted by 
\begin_inset Formula $\mu$
\end_inset

 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A.
 F A
\end_layout

\end_inset

)
\end_layout

\begin_layout LyX-Code
λ(F : Type → Type) → 
\begin_inset Formula $\forall$
\end_inset

(R : Type) → (F R → R) → R
\end_layout

\begin_layout Standard
Existentially quantified types (denoted by 
\begin_inset Formula $\exists$
\end_inset

 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A.
 F A
\end_layout

\end_inset

)
\begin_inset VSpace -100baselineskip%
\end_inset


\end_layout

\begin_layout LyX-Code
λ(A : Type) → 
\begin_inset Formula $\forall$
\end_inset

(R : Type) → (
\begin_inset Formula $\forall$
\end_inset

(S : Type) → F S → R) → R
\end_layout

\begin_layout Standard
Greatest fixpoint of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A = F A
\end_layout

\end_inset

 is encoded as 
\begin_inset Formula $\exists$
\end_inset

 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A.
 A
\end_layout

\end_inset

 
\begin_inset Formula $\times$
\end_inset

 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(A
\end_layout

\end_inset

 
\begin_inset Formula $\to$
\end_inset

 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F A)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
System F
\begin_inset Formula $\omega$
\end_inset

 can encode nested types and GADTs
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Example nested type: a perfect-shaped tree
\end_layout

\begin_layout LyX-Code
data PT x where
\end_layout

\begin_layout LyX-Code
  Leaf :: a → PT a
\end_layout

\begin_layout LyX-Code
  Branch :: PT (a, a)
\end_layout

\begin_layout Itemize
Encoding of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PT
\end_layout

\end_inset

 in System F
\begin_inset Formula $\omega$
\end_inset

:
\end_layout

\begin_layout LyX-Code
λ(A : Type) → 
\begin_inset Formula $\forall$
\end_inset

(K : Type → Type) →
\end_layout

\begin_layout LyX-Code
  (A → K A) → K (Pair A A) → K A
\end_layout

\begin_layout Standard
Example GADT: 
\end_layout

\begin_layout LyX-Code
data MyAPI x where
\end_layout

\begin_layout LyX-Code
  GetUser  :: Text → MyAPI Int
\end_layout

\begin_layout LyX-Code
  Validate :: Int → MyAPI Bool
\end_layout

\begin_layout Itemize
Encoding of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

MyAPI
\end_layout

\end_inset

 in System F
\begin_inset Formula $\omega$
\end_inset

:
\end_layout

\begin_layout LyX-Code
λ(A : Type) → 
\begin_inset Formula $\forall$
\end_inset

(K : Type → Type) →
\end_layout

\begin_layout LyX-Code
  (Text → K Int) → (Int → K Bool) → K A
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Dhall as a System F
\begin_inset Formula $\omega$
\end_inset

 interpreter + syntax sugar
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Named constants
\end_layout

\begin_layout LyX-Code
let identity = λ(A : Type) → λ(x : A) → x
\end_layout

\begin_layout LyX-Code
in ...
\end_layout

\begin_layout Standard
Built-in types and type constructors
\end_layout

\begin_layout LyX-Code
Bool, Natural, Integer, Text, Optional, List
\end_layout

\begin_layout Standard
Record types
\end_layout

\begin_layout LyX-Code
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

let x = { name : Text, valid : Bool }
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

in x.name
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Labeled union types
\end_layout

\begin_layout LyX-Code
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

< Left : Text | Right : Natural >
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Usage
\end_layout

\begin_layout LyX-Code
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

let x = < Left : Text | Right : Natural >.Right 123 in ...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pattern matching
\end_layout

\begin_layout LyX-Code
merge { Left = λ(x : Text) → 0,
\end_layout

\begin_layout LyX-Code
Right = λ(y : Natural) → y + 1 } x
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Conclusions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
***
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
End of slides.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
