#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[FP and declarative programming]{Functional programming and declarative programming}
\author{Sergei Winitzki}
\date{2024-04-14}
\institute[ABTB]{Academy by the Bay 2024}
\setbeamertemplate{headline}{} % disable headline at top
\setbeamertemplate{navigation symbols}{} % disable navigation bar at bottom
\usepackage[all]{xy} % xypic
%\makeatletter
% Macros to assist LyX with XYpic when using scaling.
\newcommand{\xyScaleX}[1]{%
\makeatletter
\xydef@\xymatrixcolsep@{#1}
\makeatother
} % end of \xyScaleX
\makeatletter
\newcommand{\xyScaleY}[1]{%
\makeatletter
\xydef@\xymatrixrowsep@{#1}
\makeatother
} % end of \xyScaleY

% Double-stroked fonts to replace the non-working \mathbb{1}.
\usepackage{bbold}
\DeclareMathAlphabet{\bbnumcustom}{U}{BOONDOX-ds}{m}{n} % Use BOONDOX-ds or bbold.
\newcommand{\custombb}[1]{\bbnumcustom{#1}}
% The LyX document will define a macro \bbnum{#1} that calls \custombb{#1}.

\usepackage{relsize} % make math symbols larger or smaller
\usepackage{stmaryrd} % some extra symbols such as \fatsemi
% Note: using \forwardcompose inside a \text{} will cause a LaTeX error!
\newcommand{\forwardcompose}{\hspace{1.5pt}\ensuremath\mathsmaller{\fatsemi}\hspace{1.5pt}}


% Make underline green.
\definecolor{greenunder}{rgb}{0.1,0.6,0.2}
%\newcommand{\munderline}[1]{{\color{greenunder}\underline{{\color{black}#1}}\color{black}}}
\def\mathunderline#1#2{\color{#1}\underline{{\color{black}#2}}\color{black}}
% The LyX document will define a macro \gunderline{#1} that will use \mathunderline with the color `greenunder`.
%\def\gunderline#1{\mathunderline{greenunder}{#1}} % This is now defined by LyX itself with GUI support.

% Scala syntax highlighting. See https://tex.stackexchange.com/questions/202479/unable-to-define-scala-language-with-listings
%\usepackage[T1]{fontenc}
%\usepackage[utf8]{inputenc}
%\usepackage{beramono}
%\usepackage{listings}
% The listing settings are now supported by LyX in a separate section "Listings".
\usepackage{xcolor}

\definecolor{scalakeyword}{rgb}{0.16,0.07,0.5}
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{aqua}{rgb}{0.9,0.96,0.999}
\definecolor{scalatype}{rgb}{0.2,0.3,0.2}
\usepackage[nocenter]{qtree}
\usepackage{relsize}
\renewcommand\arraystretch{1.4}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "language=Scala,morekeywords={{scala}},otherkeywords={=,=>,<-,<\%,<:,>:,\#,@,:,[,],.,???},keywordstyle={\color{scalakeyword}},morekeywords={[2]{String,Short,Int,Long,Char,Boolean,Double,Float,BigDecimal,Seq,Map,Set,List,Option,Either,Future,Vector,Range,IndexedSeq,Try,true,false,None,Some,Left,Right,Nothing,Any,Array,Unit,Iterator,Stream}},keywordstyle={[2]{\color{scalatype}}},frame=tb,aboveskip={1.5mm},belowskip={0.5mm},showstringspaces=false,columns=fullflexible,keepspaces=true,basicstyle={\smaller\ttfamily},extendedchars=true,numbers=none,numberstyle={\tiny\color{gray}},commentstyle={\color{dkgreen}},stringstyle={\color{mauve}},frame=single,framerule={0.0mm},breaklines=true,breakatwhitespace=true,tabsize=3,framexleftmargin={0.5mm},framexrightmargin={0.5mm},xleftmargin={1.5mm},xrightmargin={1.5mm},framextopmargin={0.5mm},framexbottommargin={0.5mm},fillcolor={\color{aqua}},rulecolor={\color{aqua}},rulesepcolor={\color{aqua}},backgroundcolor={\color{aqua}},mathescape=false,extendedchars=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\gunderline}[1]{\mathunderline{greenunder}{#1}}
{\underline{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\bef}{\forwardcompose}
{\fatsemi}
\end_inset


\begin_inset FormulaMacro
\newcommand{\bbnum}[1]{\custombb{#1}}
{\underline{#1}}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Beginning of slides.
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Outline
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Functional programming is interesting, but in a weird way
\end_layout

\begin_layout Itemize
FP is (almost) engineering
\end_layout

\begin_layout Itemize
Other programming paradigms are (almost) artisanship 
\end_layout

\begin_layout Standard
A definition of declarative programming:
\end_layout

\begin_layout Itemize
A language for problem requirements, understandable to people
\end_layout

\begin_layout Itemize
The same language is mechanically translated into code
\end_layout

\begin_layout Itemize
The only known 
\begin_inset Quotes eld
\end_inset

silver bullet
\begin_inset Quotes erd
\end_inset

 of programming
\end_layout

\begin_layout Standard
Declarative programming must be domain-specific (DSL)
\end_layout

\begin_layout Itemize
We get a productivity boost as long as we avoid the pitfalls
\end_layout

\begin_layout Standard
Implementing DSLs is a 
\begin_inset Quotes eld
\end_inset

killer app
\begin_inset Quotes erd
\end_inset

 for functional programming
\end_layout

\begin_layout Itemize
FP is declarative for working with recursive data structures, such as labeled
 trees
\end_layout

\begin_layout Itemize
Requires learning some programming language theory
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Is the Functional Programming community weird?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The FP community is unlike other programmers' communities
\end_layout

\begin_layout Itemize
Others are focused on a chosen programming language (Java, Python, JavaScript,
 etc.), and on designing and using libraries and frameworks
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
\begin_inset Quotes eld
\end_inset

setup this YAML config, override this method, use this annotation
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
People in the FP community talk in a very different way
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
\begin_inset Quotes eld
\end_inset

referential transparency, algebraic data types, monoid laws, parametric
 polymorphism, free applicative functors, monad transformers, Yoneda lemma,
 Curry-Howard isomorphism, profunctor lenses, catamorphisms
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "A glossary of FP terminology"
target "https://degoes.net/articles/fp-glossary"
literal "false"

\end_inset

 (more than 
\begin_inset Formula $100$
\end_inset

 terms)
\end_layout

\end_deeper
\begin_layout Itemize
From SBTB 2018: 
\emph on

\begin_inset CommandInset href
LatexCommand href
name "The Functor,  Applicative,  Monad talk"
target "https://www.youtube.com/watch?v=L0aYcq1tqMo"
literal "false"

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
By 2018, everyone 
\emph on
expects
\emph default
 to hear these concepts mentioned 
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
As a former theoretical physicist, I recognize that sort of jargon 
\end_layout

\begin_layout Itemize
The FP jargon is used similarly to an engineer's jargon
\end_layout

\begin_layout Itemize
It is based on math but heavily adapted to the engineering domain
\end_layout

\begin_deeper
\begin_layout Itemize
Rigor is on the need-to-know basis, mathematical abstraction is limited
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Programming as engineering vs.
\begin_inset space ~
\end_inset

artisanship
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
FP is similar to engineering in how it uses math-based tools
\end_layout

\begin_deeper
\begin_layout Itemize
Mechanical, electrical, chemical engineering use calculus, complex variables,
 classical and quantum mechanics, electrodynamics, thermodynamics, physical
 chemistry
\end_layout

\begin_layout Itemize
FP uses category theory, type theory, logic proof theory, 
\begin_inset Formula $\lambda$
\end_inset

-calculus
\end_layout

\end_deeper
\begin_layout Itemize
Engineers use 
\emph on
a lot
\emph default
 of special terminology
\end_layout

\begin_deeper
\begin_layout Itemize
Examples from mechanical, electrical, chemical engineering: 
\begin_inset CommandInset href
LatexCommand href
name "rank-4 tensors"
target "https://serc.carleton.edu/NAGTWorkshops/mineralogy/mineral_physics/tensors.html"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Lagrangians with non-holonomic constraints"
target "https://mecharithm.com/learning/lesson/holonomic-nonholonomic-constraints-robots-103"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Fourier transform of the delta function"
target "https://www.youtube.com/watch?v=KAbqISZ6SHQ"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "inverse Z-transform"
target "https://ocw.mit.edu/resources/res-6-008-digital-signal-processing-spring-2011/video-lectures/lecture-6-the-inverse-z-transform/"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Gibbs free energy 1"
target "https://handbook.uts.edu.au/subjects/41384.html"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "2"
target "https://help.ebsilon.com/EN/Component_134.html"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
Examples from FP: 
\begin_inset CommandInset href
LatexCommand href
name "rank-$N$ types"
target "https://wiki.haskell.org/Rank-N_types"
literal "true"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "continuation-passing transformation"
target "https://www.cs.toronto.edu/~lczhang/324/ex/a2.pdf"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "polymorphic lambda functions"
target "https://stackoverflow.com/questions/20152939/what-is-a-polymorphic-lambda"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "free monads"
target "https://stackoverflow.com/questions/13352205/what-are-free-monads"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "hylomorphisms"
target "https://stackoverflow.com/questions/49135351/deforestation-in-a-hylomorphism"
literal "false"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
As in engineering, the special terminology in FP is 
\emph on
not
\emph default
 self-explanatory
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Gibbs free energy
\begin_inset Quotes erd
\end_inset

 is not energy that 
\begin_inset CommandInset href
LatexCommand href
name "J. W. Gibbs"
target "https://de.wikipedia.org/wiki/Josiah_Willard_Gibbs"
literal "false"

\end_inset

 provides for free
\end_layout

\end_deeper
\begin_layout Standard
All that stuff is mathematics-based knowledge that needs learning
\end_layout

\begin_layout Itemize
Programmers today neither study as engineers, nor work as engineers
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Books on engineering vs.
\begin_inset space ~
\end_inset

artisanship
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Functional programming looks like engineering
\end_layout

\begin_layout Standard
Today's 
\begin_inset Quotes eld
\end_inset

software engineering
\begin_inset Quotes erd
\end_inset

 resembles artisanship
\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace -30baselineskip%
\end_inset

Books on mechanical, electrical, chemical engineering design:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Jazar. Theory of Applied Robotics 2nd edition - sample page.png
	lyxscale 20
	width 20col%

\end_inset


\begin_inset Graphics
	filename Schaum's outline of electric curcuits, 4th edition - sample page.png
	lyxscale 20
	width 20col%

\end_inset


\begin_inset Graphics
	filename Ellingson - Electromagnetics vol. 2, sample page.png
	lyxscale 20
	width 20col%

\end_inset


\begin_inset Graphics
	filename Sinnott, Tower. Chemical Engineering Design 5th edition - sample page.png
	lyxscale 20
	width 20col%

\end_inset


\begin_inset VSpace -30baselineskip%
\end_inset


\end_layout

\begin_layout Standard
\align center
Books on software design and architecture:
\begin_inset VSpace -30baselineskip%
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Solid software design architecture handbook - sample page.png
	lyxscale 20
	width 20col%

\end_inset


\begin_inset Graphics
	filename Clean architecture - sample page.png
	lyxscale 20
	width 16col%

\end_inset


\begin_inset Graphics
	filename Code Complete - sample page.png
	lyxscale 20
	width 14col%

\end_inset


\begin_inset Graphics
	filename Code Complete - another sample page.png
	lyxscale 20
	width 20col%

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Questions that have rigorous answers
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In engineering, certain questions about device design have rigorous answers
\end_layout

\begin_layout Standard
In FP, certain questions about code design have rigorous answers
\end_layout

\begin_layout Itemize
The answers are 
\emph on
not
\emph default
 a matter of opinion or experience
\end_layout

\begin_layout Itemize
The answers are found via mathematical derivations and reasoning
\end_layout

\begin_layout Itemize
The answers guide the design
\end_layout

\begin_layout Standard
Examples of reasoning tasks:
\end_layout

\begin_layout Itemize
Can we implement these APIs?
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
f :: (r -> Either z a) -> Either z (r -> a) -- Haskell
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
g :: Either z (r -> a) -> r -> Either z a
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def f[Z, R, A](r: R => Either[Z, A]): Either[Z, R => A] // Scala
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def g[Z, R, A](e: Either[Z, R => A]): R => Either[Z, A]
\end_layout

\begin_layout Itemize
Can use the data structure 
\family typewriter
\size footnotesize
\color blue
F
\family default
\size default
\color inherit
 as a monad in our code?
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
type F a = Maybe (a, a, a) -- Haskell
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
bind :: F a -> (a -> F b) -> F b
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
type F[A] = Option[(A, A, A)] // Scala
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def flatMap[A, B](fa: F[A])(f: A => F[B]): F[B]
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
A definition of 
\begin_inset Quotes eld
\end_inset

declarative
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Programming is 
\begin_inset Quotes eld
\end_inset

declarative
\begin_inset Quotes erd
\end_inset

 when 
\emph on

\begin_inset Quotes eld
\end_inset

specifications
\emph default
 
\emph on
are
\emph default
 
\emph on
programs
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Being declarative
\begin_inset Quotes erd
\end_inset

 is not a property of a programming language alone
\end_layout

\begin_layout Standard
A language 
\begin_inset Formula $L$
\end_inset

 is 
\series bold
declarative for an application domain
\series default
 
\begin_inset Formula $D$
\end_inset

 if: 
\end_layout

\begin_layout Itemize
The domain 
\begin_inset Formula $D$
\end_inset

 has a good specification formalism 
\begin_inset Formula $F$
\end_inset

 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

good
\begin_inset Quotes erd
\end_inset

 = visual, pragmatically convenient, complete for the domain 
\begin_inset Formula $D$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
There is a syntactic translation from 
\begin_inset Formula $F$
\end_inset

 to 
\begin_inset Formula $L$
\end_inset


\end_layout

\begin_layout Itemize
The resulting program correctly implements the specification
\end_layout

\begin_layout Standard
Less formally:
\end_layout

\begin_layout Itemize
A declarative language is a 
\begin_inset Quotes eld
\end_inset

readable DSL
\begin_inset Quotes erd
\end_inset

 for the given domain
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: declarative FORTRAN 77
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Application domain: numerical mathematical expressions
\end_layout

\begin_layout Itemize
Specification: a mathematical formula involving 
\emph on
numbers 
\emph default
and
\emph on
 functions
\end_layout

\begin_layout Itemize
Example specification: 
\begin_inset Formula 
\[
f(x,p,q)=\frac{\sin px}{x^{2}}-\frac{(\sin qx)^{2}}{x^{3}}
\]

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Implementation: 
\family typewriter
\color blue
F(X,P,Q) = SIN(P*X)/X**2-(SIN(Q*X))**2/X**3
\end_layout

\end_deeper
\begin_layout Itemize
For more complicated tasks, FORTRAN is not declarative
\begin_inset Formula 
\[
\tilde{X}_{k}=Y_{k}-\sum_{j=k+1}^{n}A_{kj}X_{j},\quad\forall k\in\left[1..n\right]
\]

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../../talks/prolog/fortran1.png
	width 40text%

\end_inset


\begin_inset Formula $\quad$
\end_inset

(example code, 1987)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: declarative Haskell 98
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Application domain: recursively defined, algebraic data structures
\end_layout

\begin_layout Itemize
Specifications: inductive definitions of functions on ADTs
\end_layout

\begin_layout Itemize
Example (from R.
 Sedgewick, 
\emph on
Algorithms in C
\emph default
, 1998)
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../../talks/prolog/sedgewick-alg-tree.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
\align left

\family typewriter
\color blue
data BTree 
\begin_inset Formula $\alpha$
\end_inset

 = BTNode 
\begin_inset Formula $\alpha$
\end_inset

 | BTVertex 
\begin_inset Formula $\alpha$
\end_inset

 (BTree 
\begin_inset Formula $\alpha$
\end_inset

) (BTree 
\begin_inset Formula $\alpha$
\end_inset

)
\end_layout

\begin_layout Standard
\align left

\family typewriter
\color blue
\begin_inset space ~
\end_inset


\family default
 
\end_layout

\begin_layout Standard
\align left

\family typewriter
\color blue
enum BTree[+A]: 
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 //Scala
\end_layout

\begin_layout Standard
\align left

\family typewriter
\color blue
\begin_inset space ~
\end_inset

 case BTNode[A](a: A)
\end_layout

\begin_layout Standard
\align left

\family typewriter
\color blue
\begin_inset space ~
\end_inset

 case BTVertex[A](a: A, left: BTree[A], right: BTree[A])
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: declarative Haskell 98, continued
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../../talks/prolog/sedgewick-fun-tree.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
height :: BTree 
\begin_inset Formula $\alpha$
\end_inset

 
\begin_inset Formula $\rightarrow$
\end_inset

 Int
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 -- Haskell
\end_layout

\begin_layout Standard

\family typewriter
\color blue
height (BTNode _) = 0
\end_layout

\begin_layout Standard

\family typewriter
\color blue
height (BTVertex _ t1 t2) = 1 + max (height t1) (height t2)
\end_layout

\begin_layout Standard

\family typewriter
\color blue
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
def height[A]: BTree[A] => Int = { 
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 //Scala
\end_layout

\begin_layout Standard

\family typewriter
\color blue
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 case BTNode(_) => 0
\end_layout

\begin_layout Standard

\family typewriter
\color blue
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 case BTVertex(_, t1, t2) =>
\end_layout

\begin_layout Standard

\family typewriter
\color blue
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 1 + math.max(height(t1), height(t2))
\end_layout

\begin_layout Standard

\family typewriter
\color blue
}
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: non-declarative Haskell
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
For a different application domain, Haskell is 
\emph on
not
\emph default
 declarative!
\end_layout

\begin_layout Itemize
Downloading data from server (from 
\begin_inset Quotes eld
\end_inset


\emph on
Real World Haskell
\emph default

\begin_inset Quotes erd
\end_inset

, 2008)
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../../talks/prolog/haskell-ugly-download.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Declarative programming: Stories of success
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Success stories (achieved the goals of declarative programming)
\end_layout

\begin_layout Itemize
Infix arithmetic: numerical math
\end_layout

\begin_layout Itemize
SQL: relational queries
\end_layout

\begin_layout Itemize
Autolayout: GUI layout on iOS and MacOS
\end_layout

\begin_layout Itemize
Haskell, Scala: Parsing, type-checking, evaluation of DSLs
\end_layout

\begin_layout Itemize
Prolog: logic puzzles (next slide)
\end_layout

\begin_deeper
\begin_layout Itemize
for comparison, see: 
\begin_inset CommandInset href
LatexCommand href
name "Matrix multplication with Prolog"
target "https://stackoverflow.com/questions/34206275/matrix-multiplication-with-prolog"
literal "false"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Chemical Abstract Machine"
target "https://www.classes.cs.uchicago.edu/archive/2007/spring/32102-1/papers/p372-fournet.pdf"
literal "false"

\end_inset

: 
\begin_inset CommandInset href
LatexCommand href
name "dining philosophers problem"
target "https://rosettacode.org/wiki/Dining_philosophers#JoCaml"
literal "false"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Prolog as a DSL for logic puzzles
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\color teal
All jumping creatures are green.
 All small jumping creatures are martians.
 All green martians are intelligent.
 Ngtrks is small and green.
 Pgvdrk is a jumping martian.
 Who is intelligent?
\color inherit
 
\size footnotesize
(inpired by 
\emph on

\begin_inset CommandInset href
LatexCommand href
name "Invasion from Aldebaran"
target "https://isfdb.org/cgi-bin/title.cgi?1392619"
literal "false"

\end_inset


\emph default
)
\size default

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
$ cat > martians.pl
\end_layout

\begin_layout LyX-Code

\color blue
green(X) :- jumping(X).
\end_layout

\begin_layout LyX-Code

\color blue
martian(X) :- small(X), jumping(X).
 
\end_layout

\begin_layout LyX-Code

\color blue
intelligent(X) :- green(X), martian(X).
\end_layout

\begin_layout LyX-Code

\color blue
small(ngtrks).
 green(ngtrks).
\end_layout

\begin_layout LyX-Code

\color blue
jumping(pgvdrk).
 martian(pgvdrk).
\end_layout

\begin_layout LyX-Code

\color blue
question :- 
\end_layout

\begin_layout LyX-Code

\color blue
  intelligent(X), format('~w is intelligent.~n', X), halt.
\color inherit

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
^D 
\end_layout

\begin_layout LyX-Code
\align left
$ brew install swi-prolog
\end_layout

\begin_layout LyX-Code
\align left
$ swipl -o martians -q -t question -c martians.pl
\end_layout

\begin_layout LyX-Code
\align left
$ ./martians 
\end_layout

\begin_layout LyX-Code
\align left
pgvdrk is intelligent.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Declarative programming: Pitfalls
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
When does declarative programming fail:
\end_layout

\begin_layout Itemize
Declarative language is used outside its domain
\end_layout

\begin_layout Itemize
Specifications become too large to understand
\end_layout

\begin_deeper
\begin_layout Itemize
Make specifications modular and understandable in isolation
\end_layout

\begin_deeper
\begin_layout Itemize
Example: domain-specific notations in mathematical sciences
\end_layout

\end_deeper
\begin_layout Itemize
Make DSL languages and programs small, and keep them small
\end_layout

\end_deeper
\begin_layout Standard
Signs that programming becomes non-declarative:
\end_layout

\begin_layout Itemize
Lots of code has no clear mapping to the problem domain
\end_layout

\begin_deeper
\begin_layout Itemize
Example: 
\begin_inset Quotes eld
\end_inset

dining philosophers
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset href
LatexCommand href
name "in most programming languages"
target "https://rosettacode.org/wiki/Dining_philosophers"
literal "false"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Code appears to say one thing but does another thing when run
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

To shutdown the computer, press the 
\series bold
Start
\series default
 button
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Leaky abstractions.
 What does 
\family typewriter
\color blue
f()
\family default
\color inherit
 return?
\end_layout

\begin_layout LyX-Code
\align left

\color blue
var x = 0;    // JavaScript
\end_layout

\begin_layout LyX-Code
\align left

\color blue
function f() { return x; } // Returns zero?
\end_layout

\begin_layout LyX-Code
\align left

\color blue
// But what if another module does this:
\end_layout

\begin_layout LyX-Code
\align left

\color blue
var y = f(); y = "abc";
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Declarative programming: Stories of failure
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Failure stories (did not turn out to be declarative)
\end_layout

\begin_layout Itemize
Programming languages resembling English (
\begin_inset CommandInset href
LatexCommand href
name "COBOL"
target "https://techdocs.broadcom.com/us/en/ca-mainframe-software/database-management/ca-idms-reference/19-0/callable-services-reference/tcp-ip-api-support/tcp-ip-programming-examples/cobol-examples.html"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "AppleScript"
target "https://github.com/kevin-funderburg/AppleScripts/blob/master/Script-Development/Click-at-Mouse-Location.applescript"
literal "false"

\end_inset

)
\end_layout

\begin_deeper
\begin_layout Itemize
Programs become long and unreadable
\end_layout

\end_deeper
\begin_layout Itemize
Languages where everything is a built-in feature (
\begin_inset CommandInset href
LatexCommand href
name "PL/I"
target "https://techdocs.broadcom.com/us/en/ca-mainframe-software/database-management/ca-idms-reference/19-0/callable-services-reference/tcp-ip-api-support/tcp-ip-programming-examples/pl-i-examples.html"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "ABAP"
target "https://github.com/dustinkredmond/abap-examples/blob/main/Z_SIMPLE_ALV_GRID.abap"
literal "false"

\end_inset

)
\end_layout

\begin_deeper
\begin_layout Itemize
Features interact in unforeseen ways, corner cases lead to bugs
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Mark-up
\begin_inset Quotes erd
\end_inset

 languages (XML, HTML)
\end_layout

\begin_deeper
\begin_layout Itemize
Used mostly outside their domain of declarativeness
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Failures of XML and HTML
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Failed due to predominant usage 
\emph on
outside
\emph default
 their designated domain
\end_layout

\begin_layout Standard
Intended usage (SGML, XML, HTML): plain text with occasional mark-up
\end_layout

\begin_layout Standard
\begin_inset VSpace -100baselineskip%
\end_inset


\end_layout

\begin_layout LyX-Code

\color blue
<p> Hello! This is the home page of John Doe, a graduate
\end_layout

\begin_layout LyX-Code

\color blue
student at the Department of Electrical Engineering and
\end_layout

\begin_layout LyX-Code

\color blue
Computer Science, University of California, Los Angeles.
\end_layout

\begin_layout LyX-Code

\color blue
<p> You can click <a href="cv.html">here</a> to read
\end_layout

\begin_layout LyX-Code

\color blue
my CV.
 This page is under construction! Good bye!
\end_layout

\begin_layout Standard
In real life:
\end_layout

\begin_layout Itemize
XML: used as a data representation language (SOAP, config files)
\end_layout

\begin_layout Itemize
HTML: used as a GUI layout language for the Web
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename modern-html.png
	width 30page%

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
The joy of implementing DSLs in FP languages
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Two choices for implementing a DSL:
\end_layout

\begin_layout Itemize
Embedded DSL
\end_layout

\begin_layout Itemize
External DSL
\end_layout

\begin_layout Standard
In both cases, FP works great
\end_layout

\begin_layout Itemize
For embedded DSLs:
\end_layout

\begin_deeper
\begin_layout Itemize
Free monads, GADTs, non-leaky abstractions, strict typing
\end_layout

\end_deeper
\begin_layout Itemize
For external DSLs:
\end_layout

\begin_deeper
\begin_layout Itemize
Parser combinators, recursion schemes, GADTs, HOAS / PHOAS
\end_layout

\end_deeper
\begin_layout Standard
Anecdotal evidence: one-person languages with compilers in Haskell
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Agda"
target "https://wiki.portal.chalmers.se/agda/pmwiki.php"
literal "false"

\end_inset

 (Ulf Norell, 2007)
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Idris"
target "https://www.idris-lang.org/"
literal "false"

\end_inset

 (Edwin Brady, 2007)
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Elm"
target "https://elm-lang.org/"
literal "false"

\end_inset

 (Evan Czaplicki, 2012)
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "PureScript"
target "https://www.purescript.org/"
literal "false"

\end_inset

 (Phil Freeman, 2013)
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Dhall"
target "https://dhall-lang.org/"
literal "false"

\end_inset

 (Gabriella Gonzalez, 2016)
\end_layout

\begin_deeper
\begin_layout Itemize
Time to re-implement Dhall in Scala: 2 months, 4K LOC
\end_layout

\end_deeper
\begin_layout Standard

\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Conclusions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Functional programming has a steep learning curve
\end_layout

\begin_layout Itemize
Using FP techniques makes programmers' work closer to 
\emph on
engineering
\end_layout

\begin_layout Itemize
Most artisans don't want to become engineers 
\end_layout

\begin_layout Standard
Declarative programming means a symbiosis between human tradition and formal
 mathematics
\end_layout

\begin_layout Itemize
Best implemented by math-based programming paradigms
\end_layout

\begin_deeper
\begin_layout Itemize
FP and logic programming
\end_layout

\end_deeper
\begin_layout Standard
Implementing DSLs is one of FP's 
\begin_inset Quotes eld
\end_inset

killer apps
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Even a small DSL is a productivity boost when it is declarative for the
 chosen domain
\end_layout

\begin_layout Itemize
FP languages are 
\begin_inset CommandInset href
LatexCommand href
name "simple to implement"
target "https://github.com/dhall-lang/dhall-lang/blob/master/standard/beta-normalization.md"
literal "false"

\end_inset

 once you get the theory
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
End of slides.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
