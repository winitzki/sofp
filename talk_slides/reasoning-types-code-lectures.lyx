#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[Reasoning about types and code]{Reasoning about types and code}
\subtitle{What we functional programmers need to know}
\author{Sergei Winitzki}
\date{2019-08-17}
\institute[ABTB]{Academy by the Bay}
\setbeamertemplate{headline}{} % disable headline at top
\setbeamertemplate{navigation symbols}{} % disable navigation bar at bottom
\usepackage[all]{xy} % xypic
%\makeatletter
% Macros to assist LyX with XYpic when using scaling.
\newcommand{\xyScaleX}[1]{%
\makeatletter
\xydef@\xymatrixcolsep@{#1}
\makeatother
} % end of \xyScaleX
\makeatletter
\newcommand{\xyScaleY}[1]{%
\makeatletter
\xydef@\xymatrixrowsep@{#1}
\makeatother
} % end of \xyScaleY

% Use a special "equal by definition" symbol.
\renewcommand*{\triangleq}{\overset{\lower1mm\hbox{\texttt{\tiny def}}} {=}}

% Double-stroked fonts to replace the non-working \mathbb{1}.
\usepackage{bbold}
\DeclareMathAlphabet{\bbnumcustom}{U}{BOONDOX-ds}{m}{n} % Use BOONDOX-ds or bbold.
\newcommand{\custombb}[1]{\bbnumcustom{#1}}
% The LyX document will define a macro \bbnum{#1} that calls \custombb{#1}.

\usepackage{relsize} % make math symbols larger or smaller
\usepackage{stmaryrd} % some extra symbols such as \fatsemi
% Note: using \forwardcompose inside a \text{} will cause a LaTeX error!
\newcommand{\forwardcompose}{\hspace{1.5pt}\ensuremath\mathsmaller{\fatsemi}\hspace{1.5pt}}


% Make underline green.
\definecolor{greenunder}{rgb}{0.1,0.6,0.2}
%\newcommand{\munderline}[1]{{\color{greenunder}\underline{{\color{black}#1}}\color{black}}}
\def\mathunderline#1#2{\color{#1}\underline{{\color{black}#2}}\color{black}}
% The LyX document will define a macro \gunderline{#1} that will use \mathunderline with the color `greenunder`.
%\def\gunderline#1{\mathunderline{greenunder}{#1}} % This is now defined by LyX itself with GUI support.
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\gunderline}[1]{\mathunderline{greenunder}{#1}}
{\underline{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\bef}{\forwardcompose}
{\fatsemi}
\end_inset


\begin_inset FormulaMacro
\newcommand{\bbnum}[1]{\custombb{#1}}
{\underline{#1}}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Beginning of slides.
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Advanced reasoning about types and code
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.15cm}
\end_layout

\end_inset


\size default
Practitioners of functional programming need to know how to...
\end_layout

\begin_layout Itemize
...reason about types:
\end_layout

\begin_deeper
\begin_layout Itemize
design the required custom data types for the given application
\end_layout

\begin_layout Itemize
derive an equivalent simpler type when possible
\end_layout

\begin_layout Itemize
use type constructions to create data types with required properties
\end_layout

\end_deeper
\begin_layout Itemize
...reason about code:
\end_layout

\begin_deeper
\begin_layout Itemize
verify that given implementations satisfy the required laws (e.g.
\begin_inset space ~
\end_inset

monad)
\end_layout

\begin_layout Itemize
derive lawful custom implementations of important typeclasses
\end_layout

\begin_layout Itemize
verify that certain functions are computationally equivalent
\end_layout

\begin_layout Itemize
derive an equivalent simpler code when possible
\end_layout

\end_deeper
\begin_layout Standard
This requires a 
\emph on
very limited
\emph default
 amount of mathematics (polynomials, monoids) 
\end_layout

\begin_layout Itemize
...but it requires a significant amount of practice
\end_layout

\begin_layout Itemize
...and there are no suitable tutorials at an advanced level
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
A new book: 
\emph on
The Science of Functional programming
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
I am working on a new book,
\end_layout

\begin_layout Standard

\emph on
The Science of Functional Programming: A tutorial, with examples in Scala
\end_layout

\begin_layout Standard

\size small
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/winitzki/sofp"

\end_inset

 (free as in GNU FSF)
\end_layout

\begin_layout Standard

\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset

The book will explain (with examples and exercises):
\end_layout

\begin_layout Itemize
techniques of reasoning about types and type constructors
\end_layout

\begin_layout Itemize
techniques for symbolic calculations with code
\end_layout

\begin_layout Itemize
deriving and verifying laws symbolically (as equations for functions)
\end_layout

\begin_layout Itemize
real-life motivations for (and applications of) these techniques
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "30col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename book-draft-cover.png
	width 3cm

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples of reasoning tasks I
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[]
\backslash
setcounter{enumi}{0}
\end_layout

\end_inset


\size footnotesize

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Can we compute a value of type 
\family typewriter
\size footnotesize
\color blue
Either[Z, R => A]
\family default
\size default
\color inherit
 given a value of type 
\family typewriter
\size footnotesize
\color blue
R => Either[Z, A]
\family default
\size default
\color inherit
? And conversely? (
\family typewriter
\size footnotesize
\color blue
A
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
R
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Z
\family default
\size default
\color inherit
 are type parameters.)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def f[Z, R, A](r: R => Either[Z, A]): Either[Z, R => A] = ???
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def g[Z, R, A](e: Either[Z, R => A]): R => Either[Z, A] = ???
\end_layout

\begin_layout Itemize
It turns out that 
\family typewriter
\size footnotesize
\color blue
f
\family default
\size default
\color inherit
 cannot be implemented, but 
\family typewriter
\size footnotesize
\color blue
g
\family default
\size default
\color inherit
 can be:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def g[Z, R, A](e: Either[Z, R => A]): R => Either[Z, A] = {
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  r => e.map(f => f(r))     // 
\family default
\color inherit
Scala 2.12
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
}
\end_layout

\begin_layout Itemize
Use Curry-Howard correspondence and the LJT algorithm
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples of reasoning tasks II
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[]
\backslash
setcounter{enumi}{1}
\end_layout

\end_inset


\size footnotesize

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
How to use 
\family typewriter
\size footnotesize
\color blue
for
\family default
\size default
\color inherit
/
\family typewriter
\size footnotesize
\color blue
yield
\family default
\size default
\color inherit
 with 
\family typewriter
\size footnotesize
\color blue
Either[Z, A]
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
Future[A]
\family default
\size default
\color inherit
 together?
\end_layout

\begin_layout LyX-Code

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.15cm}
\end_layout

\end_inset


\family typewriter
\color blue
val result = for { // This code will not compile; we want to have...
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  a <- Future(...) // ...
 a computation that takes time and may fail,
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  b <- Either(...) // a computation whose result may be unavailable,
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  c <- Future(...) // a computation that takes time and may fail.
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
} yield ??? // Continue computations when results are available.
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space \hspace*{}
\length 1.8mm
\end_inset

Should 
\family typewriter
\size footnotesize
\color blue
result
\family default
\size default
\color inherit
 have type 
\family typewriter
\size footnotesize
\color blue
Either[Z,Future[A]]
\family default
\size default
\color inherit
 or 
\family typewriter
\size footnotesize
\color blue
Future[Either[Z,A]]
\family default
\size default
\color inherit
?
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space \hspace*{}
\length 1.8mm
\end_inset

How to combine 
\family typewriter
\size footnotesize
\color blue
Either
\family default
\size default
\color inherit
 with 
\family typewriter
\size footnotesize
\color blue
Future 
\family default
\size default
\color inherit
so that we can use 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
?
\end_layout

\begin_layout Itemize
It turns out that 
\family typewriter
\size footnotesize
\color blue
Either[Z,Future[A]]
\family default
\size default
\color inherit
 is wrong (cannot implement 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 correctly) but 
\family typewriter
\size footnotesize
\color blue
Future[Either[Z,A]]
\family default
\size default
\color inherit
 is the correct solution
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples of reasoning tasks III
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[]
\backslash
setcounter{enumi}{2}
\end_layout

\end_inset


\size footnotesize

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Can we implement 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 for the type constructor 
\family typewriter
\size footnotesize
\color blue
Option[(A, A, A)]
\family default
\size default
\color inherit
?
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def flatMap[A, B](fa: Option[(A, A, A)])(f: A => Option[(B, B, B)])
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
   : Option[(B, B, B)] = ???
\end_layout

\begin_layout Itemize
It turns out that 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 
\emph on
can
\emph default
 be implemented but fails the laws
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples of reasoning tasks IV
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[]
\backslash
setcounter{enumi}{3}
\end_layout

\end_inset


\size footnotesize

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
What type describes a chain of 
\family typewriter
\size footnotesize
\color blue
Future[A]
\family default
\size default
\color inherit
 operations that, on any failure, will automatically execute specified cleanups
 in reverse order?
\end_layout

\begin_layout Itemize
The type 
\family typewriter
\size footnotesize
\color blue
Future[(A, Unit => Unit)]
\family default
\size default
\color inherit
 has the required properties
\end_layout

\begin_layout Itemize
The 
\begin_inset Quotes eld
\end_inset

cleanup
\begin_inset Quotes erd
\end_inset

 operations 
\family typewriter
\size footnotesize
\color blue
Unit => Unit
\family default
\size default
\color inherit
 form a monoid and can be merged into a single cleanup executing in reverse
 order
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
type Tx[A] = (A, Unit => Unit) 
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def flatMap[A,B](task: Future[Tx[A]])(f: A => Future[Tx[B]])
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
            (implicit ec: ExecutionContext): Future[Tx[B]] =
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  task.flatMap { case (a, cleanup1) => f(a).transform(
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
     { case (b, cleanup2) => (b, cleanup1 |+| cleanup2) },
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
     { ex => cleanup1(()); ex }
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  )}
\end_layout

\begin_layout Itemize
This is a 
\family typewriter
\size footnotesize
\color blue
WriterT
\family default
\size default
\color inherit
 transformer (with monoid 
\family typewriter
\size footnotesize
\color blue
Unit => Unit
\family default
\size default
\color inherit
 ) applied to the 
\family typewriter
\size footnotesize
\color blue
Future
\family default
\size default
\color inherit
 monad 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples of reasoning tasks V
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[]
\backslash
setcounter{enumi}{4}
\end_layout

\end_inset


\size footnotesize

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Different people define a 
\begin_inset Quotes eld
\end_inset

free monad
\begin_inset Quotes erd
\end_inset

 via different sets of case classes.
 Are these definitions equivalent? What is the difference?
\end_layout

\begin_layout Enumerate
How to define a free monad generated by a 
\family typewriter
\size footnotesize
\color blue
Pointed
\family default
\size default
\color inherit
 functor (i.e.
\begin_inset space ~
\end_inset

when the functor already has the 
\family typewriter
\size footnotesize
\color blue
pure
\family default
\size default
\color inherit
 method)? Will that type have better performance than the standard free
 monad generated by a functor?
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples of reasoning tasks VI
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[]
\backslash
setcounter{enumi}{5}
\end_layout

\end_inset


\size footnotesize

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Can we implement a lawful 
\family typewriter
\size footnotesize
\color blue
Functor
\family default
\size default
\color inherit
 instance for this type:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
case class F[A](a: A, b: Either[A, Int], c: (A => Int) => A)
\end_layout

\begin_layout Itemize
Use the theory of covariance and contravariance
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples of reasoning tasks VII
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[]
\backslash
setcounter{enumi}{6}
\end_layout

\end_inset


\size footnotesize

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Which of these types can be implemented? Of those, can they be simplified?
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
trait F { def run[A](f: A => A): A }      // No implementations.
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
trait G { def run[A](f: A => A): A => A } // Equivalent to Natural.
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
trait H { def run[A](f: A => A): Either[A, A => A] }  // Same as G.
\end_layout

\begin_layout Itemize
Use the parametricity theorems, Yoneda identities, Church encoding
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What we will learn
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Short notation for types and code in FP
\end_layout

\begin_deeper
\begin_layout Itemize
...this makes the tutorial independent of a programming language
\end_layout

\end_deeper
\begin_layout Enumerate
Deriving lawful functor and contrafunctor instances for arbitrary types
\end_layout

\begin_layout Enumerate
Some examples and techniques for verifying typeclass laws:
\end_layout

\begin_deeper
\begin_layout Itemize
Functor laws
\end_layout

\begin_layout Itemize
Naturality laws
\end_layout

\end_deeper
\begin_layout Enumerate
Working with quantified types
\end_layout

\begin_deeper
\begin_layout Itemize
Universal (
\begin_inset Formula $\forall$
\end_inset

) and existential (
\begin_inset Formula $\exists$
\end_inset

) quantifiers 
\end_layout

\begin_layout Itemize
The four Yoneda identities
\end_layout

\begin_layout Itemize
Church encoding for recursive types
\end_layout

\end_deeper
\begin_layout Enumerate
Parametricity theorems
\end_layout

\begin_deeper
\begin_layout Itemize
Naturality, dinaturality, strong dinaturality
\end_layout

\begin_layout Itemize
Proofs without using relations
\end_layout

\begin_layout Itemize
Proofs using relations
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Short notation for types
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.2cm}
\end_layout

\end_inset


\size default
A mathematical notation for types and type constructors:
\end_layout

\begin_layout Standard
\align center

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.35cm}
\end_layout

\end_inset


\size default

\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Scala syntax
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Type notation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
type parameter
\size default
 
\family typewriter
\size footnotesize
\color blue
A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $A$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
tuple type:
\size default
 
\family typewriter
\size footnotesize
\color blue
(A, B)
\family default
\color inherit
 or
\size default
 
\family typewriter
\size footnotesize
\color blue
case class C(a:
\begin_inset space ~
\end_inset

A, b:
\begin_inset space ~
\end_inset

B)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $A\times B$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
disjunctive type:
\size default
 
\family typewriter
\size footnotesize
\color blue
Either[A,B]
\family default
\color inherit
 or 
\family typewriter
\color blue
trait/case class
\family default
\color inherit
es
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $A+B$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
function type:
\size default
 
\family typewriter
\size footnotesize
\color blue
A => B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $A\rightarrow B$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
Unit
\family default
\size default
\color inherit
 
\size small
or an equivalent named type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\bbnum 1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
primitive type: (
\family typewriter
\size footnotesize
\color blue
Int
\family default
\size small
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
String
\family default
\size small
\color inherit
, etc.)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\text{Int}$
\end_inset

, 
\begin_inset Formula $\text{String}$
\end_inset

, ...
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
Nothing
\family default
\size default
\color inherit
 
\size small
(the void type)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\bbnum 0$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
type constructor:
\size default
 
\family typewriter
\size footnotesize
\color blue
type P[A] = Option[(A,A,A)]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $P^{A}\triangleq\bbnum 1+A\times A\times A$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
type constructor as a parameter:
\size default
 
\family typewriter
\size footnotesize
\color blue
P[_]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $P^{\bullet}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
function with type parameter:
\size default
 
\family typewriter
\size footnotesize
\color blue
def f[A]:
\begin_inset space ~
\end_inset

A => (A, A)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $f^{A}:A\rightarrow A\times A$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.0cm}
\end_layout

\end_inset


\size default
This notation proved convenient for reasoning about equivalence of types:
\begin_inset Formula 
\begin{align*}
\left(A+B\right)\times C & \cong A\times C+B\times C\quad,\quad\quad A\rightarrow B\rightarrow C\cong A\times B\rightarrow C\quad,\\
\bbnum 0+A & \cong A\quad,\quad\quad\quad A+B\rightarrow C\cong\left(A\rightarrow C\right)\times\left(B\rightarrow C\right)\quad.
\end{align*}

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Types in other programming languages
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.2cm}
\end_layout

\end_inset


\size default
Functional programming languages have these type constructions:
\end_layout

\begin_layout Standard
\align center

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.15cm}
\end_layout

\end_inset


\size default

\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Haskell
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scala
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
F#
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Swift
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $A$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
'a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $A\times B$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(a, b)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(A, B)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
'a * 'b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(A, B)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $A+B$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
Either a b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
Either[A,B]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
Either<'a,'b>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
Either<A,B>
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $A\rightarrow B$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
a -> b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
A => B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
'a -> 'b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(A) -> B
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $\bbnum 1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
Unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $\bbnum 0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
Void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
Nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
not available
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
Never
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $\text{List}^{A}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
List a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
List[A]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
list<'a>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
()
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Short notation for types: universal quantifiers
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.15cm}
\end_layout

\end_inset


\size default
Universal quantifiers: A value is available for any type
\end_layout

\begin_layout Itemize
Examples:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
trait Runner[F[_]] { def run[A]: F[A] => A }
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
type Runner[F[_]] = [A] => F[A] => A         // Scala 3
\family default
\size default
\color inherit

\begin_inset Formula 
\[
\text{Runner}^{F^{\bullet}}\triangleq\forall A.\,F^{A}\rightarrow A
\]

\end_inset


\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
trait Pointed[F[_]] { def pure[A]: A => F[A] }
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
type Pointed[F[_]] = [A] => A => F[A]        // Scala 3
\family default
\size default
\color inherit

\begin_inset Formula 
\[
\text{Pointed}^{F^{\bullet}}\triangleq\forall A.\,A\rightarrow F^{A}
\]

\end_inset


\family typewriter
\size footnotesize
\color blue
trait NatTrans[F[_], G[_]] { def run[A]: F[A] => G[A] }
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
type NatTranser[F[_], G[_]] = [A] => F[A] => G[A]     // Scala 3
\family default
\size default
\color inherit

\begin_inset Formula 
\[
\text{NatTrans}^{F^{\bullet},G^{\bullet}}\triangleq\forall A.\,F^{A}\rightarrow G^{A}
\]

\end_inset


\end_layout

\begin_layout Itemize
Type application: if 
\begin_inset Formula $\phi:\forall A.\,P^{A}$
\end_inset

 then 
\begin_inset Formula $\phi^{B}:P^{B}$
\end_inset


\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
runner.run[B] // Apply run with type parameter set to B
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Short notation for code
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.15cm}
\end_layout

\end_inset


\size default
A mathematical notation for code:
\end_layout

\begin_layout Standard
\align center

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.35cm}
\end_layout

\end_inset


\size default

\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Scala syntax
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Code notation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
variable, or function argument
\size default
 
\family typewriter
\size footnotesize
\color blue
x:
\begin_inset space ~
\end_inset

A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x^{:A}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
tuple value:
\size default
 
\family typewriter
\size footnotesize
\color blue
(a, b)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a\times b$
\end_inset

 or 
\begin_inset Formula $a^{:A}\times b^{:B}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
value of a disjunctive type:
\size default
 
\family typewriter
\size footnotesize
\color blue
Left[A, B](x)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x^{:A}+\bbnum 0^{:B}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
value of a disjunctive type:
\size default
 
\family typewriter
\size footnotesize
\color blue
Right[A, B](y)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\bbnum 0^{:A}+y^{:B}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
nameless function:
\size default
 
\family typewriter
\size footnotesize
\color blue
{ x: A => expr }
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x^{:A}\rightarrow\text{expr}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
the
\size default
 
\family typewriter
\size footnotesize
\color blue
Unit
\family default
\size default
\color inherit
 
\size small
value: 
\family typewriter
\size footnotesize
\color blue
()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
def f[A, B]:
\begin_inset space ~
\end_inset

A => B => A = x => _ => x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $f^{:A\rightarrow B\rightarrow A}\triangleq x^{:A}\rightarrow\_^{:B}\rightarrow x$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
the identity function: 
\family typewriter
\size footnotesize
\color blue
identity[A]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\text{id}^{A}$
\end_inset

 or 
\begin_inset Formula $\text{id}^{:A\rightarrow A}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\emph on
forward
\emph default
 composition:
\size default
 
\family typewriter
\size footnotesize
\color blue
f andThen g
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $f\bef g$
\end_inset

 or 
\begin_inset Formula $f^{:A\rightarrow B}\bef g^{:B\rightarrow C}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
argument chaining:
\size default
 
\family typewriter
\size footnotesize
\color blue
x.pipe(f)
\family default
\size small
\color inherit
 (Scala 2.13)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x\triangleright f$
\end_inset

 where 
\begin_inset Formula $x^{:A}$
\end_inset

 and 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
lifted function:
\size default
 
\family typewriter
\size footnotesize
\color blue
p.map(f)
\family default
\size small
\color inherit
 where 
\family typewriter
\size footnotesize
\color blue
p:
\begin_inset space ~
\end_inset

P[A]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $p\triangleright f^{\uparrow P}$
\end_inset

 where 
\begin_inset Formula $p^{:P^{A}}$
\end_inset

 and 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.15cm}
\end_layout

\end_inset


\size default
This notation proved convenient for reasoning about laws:
\begin_inset Formula 
\[
f^{\uparrow P}\bef g^{\uparrow P}\bef h^{\uparrow P}=\left(f\bef g\bef h\right)^{\uparrow P}\quad,\quad\quad x\triangleright f\triangleright g=x\triangleright f\bef g\quad.
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Short notation for code: disjunctive functions
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.15cm}
\end_layout

\end_inset


\size default
A 
\begin_inset Quotes eld
\end_inset


\series bold
disjunctive function
\series default

\begin_inset Quotes erd
\end_inset

 takes arguments of a disjunctive type, and/or returns values of a disjunctive
 type
\end_layout

\begin_layout Itemize
Matrix notation: argument types in rows, result types in columns
\end_layout

\begin_layout Standard
Example of a function represented by a code matrix:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def swapE[A, B](f: A => B): Either[A, A] => Either[B, B] = {
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
    case Left(x)   => Right(f(x))
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
    case Right(y)  => Left(f(y))
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
}
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
 & \text{swapE}^{A,B}:\left(A\rightarrow B\right)\rightarrow A+A\rightarrow B+B\\
 & \text{swapE}\,(f^{:A\rightarrow B})\triangleq\,\begin{array}{|c||cc|}
 & B & B\\
\hline A & \bbnum 0 & x^{:A}\rightarrow f(x)\\
A & y^{:A}\rightarrow f(y) & \bbnum 0
\end{array}\,=\,\begin{array}{|c||cc|}
 & B & B\\
\hline A & \bbnum 0 & f\\
A & f & \bbnum 0
\end{array}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
The rules of vector and matrix multiplication will work:
\begin_inset Formula 
\[
\text{swapE\left(f\right)}\bef\text{swapE}\left(g\right)=\,\begin{array}{|c||cc|}
 & B & B\\
\hline A & \bbnum 0 & f\\
A & f & \bbnum 0
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & C & C\\
\hline B & \bbnum 0 & g\\
B & g & \bbnum 0
\end{array}\,=\,\begin{array}{|c||cc|}
 & C & C\\
\hline A & f\bef g & \bbnum 0\\
A & \bbnum 0 & f\bef g
\end{array}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Short notation for code: pattern-matching
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.15cm}
\end_layout

\end_inset


\size default
Pattern-matching on tuples:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def swapT[A, B](f: A => B): ((A, A)) => (B, B) = {
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  case (a1, a2) => (f(a2), f(a1))
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
}
\end_layout

\begin_layout Standard

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.35cm}
\end_layout

\end_inset


\size default

\begin_inset Formula 
\begin{align*}
 & \text{swapT}^{A,B}:\left(A\rightarrow B\right)\rightarrow A\times A\rightarrow B\times B\\
 & \text{swapT}(f^{:A\rightarrow B})\triangleq a_{1}\times a_{2}\rightarrow f(a_{2})\times f(a_{1})
\end{align*}

\end_inset


\end_layout

\begin_layout Itemize
Some more functions for working with tuples:
\begin_inset Formula 
\begin{align*}
 & \Delta:\forall A.\,A\rightarrow A\times A\\
 & \pi_{1}:\forall(A,B).\,A\times B\rightarrow A\quad,\quad\pi_{2}:\forall(A,B).\,A\times B\rightarrow B
\end{align*}

\end_inset


\end_layout

\begin_layout Itemize
Pattern-matching on disjunctive types:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
swapE { (x: Int) => x + 1 } (Left(123)) == Right(124)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
 & \left(123^{:\text{Int}}+\bbnum 0^{:\text{Int}}\right)\,\triangleright\,\text{swapE}(\underbrace{x^{:\text{Int}}\rightarrow x+1}_{f})=\,\begin{array}{|cc|}
123 & \bbnum 0\end{array}\,\triangleright\,\begin{array}{||cc|}
\bbnum 0 & f\\
f & \bbnum 0
\end{array}\\
 & =\,\begin{array}{|cc|}
\bbnum 0 & 123\,\triangleright\,f\end{array}\,=\,\begin{array}{|cc|}
\bbnum 0 & 124\end{array}\,=\bbnum 0^{:\text{Int}}+124^{:\text{Int}}
\end{align*}

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Source (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

) for the book: 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://github.com/winitzki/sofp"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
End of slides.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
