#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[What did category theory ever do for us]{What did category theory ever do for us (functional programmers)}
\subtitle{An extreme pragmatic un-academic approach}
\author{Sergei Winitzki}
\date{2019-11-15}
\institute[SBTB]{Scale by the Bay}
\setbeamertemplate{headline}{} % disable headline at top
\setbeamertemplate{navigation symbols}{} % disable navigation bar at bottom
\usepackage[all]{xy} % xypic
%\makeatletter
% Macros to assist LyX with XYpic when using scaling.
\newcommand{\xyScaleX}[1]{%
\makeatletter
\xydef@\xymatrixcolsep@{#1}
\makeatother
} % end of \xyScaleX
\makeatletter
\newcommand{\xyScaleY}[1]{%
\makeatletter
\xydef@\xymatrixrowsep@{#1}
\makeatother
} % end of \xyScaleY

% Double-stroked fonts to replace the non-working \mathbb{1}.
\usepackage{bbold}
\DeclareMathAlphabet{\bbnumcustom}{U}{BOONDOX-ds}{m}{n} % Use BOONDOX-ds or bbold.
\newcommand{\custombb}[1]{\bbnumcustom{#1}}
% The LyX document will define a macro \bbnum{#1} that calls \custombb{#1}.

\usepackage{relsize} % make math symbols larger or smaller
\usepackage{stmaryrd} % some extra symbols such as \fatsemi
% Note: using \forwardcompose inside a \text{} will cause a LaTeX error!
\newcommand{\forwardcompose}{\hspace{1.5pt}\ensuremath\mathsmaller{\fatsemi}\hspace{1.5pt}}


% Make underline green.
\definecolor{greenunder}{rgb}{0.1,0.6,0.2}
%\newcommand{\munderline}[1]{{\color{greenunder}\underline{{\color{black}#1}}\color{black}}}
\def\mathunderline#1#2{\color{#1}\underline{{\color{black}#2}}\color{black}}
% The LyX document will define a macro \gunderline{#1} that will use \mathunderline with the color `greenunder`.
%\def\gunderline#1{\mathunderline{greenunder}{#1}} % This is now defined by LyX itself with GUI support.

% Scala syntax highlighting. See https://tex.stackexchange.com/questions/202479/unable-to-define-scala-language-with-listings
%\usepackage[T1]{fontenc}
%\usepackage[utf8]{inputenc}
%\usepackage{beramono}
%\usepackage{listings}
% The listing settings are now supported by LyX in a separate section "Listings".
\usepackage{xcolor}

\definecolor{scalakeyword}{rgb}{0.16,0.07,0.5}
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{aqua}{rgb}{0.9,0.96,0.999}
\definecolor{scalatype}{rgb}{0.2,0.3,0.2}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "language=Scala,morekeywords={{scala}},otherkeywords={=,=>,<-,<\%,<:,>:,\#,@,:,[,],.,???},keywordstyle={\color{scalakeyword}},morekeywords={[2]{String,Short,Int,Long,Char,Boolean,Double,Float,BigDecimal,Seq,Map,Set,List,Option,Either,Future,Vector,Range,IndexedSeq,Try,true,false,None,Some,Left,Right,Nothing,Any,Array,Unit,Iterator,Stream}},keywordstyle={[2]{\color{scalatype}}},frame=tb,aboveskip={1.5mm},belowskip={0.5mm},showstringspaces=false,columns=fullflexible,keepspaces=true,basicstyle={\smaller\ttfamily},extendedchars=true,numbers=none,numberstyle={\tiny\color{gray}},commentstyle={\color{dkgreen}},stringstyle={\color{mauve}},frame=single,framerule={0.0mm},breaklines=true,breakatwhitespace=true,tabsize=3,framexleftmargin={0.5mm},framexrightmargin={0.5mm},xleftmargin={1.5mm},xrightmargin={1.5mm},framextopmargin={0.5mm},framexbottommargin={0.5mm},fillcolor={\color{aqua}},rulecolor={\color{aqua}},rulesepcolor={\color{aqua}},backgroundcolor={\color{aqua}},mathescape=false,extendedchars=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\gunderline}[1]{\mathunderline{greenunder}{#1}}
{\underline{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\bef}{\forwardcompose}
{\fatsemi}
\end_inset


\begin_inset FormulaMacro
\newcommand{\bbnum}[1]{\custombb{#1}}
{\underline{#1}}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Beginning of slides.
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Functional programming, pragmatically
\end_layout

\end_inset

What do functional programmers do most often (and most benefit from)?
\end_layout

\begin_layout Frame
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset VSpace 285baselineskip%
\end_inset


\end_layout

\begin_layout Itemize
Work with collections using methods 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

filter
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fold
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Use 
\series bold
disjunctive types
\series default
 (
\begin_inset Quotes eld
\end_inset

case classes
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

algebraic data types
\begin_inset Quotes erd
\end_inset

) for domain modeling
\end_layout

\begin_layout Itemize
Use type constructors with arbitrary type parameters 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Flow[KafkaMessage[MyData], KafkaMessage[MyResult], NotUsed]
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Use 
\series bold
functor blocks
\series default
 (
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

for
\end_layout

\end_inset

 / 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

yield
\end_layout

\end_inset

 syntax, 
\begin_inset Quotes eld
\end_inset

for comprehensions
\begin_inset Quotes erd
\end_inset

)
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for {
\end_layout

\begin_layout Plain Layout

  x <- Future(...)
\end_layout

\begin_layout Plain Layout

  y <- Future(...)
\end_layout

\begin_layout Plain Layout

} yield f(x, y)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Use curried functions (e.g.
\begin_inset space ~
\end_inset

Akka Streams)
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

GraphDSL.create { implicit builder => (source, sink) => ...
 }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
No category theory needed so far!
\end_layout

\begin_layout Itemize
Programmers can learn these features of Scala and become productive
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Uses of category theory.
 I.
 Typeclasses with laws
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Typeclasses: type constructors with methods 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

filter
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fold
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To be useful for programming, the methods must satisfy certain laws
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map
\end_layout

\end_inset

: identity, composition
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

filter
\end_layout

\end_inset

: identity, composition, partial function, naturality
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fold
\end_layout

\end_inset

 (traverse): identity, composition, naturality
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

: identity, composition, naturality
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Standard
Example of incorrect implementation of typeclasses:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

case class Bad[A](x: Int, do: A => Int) {
\end_layout

\begin_layout Plain Layout

  def map[B](f: A => B): Bad[B] = Bad(x, _ => x)
\end_layout

\begin_layout Plain Layout

  def flatMap[B](f: A => Bad[B]): Bad[B] = Bad(x, _ => x)
\end_layout

\begin_layout Plain Layout

  def filter(p: A => Boolean): Bad[A] = this
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

We can now use 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

for
\end_layout

\end_inset

 / 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

yield
\end_layout

\end_inset

 syntax with sources of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Bad
\end_layout

\end_inset

...
\end_layout

\begin_layout Standard
...but the code will have strange, hard-to-find bugs:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

val b: Bad[String] = Bad(1, _.length)
\end_layout

\begin_layout Plain Layout

val c: Bad[String] = for {
\end_layout

\begin_layout Plain Layout

                       x <- b  // x : String ??
\end_layout

\begin_layout Plain Layout

                       y = x
\end_layout

\begin_layout Plain Layout

                     } yield y
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> b.do(
\begin_inset Quotes eld
\end_inset

abc
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

res0: Int = 3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> c.do("abc")
\end_layout

\begin_layout Plain Layout

res1: Int = 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The methods of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Bad
\end_layout

\end_inset

 are not lawful (and 
\emph on
cannot
\emph default
 be!)
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Finding patterns in typeclass laws.
 I.
 Type signatures
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
One can transform and simplify typeclass laws into a form of 
\begin_inset Quotes eld
\end_inset

lifting
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Need to derive equivalent formulations of typeclass laws...
\end_layout

\begin_deeper
\begin_layout Itemize
...two months later:
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Typeclass
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Type signature
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
functor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(A => B) => F[A] => F[B]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
contrafunctor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

cmap
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(B => A) => F[A] => F[B]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
filterable functor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

liftOpt
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(A => Option[B]) => F[A] => F[B]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
monad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(A => F[B]) => F[A] => F[B]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
applicative functor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ap
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[A => B] => F[A] => F[B]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
comonad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

coflatMap
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(F[A] => B) => F[A] => F[B]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Finding patterns in typeclass laws.
 II.
 Laws of liftings
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The laws of typeclass methods follow the same pattern (
\begin_inset Quotes eld
\end_inset

lifting laws
\begin_inset Quotes erd
\end_inset

)
\begin_inset Formula 
\begin{align*}
\text{identity law}:\quad & \text{lift}\left(\text{id}_{1}\right)=\text{id}_{2}\\
\text{composition law}:\quad & \text{lift}\left(f\right)\circ\text{lift}\left(g\right)=\text{lift}\left(f\diamond g\right)\quad\text{with some definition of }\diamond
\end{align*}

\end_inset

 
\end_layout

\begin_layout Itemize
Heuristic picture of 
\begin_inset Quotes eld
\end_inset

lifting
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
types 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

, ..., are lifted into types 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[A]
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[B]
\end_layout

\end_inset

, ...
\end_layout

\begin_layout Itemize
one 
\begin_inset Quotes eld
\end_inset

twisted
\begin_inset Quotes erd
\end_inset

 function type is lifted into another 
\end_layout

\end_deeper
\begin_layout Itemize
Category theory provides a universal language (
\begin_inset Quotes eld
\end_inset

category
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

functor
\begin_inset Quotes erd
\end_inset

) that describes all these examples
\end_layout

\begin_deeper
\begin_layout Itemize
A 
\begin_inset Quotes eld
\end_inset

category
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $\mathcal{C}$
\end_inset

 is a description of what types 
\begin_inset Formula $A,$
\end_inset


\begin_inset Formula $B$
\end_inset

, ...
 (
\begin_inset Quotes eld
\end_inset

objects
\begin_inset Quotes erd
\end_inset

) are used and how to twist the function types (
\begin_inset Quotes eld
\end_inset

morphisms 
\begin_inset Formula $A\leadsto B$
\end_inset


\begin_inset Quotes erd
\end_inset

) e.g.
\begin_inset space ~
\end_inset


\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[A] => B
\end_layout

\end_inset

 or 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

B => F[A]
\end_layout

\end_inset

 etc.
\end_layout

\begin_deeper
\begin_layout Itemize
Must have an identity morphism 
\begin_inset Formula $\text{id}_{\mathcal{C}}:A\leadsto A$
\end_inset

, a composition operation 
\begin_inset Formula $\diamond_{\mathcal{C}}$
\end_inset

, and the identity and associativity laws
\end_layout

\end_deeper
\begin_layout Itemize
A 
\begin_inset Quotes eld
\end_inset

functor
\begin_inset Quotes erd
\end_inset

 is a description of how to map types and functions from one category to
 another 
\end_layout

\begin_deeper
\begin_layout Itemize
Functors need to satisfy the laws of identity and composition
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples of categories
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Plain
\begin_inset Quotes erd
\end_inset

: Morphisms 
\begin_inset Formula $A\leadsto B$
\end_inset

 are plain functions 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A => B
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F
\end_layout

\end_inset

-lifted: Objects are 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[A]
\end_layout

\end_inset

, morphisms 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[A] => F[B]
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F
\end_layout

\end_inset

-Kleisli: Morphisms 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A => F[B]
\end_layout

\end_inset

, identity morphism 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure: A => F[A]
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F
\end_layout

\end_inset

-Kleisli composition: 
\begin_inset Formula $f\diamond_{F}g=~$
\end_inset


\begin_inset listings
inline true
status open

\begin_layout Plain Layout

f andThen _.flatMap(g)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Kleisli composition 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(A => F[B])
\end_layout

\end_inset

 
\begin_inset Formula $\diamond_{F}$
\end_inset

 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(B => F[C]) : (A => F[C])
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The laws of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F
\end_layout

\end_inset

-Kleisli category are equivalent to the laws of monads
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F
\end_layout

\end_inset

-Applicative: Morphisms 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[A => B]
\end_layout

\end_inset

, identity morphism 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure(identity): F[A => A]
\end_layout

\end_inset

, applicative composition: 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map2(f, g, p => q => p andThen q)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The laws of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F
\end_layout

\end_inset

-Applicative category are equivalent to the laws of applicative functors
\end_layout

\end_deeper
\begin_layout Itemize
Opposite category: like 
\begin_inset Quotes eld
\end_inset

plain
\begin_inset Quotes erd
\end_inset

 except functions are 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

B => A
\end_layout

\end_inset

 and composed in the opposite order 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example of using category theory: Filterable functors
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Filterable functors 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[_]
\end_layout

\end_inset

 have 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

filter[A](p: A => Boolean): F[A] => F[A]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An 
\emph on
equivalent
\emph default
 method is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

liftOpt[A, B](f: A => Option[B]): F[A] => F[B]
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The laws of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

liftOpt
\end_layout

\end_inset

 are the laws of (categorical) functor from the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Option
\end_layout

\end_inset

-Kleisli category to the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F
\end_layout

\end_inset

-lifted category
\begin_inset Formula 
\[
\text{liftOpt}\,(f^{:A\rightarrow\text{Opt}^{B}})\bef\text{liftOpt}\,(g^{:B\rightarrow\text{Opt}^{C}})=\text{liftOpt}\,(f\diamond_{_{\text{Opt}}}g)
\]

\end_inset

 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

liftOpt(f) andThen liftOpt(g) == liftOpt(f andThen _.flatMap(g)) 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Category theory assures that the chosen laws are useful and consistent
\end_layout

\begin_deeper
\begin_layout Itemize
It is not obvious what the laws of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

filter
\end_layout

\end_inset

 must be
\end_layout

\end_deeper
\begin_layout Itemize
Category theory suggests two generalizations:
\end_layout

\begin_deeper
\begin_layout Itemize
Use a different monad 
\begin_inset Formula $M$
\end_inset

 instead of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Option
\end_layout

\end_inset

, obtain 
\begin_inset Formula $M$
\end_inset

-filterable functors
\end_layout

\begin_layout Itemize
Use the opposite category and obtain filterable contrafunctors
\end_layout

\end_deeper
\begin_layout Itemize
Category theory 
\emph on
does not
\emph default
 show how to derive or prove laws
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Uses of category theory.
 II.
 Type constructor libraries
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Examples of functionality in a 
\begin_inset Quotes eld
\end_inset

type constructor library
\begin_inset Quotes erd
\end_inset

: 
\end_layout

\begin_layout Itemize
Free functor, free filterable, free applicative, free monad, free etc., generated
 by a given type constructor 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[_]
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Church encoding of a free monad (
\begin_inset Quotes eld
\end_inset

tagless final
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_deeper
\begin_layout Itemize
Parameterized by a type constructor 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[_]
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Church encoding of a recursive type constructor 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[_]
\end_layout

\end_inset

 makes it non-recursive
\end_layout

\begin_deeper
\begin_layout Itemize
Parameterized by 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[_]
\end_layout

\end_inset

 and by recursion scheme
\end_layout

\end_deeper
\begin_layout Standard
Category theory suggests generalizations: e.g.
\begin_inset space ~
\end_inset

applicative contrafunctor
\end_layout

\begin_layout Standard
Category theory motivates consistent rigorous laws for these constructions
 
\end_layout

\begin_layout Itemize
To derive these laws, need special techniques
\end_layout

\begin_layout Itemize
Category theory does not help deriving or proving these laws
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
A new book: 
\emph on
The Science of Functional programming
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
I am working on a new book,
\end_layout

\begin_layout Standard

\emph on
The Science of Functional Programming: A tutorial, with examples in Scala
\end_layout

\begin_layout Standard

\size small
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/winitzki/sofp"

\end_inset

 (free as in GNU FSF)
\end_layout

\begin_layout Standard

\size small
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset

The book will explain (with examples and exercises):
\end_layout

\begin_layout Itemize
techniques of reasoning about types and type constructors
\end_layout

\begin_layout Itemize
techniques for symbolic calculations with code
\end_layout

\begin_layout Itemize
deriving and verifying laws symbolically (as equations for functions)
\end_layout

\begin_layout Itemize
real-life motivations for (and applications of) these techniques
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "30col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename book-draft-cover.png
	width 3cm

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Practical programmers need to learn functional programming, not category
 theory
\end_layout

\begin_layout Itemize
Category theory helps understand where the typeclass laws came from
\end_layout

\begin_deeper
\begin_layout Itemize
Category theory 
\emph on
does not
\emph default
 help writing custom typeclass instances
\end_layout

\begin_layout Itemize
Category theory 
\emph on
does not
\emph default
 show how to prove laws
\end_layout

\end_deeper
\begin_layout Itemize
Category theory motivates general type constructor libraries
\end_layout

\begin_deeper
\begin_layout Itemize
To prove that the code is correct, one needs to perform symbolic reasoning
\end_layout

\begin_layout Itemize
Mastering the type/code reasoning takes about 6 months of practice 
\end_layout

\begin_deeper
\begin_layout Itemize
and you will be able to use FP much more effectively in actual coding
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Lots of explanations, examples, and exercises in the upcoming book
\end_layout

\begin_layout Itemize
Current progress: chapters 1–8 ready
\end_layout

\begin_layout Itemize
Chapters 9 and 13 are in progress
\end_layout

\begin_layout Itemize
Source (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

) for the book: 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://github.com/winitzki/sofp"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
End of slides.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
