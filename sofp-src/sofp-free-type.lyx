#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
\usepackage[all]{xy} % xypic

% pstricks with support for pdflatex
%\usepackage{pdftricks}
%\begin{psinputs}
%   \usepackage{pstricks}
%   \usepackage{multido}
%\end{psinputs}
\usepackage{pstricks}

% Cover picture on first page.
\usepackage{wallpaper}
% Custom commands for cover page.
\usepackage[absolute,overlay]{textpos}

% No page numbers on "Part" pages.
\renewcommand*{\partpagestyle}{empty}

% Running head: works, but results are not satisfactory.
%\usepackage{scrlayer-scrpage}
%\automark[subsection]{chapter}


% "Better text justification"? Actually, this causes a fatal error "auto expansion is only possible with scalable fonts".
%\usepackage{microtype}

% Fix the numbering of exercises: subsubsections appear as paragraphs but are numbered.
%\usepackage{titlesec} % Incompatible with komascript's later versions.
% See https://tex.stackexchange.com/questions/7627/how-to-reference-paragraph
% See the `titlesec` package documentation at http://www.ctex.org/documents/packages/layout/titlesec.pdf
%\titleformat{\subsubsection}[runin]{\normalfont\normalsize\bfseries}{}{0pt}{}
%\titlespacing{\subsubsection}{0pt}{5pt}{3\wordsep}
%\titleformat{\subparagraph}[runin]{\normalfont\normalsize\bfseries}{}{0pt}{}
%\titlespacing{\subparagraph}{\parindent}{\parskip}{3\wordsep}
%\titlespacing{\paragraph}{0pt}{3pt}{2\wordsep}

\renewcommand*{\subsubsectionformat}{}
\RedeclareSectionCommand[ % Statement 1.2.3.4
  runin=true,
  afterskip=2ex,
  beforeskip=2.5pt plus 0.3pt minus 0.05pt,
  afterindent=false,
  font={\normalfont\normalsize\bfseries}
]{subsubsection}
\RedeclareSectionCommand[ % Proof
  runin=true,
  font={\normalfont\normalsize\bfseries},
  afterindent=false,
  afterskip=2ex,
  beforeskip=0pt
]{subparagraph}
\RedeclareSectionCommand[
  runin=true,
  font={\normalfont\normalsize\bfseries},
  afterskip=1.3ex,
  beforeskip=0pt
]{paragraph}

% Make page headers and page numbers smaller
\addtokomafont{pagehead}{\small}
\addtokomafont{pagenumber}{\small}

% Double-stroked fonts to replace the non-working \mathbb{1}.
\usepackage{bbold}
\DeclareMathAlphabet{\bbnumcustom}{U}{BOONDOX-ds}{m}{n} % Use BOONDOX-ds or bbold.
\newcommand{\custombb}[1]{\bbnumcustom{#1}}
% The LyX document will define a macro \bbnum{#1} that calls \custombb{#1}.

% Scala syntax highlighting. See https://tex.stackexchange.com/questions/202479/unable-to-define-scala-language-with-listings
%\usepackage[T1]{fontenc}
%\usepackage[utf8]{inputenc}
%\usepackage{beramono}
%\usepackage{listings}
% The listing settings are now supported by LyX in a separate section "Listings".
\usepackage{xcolor}

\definecolor{scalakeyword}{rgb}{0.16,0.07,0.5}
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{aqua}{rgb}{0.9,0.96,0.999}
\definecolor{scalatype}{rgb}{0.2,0.3,0.2}
\definecolor{teal}{rgb}{0,0.6,0}

% These settings are now in the Listings tab in LyX.
%\lstdefinestyle{myScalastyle}{
%  language=scala, % This should be defined first!!! Otherwise it overrides all customization via morekeywords / otherkeywords.
%  otherkeywords={{=,=>,<-,<\%,<:,>:,\#,@,*,+,-,/,::,:,[,]}},
%  frame=tb,
%  aboveskip=2mm,
%  belowskip=2mm,
%  showstringspaces=false,
%  columns=flexible,
%  basicstyle={\small\ttfamily},
%  extendedchars=true,
%  %numbers=none,
%  numberstyle=\tiny\color{gray},
%  keywordstyle=\color{blue},
%  commentstyle=\color{dkgreen},
%  stringstyle=\color{mauve},
%  frame=single,
%  framerule=0.01mm,
%  breaklines=true,
%  breakatwhitespace=true,
%  tabsize=3,
%  framexleftmargin=4mm, framexrightmargin=4mm,
%  xleftmargin=4mm, xrightmargin=4mm, % Making these margins the same has a good effect.
%  framextopmargin=0.5mm, framexbottommargin=.5mm,
%  fillcolor=\color{aqua},
%  rulecolor=\color{aqua},
%  rulesepcolor=\color{aqua},
%  backgroundcolor=\color{aqua},
%  mathescape=true,
%}

% Example usage: \begin{lstlisting}[style=myScalastyle]  object blah \end{lstlisting}
%\newenvironment{scala}{\begin{lstlisting}[style=myScalastyle]}{\end{lstlisting}}
%\lstnewenvironment{scala}{\lstset{style=myScalastyle}}{}

\usepackage[nocenter]{qtree} % simple tree drawing
\usepackage{relsize} % make math symbols larger or smaller; supports \smaller etc.
\usepackage{stmaryrd} % some extra symbols such as \fatsemi
% Note: using \forwardcompose inside a \text{} will cause a LaTeX error!
\newcommand{\forwardcompose}{\hspace{1.2pt}\ensuremath\mathsmaller{\fatsemi}\hspace{1.5pt}}
% this is ugly, I used this before I found \fatsemi:
%\newcommand{\bef}{\hspace{1.0pt}\ensuremath\raisebox{2pt}{$\mathsmaller{\mathsmaller{\circ}}$}\hspace{-2.9pt},}
%\makeatletter
% Macros to assist LyX with XYpic when using scaling.
\newcommand{\xyScaleX}[1]{%
\makeatletter
\xydef@\xymatrixcolsep@{#1}
\makeatother
} % end of \xyScaleX
\makeatletter
\newcommand{\xyScaleY}[1]{%
\makeatletter
\xydef@\xymatrixrowsep@{#1}
\makeatother
} % end of \xyScaleY

% Increase the default vertical space inside table cells.
\renewcommand\arraystretch{1.4}

% Color for PDF hyperlinks.
\definecolor{hlink}{rgb}{0.06, 0.14, 0.48}

% Make underline green.
\definecolor{greenunder}{rgb}{0.1,0.6,0.2}
%\newcommand{\munderline}[1]{{\color{greenunder}\underline{{\color{black}#1}}\color{black}}}
\def\mathunderline#1#2{\color{#1}\underline{{\color{black}#2}}\color{black}}
% The LyX document will define a macro \gunderline{#1} that will use \mathunderline with the color `greenunder`.
%\def\gunderline#1{\mathunderline{greenunder}{#1}} % This is now defined by LyX itself with GUI support.


% Prepare settings for imposing a color background for all displayed math. This will be done by a script later.
\usepackage{empheq} % Background on all displayed equations.
\definecolor{mathbg}{rgb}{1.0, .98, .87}
\newcommand*\mymathbgbox[1]{%
\setlength{\fboxsep}{0pt}%
\colorbox{mathbg}{\hspace{0.5mm}#1\hspace{0.5mm}}}
%\renewenvironment{align}{%
%\begin{empheq}[box=\mymathbgbox]{align}}{%
%\endalign\end{empheq}}
% Run a command such as LC_ALL=C sed -i bak -e 's|\\begin{align}|\\begin{empheq}[box=\\mymathbgbox]{align}|; s|\\end{align}|\\end{empheq}|' sofp-filterable.tex
% This is not used now because the results are not great.

% Better text quotes.
\renewcommand\textquotedblleft{``}
\renewcommand\textquotedblright{''}
\end_preamble
\options open=any,numbers=noenddot,index=totoc,bibliography=totoc,listof=totoc,fontsize=10pt
\use_default_options true
\master sofp.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "palatino" "default"
\font_sans "helvet" "default"
\font_typewriter "cmtt" "default"
\font_math "newtxmath" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command makeindex
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_title "The Science of Functional Programming: A Tutorial, with Examples in Scala"
\pdf_author "Sergei Winitzki"
\pdf_subject "Functional programming"
\pdf_keywords "Functional programming, Scala, Type theory, Category theory, Formal logic, Programming languages"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 2
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref page
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=hlink"
\papersize custom
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification false
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\paperwidth 7.444in
\paperheight 9.68in
\leftmargin 2.2cm
\topmargin 1.175cm
\rightmargin 1.3cm
\bottommargin 1.275cm
\headsep 0.4cm
\footskip 0.72cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\listings_params "language=Scala,morekeywords={{scala}},otherkeywords={=,=>,<-,<\%,<:,>:,\#,@,:,[,],.,???},keywordstyle={\color{scalakeyword}},morekeywords={[2]{String,Short,Int,Long,Char,Boolean,Double,Float,BigDecimal,Seq,Map,Set,Option,Either,Future,Successful,LazyList,Vector,Range,IndexedSeq,true,false,None,List,Nil,Try,Success,Failure,Some,Left,Right,Nothing,Any,Array,Unit,Iterator,Stream,Throwable,Integer,Object}},keywordstyle={[2]{\color{scalatype}}},frame=tb,aboveskip={1.5mm},belowskip={0.5mm},showstringspaces=false,columns=fullflexible,keepspaces=true,basicstyle={\smaller\ttfamily},extendedchars=true,numbers=none,numberstyle={\tiny\color{gray}},commentstyle={\color{dkgreen}},stringstyle={\color{mauve}},frame=single,framerule={0.0mm},breaklines=true,breakatwhitespace=true,tabsize=3,framexleftmargin={0.5mm},framexrightmargin={0.5mm},xleftmargin={1.5mm},xrightmargin={1.5mm},framextopmargin={0.5mm},framexbottommargin={0.5mm},fillcolor={\color{aqua}},rulecolor={\color{aqua}},rulesepcolor={\color{aqua}},backgroundcolor={\color{aqua}},mathescape=false,extendedchars=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\renewcommand{\gunderline}[1]{\mathunderline{greenunder}{#1}}
{\underline{{\color{teal}#1}}}
\end_inset


\begin_inset FormulaMacro
\renewcommand{\bef}{\forwardcompose}
{\fatsemi}
\end_inset


\begin_inset FormulaMacro
\renewcommand{\bbnum}[1]{\custombb{#1}}
{\underline{#1}}
\end_inset


\begin_inset FormulaMacro
\renewcommand{\pplus}{{\displaystyle }{+\negmedspace+}}
{{\color{lime}++}}
\end_inset


\end_layout

\begin_layout Chapter
Free typeclass constructions
\begin_inset CommandInset label
LatexCommand label
name "chap:Free-type-constructions"

\end_inset


\end_layout

\begin_layout Standard
Free typeclass constructions (free monoids, free functors, free monads,
 free applicative functors, and so on) are used to implement the DSL (domain-spe
cific language
\begin_inset Index idx
status open

\begin_layout Plain Layout
domain-specific language (DSL)
\end_layout

\end_inset

) design pattern.
 As a first motivation, we will look at how the free monad
\begin_inset Index idx
status open

\begin_layout Plain Layout
free monad
\end_layout

\end_inset

 emerges from elaborating the DSL pattern in the functional programming
 paradigm.
\end_layout

\begin_layout Section
Motivation for the free monad: implement a DSL in five steps
\end_layout

\begin_layout Standard
The DSL pattern separates the description of computations from the process
 of their evaluation.
 One defines a 
\series bold
DSL program
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
DSL program
\end_layout

\end_inset

 as a data structure that fully describes what computations and side effects
 need to be run but does not actually perform any of those computations
 and side-effects.
 The programmer begins by defining the type of DSL programs.
 Helper functions are implemented for creating the DSL program values and
 for combining several DSL programs into a larger one.
 Finally, one or more functions are written to interpret (or 
\begin_inset Quotes eld
\end_inset

run
\begin_inset Quotes erd
\end_inset

) the DSL programs.
\end_layout

\begin_layout Standard
This design pattern is known as an 
\begin_inset Quotes eld
\end_inset

embedded
\begin_inset Quotes erd
\end_inset

 DSL because it is implemented as a library in an existing programming language
 (e.g., Scala), rather than as a separate new language.
 This chapter only considers embedded DSLs and calls them just 
\begin_inset Quotes eld
\end_inset

DSL
\begin_inset Quotes erd
\end_inset

s for brevity.
\end_layout

\begin_layout Standard
We will look at two examples: a DSL for complex numbers and a DSL for file
 operations.
 We will refine and refactor our DSLs step by step to make them more powerful
 and safer to use.
 In this way, we will obtain the construction known as the free monad.
\end_layout

\begin_layout Subsection
Step 1: unevaluated expression trees
\end_layout

\begin_layout Standard
Suppose we need to perform calculations with complex numbers.
 We could begin by implementing a simple data structure (
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

case class Complex
\end_layout

\end_inset

) with some operations: 
\begin_inset listings
lstparams "mathescape=true"
inline false
status open

\begin_layout Plain Layout

final case class Complex(x: Double, y: Double) {
\end_layout

\begin_layout Plain Layout

  def +(other: Complex): Complex = Complex(x + other.x, y + other.y)
\end_layout

\begin_layout Plain Layout

  def *(other: Complex): Complex =
\end_layout

\begin_layout Plain Layout

      Complex(x * other.x - y * other.y, x * other.y + y * other.x)
\end_layout

\begin_layout Plain Layout

  def conj: Complex = Complex(x, -y)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

val a = Complex(1, 2)          // $
\backslash
color{dkgreen}a = 1 + 2 i$
\end_layout

\begin_layout Plain Layout

val b = a * Complex(3, -4)     // $
\backslash
color{dkgreen}b = (1 + 2 i)(3 - 4 i) = 11 + 2 i$
\end_layout

\begin_layout Plain Layout

val c = b.conj                 // $
\backslash
color{dkgreen}c = 11 - 2 i$
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> c
\end_layout

\begin_layout Plain Layout

res0: Complex = Complex(11.0, -2.0)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead of running a complex-number program directly, the DSL pattern first
 creates a data structure that contains an 
\emph on
unevaluated
\emph default
 expression tree for the program.
 Separate case classes are used for addition, multiplication, and conjugation,
 as well as for inserting a literal 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Complex
\end_layout

\end_inset

 value:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sealed trait PrgComplex
\end_layout

\begin_layout Plain Layout

final case class Add(p1: PrgComplex, p2: PrgComplex) extends PrgComplex
\end_layout

\begin_layout Plain Layout

final case class Mul(p1: PrgComplex, p2: PrgComplex) extends PrgComplex
\end_layout

\begin_layout Plain Layout

final case class Conj(p: PrgComplex)                 extends PrgComplex
\end_layout

\begin_layout Plain Layout

final case class Literal(c: Complex)                 extends PrgComplex
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

val prgComplex: PrgComplex = Conj(
\end_layout

\begin_layout Plain Layout

  Mul(
\end_layout

\begin_layout Plain Layout

    Literal(Complex(1, 2)), Literal(Complex(3, -4))
\end_layout

\begin_layout Plain Layout

))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A simple interpreter for complex-number DSL programs can be written like
 this:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def run: PrgComplex => Complex = {
\end_layout

\begin_layout Plain Layout

  case Literal(c)    => c
\end_layout

\begin_layout Plain Layout

  case Add(p1, p2)   => run(p1) + run(p2)
\end_layout

\begin_layout Plain Layout

  case Mul(p1, p2)   => run(p1) * run(p2)
\end_layout

\begin_layout Plain Layout

  case Conj(p)       => run(p).conj
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

We can now use 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

run
\end_layout

\end_inset

 to perform the computation 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

prgComplex
\end_layout

\end_inset

 and get the result as a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Complex
\end_layout

\end_inset

 value:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

scala> run(prgComplex)
\end_layout

\begin_layout Plain Layout

res1: Complex = Complex(11.0, -2.0)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Although the DSL is simple, it already gives us several benefits.
 By representing complex-number calculations as DSL programs, which are
 values of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrgComplex
\end_layout

\end_inset

, we can compose, verify, optimize, or transform those DSL programs before
 running them.
 We may also implement several runners in order to run the same computation
 in different ways: on GPUs, on a remote computer cluster, or with logging,
 debugging, benchmarking, and so on.
\end_layout

\begin_layout Standard
As a second example, consider a DSL for file operations, such as reading
 and writing files at given file paths.
 Direct Scala code for such operations may look like this:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import java.nio.file.{Files, Paths}
\end_layout

\begin_layout Plain Layout

val p = Paths.get(
\begin_inset Quotes eld
\end_inset

config_location.txt
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

val configLocation = Paths.get(new String(Files.readAllBytes(p)))
\end_layout

\begin_layout Plain Layout

val config = new String(Files.readAllBytes(configLocation))
\end_layout

\end_inset

The DSL will represent these operations by the case classes 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Literal
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Path
\end_layout

\end_inset

, and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Read
\end_layout

\end_inset

:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sealed trait PrgFile
\end_layout

\begin_layout Plain Layout

final case class Literal(s: String) extends PrgFile
\end_layout

\begin_layout Plain Layout

final case class Path(p: PrgFile)   extends PrgFile
\end_layout

\begin_layout Plain Layout

final case class Read(p: PrgFile)   extends PrgFile
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

val prgFile: PrgFile = Read(Path(Read(Path(Literal(
\begin_inset Quotes eld
\end_inset

config_location.txt
\begin_inset Quotes erd
\end_inset

)))))
\end_layout

\end_inset

As before, a DSL program contains an unevaluated expression tree describing
 the operations that need to be run.
 A runner will perform those operations and extract the final 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

String
\end_layout

\end_inset

 value:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def run: PrgFile => String = {
\end_layout

\begin_layout Plain Layout

  case Literal(s)      => s
\end_layout

\begin_layout Plain Layout

  case Path(p)         => 
\begin_inset Quotes eld
\end_inset

path=
\begin_inset Quotes erd
\end_inset

 + run(p)                // For debugging.
\end_layout

\begin_layout Plain Layout

  case Read(Path(p))   => new String(Files.readAllBytes(Paths.get(run(p))))
\end_layout

\begin_layout Plain Layout

  case x => throw new Exception(s
\begin_inset Quotes eld
\end_inset

Illegal PrgFile operation: $x
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

To test this code, prepare a file 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

config.txt
\end_layout

\end_inset

 containing the text 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

version = 1
\end_layout

\end_inset

 and a file 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

config_location.txt
\end_layout

\end_inset

 containing the text 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

config.txt
\end_layout

\end_inset

.
 Then we can run the DSL program and get the result:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

scala> run(prgFile)
\end_layout

\begin_layout Plain Layout

res2: String = "version = 1"
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Step 2: implementing type safety in the DSLs
\end_layout

\begin_layout Standard
The two DSLs defined in the previous section have an important shortcoming:
 they are not type-checked at compile time.
 This becomes clear by looking at the DSL program 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

prgFile
\end_layout

\end_inset

 shown above.
 The 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

run
\end_layout

\end_inset

 function assumes that the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Read
\end_layout

\end_inset

 operation is always applied to a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Path
\end_layout

\end_inset

, but this is not enforced by the DSL.
 When combining a larger DSL program from separately defined parts, one
 could by mistake create an invalid DSL program such as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Read(Read(Literal(
\begin_inset Quotes eld
\end_inset

file
\begin_inset Quotes erd
\end_inset

)))
\end_layout

\end_inset

 where the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Read
\end_layout

\end_inset

 operation is used incorrectly.
 Running this program causes a run-time error:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

scala> run(Read(Read(Literal(
\begin_inset Quotes eld
\end_inset

file
\begin_inset Quotes erd
\end_inset

))))
\end_layout

\begin_layout Plain Layout

java.lang.Exception: Illegal PrgFile operation: Read(Read(Literal(file)))
\end_layout

\end_inset

All DSL program values are of the same type (
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrgFile
\end_layout

\end_inset

) regardless of their intended meaning.
 So, the Scala compiler cannot check that we are using the DSL correctly.
 It would be better if the DSL program 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Read(Read(Literal(
\begin_inset Quotes eld
\end_inset

file
\begin_inset Quotes erd
\end_inset

)))
\end_layout

\end_inset

 failed to compile.
 To achieve that, we need to have different Scala types for DSL programs
 returning a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

String
\end_layout

\end_inset

 and a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Path
\end_layout

\end_inset

.
 So, let us replace the type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrgFile
\end_layout

\end_inset

 by the type constructor 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrgFile[A]
\end_layout

\end_inset

, representing a DSL program that will return a value of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 when we run it:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import java.nio.file.{Path => JPath}
\end_layout

\begin_layout Plain Layout

import java.nio.file.{Files, Paths}
\end_layout

\begin_layout Plain Layout

sealed trait PrgFile[A]
\end_layout

\begin_layout Plain Layout

final case class Literal(s: String)       extends PrgFile[String]
\end_layout

\begin_layout Plain Layout

final case class Path(p: PrgFile[String]) extends PrgFile[JPath]
\end_layout

\begin_layout Plain Layout

final case class Read(p: PrgFile[JPath])  extends PrgFile[String]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def run[A]: PrgFile[A] => A = {
\end_layout

\begin_layout Plain Layout

  case Literal(s) => s
\end_layout

\begin_layout Plain Layout

  case Path(p) => Paths.get(run(p))
\end_layout

\begin_layout Plain Layout

  case Read(p) => new String(Files.readAllBytes(run(p)))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Our example DSL is type-safe now.
 Invalid programs are rejected at compile time:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

val prgFile: PrgFile[String] = Read(Path(Read(Path(Literal(
\begin_inset Quotes eld
\end_inset

config_location.txt
\begin_inset Quotes erd
\end_inset

)))))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> run(prgFile)
\end_layout

\begin_layout Plain Layout

res2: String = "version = 1"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> run(Read(Read(Literal("file"))))
\end_layout

\begin_layout Plain Layout

type mismatch;
\end_layout

\begin_layout Plain Layout

 found   : Literal
\end_layout

\begin_layout Plain Layout

 required: PrgFile[java.nio.file.Path]
\end_layout

\begin_layout Plain Layout

val res3 = run(Read(Read(Literal("file"))))
\end_layout

\begin_layout Plain Layout

                                ^
\end_layout

\begin_layout Plain Layout

Compilation Failed 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Step 3: implementing bound variables
\end_layout

\begin_layout Standard
Another limitation of our DSLs is that they cannot define and use new variables
 within a DSL program.
 We also cannot use any non-DSL code, such as a numerical algorithms library
 for complex numbers, a library for file manipulation, or any other Scala
 code.
 
\end_layout

\begin_layout Standard
Both of these limitations would be removed if the DSL could support defining
 
\emph on
new Scala variables
\emph default
 and setting them to values computed within the DSL.
 We will then be able to add arbitrary Scala code working with those variables.
 Let us see how this feature may be implemented.
\end_layout

\begin_layout Standard
As an example, consider the task of reading a file if it exists and reporting
 an error otherwise.
 A direct (non-DSL) code for this computation looks like this:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

val p = Paths.get(
\begin_inset Quotes eld
\end_inset

config.txt
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

val result = if (Files.exists(p)) new String(Files.readAllBytes(p)) else 
\begin_inset Quotes eld
\end_inset

File not found
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

Trying to translate the above code to the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrgFile
\end_layout

\end_inset

 DSL, we find that we need to set the Scala variable 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p
\end_layout

\end_inset

 to the path computed by a previous operation.
 Here is a first attempt:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

val p: JPath = run(Path(Literal(
\begin_inset Quotes eld
\end_inset

config.txt
\begin_inset Quotes erd
\end_inset

)))
\end_layout

\begin_layout Plain Layout

val prg: PrgFile[String] = if (Files.exists(p)) Read(p) else Literal(
\begin_inset Quotes eld
\end_inset

File not found
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset

There are two problems with this code.
 First, the code 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Read(p)
\end_layout

\end_inset

 does not compile because the argument of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Read
\end_layout

\end_inset

 should be a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrgFile[JPath]
\end_layout

\end_inset

 rather than just a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

JPath
\end_layout

\end_inset

.
 Second, it is undesirable to use 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

run
\end_layout

\end_inset

 in the middle of a DSL program.
 This will prevent us from running the same code through different 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

run
\end_layout

\end_inset

 functions.
\end_layout

\begin_layout Standard
The first problem is solved if we generalize the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Literal
\end_layout

\end_inset

 class to hold values of arbitrary type:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

final case class Literal[A](a: A) extends PrgFile[A]
\end_layout

\end_inset

We then replace 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Read(p)
\end_layout

\end_inset

 by 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Read(Literal(p))
\end_layout

\end_inset

 in the code above.
 The code of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

run
\end_layout

\end_inset

 is unchanged.
\end_layout

\begin_layout Standard
To solve the second problem, we need to introduce a new DSL operation that
 binds Scala variables to values returned by other DSL operations.
 A standard way of creating 
\begin_inset Index idx
status open

\begin_layout Plain Layout
bound variable
\end_layout

\end_inset

bound variables is by using those variables as arguments of nameless functions.
 So, let us consider the nameless function:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

p => if (Files.exists(p)) Read(Literal(p)) else Literal(
\begin_inset Quotes eld
\end_inset

File not found
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset

This function creates a local variable 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p
\end_layout

\end_inset

 and uses it directly in an expression of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrgFile[String]
\end_layout

\end_inset

.
 We can call this function at the time when the entire DSL program is run.
 So, we can avoid the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

run
\end_layout

\end_inset

 call in the code 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

val p = run(...)
\end_layout

\end_inset

 and instead introduce a new DSL operation that we will call 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Bind
\end_layout

\end_inset

.
 The above code that computes 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

prg
\end_layout

\end_inset

 is replaced by:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

val prg2: PrgFile[JPath] = Path(Literal(
\begin_inset Quotes eld
\end_inset

config.txt
\begin_inset Quotes erd
\end_inset

))
\end_layout

\begin_layout Plain Layout

val prg: PrgFile[String] = Bind(prg2, p => if (Files.exists(p)) Read(p) else
 Literal(
\begin_inset Quotes eld
\end_inset

File not found
\begin_inset Quotes erd
\end_inset

))
\end_layout

\end_inset

Here, the case class 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Bind
\end_layout

\end_inset

 has two parts: a value of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrgFile[JPath]
\end_layout

\end_inset

 and a function of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

JPath => PrgFile[String]
\end_layout

\end_inset

.
 That function will be called, at the time we call 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

run
\end_layout

\end_inset

, and the argument 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p
\end_layout

\end_inset

 will be set to the value returned by 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

prg2
\end_layout

\end_inset

.
 This is implemented in the new code for 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

run
\end_layout

\end_inset

 shown below.
\end_layout

\begin_layout Standard
In a different DSL program, we may need different types instead of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

JPath
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

String
\end_layout

\end_inset

.
 So, let us replace those types by type parameters 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

.
 Note that the resulting type is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrgFile[B]
\end_layout

\end_inset

:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

final case class Bind[A, B](pa: PrgFile[A], f: A => PrgFile[B]) extends
 PrgFile[B]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After adding the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Bind
\end_layout

\end_inset

-handling code to the runner, the implementation of the DSL becomes:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sealed trait PrgFile[A]
\end_layout

\begin_layout Plain Layout

final case class Literal[A](a: A) extends PrgFile[A]
\end_layout

\begin_layout Plain Layout

final case class Bind[A, B](pa: PrgFile[A], f: A => PrgFile[B]) extends
 PrgFile[B]
\end_layout

\begin_layout Plain Layout

final case class Path(p: PrgFile[String]) extends PrgFile[JPath]
\end_layout

\begin_layout Plain Layout

final case class Read(p: PrgFile[JPath]) extends PrgFile[String]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def run[A]: PrgFile[A] => A = {
\end_layout

\begin_layout Plain Layout

  case Literal(a)    => a
\end_layout

\begin_layout Plain Layout

  case Bind(pa, f)   => f(run(pa))
\end_layout

\begin_layout Plain Layout

  case Path(p)       => Paths.get(run(p))
\end_layout

\begin_layout Plain Layout

  case Read(p)       => new String(Files.readAllBytes(run(p)))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The new 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Bind
\end_layout

\end_inset

 operation allows us to implement a part of the DSL program as a 
\emph on
Scala function
\emph default
 that depends on the result computed by another part of the DSL program.
 Since 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Bind
\end_layout

\end_inset

 contains arbitrary Scala code (a function of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A => PrgFile[B]
\end_layout

\end_inset

), we can now use non-DSL code as part of a DSL program, as long as it is
 enclosed inside a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Bind
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Step 4: arriving at a monadic DSL
\end_layout

\begin_layout Standard
The key observation is that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Bind
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Literal
\end_layout

\end_inset

 have the same type signatures as the standard 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

 methods of a monad.
 For convenience, let us define those methods on the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrgFile
\end_layout

\end_inset

 class:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sealed trait PrgFile[A] {
\end_layout

\begin_layout Plain Layout

  def flatMap[B](f: A => Prg[B]): Prg[B] = Bind(this, f)
\end_layout

\begin_layout Plain Layout

  def map[B](f: A => B): PrgFile[B] = Bind(this, f andThen PrgFile.pure)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

object PrgFile {
\end_layout

\begin_layout Plain Layout

  def pure[A](a: A): PrgFile[A] = Literal(a) 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Here we defined 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map
\end_layout

\end_inset

 through 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

 by analogy with the right identity law of monads.
\end_layout

\begin_layout Standard
Just like other DSL operations, the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

 methods do not run or evaluate any parts of the DSL program.
 They merely create some nested data structures containing not-yet-called
 functions.
 The necessary logic will be executed only when the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

run
\end_layout

\end_inset

 method is invoked to convert the entire DSL program to a result value.
\end_layout

\begin_layout Standard
Nevertheless, DSL programs can now be written as functor blocks:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

val prg: PrgFile[String] = for {
\end_layout

\begin_layout Plain Layout

  p <- Path(Literal(
\begin_inset Quotes eld
\end_inset

config.txt
\begin_inset Quotes erd
\end_inset

))
\end_layout

\begin_layout Plain Layout

  r <- if (Files.exists(p)) Read(p) else Literal(
\begin_inset Quotes eld
\end_inset

File not found
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

} yield r
\end_layout

\end_inset

Longer DSL programs may be composed from shorter ones:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def readPath(filename: String): PrgFile[String] = for {
\end_layout

\begin_layout Plain Layout

  path <- Path(Literal(filename))
\end_layout

\begin_layout Plain Layout

  text <- if (Files.exists(path)) Read(path) else Literal(
\begin_inset Quotes eld
\end_inset

File not found
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

} yield text
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

val prg2: PrgFile[String] = for {
\end_layout

\begin_layout Plain Layout

  str <- readPath(
\begin_inset Quotes eld
\end_inset

config.txt
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

  result <- if (str.nonEmpty) readPath(str) else PrgFile.pure(
\begin_inset Quotes eld
\end_inset

Error: empty filename
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

} yield result
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Step 5: refactoring to reuse common code
\end_layout

\begin_layout Standard
Recall our first example (a DSL for complex numbers) and rewrite it in a
 similar way:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sealed trait PrgComplex[A]
\end_layout

\begin_layout Plain Layout

final case class Literal[A](a: A) extends PrgComplex[A]
\end_layout

\begin_layout Plain Layout

final case class Bind[A, B](pa: PrgComplex[A], f: A => PrgComplex[B]) extends
 PrgComplex[B]
\end_layout

\begin_layout Plain Layout

final case class Add(x: PrgComplex[Complex], y: PrgComplex[Complex]) extends
 PrgComplex[Complex]
\end_layout

\begin_layout Plain Layout

final case class Mul(x: PrgComplex[Complex], y: PrgComplex[Complex]) extends
 PrgComplex[Complex]
\end_layout

\begin_layout Plain Layout

final case class Conj(x: PrgComplex[Complex]) extends PrgComplex[Complex]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def run[A]: PrgComplex[A] => A = {
\end_layout

\begin_layout Plain Layout

  case Literal(a)    => a
\end_layout

\begin_layout Plain Layout

  case Bind(pa, f)   => f(run(pa))
\end_layout

\begin_layout Plain Layout

  case Add(p1, p2)   => run(p1) + run(p2)
\end_layout

\begin_layout Plain Layout

  case Mul(p1, p2)   => run(p1) * run(p2)
\end_layout

\begin_layout Plain Layout

  case Conj(p)       => run(p).conj
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Comparing the code of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrgFile
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrgComplex
\end_layout

\end_inset

, we notice that the the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Literal
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Bind
\end_layout

\end_inset

 operations are implemented in the same way.
 The differences are in the code for operations specific to file handling
 or to complex numbers.
 So, let us refactor these data structures so that the domain-specific operation
s are separated and the common code may be reused.
 We will gather all the domain-specific operations in a separate type constructo
r that we call the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
effect constructor
\end_layout

\end_inset


\series bold
effect constructor
\series default
.
 The common code will then use the effect constructor as a type parameter.
 Let us now refactor the two example DSLs in this way.
\end_layout

\begin_layout Standard
***is it Ops(f: F[A]) and why not Ops(f: F[Prg[A]])??? What about the complex-nu
mbers example?
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
sealed trait Prg[A] { def flatMap ...
 }
\family default
\color darkgray
 // no code changes
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Bind[A, B](p: Prg[A], f: A
\begin_inset Formula $\rightarrow$
\end_inset

Prg[B]) extends Prg[B]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Literal[A](a: A) extends Prg[A]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
type Complex = (Double, Double)
\family default
\color darkgray
 // custom code starts here
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Str(s: String) extends Prg[Complex]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Mul(c1: Complex, C2: Complex) extends Prg[Complex]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Conj(c: Complex) extends Prg[Complex]
\end_layout

\begin_layout Standard
Refactor this DSL to separate common code from custom code:
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
sealed trait DSL[F[_], A] { def flatMap ...
 }
\family default
\color darkgray
 // no code changes
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
type Prg[A] = DSL[F, A]
\family default
\color darkgray
 // just for convenience
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Bind[A, B](p: Prg[A], f: A
\begin_inset Formula $\rightarrow$
\end_inset

Prg[B]) extends Prg[B]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Literal[A](a: A) extends Prg[A]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Ops[A](f: F[A]) extends Prg[A]
\family default
\color darkgray
 // custom operations here
\end_layout

\begin_layout Standard
Interpreter is parameterized by a 
\begin_inset Quotes eld
\end_inset

value extractor
\begin_inset Quotes erd
\end_inset

 
\size footnotesize

\begin_inset Formula $\text{Ex}^{F}\triangleq\forall A.\left(F^{A}\rightarrow A\right)$
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def run[F[_], A](ex: Ex[F])(prg: DSL[F, A]): A = ...
\end_layout

\begin_layout Standard
The constructor 
\family typewriter
\size footnotesize
\color blue
DSL[F[_], A]
\family default
\size default
\color inherit
 is called a 
\series bold
free monad
\series default
 over 
\family typewriter
\size footnotesize
\color blue
F
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Subsection
Interpreting a DSL: handling errors
\end_layout

\begin_layout Standard
To handle errors, we want to evaluate 
\family typewriter
\size footnotesize
\color blue
DSL[F[_], A]
\family default
\size default
\color inherit
 to 
\family typewriter
\size footnotesize
\color blue
Either[Err, A]
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Suppose we have a value extractor of type 
\begin_inset Formula $\text{Ex}^{F}\triangleq\forall A.\left(F^{A}\rightarrow\text{Err}+A\right)$
\end_inset


\end_layout

\begin_layout Standard
The code of the interpreter is almost unchanged:
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def run[F[_], A](extract: Ex[F])(prg: DSL[F, A]): Either[Err, A] =
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
prg match {
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
    case b: Bind[F, _, A] => b match { case Bind(p, f) => 
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
        run(extract)(p).flatMap(f andThen run(extract))
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
    }
\family default
\color darkgray
     // Here, the .flatMap is from Either.
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
    case Literal(a) => Right(a)
\family default
\color darkgray
 // pure: A 
\begin_inset Formula $\rightarrow$
\end_inset

 Err + A
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
    case Ops(f) => extract(f)     
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
}
\end_layout

\begin_layout Standard
The code of 
\family typewriter
\size footnotesize
\color blue
run
\family default
\size default
\color inherit
 only uses 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
pure
\family default
\size default
\color inherit
 from 
\family typewriter
\size footnotesize
\color blue
Either
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
We can generalize to any other monad 
\begin_inset Formula $M^{A}$
\end_inset

 instead of 
\family typewriter
\size footnotesize
\color blue
Either[Err, A]
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
The resulting construction:
\end_layout

\begin_layout Standard
Start with an 
\begin_inset Quotes eld
\end_inset

effects constructor
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $F^{A}$
\end_inset

 (often an unfunctor)
\end_layout

\begin_layout Standard
Use 
\begin_inset Formula $\text{DSL}^{F,A}$
\end_inset

 and interpreter 
\begin_inset Formula $\text{run}^{M,A}:\left(\forall X.F^{X}\rightarrow M^{X}\right)\rightarrow\text{DSL}^{F,A}\rightarrow M^{A}$
\end_inset


\end_layout

\begin_layout Standard
Note: the function of type 
\begin_inset Formula $\forall X.\,F^{X}\rightarrow M^{X}$
\end_inset

 does not need to handle all possible types 
\begin_inset Formula $X$
\end_inset

 but only those for which values of type 
\begin_inset Formula $F^{X}$
\end_inset

 can exist; so, unfunctors are not a problem
\end_layout

\begin_layout Standard
Create a DSL program 
\begin_inset Formula $\text{prg}:\text{DSL}^{F,A}$
\end_inset

 and an extractor 
\begin_inset Formula $\text{ex}^{X}:F^{X}\rightarrow M^{X}$
\end_inset


\end_layout

\begin_layout Standard
Run the program with the extractor: 
\family typewriter
\size footnotesize
\color blue
run(ex)(prg)
\family default
\size default
\color inherit
; get a value 
\begin_inset Formula $M^{A}$
\end_inset


\end_layout

\begin_layout Section
Slides
\end_layout

\begin_layout Paragraph
The interpreter pattern VIII.
 Monadic DSLs: summary
\end_layout

\begin_layout Standard
Begin with a number of operations, which are typically functions of fixed
 known types such as 
\begin_inset Formula $A_{1}\rightarrow B_{1}$
\end_inset

, 
\begin_inset Formula $A_{2}\rightarrow B_{2}$
\end_inset

 etc.
\end_layout

\begin_layout Standard
Define a type constructor (typically not a functor) encapsulating all the
 operations as case classes, with or without type parameters
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
sealed trait F[A]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Op1(a1: A1) extends F[B1]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Op2(a1: A2) extends F[B2]
\end_layout

\begin_layout Standard
Use 
\family typewriter
\size footnotesize
\color blue
DSL[F,A]
\family default
\size default
\color inherit
 with this 
\family typewriter
\size footnotesize
\color blue
F
\family default
\size default
\color inherit
 to write monadic DSL programs 
\family typewriter
\size footnotesize
\color blue
prg:
\begin_inset space ~
\end_inset

DSL[F,A]
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Choose a target monad 
\family typewriter
\size footnotesize
\color blue
M[A]
\family default
\size default
\color inherit
 and implement an extractor 
\family typewriter
\size footnotesize
\color blue
ex:F[A]
\begin_inset Formula $\rightarrow$
\end_inset

M[A]
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Run the program with the extractor, 
\family typewriter
\size footnotesize
\color blue
val res:
\begin_inset space ~
\end_inset

M[A] = run(ex)(prg)
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Further directions (out of scope for this chapter):
\end_layout

\begin_layout Standard
May choose another monad 
\family typewriter
\size footnotesize
\color blue
N[A]
\family default
\size default
\color inherit
 and use interpreter 
\family typewriter
\size footnotesize
\color blue
M[A] 
\begin_inset Formula $\rightarrow$
\end_inset

 N[A]
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
E.g.
\begin_inset space ~
\end_inset

transform into another monadic DSL to optimize, test, etc.
\end_layout

\begin_layout Standard
Since 
\family typewriter
\size footnotesize
\color blue
DSL[F,A]
\family default
\size default
\color inherit
 has a monad API, we can use monad transformers on it
\end_layout

\begin_layout Standard
Can combine two or more DSLs in a disjunction: 
\begin_inset Formula $\text{DSL}^{F+G+H,A}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Monad laws for DSL programs
\end_layout

\begin_layout Standard
Monad laws hold for DSL programs only after evaluating them
\end_layout

\begin_layout Standard
Consider the law 
\begin_inset Formula $\text{flm}\left(\text{pure}\right)=\text{id}$
\end_inset

; both functions 
\begin_inset Formula $\text{DSL}^{F,A}\rightarrow\text{DSL}^{F,A}$
\end_inset


\end_layout

\begin_layout Standard
Apply both sides to some 
\begin_inset Formula $\text{prg}:\text{DSL}^{F,A}$
\end_inset

 and get the new value
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
prg.flatMap(pure) == Bind(prg, a 
\begin_inset Formula $\rightarrow$
\end_inset

 Literal(a))
\end_layout

\begin_layout Standard
This new value is 
\emph on
not equal
\emph default
 to 
\family typewriter
\size footnotesize
\color blue
prg
\family default
\size default
\color inherit
, so this monad law fails!
\end_layout

\begin_layout Standard
Other laws fail as well because operations never reduce anything
\end_layout

\begin_layout Standard
After interpreting this program into a target monad 
\begin_inset Formula $M^{A}$
\end_inset

, the law holds:
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
run(ex)(prg).flatMap((a 
\begin_inset Formula $\rightarrow$
\end_inset

 Literal(a)) andThen run(ex)) 
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
  == run(ex)(prg).flatMap(a 
\begin_inset Formula $\rightarrow$
\end_inset

 run(ex)(Literal(a)) 
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
  == run(ex)(prg).flatMap(a 
\begin_inset Formula $\rightarrow$
\end_inset

 pure(a))
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
  == run(ex)(prg)
\end_layout

\begin_layout Standard
Here we have assumed that the laws hold for 
\begin_inset Formula $M^{A}$
\end_inset


\end_layout

\begin_layout Standard
All other laws also hold after interpreting into a lawful monad 
\begin_inset Formula $M^{A}$
\end_inset


\end_layout

\begin_layout Standard
The monad law violations are 
\begin_inset Quotes eld
\end_inset

not observable
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
***
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

A function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

launch()
\end_layout

\end_inset

 that launches real-world missiles can run out of missiles.
\begin_inset Quotes erd
\end_inset

 (A quote attributed to 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Simon Peyton Jones
\end_layout

\end_inset

Simon Peyton Jones.)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Free constructions in mathematics: Example I
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Consider the Russian letter 
\lang russian
ц
\lang english
 (tsè) and the Chinese word 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\begin_inset space ~
\end_inset

(shu
\begin_inset IPA

\begin_layout Standard
̌i
\end_layout

\end_inset

)
\end_layout

\begin_layout Plain Layout
We want to 
\emph on
multiply
\emph default
 
\lang russian
ц
\lang english
 by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset

.
 Multiply how?
\end_layout

\begin_layout Plain Layout
Say, we want an associative (but noncommutative) product of them
\end_layout

\begin_layout Plain Layout
So we want to define a 
\emph on
semigroup
\emph default
 that 
\emph on
contains
\emph default
 
\lang russian
ц
\lang english
 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\begin_inset space ~
\end_inset

as elements
\end_layout

\begin_layout Plain Layout
while we still know nothing about 
\lang russian
ц
\lang english
 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Consider the set of all 
\emph on
unevaluated expressions
\emph default
 such as 
\lang russian
ц
\lang english

\begin_inset Formula $\cdot$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\begin_inset Formula $\cdot$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\begin_inset Formula $\cdot$
\end_inset


\lang russian
ц
\lang english

\begin_inset Formula $\cdot$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Here 
\lang russian
ц
\lang english

\begin_inset Formula $\cdot$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\begin_inset space ~
\end_inset

is different from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\begin_inset Formula $\cdot$
\end_inset


\lang russian
ц
\lang english
 but 
\begin_inset Formula $\left(a\cdot b\right)\cdot c=a\cdot\left(b\cdot c\right)$
\end_inset


\end_layout

\begin_layout Plain Layout
All these expressions form a 
\series bold
free semigroup
\series default
 generated by 
\lang russian
ц
\lang english
 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
This is the most unrestricted semigroup that contains 
\lang russian
ц
\lang english
 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Example calculation: (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\begin_inset Formula $\cdot$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset

)
\begin_inset Formula $\cdot$
\end_inset

(
\lang russian
ц
\lang english

\begin_inset Formula $\cdot$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset

)
\begin_inset Formula $\cdot$
\end_inset


\lang russian
ц
\lang english
 
\begin_inset Formula $=$
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\begin_inset Formula $\cdot$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\begin_inset Formula $\cdot$
\end_inset


\lang russian
ц
\lang english

\begin_inset Formula $\cdot$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset


\begin_inset Formula $\cdot$
\end_inset


\lang russian
ц
\end_layout

\begin_layout Plain Layout
How to represent this as a data type:
\end_layout

\begin_layout Plain Layout

\series bold
Tree encoding
\series default
: the full expression tree: (((
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset

,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset

),(
\lang russian
ц
\lang english
,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset

)),
\lang russian
ц
\lang english
)
\end_layout

\begin_layout Plain Layout
Implement the operation 
\begin_inset Formula $a\cdot b$
\end_inset

 as pair constructor (easy)
\end_layout

\begin_layout Plain Layout

\series bold
Reduced encoding
\series default
, as a 
\begin_inset Quotes eld
\end_inset

smart
\begin_inset Quotes erd
\end_inset

 structure: List(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset

,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset

,
\lang russian
ц
\lang english
,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
shui
\end_layout

\end_inset

,
\lang russian
ц
\lang english
)
\end_layout

\begin_layout Plain Layout
Implement 
\begin_inset Formula $a\cdot b$
\end_inset

 by concatenating the lists (more expensive)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Free constructions in mathematics: Example II
\end_layout

\begin_layout Standard
Want to define a product operation for 
\begin_inset Formula $n$
\end_inset

-dimensional vectors: 
\begin_inset Formula $\mathbf{v}_{1}\otimes\mathbf{v}_{2}$
\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\otimes$
\end_inset

 must be linear and distributive (but not commutative):
\begin_inset Formula 
\begin{align*}
\mathbf{u}_{1}\otimes\mathbf{v}_{1}+\left(\mathbf{u}_{2}\otimes\mathbf{v}_{2}+\mathbf{u}_{3}\otimes\mathbf{v}_{3}\right) & =\left(\mathbf{u}_{1}\otimes\mathbf{v}_{1}+\mathbf{u}_{2}\otimes\mathbf{v}_{2}\right)+\mathbf{u}_{3}\otimes\mathbf{v}_{3}\\
\mathbf{u}\otimes\left(a_{1}\mathbf{v}_{1}+a_{2}\mathbf{v}_{2}\right) & =a_{1}\left(\mathbf{u}\otimes\mathbf{v}_{1}\right)+a_{2}\left(\mathbf{u}\otimes\mathbf{v}_{2}\right)\\
\left(a_{1}\mathbf{v}_{1}+a_{2}\mathbf{v}_{2}\right) & \otimes\mathbf{u}=a_{1}\left(\mathbf{v}_{1}\otimes\mathbf{u}\right)+a_{2}\left(\mathbf{v}_{2}\otimes\mathbf{u}\right)
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
We have such a product for 3-dimensional vectors; but it cannot be made
 to work for 2 or 4-dimensional vectors
\end_layout

\begin_layout Standard
Consider 
\emph on
unevaluated
\emph default
 
\emph on
expressions
\emph default
 of the form 
\begin_inset Formula $\mathbf{u}_{1}\otimes\mathbf{v}_{1}+\mathbf{u}_{2}\otimes\mathbf{v}_{2}+...$
\end_inset


\end_layout

\begin_layout Standard
A free vector space generated by pairs of vectors
\end_layout

\begin_layout Standard
Impose the equivalence relationships shown above
\end_layout

\begin_layout Standard
The result is known as the 
\series bold
tensor product
\end_layout

\begin_layout Standard
Tree encoding: full unevaluated expression tree
\end_layout

\begin_layout Standard
A list of any number of vector pairs 
\begin_inset Formula $\sum_{i}\mathbf{u}_{i}\otimes\mathbf{v}_{i}$
\end_inset


\end_layout

\begin_layout Standard
Reduced encoding: an 
\begin_inset Formula $n\times n$
\end_inset

 matrix
\end_layout

\begin_layout Standard
Reduced encoding requires proofs and more complex operations
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Worked example I: Free semigroup
\end_layout

\begin_layout Standard
Implement a free semigroup 
\family typewriter
\size footnotesize
\color blue
FSIS
\family default
\size default
\color inherit
 generated by two types 
\family typewriter
\size footnotesize
\color blue
Int
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
String
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
A value of 
\family typewriter
\size footnotesize
\color blue
FSIS
\family default
\size default
\color inherit
 can be an 
\family typewriter
\size footnotesize
\color blue
Int
\family default
\size default
\color inherit
; it can also be a 
\family typewriter
\size footnotesize
\color blue
String
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
If 
\family typewriter
\size footnotesize
\color blue
x
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
y
\family default
\size default
\color inherit
 are of type 
\family typewriter
\size footnotesize
\color blue
FSIS
\family default
\size default
\color inherit
 then so is 
\family typewriter
\size footnotesize
\color blue
x |+| y
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
sealed trait FSIS 
\family default
\color darkgray
// tree encoding: full expression tree
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Wrap1(x: Int) extends FSIS
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Wrap2(x: String) extends FSIS
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Comb(x: FSIS, y: FSIS) extends FSIS
\end_layout

\begin_layout Standard
Short type notation: 
\begin_inset Formula $\text{FSIS}\triangleq\text{Int}+\text{String}+\text{FSIS}\times\text{FSIS}$
\end_inset

 
\end_layout

\begin_layout Standard
For a semigroup 
\begin_inset Formula $S$
\end_inset

 and given 
\begin_inset Formula $\text{Int}\rightarrow S$
\end_inset

 and 
\begin_inset Formula $\text{String}\rightarrow S$
\end_inset

, map 
\begin_inset Formula $\text{FSIS}\rightarrow S$
\end_inset


\end_layout

\begin_layout Standard
Simplify and generalize this construction by setting 
\begin_inset Formula $Z=\text{Int}+\text{String}$
\end_inset


\end_layout

\begin_layout Standard
The tree encoding is 
\begin_inset Formula $\text{FS}^{Z}\triangleq Z+\text{FS}^{Z}\times\text{FS}^{Z}$
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def |+|(x: FS[Z], y: FS[Z]): FS[Z] = Comb(x, y)
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def run[S: Semigroup, Z](extract: Z 
\begin_inset Formula $\rightarrow$
\end_inset

 S): FS[Z] 
\begin_inset Formula $\rightarrow$
\end_inset

 S = {
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
  case Wrap(z) 
\begin_inset Formula $\rightarrow$
\end_inset

 extract(z)
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
  case Comb(x, y) 
\begin_inset Formula $\rightarrow$
\end_inset

 run(extract)(x) |+| run(extract)(y)
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
} 
\family default
\color darkgray
// Semigroup laws will hold after applying run().
\end_layout

\begin_layout Standard
The reduced encoding is 
\begin_inset Formula $\text{FSR}^{Z}\triangleq Z\times\text{List}^{Z}$
\end_inset

 (non-empty list of 
\begin_inset Formula $Z$
\end_inset

's)
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
x |+| y
\family default
\size default
\color inherit
 requires concatenating the lists, but 
\family typewriter
\size footnotesize
\color blue
run()
\family default
\size default
\color inherit
 is faster
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Worked example II: Free monoid
\end_layout

\begin_layout Standard
Implement a free monoid 
\family typewriter
\size footnotesize
\color blue
FM[Z]
\family default
\size default
\color inherit
 generated by type 
\family typewriter
\size footnotesize
\color blue
Z
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
A value of 
\family typewriter
\size footnotesize
\color blue
FM[Z]
\family default
\size default
\color inherit
 can be the empty value; it can also be a 
\family typewriter
\size footnotesize
\color blue
Z
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
If 
\family typewriter
\size footnotesize
\color blue
x
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
y
\family default
\size default
\color inherit
 are of type 
\family typewriter
\size footnotesize
\color blue
FM[Z]
\family default
\size default
\color inherit
 then so is 
\family typewriter
\size footnotesize
\color blue
x |+| y
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
sealed trait FM[Z] 
\family default
\color darkgray
// tree encoding
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Empty[Z]() extends FM[Z]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Wrap[Z](z: Z) extends FM[Z]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Comb[Z](x: FM[Z], y: FM[Z]) extends FM[Z]
\end_layout

\begin_layout Standard
Short type notation: 
\begin_inset Formula $\text{FM}^{Z}\triangleq1+Z+\text{FM}^{Z}\times\text{FM}^{Z}$
\end_inset

 
\end_layout

\begin_layout Standard
For a monoid 
\begin_inset Formula $M$
\end_inset

 and given 
\begin_inset Formula $Z\rightarrow M$
\end_inset

, map 
\begin_inset Formula $\text{FM}^{Z}\rightarrow M$
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def |+|(x: FM[Z], y: FM[Z]): FM[Z] = Comb(x, y)
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def run[M: Monoid, Z](extract: Z 
\begin_inset Formula $\rightarrow$
\end_inset

 M): FM[Z] 
\begin_inset Formula $\rightarrow$
\end_inset

 M = {
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
  case Empty() 
\begin_inset Formula $\rightarrow$
\end_inset

 Monoid[M].empty
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
  case Wrap(z) 
\begin_inset Formula $\rightarrow$
\end_inset

 extract(z)
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
  case Comb(x, y) 
\begin_inset Formula $\rightarrow$
\end_inset

 run(extract)(x) |+| run(extract)(y)
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
} 
\family default
\color darkgray
// Monoid laws will hold after applying run().
\end_layout

\begin_layout Standard
The reduced encoding is 
\begin_inset Formula $\text{FMR}^{Z}\triangleq\text{List}^{Z}$
\end_inset

 (list of 
\begin_inset Formula $Z$
\end_inset

's)
\end_layout

\begin_layout Standard
Implementing 
\family typewriter
\size footnotesize
\color blue
|+|
\family default
\size default
\color inherit
 requires concatenating the lists 
\end_layout

\begin_layout Standard
Reduced encoding and tree encoding give identical results after 
\family typewriter
\size footnotesize
\color blue
run()
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Mapping a free semigroup to different targets
\end_layout

\begin_layout Standard
What if we interpret 
\begin_inset Formula $\text{FS}^{X}$
\end_inset

 into 
\emph on
another
\emph default
 free semigroup?
\end_layout

\begin_layout Standard
Given 
\begin_inset Formula $Y\rightarrow Z$
\end_inset

, can we map 
\begin_inset Formula $\text{FS}^{Y}\rightarrow\text{FS}^{Z}$
\end_inset

?
\end_layout

\begin_layout Standard
Need to map 
\begin_inset Formula $\text{FS}^{Y}\triangleq Y+\text{FS}^{Y}\times\text{FS}^{Y}\rightarrow Z+\text{FS}^{Z}\times\text{FS}^{Z}$
\end_inset


\end_layout

\begin_layout Standard
This is straightforward since 
\begin_inset Formula $\text{FS}^{X}$
\end_inset

 is a functor in 
\begin_inset Formula $X$
\end_inset

:
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def fmap[Y, Z](f: Y 
\begin_inset Formula $\rightarrow$
\end_inset

 Z): FS[Y] 
\begin_inset Formula $\rightarrow$
\end_inset

 FS[Z] = {
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
  case Wrap(y) 
\begin_inset Formula $\rightarrow$
\end_inset

 Wrap(f(y))
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
  case Comb(a, b) 
\begin_inset Formula $\rightarrow$
\end_inset

 Comb(fmap(f)(a), fmap(f)(b))
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
}
\end_layout

\begin_layout Standard
Now we can use 
\family typewriter
\size footnotesize
\color blue
run
\family default
\size default
\color inherit
 to interpret 
\begin_inset Formula $\text{FS}^{X}\rightarrow\text{FS}^{Y}\rightarrow\text{FS}^{Z}\rightarrow S$
\end_inset

, etc.
\end_layout

\begin_layout Standard
Functor laws hold for 
\begin_inset Formula $\text{FS}^{X}$
\end_inset

, so 
\family typewriter
\size footnotesize
\color blue
fmap
\family default
\size default
\color inherit
 is composable as usual
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

interpreter
\begin_inset Quotes erd
\end_inset

 commutes with 
\family typewriter
\size footnotesize
\color blue
fmap
\family default
\size default
\color inherit
 as well (naturality law):
\size footnotesize

\begin_inset Formula 
\[
\xymatrix{\xyScaleY{0.2pc}\xyScaleX{3pc} & \text{FS}^{Y}\ar[rd]\sp(0.6){\ \text{run}^{S}g^{:Y\rightarrow S}}\\
\text{FS}^{X}\ar[ru]\sp(0.45){\text{fmap}\,f^{:X\rightarrow Y}}\ar[rr]\sb(0.5){\text{run}^{S}(f\bef g)^{:X\rightarrow S}} &  & S
}
\]

\end_inset


\end_layout

\begin_layout Standard
Combine two free semigroups: 
\begin_inset Formula $\text{FS}^{X+Y}$
\end_inset

; inject parts: 
\begin_inset Formula $\text{FS}^{X}\rightarrow\text{FS}^{X+Y}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Church encoding I: Motivation
\end_layout

\begin_layout Standard
Multiple target semigroups 
\begin_inset Formula $S_{i}$
\end_inset

 require many 
\begin_inset Quotes eld
\end_inset

extractors
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $\text{ex}_{i}:Z\rightarrow S_{i}$
\end_inset


\end_layout

\begin_layout Standard
Refactor extractors 
\begin_inset Formula $\text{ex}_{i}$
\end_inset

 into evidence of a typeclass constraint on 
\begin_inset Formula $S_{i}$
\end_inset


\end_layout

\begin_layout Standard

\size footnotesize
\color darkgray
// Typeclass ExZ[S] has a single method, extract: Z 
\begin_inset Formula $\rightarrow$
\end_inset

 S.
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
implicit val exZ: ExZ[MySemigroup] = { z 
\begin_inset Formula $\rightarrow$
\end_inset

 ...
 }
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def run[S: ExZ : Semigroup](fs: FS[Z]): S = fs match {
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
  case Wrap(z) 
\begin_inset Formula $\rightarrow$
\end_inset

 implicitly[ExZ[S]].extract(z)
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
  case Comb(x, y) 
\begin_inset Formula $\rightarrow$
\end_inset

 run(x) |+| run(y)
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
}
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
run()
\family default
\size default
\color inherit
 replaces case classes by fixed functions parameterized by 
\family typewriter
\size footnotesize
\color blue
S:
\begin_inset space ~
\end_inset

ExZ
\family default
\size default
\color inherit
; instead we can represent 
\family typewriter
\size footnotesize
\color blue
FS[Z]
\family default
\size default
\color inherit
 directly by such functions, for example:
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def wrap[S: ExZ](z: Z): S = implicitly[ExZ[S]].extract(z)
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def x[S: ExZ : Semigroup]: S = wrap(1) |+| wrap(2)
\end_layout

\begin_layout Standard
The type of 
\family typewriter
\size footnotesize
\color blue
x
\family default
\size default
\color inherit
 is 
\size footnotesize

\begin_inset Formula $\forall S.\left(Z\rightarrow S\right)\times\left(S\times S\rightarrow S\right)\rightarrow S$
\end_inset


\size default
; an equivalent type is
\size footnotesize

\begin_inset Formula 
\[
\forall S.\left(\left(Z+S\times S\right)\rightarrow S\right)\rightarrow S
\]

\end_inset


\end_layout

\begin_layout Standard
This is the 
\begin_inset Quotes eld
\end_inset


\series bold
Church encoding
\series default

\begin_inset Quotes erd
\end_inset

 (of the free semigroup over 
\begin_inset Formula $Z$
\end_inset

)
\end_layout

\begin_layout Standard
The Church encoding is based on the theorem 
\size footnotesize

\begin_inset Formula $A\cong\forall X.\left(A\rightarrow X\right)\rightarrow X$
\end_inset


\size default
 
\end_layout

\begin_layout Standard
this 
\emph on
resembles
\emph default
 the type of the continuation monad, 
\begin_inset Formula $\left(A\rightarrow R\right)\rightarrow R$
\end_inset

 
\end_layout

\begin_layout Standard
but 
\begin_inset Formula $\forall X$
\end_inset

 makes the function fully generic, like a natural transformation
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Church encoding II: Disjunction types
\end_layout

\begin_layout Standard
Consider the Church encoding for the disjunction type 
\begin_inset Formula $P+Q$
\end_inset

 
\end_layout

\begin_layout Standard
The encoding is 
\size footnotesize

\begin_inset Formula $\forall X.\left(P+Q\rightarrow X\right)\rightarrow X\cong\forall X.\left(P\rightarrow X\right)\rightarrow\left(Q\rightarrow X\right)\rightarrow X$
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
trait Disj[P, Q] { def run[X](cp: P 
\begin_inset Formula $\rightarrow$
\end_inset

 X)(cq: Q 
\begin_inset Formula $\rightarrow$
\end_inset

 X): X }
\end_layout

\begin_layout Standard
Define some values of this type:
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def left[P, Q](p: P) = new Disj[P, Q] {
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
 def run[X](cp: P 
\begin_inset Formula $\rightarrow$
\end_inset

 X)(cq: Q 
\begin_inset Formula $\rightarrow$
\end_inset

 X): X = cp(p) 
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
}
\end_layout

\begin_layout Standard
Now we can implement the analog of the 
\family typewriter
\size footnotesize
\color blue
case
\family default
\size default
\color inherit
 expression simply as
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
val result = disj.run {p 
\begin_inset Formula $\rightarrow$
\end_inset

 ...} {q 
\begin_inset Formula $\rightarrow$
\end_inset

 ...}
\end_layout

\begin_layout Standard
This works in programming languages that have no disjunction types
\end_layout

\begin_layout Standard
General recipe for implementing the Church encoding: 
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
trait Blah { def run[X](cont: ...
 
\begin_inset Formula $\rightarrow$
\end_inset

 X): X }
\end_layout

\begin_layout Standard
For convenience, define a type class 
\family typewriter
\size footnotesize
\color blue
Ex
\family default
\size default
\color inherit
 describing the inner function:
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
trait Ex[X] { def cp: P 
\begin_inset Formula $\rightarrow$
\end_inset

 X; def cq: Q 
\begin_inset Formula $\rightarrow$
\end_inset

 X }
\end_layout

\begin_layout Standard
Different methods of this class return 
\family typewriter
\size footnotesize
\color blue
X
\family default
\size default
\color inherit
; convenient with disjunctions
\end_layout

\begin_layout Standard
Church-encoded types have to be 
\begin_inset Quotes eld
\end_inset

run
\begin_inset Quotes erd
\end_inset

 for pattern matching to work on the results
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Church encoding III: How it works
\end_layout

\begin_layout Standard
Why is the type 
\begin_inset Formula $\text{Ch}^{A}\triangleq\forall X.\left(A\rightarrow X\right)\rightarrow X$
\end_inset

 equivalent to the type 
\begin_inset Formula $A$
\end_inset

?
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
trait Ch[A] { def run[X](cont: A 
\begin_inset Formula $\rightarrow$
\end_inset

 X): X }
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "65text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Itemize
If we have a value of 
\begin_inset Formula $A$
\end_inset

, we can get a 
\begin_inset Formula $\text{Ch}^{A}$
\end_inset


\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def a2c[A](a: A): Ch[A] = new Ch[A] { 
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  def run[X](cont: A 
\begin_inset Formula $\rightarrow$
\end_inset

 X): X = cont(a)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
}
\end_layout

\begin_layout Itemize
If we have a 
\begin_inset Formula $\text{ch}:\text{Ch}^{A}$
\end_inset

, we can get an 
\begin_inset Formula $a:A$
\end_inset

 
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def c2a[A](ch: Ch[A]): A = ch.run[A](a
\begin_inset Formula $\rightarrow$
\end_inset

a)
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "30col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{1pc}\xyScaleX{3pc}\text{id}:\left(A\rightarrow A\right)\ar[r]\sp(0.65){\text{ch}.\text{run}^{A}}\ar[d]\sp(0.5){\text{fmap}_{\text{Reader}_{A}}\left(f\right)} & A\ar[d]\sp(0.45){f}\\
f:\left(A\rightarrow X\right)\ar[r]\sb(0.65){\text{ch}.\text{run}^{X}} & X
}
\]

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Standard
The functions 
\family typewriter
\size footnotesize
\color blue
a2c
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
c2a
\family default
\size default
\color inherit
 are inverses of each other
\end_layout

\begin_layout Standard
To implement a value 
\begin_inset Formula $\text{ch}^{:\text{Ch}^{A}}$
\end_inset

, we must compute an 
\begin_inset Formula $x^{:X}$
\end_inset

 given 
\begin_inset Formula $f^{:A\rightarrow X}$
\end_inset

, for 
\emph on
any
\emph default
 
\begin_inset Formula $X$
\end_inset

, which 
\emph on
requires
\emph default
 having a value 
\begin_inset Formula $a^{:A}$
\end_inset

 available
\end_layout

\begin_layout Standard
To show that 
\family typewriter
\size footnotesize
\color blue
ch = a2c(c2a(ch))
\family default
\size default
\color inherit
, apply both sides to an 
\family typewriter
\size footnotesize
\color blue
f:
\begin_inset space ~
\end_inset

A
\begin_inset Formula $\rightarrow$
\end_inset

X
\family default
\size default
\color inherit
 and get 
\family typewriter
\size footnotesize
\color blue
ch.run(f) = a2c(c2a(ch)).run(f) = f(c2a(ch)) = f(ch.run(a
\begin_inset Formula $\rightarrow$
\end_inset

a))
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
This is naturality of 
\family typewriter
\size footnotesize
\color blue
ch.run
\family default
\size default
\color inherit
 as a transformation between 
\family typewriter
\size footnotesize
\color blue
Reader
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
Id
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Naturality of 
\family typewriter
\size footnotesize
\color blue
ch.run
\family default
\size default
\color inherit
 follows from parametricity of its code
\end_layout

\begin_layout Standard
It is straightforward to compute 
\family typewriter
\size footnotesize
\color blue
c2a(a2c(a)) = identity(a) = a
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Church encoding satisfies laws: it is built up from parts of 
\family typewriter
\size footnotesize
\color blue
run
\family default
\size default
\color inherit
 method
\end_layout

\begin_layout Paragraph
Worked example III: Free functor I
\end_layout

\begin_layout Standard
The 
\family typewriter
\size footnotesize
\color blue
Functor
\family default
\size default
\color inherit
 type class has one method, 
\family typewriter
\size footnotesize
\color blue
fmap
\family default
\size default
\color inherit
: 
\begin_inset Formula $\left(Z\rightarrow A\right)\rightarrow F^{Z}\rightarrow F^{A}$
\end_inset

 
\end_layout

\begin_layout Standard
The tree encoding of a free functor over 
\begin_inset Formula $F^{\bullet}$
\end_inset

 needs two case classes:
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
sealed trait FF[F[_], A]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Wrap[F[_], A](fa: F[A]) extends FF[F, A]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Fmap[F[_], A, Z](f: Z => A)(ffz: FF[F, Z]) extends FF[F, A]
\end_layout

\begin_layout Standard
The constructor 
\family typewriter
\size footnotesize
\color blue
Fmap
\family default
\size default
\color inherit
 has an extra type parameter 
\begin_inset Formula $Z$
\end_inset

, which is 
\begin_inset Quotes eld
\end_inset

hidden
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Consider a simple example of this:
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
sealed trait Q[A]; case class QZ[A, Z](a: A, z: Z) extends Q[A]
\end_layout

\begin_layout Standard
Need to use specific type 
\begin_inset Formula $Z$
\end_inset

 when constructing a value of 
\family typewriter
\size footnotesize
\color blue
Q[A]
\family default
\size default
\color inherit
, e.g.,
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
val q: Q[Int] = QZ[Int, String](123, "abc")
\end_layout

\begin_layout Standard
The type 
\begin_inset Formula $Z$
\end_inset

 is hidden inside 
\begin_inset Formula $q:Q^{\text{Int}}$
\end_inset

; all we know is that 
\begin_inset Formula $Z$
\end_inset

 
\begin_inset Quotes eld
\end_inset

exists
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Type notation for this: 
\begin_inset Formula $Q^{A}\triangleq\exists Z.A\times Z$
\end_inset


\end_layout

\begin_layout Standard
The existential quantifier applies to the 
\begin_inset Quotes eld
\end_inset

hidden
\begin_inset Quotes erd
\end_inset

 type parameter
\end_layout

\begin_layout Standard
The constructor 
\family typewriter
\size footnotesize
\color blue
QZ
\family default
\size default
\color inherit
 has type 
\begin_inset Formula $\exists Z.\left(A\times Z\rightarrow Q^{A}\right)$
\end_inset


\end_layout

\begin_layout Standard
It is not 
\begin_inset Formula $\forall Z$
\end_inset

 because a specific 
\begin_inset Formula $Z$
\end_inset

 is used when building up a value
\end_layout

\begin_layout Standard
The code does not show 
\begin_inset Formula $\exists Z$
\end_inset

 explicitly! We need to keep track of that
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Encoding with an existential type: How it works
\end_layout

\begin_layout Standard
Show that 
\begin_inset Formula $P^{A}\triangleq\exists Z.Z\times\left(Z\rightarrow A\right)\cong A$
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
sealed trait P[A]; case class PZ[A, Z](z: Z, f: Z 
\begin_inset Formula $\rightarrow$
\end_inset

 A) extends P[A]
\end_layout

\begin_layout Standard
How to construct a value of type 
\begin_inset Formula $P^{A}$
\end_inset

 for a given 
\begin_inset Formula $A$
\end_inset

?
\end_layout

\begin_layout Standard
Have a function 
\begin_inset Formula $Z\rightarrow A$
\end_inset

 and a 
\begin_inset Formula $Z$
\end_inset

, construct 
\begin_inset Formula $Z\times\left(Z\rightarrow A\right)$
\end_inset


\end_layout

\begin_layout Standard
Particular case: 
\begin_inset Formula $Z\triangleq A$
\end_inset

, have 
\begin_inset Formula $a:A$
\end_inset

 and build 
\begin_inset Formula $a\times\text{id}^{:A\rightarrow A}$
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def a2p[A](a: A): P[A] = PZ[A, A](a, identity)
\end_layout

\begin_layout Standard
Cannot extract 
\begin_inset Formula $Z$
\end_inset

 out of 
\begin_inset Formula $P^{A}$
\end_inset

 – the type 
\begin_inset Formula $Z$
\end_inset

 is hidden
\end_layout

\begin_layout Standard

\emph on
Can
\emph default
 extract 
\begin_inset Formula $A$
\end_inset

 out of 
\begin_inset Formula $P^{A}$
\end_inset

 – do not need to know 
\begin_inset Formula $Z$
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def p2a[A]: P[A] 
\begin_inset Formula $\rightarrow$
\end_inset

 A = { case PZ(z, f) 
\begin_inset Formula $\rightarrow$
\end_inset

 f(z) }
\end_layout

\begin_layout Standard
Cannot transform 
\begin_inset Formula $P^{A}$
\end_inset

 into anything else other than 
\begin_inset Formula $A$
\end_inset


\end_layout

\begin_layout Standard
A value of type 
\begin_inset Formula $P^{A}$
\end_inset

 is observable only via 
\family typewriter
\size footnotesize
\color blue
p2a
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Therefore the functions 
\family typewriter
\size footnotesize
\color blue
a2p
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
p2a
\family default
\size default
\color inherit
 are 
\begin_inset Quotes eld
\end_inset

observational
\begin_inset Quotes erd
\end_inset

 inverses (i.e.
\begin_inset space ~
\end_inset

we need to use 
\family typewriter
\size footnotesize
\color blue
p2a
\family default
\size default
\color inherit
 in order to compare values of type 
\begin_inset Formula $P^{A}$
\end_inset

)
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is a functor then 
\begin_inset Formula $Q^{A}\triangleq\exists Z.F^{Z}\times\left(Z\rightarrow A\right)\cong F^{A}$
\end_inset


\end_layout

\begin_layout Standard
A value of 
\begin_inset Formula $Q^{A}$
\end_inset

 can be observed only by extracting an 
\begin_inset Formula $F^{A}$
\end_inset

 from it
\end_layout

\begin_layout Standard
Can define 
\family typewriter
\size footnotesize
\color blue
f2q
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
q2f
\family default
\size default
\color inherit
 and show that they are observational inverses
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Worked example III: Free functor II
\end_layout

\begin_layout Standard
Tree encoding of 
\family typewriter
\size footnotesize
\color blue
FF
\family default
\size default
\color inherit
 has type 
\begin_inset Formula $\text{FF}^{F^{\bullet},A}\triangleq F^{A}+\exists Z.\text{FF}^{F^{\bullet},Z}\times\left(Z\rightarrow A\right)$
\end_inset


\end_layout

\begin_layout Standard
Derivation of the reduced encoding:
\end_layout

\begin_layout Standard
A value of type 
\begin_inset Formula $\text{FF}^{F^{\bullet},A}$
\end_inset

 must be of the form 
\size footnotesize

\begin_inset Formula 
\[
\exists Z_{1}.\exists Z_{2}...\exists Z_{n}.F^{Z_{n}}\times\left(Z_{n}\rightarrow Z_{n-1}\right)\times...\times\left(Z_{2}\rightarrow Z_{1}\right)\times\left(Z_{1}\rightarrow A\right)
\]

\end_inset


\end_layout

\begin_layout Standard
The functions 
\begin_inset Formula $Z_{1}\rightarrow A$
\end_inset

, 
\begin_inset Formula $Z_{2}\rightarrow Z_{1}$
\end_inset

, etc., must be composed associatively
\end_layout

\begin_layout Standard
The equivalent type is 
\begin_inset Formula $\exists Z_{n}.F^{Z_{n}}\times\left(Z_{n}\rightarrow A\right)$
\end_inset


\end_layout

\begin_layout Standard
Reduced encoding: 
\begin_inset Formula $\text{FreeF}^{F^{\bullet},A}\triangleq\exists Z.F^{Z}\times\left(Z\rightarrow A\right)$
\end_inset


\end_layout

\begin_layout Standard
Substituted 
\begin_inset Formula $F^{Z}$
\end_inset

 instead of 
\begin_inset Formula $\text{FreeF}^{F^{\bullet},Z}$
\end_inset

 and eliminated the case 
\begin_inset Formula $F^{A}$
\end_inset


\end_layout

\begin_layout Standard
The reduced encoding is non-recursive
\end_layout

\begin_layout Standard
Requires a proof that this encoding is equivalent to the tree encoding
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is already a functor, can show 
\begin_inset Formula $F^{A}\cong\exists Z.F^{Z}\times\left(Z\rightarrow A\right)$
\end_inset


\end_layout

\begin_layout Standard
Church encoding (starting from the tree encoding): 
\begin_inset Formula $\text{FreeF}^{F^{\bullet},A}\triangleq\forall P^{\bullet}.\left(\forall C.\big(F^{C}+\exists Z.P^{Z}\times\left(Z\rightarrow C\right)\big)↝P^{C}\right)\rightarrow P^{A}$
\end_inset


\end_layout

\begin_layout Standard
The structure of the type expression: 
\begin_inset Formula $\forall P^{\bullet}.\left(\forall C.(...)^{C}↝P^{C}\right)\rightarrow P^{A}$
\end_inset


\end_layout

\begin_layout Standard
Cannot move 
\begin_inset Formula $\forall C$
\end_inset

 or 
\begin_inset Formula $\exists Z$
\end_inset

 to the outside of the type expression!
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Church encoding IV: Recursive types and type constructors
\end_layout

\begin_layout Standard
Consider the recursive type 
\size footnotesize

\begin_inset Formula $P\triangleq Z+P\times P$
\end_inset


\size default
 (tree with 
\begin_inset Formula $Z$
\end_inset

-valued leaves)
\end_layout

\begin_layout Standard
The Church encoding is 
\size footnotesize

\begin_inset Formula $\forall X.\left(\left(Z+X\times X\right)\rightarrow X\right)\rightarrow X$
\end_inset


\end_layout

\begin_layout Standard
This is 
\emph on
non-recursive
\emph default
: the inductive use of 
\begin_inset Formula $P$
\end_inset

 is replaced by 
\begin_inset Formula $X$
\end_inset


\end_layout

\begin_layout Standard
Generalize to recursive type 
\begin_inset Formula $P\triangleq S^{P}$
\end_inset

 where 
\begin_inset Formula $S^{\bullet}$
\end_inset

 is a 
\begin_inset Quotes eld
\end_inset

induction functor
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
The Church encoding of 
\begin_inset Formula $P$
\end_inset

 is 
\size footnotesize

\begin_inset Formula $\forall X.\left(S^{X}\rightarrow X\right)\rightarrow X$
\end_inset


\end_layout

\begin_layout Standard
Church encoding of recursive types is non-recursive
\end_layout

\begin_layout Standard
Example: Church encoding of 
\family typewriter
\size footnotesize
\color blue
List[Int]
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Church encoding of a type constructor 
\begin_inset Formula $P^{\bullet}$
\end_inset

:
\end_layout

\begin_layout Standard
Notation: 
\begin_inset Formula $P^{\bullet}$
\end_inset

 is a type function; Scala syntax is 
\family typewriter
\size footnotesize
\color blue
P[_]
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
The Church encoding is 
\size footnotesize

\begin_inset Formula $\text{Ch}^{P^{\bullet},A}=\forall F^{\bullet}.\left(\forall X.P^{X}\rightarrow F^{X}\right)\rightarrow F^{A}$
\end_inset


\end_layout

\begin_layout Standard
Note: 
\begin_inset Formula $\forall X.P^{X}\rightarrow F^{X}$
\end_inset

 or 
\begin_inset Formula $P^{\bullet}↝F^{\bullet}$
\end_inset

 resembles a natural transformation
\end_layout

\begin_layout Standard
Except that 
\begin_inset Formula $P^{\bullet}$
\end_inset

 and 
\begin_inset Formula $F^{\bullet}$
\end_inset

 are not necessarily functors, so no naturality law
\end_layout

\begin_layout Standard
Example: Church encoding of 
\family typewriter
\size footnotesize
\color blue
Option[_]
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Church encoding of a 
\emph on
recursively
\emph default
 defined type constructor 
\begin_inset Formula $P^{\bullet}$
\end_inset

:
\end_layout

\begin_layout Standard
Definition: 
\begin_inset Formula $P^{A}\triangleq S^{P^{\bullet},A}$
\end_inset

 where 
\begin_inset Formula $S^{P^{\bullet},A}$
\end_inset

 describes the 
\begin_inset Quotes eld
\end_inset

induction principle
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Notation: 
\size footnotesize

\begin_inset Formula $S^{\bullet^{\bullet},A}$
\end_inset


\size default
 is a higher-order type function; Scala syntax: 
\family typewriter
\size footnotesize
\color blue
S[_[_],A]
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Example: 
\begin_inset Formula $\text{List}^{A}\triangleq1+A\times\text{List}^{A}\triangleq S^{\text{List}^{\bullet},A}$
\end_inset

 where 
\begin_inset Formula $S^{P^{\bullet},A}\triangleq1+A\times P^{A}$
\end_inset

 
\end_layout

\begin_layout Standard
The Church encoding of 
\begin_inset Formula $P^{A}$
\end_inset

 is 
\size footnotesize

\begin_inset Formula $\text{Ch}^{P^{\bullet},A}=\forall F^{\bullet}.\big(S^{F^{\bullet}}↝F^{\bullet}\big)\rightarrow F^{A}$
\end_inset


\end_layout

\begin_layout Standard
The Church encoding of 
\family typewriter
\size footnotesize
\color blue
List[_]
\family default
\size default
\color inherit
 is non-recursive
\end_layout

\begin_layout Paragraph
Details: Why Church encoding of a free semigroup is a semigroup
\end_layout

\begin_layout Standard
- it's not obvious
\end_layout

\begin_layout Standard
FS = forall S.
 (Z => S) × (S × S => S) => S is a semigroup.
  We need to define the binary operation |+| on values of type FS.
 A value f of type FS is a function with a type parameter, that we can use
 as f[S](e, c) to compute a value of any given type S from arguments e :
 Z => S and c: S × S => S.
 Scala code for f will be
\end_layout

\begin_layout Standard
def f[S](empty: Z => S, combine: (S, S) => S): S = ???
\end_layout

\begin_layout Standard
So, given f and g of this type, we need to somehow define a new function
 h = f |+| g also of the same type.
 Begin to write code for that function:
\end_layout

\begin_layout Standard
def h[S](empty: Z => S, combine: (S, S) => S): S = ???
\end_layout

\begin_layout Standard
The free semigroup in the tree encoding defines the binary operation as
 a formal operation that does not compute anything.
 In the Church encoding, however, we have the binary operation as the argument
 "combine" of h, and so we should call that function.
 So we use it:
\end_layout

\begin_layout Standard
def h[S](empty: Z => S, combine: (S, S) => S): S = combine(???, ???)
\end_layout

\begin_layout Standard
We need to fill the typed holes ??? of type S.
 It is clear that we should use f and g somehow.
 We can use f and g simply by calling those functions on the arguments `empty`
 and `combine`.
 Since f and g both have a universally quantified type parameter, we can
 just use the given type S for them.
\end_layout

\begin_layout Standard
def h[S](empty: Z => S, combine: (S, S) => S): S = combine(f[S](empty, combine),
 g[S](empty, combine))
\end_layout

\begin_layout Standard
The types match, and we have used both functions f and g in a way that is
 intuitively correct.
 We have preserved information.
 So, this is likely the correct implementation.
 It remains to verify the associativity law.
 To do that, we need to assume that `combine` is associative for the actual
 type 
\begin_inset Formula $S$
\end_inset

 on which we use the Church encoding (i.e.
 a non-free, lawful semigroup)
\end_layout

\begin_layout Standard
To show equivalence between FSZ and Chz, write code for the type ChZ and
 the two directions of the isomorphism,
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

trait FSCh[Z] { def run[S](empty: Z => S, combine: (S, S) => S): S }
\end_layout

\begin_layout Plain Layout

def fsz2ch[Z](fsz: NEList[Z]): FSCh[Z] = ???
\end_layout

\begin_layout Plain Layout

def ch2fsz[Z](ch: FSCh[Z]): NEList[Z] = ???
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Church encoding V: Type classes
\end_layout

\begin_layout Standard
Look at the Church encoding of the free semigroup:
\size footnotesize

\begin_inset Formula 
\[
\text{ChFS}^{Z}\triangleq\forall X.\left(Z\rightarrow X\right)\times\left(X\times X\rightarrow X\right)\rightarrow X
\]

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $X$
\end_inset

 is constrained to the 
\family typewriter
\size footnotesize
\color blue
Semigroup
\family default
\size default
\color inherit
 typeclass, we will already have a value 
\size footnotesize

\begin_inset Formula $X\times X\rightarrow X$
\end_inset


\size default
, so we can omit it: 
\size footnotesize

\begin_inset Formula $\text{ChFS}^{Z}=\forall X^{:\text{Semigroup}}.\left(Z\rightarrow X\right)\rightarrow X$
\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

induction functor
\begin_inset Quotes erd
\end_inset

 for 
\begin_inset Quotes eld
\end_inset

semigroup over 
\begin_inset Formula $Z$
\end_inset


\begin_inset Quotes erd
\end_inset

 is 
\size footnotesize

\begin_inset Formula $\text{SemiG}^{X}\triangleq Z+X\times X$
\end_inset


\end_layout

\begin_layout Standard
So the Church encoding is 
\begin_inset Formula $\forall X.\big(\text{SemiG}^{X}\rightarrow X\big)\rightarrow X$
\end_inset


\end_layout

\begin_layout Standard
Generalize to arbitrary type classes:
\end_layout

\begin_layout Standard
Type class 
\begin_inset Formula $C$
\end_inset

 is defined by its operations
\size footnotesize
 
\begin_inset Formula $C^{X}\rightarrow X$
\end_inset


\size default
 (with a suitable 
\begin_inset Formula $C^{\bullet}$
\end_inset

)
\end_layout

\begin_layout Standard
call 
\begin_inset Formula $C^{\bullet}$
\end_inset

 the 
\series bold
method functor
\series default
 of the inductive typeclass 
\begin_inset Formula $C$
\end_inset


\end_layout

\begin_layout Standard
Tree encoding of 
\begin_inset Quotes eld
\end_inset

free 
\begin_inset Formula $C$
\end_inset

 over 
\begin_inset Formula $Z$
\end_inset


\begin_inset Quotes erd
\end_inset

 is recursive, 
\begin_inset Formula $\text{FreeC}^{Z}\triangleq Z+C^{\text{FreeC}^{Z}}$
\end_inset


\end_layout

\begin_layout Standard
Church encoding is 
\begin_inset Formula $\text{FreeC}^{Z}\triangleq\forall X.\left(Z+C^{X}\rightarrow X\right)\rightarrow X$
\end_inset


\end_layout

\begin_layout Standard
Equivalently, 
\begin_inset Formula $\text{FreeC}^{Z}\triangleq\forall X^{:C}.\left(Z\rightarrow X\right)\rightarrow X$
\end_inset


\end_layout

\begin_layout Standard
Laws of the typeclass are satisfied automatically after 
\begin_inset Quotes eld
\end_inset

running
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Works similarly for type constructors: operations 
\begin_inset Formula $C^{P^{\bullet},A}\rightarrow P^{A}$
\end_inset


\end_layout

\begin_layout Standard
Free typeclass 
\begin_inset Formula $C$
\end_inset

 over 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is 
\begin_inset Formula $\text{FreeC}^{F^{\bullet},A}\triangleq\forall P^{\bullet:C}.\left(F^{\bullet}↝P^{\bullet}\right)\rightarrow P^{A}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Properties of free type constructions
\end_layout

\begin_layout Standard
Generalizing from our examples so far:
\end_layout

\begin_layout Standard
We 
\begin_inset Quotes eld
\end_inset

enriched
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $Z$
\end_inset

 to a monoid 
\begin_inset Formula $\text{FM}^{Z}$
\end_inset

, and 
\begin_inset Formula $F^{A}$
\end_inset

 to a monad 
\begin_inset Formula $\text{DSL}^{F,A}$
\end_inset

 
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

enrichment
\begin_inset Quotes erd
\end_inset

 adds case classes representing the needed operations
\end_layout

\begin_layout Standard
Works for a generating type 
\begin_inset Formula $Z$
\end_inset

 and for a generating type constructor 
\begin_inset Formula $F^{A}$
\end_inset


\end_layout

\begin_layout Standard
Obtain a 
\series bold
free type construction
\series default
, which performs no computations
\end_layout

\begin_layout Standard
\begin_inset Formula $\text{FM}^{Z}$
\end_inset

 wraps 
\begin_inset Formula $Z$
\end_inset

 in 
\begin_inset Quotes eld
\end_inset

just enough
\begin_inset Quotes erd
\end_inset

 stuff to make it look like a monoid
\end_layout

\begin_layout Standard
\begin_inset Formula $\text{FreeF}^{F^{\bullet},A}$
\end_inset

 wraps 
\begin_inset Formula $F^{A}$
\end_inset

 in 
\begin_inset Quotes eld
\end_inset

just enough
\begin_inset Quotes erd
\end_inset

 stuff to make it look like a functor
\end_layout

\begin_layout Standard
A value of a free construction can be 
\begin_inset Quotes eld
\end_inset

run
\begin_inset Quotes erd
\end_inset

 to yield non-free values 
\end_layout

\begin_layout Standard
Questions:
\end_layout

\begin_layout Standard
Can we construct a free typeclass 
\begin_inset Formula $C$
\end_inset

 over any type constructor 
\begin_inset Formula $F^{A}$
\end_inset

?
\end_layout

\begin_layout Standard
Yes, with typeclasses: (contra)functor, filterable, monad, applicative
\end_layout

\begin_layout Standard
Which of the possible encodings to use?
\end_layout

\begin_layout Standard
Tree encoding, reduced encodings, Church encoding
\end_layout

\begin_layout Standard
What are the laws for the
\size footnotesize
 
\begin_inset Formula $\text{FreeC}^{F,A}$
\end_inset


\size default
 – 
\begin_inset Quotes eld
\end_inset

free instance of 
\begin_inset Formula $C$
\end_inset

 over 
\begin_inset Formula $F$
\end_inset


\begin_inset Quotes erd
\end_inset

?
\end_layout

\begin_layout Standard
For all 
\begin_inset Formula $F^{\bullet}$
\end_inset

, must have 
\family typewriter
\size footnotesize
\color blue
wrap[A]
\family default
\size default
\color inherit
 
\begin_inset Formula $:F^{A}\rightarrow\text{FreeC}^{F,A}$
\end_inset

 or 
\begin_inset Formula $F^{\bullet}↝\text{FreeC}^{F,\bullet}$
\end_inset


\end_layout

\begin_layout Standard
For all 
\begin_inset Formula $M^{\bullet}:C$
\end_inset

, must have 
\family typewriter
\size footnotesize
\color blue
run
\family default
\size default
\color inherit
 
\begin_inset Formula $:\left(F^{\bullet}\leadsto M^{\bullet}\right)\rightarrow\text{FreeC}^{F,\bullet}↝M^{\bullet}$
\end_inset


\end_layout

\begin_layout Standard
The laws of typeclass 
\begin_inset Formula $C$
\end_inset

 must hold after interpreting into an 
\begin_inset Formula $M^{\bullet}:C$
\end_inset


\end_layout

\begin_layout Standard
Given any 
\family typewriter
\size footnotesize
\color blue
t
\family default
\size default
\color inherit

\begin_inset Formula $:F^{\bullet}↝G^{\bullet}$
\end_inset

, must have 
\family typewriter
\size footnotesize
\color blue
fmap(t)
\family default
\size default
\color inherit

\begin_inset Formula $:\text{FreeC}^{F,\bullet}↝\text{FreeC}^{G,\bullet}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Recipes for encoding free typeclass instances
\end_layout

\begin_layout Standard
Build a free instance of typeclass 
\begin_inset Formula $C$
\end_inset

 over 
\begin_inset Formula $F^{\bullet}$
\end_inset

, as a type constructor 
\begin_inset Formula $P^{\bullet}$
\end_inset

 
\end_layout

\begin_layout Standard
The typeclass 
\begin_inset Formula $C$
\end_inset

 can be functor, contrafunctor, monad, etc.
\end_layout

\begin_layout Standard
Assume that 
\begin_inset Formula $C$
\end_inset

 has methods 
\begin_inset Formula $m_{1}$
\end_inset

, 
\begin_inset Formula $m_{2}$
\end_inset

, ..., with type signatures 
\size footnotesize

\begin_inset Formula $m_{1}:Q_{1}^{P^{\bullet},A}\rightarrow P^{A}$
\end_inset


\size default
, 
\size footnotesize

\begin_inset Formula $m_{2}:Q_{2}^{P^{\bullet},A}\rightarrow P^{A}$
\end_inset


\size default
, etc., where 
\begin_inset Formula $Q_{i}^{P^{\bullet},A}$
\end_inset

 are covariant in 
\begin_inset Formula $P^{\bullet}$
\end_inset

 
\end_layout

\begin_layout Standard

\series bold
Inductive typeclass
\series default
 is defined via a methods functor, 
\begin_inset Formula $S^{P^{\bullet}}↝P^{\bullet}$
\end_inset


\end_layout

\begin_layout Standard
The tree encoded 
\begin_inset Formula $\text{FC}^{A}$
\end_inset

 is a disjunction defined recursively by
\size footnotesize

\begin_inset Formula 
\[
\text{FC}^{A}\triangleq F^{A}+Q_{1}^{\text{FC}^{\bullet},A}+Q_{2}^{\text{FC}^{\bullet},A}+...
\]

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
sealed trait FC[A]; case class Wrap[A](fa: F[A]) extends FC[A]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Q1[A](...) extends FC[A]
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
case class Q2[A](...) extends FC[A]; ...
\end_layout

\begin_layout Standard
Any type parameters within 
\begin_inset Formula $Q_{i}$
\end_inset

 are then existentially quantified
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
run()
\family default
\size default
\color inherit
 maps 
\begin_inset Formula $F^{\bullet}↝M^{\bullet}$
\end_inset

 in the disjunction and recursively for other parts
\end_layout

\begin_layout Standard
Derive a reduced encoding via reasoning about possible values of 
\begin_inset Formula $\text{FC}^{A}$
\end_inset

 and by taking into account the laws of the typeclass 
\begin_inset Formula $C$
\end_inset


\end_layout

\begin_layout Standard
A Church encoding can use the tree encoding or the reduced encoding
\end_layout

\begin_layout Standard
Church encoding is 
\begin_inset Quotes eld
\end_inset

automatically reduced
\begin_inset Quotes erd
\end_inset

, but performance may differ
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Properties of inductive typeclasses
\end_layout

\begin_layout Standard
If a typeclass 
\begin_inset Formula $C$
\end_inset

 is inductive with methods 
\begin_inset Formula $C^{X}\rightarrow X$
\end_inset

 then:
\end_layout

\begin_layout Standard
A free instance of 
\begin_inset Formula $C$
\end_inset

 over 
\begin_inset Formula $Z$
\end_inset

 can be tree-encoded as 
\size footnotesize

\begin_inset Formula $\text{FreeC}^{Z}\triangleq Z+C^{\text{FreeC}^{Z}}$
\end_inset


\size default
 
\end_layout

\begin_layout Standard
All inductive typeclasses have free instances, 
\begin_inset Formula $\text{FreeC}^{Z}$
\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $P^{:C}$
\end_inset

 and 
\begin_inset Formula $Q^{:C}$
\end_inset

 then 
\begin_inset Formula $P\times Q$
\end_inset

 and 
\begin_inset Formula $Z\rightarrow P$
\end_inset

 also belong to typeclass 
\begin_inset Formula $C$
\end_inset


\end_layout

\begin_layout Standard
but not necessarily 
\begin_inset Formula $P+Q$
\end_inset

 or 
\begin_inset Formula $Z\times P$
\end_inset


\end_layout

\begin_layout Standard
Proof: can implement 
\begin_inset Formula $(C^{P}\rightarrow P)\times(C^{Q}\rightarrow Q)\rightarrow C^{P\times Q}\rightarrow P\times Q$
\end_inset

 and 
\begin_inset Formula $\left(C^{P}\rightarrow P\right)\rightarrow C^{Z\rightarrow P}\rightarrow Z\rightarrow P$
\end_inset

, but cannot implement 
\begin_inset Formula $\left(...\right)\rightarrow P+Q$
\end_inset


\end_layout

\begin_layout Standard
Analogous properties hold for type constructor typeclasses
\end_layout

\begin_layout Standard
Methods described as 
\begin_inset Formula $C^{F^{\bullet},A}\rightarrow F^{A}$
\end_inset

 with type constructor parameter 
\begin_inset Formula $F^{\bullet}$
\end_inset


\end_layout

\begin_layout Standard
What typeclasses 
\emph on
cannot
\emph default
 be tree-encoded (or have no 
\begin_inset Quotes eld
\end_inset

free
\begin_inset Quotes erd
\end_inset

 instances)?
\end_layout

\begin_layout Standard
Any typeclass with a method 
\emph on
not ultimately returning
\emph default
 a value of 
\begin_inset Formula $P^{A}$
\end_inset


\end_layout

\begin_layout Standard
Example: a typeclass with methods 
\begin_inset Formula $\text{pt}:A\rightarrow P^{A}$
\end_inset

 and 
\begin_inset Formula $\text{ex}:P^{A}\rightarrow A$
\end_inset


\end_layout

\begin_layout Standard
Such typeclasses are not inductive
\end_layout

\begin_layout Standard
Typeclasses with methods of the form 
\begin_inset Formula $P^{A}\rightarrow...$
\end_inset

 are 
\series bold
co-inductive
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Worked example IV: Free contrafunctor
\end_layout

\begin_layout Standard
Method 
\begin_inset Formula $\text{contramap}:C^{A}\times\left(B\rightarrow A\right)\rightarrow C^{B}$
\end_inset

 
\end_layout

\begin_layout Standard
Tree encoding: 
\begin_inset Formula $\text{FreeCF}^{F^{\bullet},B}\triangleq F^{B}+\exists A.\text{FreeCF}^{F^{\bullet},A}\times\left(B\rightarrow A\right)$
\end_inset


\end_layout

\begin_layout Standard
Reduced encoding: 
\begin_inset Formula $\text{FreeCF}^{F^{\bullet},B}\triangleq\exists A.F^{A}\times\left(B\rightarrow A\right)$
\end_inset

 
\end_layout

\begin_layout Standard
A value of type 
\begin_inset Formula $\text{FreeCF}^{F^{\bullet},B}$
\end_inset

 must be of the form 
\size footnotesize

\begin_inset Formula 
\[
\exists Z_{1}.\exists Z_{2}...\exists Z_{n}.F^{Z_{1}}\times\left(B\rightarrow Z_{n}\right)\times\left(Z_{n}\rightarrow Z_{n-1}\right)\times...\times\left(Z_{2}\rightarrow Z_{1}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
The functions 
\begin_inset Formula $B\rightarrow Z_{n}$
\end_inset

, 
\begin_inset Formula $Z_{n}\rightarrow Z_{n-1}$
\end_inset

, etc., are composed associatively
\end_layout

\begin_layout Standard
The equivalent type is 
\begin_inset Formula $\exists Z_{1}.F^{Z_{1}}\times\left(B\rightarrow Z_{1}\right)$
\end_inset


\end_layout

\begin_layout Standard
The reduced encoding is non-recursive
\end_layout

\begin_layout Standard
Example: 
\begin_inset Formula $F^{A}\triangleq A$
\end_inset

, 
\begin_inset Quotes eld
\end_inset

interpret
\begin_inset Quotes erd
\end_inset

 into the contrafunctor 
\begin_inset Formula $C^{A}\triangleq A\rightarrow\text{String}$
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
def prefixLog[A](p: A): A 
\begin_inset Formula $\rightarrow$
\end_inset

 String = a 
\begin_inset Formula $\rightarrow$
\end_inset

 p.toString + a.toString
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is already a contrafunctor then 
\begin_inset Formula $\text{FreeCF}^{F^{\bullet},A}\cong F^{A}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Worked example V: Free pointed functor
\end_layout

\begin_layout Standard
Over an arbitrary type constructor 
\begin_inset Formula $F^{\bullet}$
\end_inset

:
\end_layout

\begin_layout Standard
Pointed functor methods 
\size footnotesize

\begin_inset Formula $\text{pt}:A\rightarrow P^{A}$
\end_inset


\size default
 and 
\size footnotesize

\begin_inset Formula $\text{map}:P^{A}\times\left(A\rightarrow B\right)\rightarrow P^{B}$
\end_inset


\end_layout

\begin_layout Standard
Tree encoding: 
\size footnotesize

\begin_inset Formula $\text{FreeP}^{F^{\bullet},A}\triangleq A+F^{A}+\exists Z.\text{FreeP}^{F^{\bullet},Z}\times\left(Z\rightarrow A\right)$
\end_inset


\end_layout

\begin_layout Standard
Derivation of the reduced encoding:
\end_layout

\begin_layout Standard
The tree encoding of a value 
\begin_inset Formula $\text{FreeP}^{F^{\bullet},A}$
\end_inset

 is either
\size footnotesize

\begin_inset Formula 
\[
\exists Z_{1}.\exists Z_{2}...\exists Z_{n}.F^{Z_{n}}\times\left(Z_{n}\rightarrow Z_{n-1}\right)\times...\times\left(Z_{2}\rightarrow Z_{1}\right)\times\left(Z_{1}\rightarrow A\right)
\]

\end_inset


\size default
or
\size footnotesize

\begin_inset Formula 
\[
\exists Z_{1}.\exists Z_{2}...\exists Z_{n}.Z_{n}\times\left(Z_{n}\rightarrow Z_{n-1}\right)\times...\times\left(Z_{2}\rightarrow Z_{1}\right)\times\left(Z_{1}\rightarrow A\right)
\]

\end_inset


\end_layout

\begin_layout Standard
Compose all functions by associativity; one function 
\begin_inset Formula $Z_{n}\rightarrow A$
\end_inset

 remains
\end_layout

\begin_layout Standard
The case 
\begin_inset Formula $\exists Z_{n}.Z_{n}\times\left(Z_{n}\rightarrow A\right)$
\end_inset

 is equivalent to just 
\begin_inset Formula $A$
\end_inset


\end_layout

\begin_layout Standard
Reduced encoding: 
\size footnotesize

\begin_inset Formula $\text{FreeP}^{F^{\bullet},A}\triangleq A+\exists Z.F^{Z}\times\left(Z\rightarrow A\right)$
\end_inset

, 
\size default
non-recursive
\end_layout

\begin_layout Standard
This reuses the free functor as 
\begin_inset Formula $\text{FreeP}^{F^{\bullet},A}=A+\text{FreeF}^{F^{\bullet},A}$
\end_inset


\end_layout

\begin_layout Standard
If the type constructor 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is 
\emph on
already
\emph default
 a functor, 
\begin_inset Formula $\text{FreeF}^{F^{\bullet},A}\cong F^{A}$
\end_inset

 and so:
\end_layout

\begin_layout Standard
Free pointed functor over a functor 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is simplified: 
\begin_inset Formula $A+F^{A}$
\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is already a pointed functor, need not use the free construction
\end_layout

\begin_layout Standard
If we do, we will have 
\begin_inset Formula $\text{FreeP}^{F^{\bullet},A}\not\cong F^{A}$
\end_inset

 
\end_layout

\begin_layout Standard
only functors and contrafunctors do not change under 
\begin_inset Quotes eld
\end_inset

free
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Worked example VI: Free filterable functor
\end_layout

\begin_layout Standard
(See Chapter 6.) Methods:
\begin_inset Formula 
\begin{align*}
\text{map} & :F^{A}\rightarrow\left(A\rightarrow B\right)\rightarrow F^{B}\\
\text{mapOpt} & :F^{A}\rightarrow\left(A\rightarrow1+B\right)\rightarrow F^{B}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
We can recover 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
 from 
\family typewriter
\size footnotesize
\color blue
mapOpt
\family default
\size default
\color inherit
, so we keep only 
\family typewriter
\size footnotesize
\color blue
mapOpt
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Tree encoding: 
\begin_inset Formula $\text{FreeFi}^{F^{\bullet},A}\triangleq F^{A}+\exists Z.\text{FreeFi}^{F^{\bullet},Z}\times\left(Z\rightarrow1+A\right)$
\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is already a functor, can simplify the tree encoding using the identity
 
\begin_inset Formula $\exists Z.P^{Z}\times\left(Z\rightarrow1+A\right)\cong P^{A}$
\end_inset

 and obtain 
\begin_inset Formula $\text{FreeFi}^{F^{\bullet},A}\triangleq F^{A}+\text{FreeFi}^{F^{\bullet},1+A}$
\end_inset

, which is equivalent to 
\begin_inset Formula $\text{FreeFi}^{F^{\bullet},A}=F^{A}+F^{1+A}+F^{1+1+A}+...$
\end_inset


\end_layout

\begin_layout Standard
Reduced encoding: 
\begin_inset Formula $\text{FreeFi}^{F^{\bullet},A}\triangleq\exists Z.F^{Z}\times\left(Z\rightarrow1+A\right)$
\end_inset

, non-recursive
\end_layout

\begin_layout Standard
Derivation: 
\begin_inset Formula $\exists Z_{1}...\exists Z_{n}.F^{Z_{n}}\times\left(Z_{n}\rightarrow1+Z_{n-1}\right)\times...\times\left(Z_{1}\rightarrow1+A\right)$
\end_inset

 is simplified using the laws of 
\family typewriter
\size footnotesize
\color blue
mapOpt
\family default
\size default
\color inherit
 and Kleisli composition, and yields 
\begin_inset Formula $\exists Z_{n}.F^{Z_{n}}\times\left(Z_{n}\rightarrow1+A\right)$
\end_inset

.
 Encode 
\begin_inset Formula $F^{A}$
\end_inset

 as 
\begin_inset Formula $\exists Z.F^{Z}\times\left(Z\rightarrow0+Z\right)$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is already a functor, the reduced encoding is 
\begin_inset Formula $\text{FreeFi}^{F^{\bullet},A}=F^{1+A}$
\end_inset


\end_layout

\begin_layout Standard
Free filterable over a filterable functor 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is not equivalent to 
\begin_inset Formula $F^{\bullet}$
\end_inset


\end_layout

\begin_layout Standard
Free filterable contrafunctor is constructed in a similar way
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Worked example VII: Free monad
\end_layout

\begin_layout Standard
Methods:
\begin_inset Formula 
\begin{align*}
\text{pure} & :A\rightarrow F^{A}\\
\text{flatMap} & :F^{A}\rightarrow(A\rightarrow F^{B})\rightarrow F^{B}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Can recover 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
 from 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
pure
\family default
\size default
\color inherit
, so we keep only 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Tree encoding: 
\size footnotesize

\begin_inset Formula $\text{FreeM}^{F^{\bullet},A}\triangleq F^{A}+A+\exists Z.\text{FreeM}^{F^{\bullet},Z}\times\big(Z\rightarrow\text{FreeM}^{F^{\bullet},A}\big)$
\end_inset


\end_layout

\begin_layout Standard
Derivation of reduced encoding: 
\end_layout

\begin_layout Standard
can simplify 
\begin_inset Formula $A\times\big(A\rightarrow\text{FreeM}^{F^{\bullet},B}\big)\cong\text{FreeM}^{F^{\bullet},B}$
\end_inset


\end_layout

\begin_layout Standard
use associativity to replace 
\begin_inset Formula $\text{FreeM}^{A}\times(A\rightarrow\text{FreeM}^{B})\times(B\rightarrow\text{FreeM}^{C})$
\end_inset

 by 
\begin_inset Formula $\text{FreeM}^{A}\times\big(A\rightarrow\text{FreeM}^{B}\times(B\rightarrow\text{FreeM}^{C})\big)$
\end_inset


\end_layout

\begin_layout Standard
therefore we can replace 
\begin_inset Formula $\exists Z.\text{FreeM}^{F^{\bullet},Z}\times...$
\end_inset

 by 
\begin_inset Formula $\exists Z.F^{Z}\times...$
\end_inset


\end_layout

\begin_layout Standard
Reduced encoding: 
\begin_inset Formula $\text{FreeM}^{F^{\bullet},A}\triangleq A+\exists Z.F^{Z}\times\big(Z\rightarrow\text{FreeM}^{F^{\bullet},A}\big)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset


\series bold
Final
\series default
 
\series bold
Tagless
\series default
 style
\begin_inset Quotes erd
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

Church encoding of free monad over 
\begin_inset Formula $F^{\bullet}$
\end_inset


\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Free monad over a functor 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is 
\begin_inset Formula $\text{FreeM}^{F^{\bullet},A}\triangleq A+F^{\text{FreeM}^{F^{\bullet},A}}$
\end_inset


\end_layout

\begin_layout Standard
Free monad 
\begin_inset Formula $\text{FreeM}^{M^{\bullet},\bullet}$
\end_inset

 over a monad 
\begin_inset Formula $M^{\bullet}$
\end_inset

 is not equivalent to 
\begin_inset Formula $M^{\bullet}$
\end_inset


\end_layout

\begin_layout Standard
Free monad over a pointed functor 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is 
\size footnotesize

\begin_inset Formula $\text{FreeM}^{F^{\bullet},A}\triangleq F^{A}+F^{\text{FreeM}^{F^{\bullet},A}}$
\end_inset


\end_layout

\begin_layout Standard
start from half-reduced encoding 
\begin_inset Formula $F^{A}+\exists Z.F^{Z}\times\big(Z\rightarrow\text{FreeM}^{F^{\bullet},A}\big)$
\end_inset

 
\end_layout

\begin_layout Standard
replace the existential type by an equivalent type 
\begin_inset Formula $F^{\text{FreeM}^{F^{\bullet},A}}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Worked example VIII: Free applicative functor
\end_layout

\begin_layout Standard
Methods:
\begin_inset Formula 
\begin{align*}
\text{pure} & :A\rightarrow F^{A}\\
\text{ap} & :F^{A}\rightarrow F^{A\rightarrow B}\rightarrow F^{B}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
We can recover 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
 from 
\family typewriter
\size footnotesize
\color blue
ap
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
pure
\family default
\size default
\color inherit
, so we omit 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Tree encoding: 
\size footnotesize

\begin_inset Formula $\text{FreeAp}^{F^{\bullet},A}\triangleq F^{A}+A+\exists Z.\text{FreeAp}^{F^{\bullet},Z}\times\text{FreeAp}^{F^{\bullet},Z\rightarrow A}$
\end_inset


\end_layout

\begin_layout Standard
Reduced encoding:
\size footnotesize
 
\begin_inset Formula $\text{FreeAp}^{F^{\bullet},A}\triangleq A+\exists Z.F^{Z}\times\text{FreeAp}^{F^{\bullet},Z\rightarrow A}$
\end_inset


\end_layout

\begin_layout Standard
Derivation: a 
\begin_inset Formula $\text{FreeAp}^{A}$
\end_inset

 is either 
\begin_inset Formula $\exists Z_{1}...\exists Z_{n}.Z_{1}\times\text{FreeAp}^{Z_{1}\rightarrow Z_{2}}\times...$
\end_inset

 or 
\begin_inset Formula $\exists Z_{1}...\exists Z_{n}.F^{Z_{1}}\times\text{FreeAp}^{Z_{1}\rightarrow Z_{2}}\times...$
\end_inset

; encode 
\begin_inset Formula $Z_{1}\times\text{FreeAp}^{Z_{1}\rightarrow Z_{2}}$
\end_inset

 equivalently as 
\begin_inset Formula $\text{FreeAp}^{Z_{1}\rightarrow Z_{2}}\times\left(\left(Z_{1}\rightarrow Z_{2}\right)\rightarrow Z_{2}\right)$
\end_inset

 using the identity law; so the first 
\begin_inset Formula $\text{FreeAp}^{Z}$
\end_inset

 is always 
\begin_inset Formula $F^{A}$
\end_inset

, or we have a pure value 
\end_layout

\begin_layout Standard
Free applicative over a functor 
\begin_inset Formula $F^{\bullet}$
\end_inset

: 
\begin_inset Formula 
\begin{align*}
\text{FreeAp}^{F^{\bullet},A} & \triangleq A+\text{FreeZ}^{F^{\bullet},A}\\
\text{FreeZ}^{F^{\bullet},A} & \triangleq F^{A}+\exists Z.F^{Z}\times\text{FreeZ}^{F^{\bullet},Z\rightarrow A}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\text{FreeZ}^{F^{\bullet},\bullet}$
\end_inset

 is the reduced encoding of 
\begin_inset Quotes eld
\end_inset

free zippable
\begin_inset Quotes erd
\end_inset

 (no 
\family typewriter
\size footnotesize
\color blue
pure
\family default
\size default
\color inherit
)
\end_layout

\begin_layout Standard
\begin_inset Formula $\text{FreeAp}^{F^{\bullet},\bullet}$
\end_inset

 over an applicative functor 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is not equivalent to 
\begin_inset Formula $F^{\bullet}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Laws for free typeclass constructions
\end_layout

\begin_layout Standard
Consider an inductive typeclass 
\begin_inset Formula $C$
\end_inset

 with methods 
\begin_inset Formula $C^{A}\rightarrow A$
\end_inset


\end_layout

\begin_layout Standard
Define a free instance of 
\begin_inset Formula $C$
\end_inset

 over 
\begin_inset Formula $Z$
\end_inset

 recursively, 
\size footnotesize

\begin_inset Formula $\text{FreeC}^{Z}\triangleq Z+C^{\text{FreeC}^{Z}}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\text{FreeC}^{Z}$
\end_inset

 has an instance of 
\begin_inset Formula $C$
\end_inset

, i.e.
\begin_inset space ~
\end_inset

we can implement 
\begin_inset Formula $C^{\text{FreeC}^{Z}}\rightarrow\text{FreeC}^{Z}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\text{FreeC}^{Z}$
\end_inset

 is a functor in 
\begin_inset Formula $Z$
\end_inset

; 
\size footnotesize

\begin_inset Formula $\text{fmap}_{\text{FreeC}}:\left(Y\rightarrow Z\right)\rightarrow\text{FreeC}^{Y}\rightarrow\text{FreeC}^{Z}$
\end_inset


\end_layout

\begin_layout Standard

\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-0.45cm}
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "64col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Itemize
For a 
\begin_inset Formula $P^{:C}$
\end_inset

 we can implement the functions 
\size footnotesize

\begin_inset Formula 
\begin{align*}
\text{run}^{P} & :\left(Z\rightarrow P\right)\rightarrow\text{FreeC}^{Z}\rightarrow P\\
\text{wrap} & :Z\rightarrow\text{FreeC}^{Z}
\end{align*}

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "36col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{1.5pc}\xyScaleX{5pc}\text{FreeC}^{Y}\ar[d]\sb(0.45){\text{fmap}\,f^{:Y\rightarrow Z}}\ar[rd]\sp(0.65){\ \text{run}\left(f\bef g\right)}\\
\text{FreeC}^{Z}\ar[r]\sp(0.5){\text{run}(g^{:Z\rightarrow P})} & P
}
\]

\end_inset


\end_layout

\end_inset


\size default

\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Standard
Law 1: 
\size footnotesize

\begin_inset Formula $\text{run}\left(\text{wrap}\right)=\text{id}$
\end_inset


\size default
; law 2: 
\size footnotesize

\begin_inset Formula $\text{fmap}\,f\bef\text{run}\,g=\text{run}\left(f\bef g\right)$
\end_inset


\size default
 (naturality of 
\family typewriter
\size footnotesize
\color blue
run
\family default
\size default
\color inherit
)
\end_layout

\begin_layout Standard
For any 
\begin_inset Formula $P^{:C},Q^{:C},g^{:Z\rightarrow P}$
\end_inset

, and a typeclass-preserving 
\begin_inset Formula $f^{:P\rightarrow Q}$
\end_inset

, we have
\size footnotesize

\begin_inset Formula 
\[
\text{run}^{P}(g)\bef f=\text{run}^{Q}\left(g\bef f\right)\quad\quad\text{– “universal property” of }\text{run}
\]

\end_inset


\begin_inset Formula 
\[
\xymatrix{\xyScaleY{2.0pc}\xyScaleX{3pc}\text{FreeC}^{Z}\ar[d]\sb(0.4){\text{run}^{P}(g^{:Z\rightarrow P})}\ar[rd]\sp(0.55){\quad\text{run}^{Q}(g\bef f)} &  &  & C^{P}\ar[d]\sb(0.4){\text{fmap}_{S}f}\ar[r]\sp(0.5){\text{ops}_{P}} & P\ar[d]\sb(0.4){f}\\
P\ar[r]\sp(0.5){f^{:P\rightarrow Q}} & Q &  & C^{Q}\ar[r]\sp(0.5){\text{ops}_{Q}} & Q
}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $f^{:P\rightarrow Q}$
\end_inset

 
\series bold
preserves typeclass
\series default
 
\begin_inset Formula $C$
\end_inset

 if the diagram on the right commutes
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Paragraph
Combining the generating constructors in a free typeclass
\end_layout

\begin_layout Standard
Consider 
\begin_inset Formula $\text{FreeC}^{Z}$
\end_inset

 for an inductive typeclass 
\begin_inset Formula $C$
\end_inset

 with methods 
\begin_inset Formula $C^{X}\rightarrow X$
\end_inset


\end_layout

\begin_layout Standard
We would like to combine generating constructors 
\begin_inset Formula $Z_{1}$
\end_inset

, 
\begin_inset Formula $Z_{2}$
\end_inset

, etc.
\end_layout

\begin_layout Standard
In a monadic DSL – combine different operations defined separately
\end_layout

\begin_layout Standard
Note: monads do not compose in general
\end_layout

\begin_layout Standard
To combine generators, use 
\begin_inset Formula $\text{FreeC}^{Z_{1}+Z_{2}}$
\end_inset

; an 
\begin_inset Quotes eld
\end_inset

instance over 
\begin_inset Formula $Z_{1}$
\end_inset

 and 
\begin_inset Formula $Z_{2}$
\end_inset


\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
but need to inject parts into disjunction, which is cumbersome
\end_layout

\begin_layout Standard
Church encoding makes this easier to manage:
\end_layout

\begin_layout Standard

\size footnotesize
\begin_inset Formula $\text{FreeC}^{Z}\triangleq\forall X.\left(Z\rightarrow X\right)\times\big(C^{X}\rightarrow X\big)\rightarrow X$
\end_inset


\size default
 and then 
\size footnotesize

\begin_inset Formula 
\[
\text{FreeC}^{Z_{1}+Z_{2}}\triangleq\forall X.\left(Z_{1}\rightarrow X\right)\times\left(Z_{2}\rightarrow X\right)\times\big(C^{X}\rightarrow X\big)\rightarrow X
\]

\end_inset


\end_layout

\begin_layout Standard
Encode the functions 
\begin_inset Formula $Z_{i}\rightarrow X$
\end_inset

 via typeclasses 
\family typewriter
\size footnotesize
\color blue
ExZ1
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
ExZ2
\family default
\size default
\color inherit
, etc., where typeclass 
\family typewriter
\size footnotesize
\color blue
ExZ1
\family default
\size default
\color inherit
 has method 
\begin_inset Formula $Z_{1}\rightarrow X$
\end_inset

, etc.
\end_layout

\begin_layout Standard
Then 
\size footnotesize

\begin_inset Formula 
\[
\text{FreeC}^{Z_{1}+Z_{2}}=\forall X^{:E_{Z_{1}}:E_{Z_{2}}}.\big(C^{X}\rightarrow X\big)\rightarrow X
\]

\end_inset


\size default
or equivalently
\size footnotesize

\begin_inset Formula 
\[
\text{FreeC}^{Z_{1}+Z_{2}}=\forall X^{:C~:E_{Z_{1}}:E_{Z_{2}}}.X
\]

\end_inset


\end_layout

\begin_layout Standard
The code is easier to maintain
\end_layout

\begin_layout Standard
This works for all typeclasses 
\begin_inset Formula $C$
\end_inset

 and any number of generators 
\begin_inset Formula $Z_{i}$
\end_inset


\end_layout

\begin_layout Paragraph
Combining different free typeclasses
\end_layout

\begin_layout Standard
To combine free instances of different typeclasses 
\begin_inset Formula $C_{1}$
\end_inset

 and 
\begin_inset Formula $C_{2}$
\end_inset

:
\end_layout

\begin_layout Standard
Option 1: use functor composition, 
\begin_inset Formula $\text{FreeC}_{12}^{Z}\triangleq\text{FreeC}_{1}^{\text{FreeC}_{2}^{Z}}$
\end_inset


\end_layout

\begin_layout Standard
Order of composition matters!
\end_layout

\begin_layout Standard
Operations of 
\begin_inset Formula $C_{2}$
\end_inset

 need to be lifted into 
\begin_inset Formula $C_{1}$
\end_inset


\end_layout

\begin_layout Standard
Works only for inductive typeclasses
\end_layout

\begin_layout Standard
Encodes 
\begin_inset Formula $C_{1}^{C_{2}}$
\end_inset

 but not 
\begin_inset Formula $C_{2}^{C_{1}}$
\end_inset


\end_layout

\begin_layout Standard
Option 2: use disjunction of method functors, 
\begin_inset Formula $C^{X}\triangleq C_{1}^{X}+C_{2}^{X}$
\end_inset

, and build the free typeclass instance using 
\begin_inset Formula $C^{X}$
\end_inset


\end_layout

\begin_layout Standard
Church encoding: 
\begin_inset Formula $\text{FreeC}_{12}^{Z}\triangleq\forall X.\left(Z\rightarrow X\right)\times\big(C_{1}^{X}+C_{2}^{X}\rightarrow X\big)\rightarrow X$
\end_inset


\end_layout

\begin_layout Standard
Example 1: 
\begin_inset Formula $C_{1}$
\end_inset

 is functor, 
\begin_inset Formula $C_{2}$
\end_inset

 is contrafunctor
\end_layout

\begin_layout Standard
Interpret a free functor/contrafunctor into a profunctor
\end_layout

\begin_layout Standard
Example 2: 
\begin_inset Formula $C_{1}$
\end_inset

 is monad, 
\begin_inset Formula $C_{2}$
\end_inset

 is applicative functor
\end_layout

\begin_layout Standard
Interpret into a monad that has a non-standard 
\family typewriter
\size footnotesize
\color blue
zip
\family default
\size default
\color inherit
 implementation
\end_layout

\begin_layout Standard
Example: interpret into 
\family typewriter
\size footnotesize
\color blue
Future
\family default
\size default
\color inherit
 and convert 
\family typewriter
\size footnotesize
\color blue
zip
\family default
\size default
\color inherit
 into parallel execution
\end_layout

\begin_layout Standard
Each 
\family typewriter
\size footnotesize
\color blue
zip
\family default
\size default
\color inherit
 creates parallel branch, each 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 creates sequential chain
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Subsection
Exercises
\end_layout

\begin_layout Subsubsection
Exercise 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercise-free-monad-example"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-free-monad-example"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
exercises
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\series bold
interactive input-output
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
monads!interactive input-output monad
\end_layout

\end_inset

 monad is defined recursively by:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sealed trait TIO[A]
\end_layout

\begin_layout Plain Layout

final case class Pure[A](a: A) extends TIO[A]
\end_layout

\begin_layout Plain Layout

final case class Read[A](read: P => TIO[A]) extends TIO[A]
\end_layout

\begin_layout Plain Layout

final case class Write[A](output: Q, next: TIO[A]) extends TIO[A]
\end_layout

\end_inset

In the type notation, this is written as:
\begin_inset Formula 
\[
\text{TIO}^{A}\triangleq A+(P\rightarrow\text{TIO}^{A})+Q\times\text{TIO}^{A}\quad,
\]

\end_inset

Here 
\begin_inset Formula $P$
\end_inset

 and 
\begin_inset Formula $Q$
\end_inset

 are fixed types.
 The monad 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

TIO
\end_layout

\end_inset

 represents computations that may consume an input value of type 
\begin_inset Formula $P$
\end_inset

 or produce an output value of type 
\begin_inset Formula $Q$
\end_inset

.
 Use the free monad construction to show that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

TIO
\end_layout

\end_inset

 is a lawful monad.
 Implement a monad instance for 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

TIO
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Exercise 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercise-free-type-1"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-free-type-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Implement a free semigroup on a type 
\begin_inset Formula $Z$
\end_inset

 in the tree encoding and in the reduced encoding.
 Show that the semigroup laws hold for the reduced encoding but 
\emph on
not
\emph default
 for the tree encoding.
 Show that the laws hold for the tree encoding after interpreting into a
 lawful semigroup 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Exercise 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercise-free-type-2"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-free-type-2"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
For a fixed monoid 
\begin_inset Formula $L$
\end_inset

, define a typeclass 
\begin_inset Formula $\text{Mod}_{L}$
\end_inset

 (called 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $L$
\end_inset

-module
\begin_inset Quotes erd
\end_inset

).
 Type 
\begin_inset Formula $P$
\end_inset

 is an 
\begin_inset Formula $L$
\end_inset

-module if the monoid 
\begin_inset Formula $L$
\end_inset

 
\begin_inset Quotes eld
\end_inset

acts
\begin_inset Quotes erd
\end_inset

 on 
\begin_inset Formula $P$
\end_inset

 via a function act
\begin_inset Formula $:L\rightarrow P\rightarrow P$
\end_inset

, with laws 
\begin_inset Formula $\text{act}\,x\bef\text{act}\,y=\text{act}\left(x\bef y\right)$
\end_inset

 and 
\begin_inset Formula $\text{act}\left(e_{L}\right)=\text{id}$
\end_inset

.
 Show that 
\begin_inset Formula $\text{Mod}_{L}$
\end_inset

 is an inductive typeclass.
 Implement a free 
\begin_inset Formula $L$
\end_inset

-module on a type 
\begin_inset Formula $Z$
\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Exercise 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercise-free-type-3"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-free-type-3"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 Implement a monadic DSL with operations 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

put: A => Unit
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

get: Unit => A
\end_layout

\end_inset

.
 These operations should store and retrieve a state value of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

.
 Test on some example programs written in that DSL.
 
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 Implement a monadic DSL with operations 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

put: A => Unit
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

get: Unit => Option[A]
\end_layout

\end_inset

, and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

clear: Unit => Unit
\end_layout

\end_inset

.
 These operations should store and retrieve a state value of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

.
 Running 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

clear
\end_layout

\end_inset

 should delete the state value.
 When there is no state value, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

get
\end_layout

\end_inset

 should return 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

None
\end_layout

\end_inset

.
 Test on some example programs.
\end_layout

\begin_layout Subsubsection
Exercise 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercise-free-type-4"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-free-type-4"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Implement the Church encoding of the type constructor 
\begin_inset Formula $P^{A}\triangleq\text{Int}+A\times A$
\end_inset

.
 For the resulting type constructor, implement a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Functor
\end_layout

\end_inset

 instance.
\end_layout

\begin_layout Subsubsection
Exercise 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercise-free-type-5"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-free-type-5"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Describe the monoid type class via a method functor 
\begin_inset Formula $C^{\bullet}$
\end_inset

 (such that the monoid's operations are combined into the type 
\begin_inset Formula $S^{M}\rightarrow M$
\end_inset

).
 Using 
\begin_inset Formula $S^{\bullet}$
\end_inset

, implement the free monoid on a type 
\begin_inset Formula $Z$
\end_inset

 in the Church encoding.
\end_layout

\begin_layout Subsubsection
Exercise 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercise-free-type-6"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-free-type-6"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Assuming that 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is a functor, define 
\begin_inset Formula $Q^{A}\triangleq\exists Z.F^{Z}\times\left(Z\rightarrow A\right)$
\end_inset

 and implement 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

f2q
\end_layout

\end_inset


\begin_inset Formula $:F^{A}\rightarrow Q^{A}$
\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

q2f
\end_layout

\end_inset


\begin_inset Formula $:Q^{A}\rightarrow F^{A}$
\end_inset

.
 Show that these functions are natural transformations, and that they are
 inverses of each other 
\begin_inset Quotes eld
\end_inset

observationally
\begin_inset Quotes erd
\end_inset

, i.e., after applying 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

q2f
\end_layout

\end_inset

 in order to compare values of 
\begin_inset Formula $Q^{A}$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Exercise 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercise-free-type-7"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-free-type-7"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Prove the following type equivalences involving quantified types:
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 
\begin_inset Formula $\forall A.\,A\times A\cong\bbnum 0\quad.$
\end_inset


\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 
\begin_inset Formula $\forall A.\,\left(A\times A\times A\rightarrow A\right)\cong\bbnum 1+\bbnum 1+\bbnum 1\quad.$
\end_inset


\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 
\begin_inset Formula $\exists Z.\,Z\cong\bbnum 1\quad.$
\end_inset


\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 
\begin_inset Formula $\exists Z.\,Z\times\left(A\rightarrow Z\right)\times\left(Z\rightarrow B\right)\cong B\times\left(A\rightarrow B\right)\quad.$
\end_inset


\end_layout

\begin_layout Subsubsection
Exercise 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercise-free-type-9-1"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-free-type-9-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

*
\end_layout

\begin_layout Standard
Prove the following type equivalences involving quantified type constructors
 (the types 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

, 
\begin_inset Formula $D$
\end_inset

 are fixed):
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 
\begin_inset Formula $\forall F^{\bullet}.\,F^{A}\cong\bbnum 0\quad.$
\end_inset


\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 
\begin_inset Formula $\forall F^{\bullet}.\,F^{A}\rightarrow B\cong B\quad.$
\end_inset


\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 
\begin_inset Formula $\forall F^{\bullet}.\,F^{A}\rightarrow F^{B}\cong A\rightarrow B\quad.$
\end_inset


\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 
\begin_inset Formula $\forall F^{\bullet}.\,\left(A\rightarrow F^{B}\right)\rightarrow C+F^{D}\cong C+A\times\left(B\rightarrow D\right)\quad.$
\end_inset


\end_layout

\begin_layout Standard

\series bold
(e)
\series default
 
\begin_inset Formula $\forall F^{\bullet}.\,\left(A\rightarrow F^{B}\right)\rightarrow C\rightarrow F^{D}\cong\left(C\rightarrow A\right)\times\left(C\times B\rightarrow D\right)\quad.$
\end_inset


\end_layout

\begin_layout Subsubsection
Exercise 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercise-free-type-8"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-free-type-8"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Derive a reduced encoding for a free applicative functor on a pointed functor.
\end_layout

\begin_layout Subsubsection
Exercise 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercise-free-type-9"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-free-type-9"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Implement a 
\begin_inset Quotes eld
\end_inset

free pointed filterable
\begin_inset Quotes erd
\end_inset

 typeclass (combining pointed and filterable) on a type constructor 
\begin_inset Formula $F^{\bullet}$
\end_inset

 in the tree encoding.
 Derive a reduced encoding.
 Simplify these encodings when 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is already a functor.
\end_layout

\begin_layout Paragraph
Corrections
\end_layout

\begin_layout Standard
The slides say that the 
\begin_inset Quotes eld
\end_inset

universal property
\begin_inset Quotes erd
\end_inset

 of the runner is 
\begin_inset Formula $\text{run}^{P}g\bef f=\text{run}^{Q}\left(g\bef f\right)$
\end_inset

, however, this is not true; it is the right naturality property of 
\begin_inset Formula $\text{run}^{P}:\left(Z\rightarrow P\right)\rightarrow\text{FreeC}^{Z}\rightarrow P$
\end_inset

 with respect to the type parameter 
\begin_inset Formula $P$
\end_inset

.
 The universal property is 
\begin_inset Formula $f=\text{wrap}\bef\text{run}^{P}f$
\end_inset

 for any 
\begin_inset Formula $f:Z\rightarrow P$
\end_inset

 and any type 
\begin_inset Formula $P$
\end_inset

 that belongs to the typeclass 
\begin_inset Formula $C$
\end_inset

.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

logarithm
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $\text{Lg}\,(F^{\bullet})\triangleq\forall A.\,F^{A}\rightarrow A$
\end_inset

 is an operation with bizarre properties.
 Examples: 
\begin_inset Formula $\forall A.\,\left(Z\rightarrow A\right)\rightarrow A\cong Z$
\end_inset

, so 
\begin_inset Formula $\text{Lg}\,(Z\rightarrow\bullet)=Z$
\end_inset

.
 This might motivate the name 
\begin_inset Quotes eld
\end_inset

logarithm
\begin_inset Quotes erd
\end_inset

.
 But 
\begin_inset Formula $\text{Lg}\,(F^{\bullet}+G^{\bullet})=\text{Lg}\,(F)\times\text{Lg}\,(G)$
\end_inset

, which resembles the distributive law for the 
\emph on
exponential
\emph default
 function rather than for the logarithm.
 Also, 
\begin_inset Formula $\forall A.\,(Z\times A\times A)\rightarrow A\cong Z\times\bbnum 2$
\end_inset

, so 
\begin_inset Formula $\text{Lg}\,(Z\times(\bbnum 2\rightarrow\bullet))=Z\times\bbnum 2$
\end_inset

.
 However, for a constant functor, 
\begin_inset Formula $\text{Lg}\,(Z)=\bbnum 0$
\end_inset

.
 This shows that 
\begin_inset Formula $\text{Lg}\,(F^{\bullet}\times G^{\bullet})\not\cong\text{Lg}\,(F)\times\text{Lg}\,(G)$
\end_inset

.
 We also have 
\begin_inset Formula $\text{Lg}\,(\text{Opt})=\bbnum 0$
\end_inset

.
\end_layout

\begin_layout Section
Properties of free constructions
\end_layout

\begin_layout Subsection
Free monad
\end_layout

\begin_layout Standard
The free monad on a functor 
\begin_inset Formula $F$
\end_inset

 is defined by
\begin_inset Formula 
\[
\text{Free}^{F,A}\triangleq A+F^{\text{Free}^{F,A}}\quad.
\]

\end_inset

It was shown in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-monad-construction-4-free-monad"
plural "false"
caps "false"
noprefix "false"

\end_inset

 that 
\begin_inset Formula $\text{Free}^{F,A}$
\end_inset

 is a lawful monad for any functor 
\begin_inset Formula $F$
\end_inset

.
 We will now derive some further properties of the free monad construction.
\end_layout

\begin_layout Standard
The next statement shows that one can change the underlying functor 
\begin_inset Formula $F$
\end_inset

 while preserving the free monad operations.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-free-monad-monadic-naturality"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-free-monad-monadic-naturality"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The free monad 
\begin_inset Formula $\text{Free}^{F}$
\end_inset

 is natural in the functor 
\begin_inset Formula $F$
\end_inset

: for any functor 
\begin_inset Formula $G$
\end_inset

 and any natural transformation 
\begin_inset Formula $\phi:F^{A}\rightarrow G^{A}$
\end_inset

, the corresponding transformation 
\begin_inset Formula $\psi(\phi):\text{Free}^{F,A}\rightarrow\text{Free}^{G,A}$
\end_inset

 defined by
\begin_inset Formula 
\[
\psi(\phi):\text{Free}^{F,A}\rightarrow\text{Free}^{G,A}\quad,\quad\quad\psi\triangleq\,\begin{array}{|c||cc|}
 & A & G^{\text{Free}^{G,A}}\\
\hline A & \text{id} & \bbnum 0\\
F^{\text{Free}^{F,A}} & \bbnum 0 & \overline{\psi}^{\uparrow F}\bef\phi
\end{array}
\]

\end_inset

is a monad morphism.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
Since 
\begin_inset Formula $\phi$
\end_inset

 is fixed, we can write 
\begin_inset Formula $\psi(\phi)$
\end_inset

 as simply 
\begin_inset Formula $\psi$
\end_inset

 for brevity.
 Denote 
\begin_inset Formula $P\triangleq\text{Free}^{F}$
\end_inset

 and 
\begin_inset Formula $Q\triangleq\text{Free}^{G}$
\end_inset

; we need to show that 
\begin_inset Formula $\psi:P\leadsto Q$
\end_inset

 is a monad morphism.
\end_layout

\begin_layout Standard
To verify the identity law:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\text{pu}_{Q}:\quad & \text{pu}_{P}\bef\psi=\,\begin{array}{|c||cc|}
 & A & F^{P^{A}}\\
\hline A & \text{id} & \bbnum 0
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & A & G^{Q^{A}}\\
\hline A & \text{id} & \bbnum 0\\
F^{P^{A}} & \bbnum 0 & \overline{\psi}^{\uparrow F}\bef\phi
\end{array}\\
 & =\,\begin{array}{|c||cc|}
 & A & G^{Q^{A}}\\
\hline A & \text{id} & \bbnum 0
\end{array}\,=\text{pu}_{Q}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
To verify the composition law, write the two sides separately:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & \text{ftn}_{P}\bef\psi=\,\begin{array}{|c||cc|}
 & A & F^{P^{A}}\\
\hline A & \text{id} & \bbnum 0\\
F^{P^{A}} & \bbnum 0 & \text{id}\\
F^{P^{P^{A}}} & \bbnum 0 & \overline{\text{ftn}}_{P}^{\uparrow F}
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & A & G^{Q^{A}}\\
\hline A & \text{id} & \bbnum 0\\
F^{P^{A}} & \bbnum 0 & \overline{\psi}^{\uparrow F}\bef\phi
\end{array}\\
 & \quad=\,\begin{array}{|c||cc|}
 & A & G^{Q^{A}}\\
\hline A & \text{id} & \bbnum 0\\
F^{P^{A}} & \bbnum 0 & \overline{\psi}^{\uparrow F}\bef\phi\\
F^{P^{P^{A}}} & \bbnum 0 & \overline{\text{ftn}}_{P}^{\uparrow F}\bef\overline{\psi}^{\uparrow F}\bef\phi
\end{array}\quad,\\
\text{right-hand side}:\quad & \psi^{\uparrow P}\bef\psi\bef\text{ftn}_{Q}=\,\begin{array}{|c||ccc|}
 & A & G^{Q^{A}} & F^{P^{Q^{A}}}\\
\hline A & \text{id} & \bbnum 0 & \bbnum 0\\
F^{P^{A}} & \bbnum 0 & \psi^{\uparrow F}\bef\phi & \bbnum 0\\
F^{P^{P^{A}}} & \bbnum 0 & \bbnum 0 & \overline{\psi}^{\uparrow P\uparrow F}
\end{array}\,\bef\,\begin{array}{|c||ccc|}
 & A & G^{Q^{A}} & G^{Q^{Q^{A}}}\\
\hline A & \text{id} & \bbnum 0 & \bbnum 0\\
G^{Q^{A}} & \bbnum 0 & \text{id} & \bbnum 0\\
F^{P^{Q^{A}}} & \bbnum 0 & \bbnum 0 & \overline{\psi}^{\uparrow F}\bef\phi
\end{array}\,\bef\text{ftn}_{Q}\\
 & =\,\begin{array}{|c||ccc|}
 & A & G^{Q^{A}} & G^{Q^{Q^{A}}}\\
\hline A & \text{id} & \bbnum 0 & \bbnum 0\\
F^{P^{A}} & \bbnum 0 & \psi^{\uparrow F}\bef\phi & \bbnum 0\\
F^{P^{P^{A}}} & \bbnum 0 & \bbnum 0 & \overline{\psi}^{\uparrow P\uparrow F}\bef\overline{\psi}^{\uparrow F}\bef\phi
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & A & G^{Q^{A}}\\
\hline A & \text{id} & \bbnum 0\\
G^{Q^{A}} & \bbnum 0 & \text{id}\\
G^{Q^{Q^{A}}} & \bbnum 0 & \overline{\text{ftn}}_{Q}^{\uparrow G}
\end{array}\\
 & =\,\,\begin{array}{|c||cc|}
 & A & G^{Q^{A}}\\
\hline A & \text{id} & \bbnum 0\\
F^{P^{A}} & \bbnum 0 & \psi^{\uparrow F}\bef\phi\\
F^{P^{P^{A}}} & \bbnum 0 & \overline{\psi}^{\uparrow P\uparrow F}\bef\overline{\psi}^{\uparrow F}\bef\phi\bef\overline{\text{ftn}}_{Q}^{\uparrow G}
\end{array}\quad.
\end{align*}

\end_inset

The remaining difference is between the last rows of the matrices:
\begin_inset Formula 
\[
\overline{\text{ftn}}_{P}^{\uparrow F}\bef\overline{\psi}^{\uparrow F}\bef\phi\overset{?}{=}\overline{\psi}^{\uparrow P\uparrow F}\bef\overline{\psi}^{\uparrow F}\bef\phi\bef\overline{\text{ftn}}_{Q}^{\uparrow G}\quad.
\]

\end_inset

By the inductive assumption, the law already holds for recursive calls of
 
\begin_inset Formula $\overline{\psi}$
\end_inset

:
\begin_inset Formula 
\[
\text{ftn}_{P}\bef\overline{\psi}=\overline{\psi}^{\uparrow P}\bef\overline{\psi}\bef\text{ftn}_{Q}\quad.
\]

\end_inset

So, it remains to show that
\begin_inset Formula 
\[
(\overline{\psi}^{\uparrow P}\bef\overline{\psi}\bef\text{ftn}_{Q}\big)^{\uparrow F}\bef\phi\overset{?}{=}\overline{\psi}^{\uparrow P\uparrow F}\bef\overline{\psi}^{\uparrow F}\bef\phi\bef\overline{\text{ftn}}_{Q}^{\uparrow G}\quad.
\]

\end_inset

This holds due to the naturality law of 
\begin_inset Formula $\phi$
\end_inset

, in the form 
\begin_inset Formula $\phi\bef f^{\uparrow G}=f^{\uparrow F}\bef\phi$
\end_inset

.
 This concludes the proof.
\end_layout

\begin_layout Standard
Heuristically, a free monad on a functor 
\begin_inset Formula $F$
\end_inset

 will wrap 
\begin_inset Formula $F$
\end_inset

 in a more complicated type constructor such that the resulting type has
 the required monad operations.
 If 
\begin_inset Formula $F$
\end_inset

 is already a monad, constructing the free monad on 
\begin_inset Formula $F$
\end_inset

 is unnecessary.
 Indeed, a value of type 
\begin_inset Formula $\text{Free}^{F,A}$
\end_inset

 can be always mapped back to 
\begin_inset Formula $F^{A}$
\end_inset

 while preserving the monad operations:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-free-monad-on-a-monad-mapped"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-free-monad-on-a-monad-mapped"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Assume that 
\begin_inset Formula $F$
\end_inset

 is itself a monad, and denote 
\begin_inset Formula $T\triangleq\text{Free}^{F}$
\end_inset

 for brevity.
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 There is a monad morphism 
\begin_inset Formula $p:T^{A}\rightarrow F^{A}$
\end_inset

 defined by
\begin_inset Formula 
\[
p\triangleq\,\begin{array}{|c||c|}
 & F^{A}\\
\hline A & \text{pu}_{F}\\
F^{T^{A}} & \overline{p}^{\uparrow F}\bef\text{ftn}_{F}
\end{array}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 The function 
\begin_inset Formula $q:F^{A}\rightarrow T^{A}$
\end_inset

 defined by 
\begin_inset Formula $q(f)\triangleq\bbnum 0+f\triangleright(a^{:A}\rightarrow a+\bbnum 0)^{\uparrow F}$
\end_inset

 is 
\emph on
not
\emph default
 a monad morphism.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 To verify the identity law of 
\begin_inset Formula $p$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\text{pu}_{F}:\quad & \text{pu}_{T}\bef p=\,\begin{array}{|c||cc|}
 & A & F^{T^{A}}\\
\hline A & \text{id} & \bbnum 0
\end{array}\,\bef\,\begin{array}{|c||c|}
 & F^{A}\\
\hline A & \text{pu}_{F}\\
F^{T^{A}} & \overline{p}^{\uparrow F}\bef\text{ftn}_{F}
\end{array}\,=\text{pu}_{F}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
To verify the composition law, write its two sides separately:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & \text{ftn}_{T}\bef p=\,\begin{array}{|c||cc|}
 & A & F^{T^{A}}\\
\hline A & \text{id} & \bbnum 0\\
F^{T^{A}} & \bbnum 0 & \text{id}\\
F^{T^{T^{A}}} & \bbnum 0 & \overline{\text{ftn}}_{T}^{\uparrow F}
\end{array}\,\bef\,\begin{array}{|c||c|}
 & F^{A}\\
\hline A & \text{pu}_{F}\\
F^{T^{A}} & \overline{p}^{\uparrow F}\bef\text{ftn}_{F}
\end{array}\,=\,\begin{array}{|c||c|}
 & F^{A}\\
\hline A & \text{pu}_{F}\\
F^{T^{A}} & \overline{p}^{\uparrow F}\bef\text{ftn}_{F}\\
F^{T^{T^{A}}} & \overline{\text{ftn}}_{T}^{\uparrow F}\bef\overline{p}^{\uparrow F}\bef\text{ftn}_{F}
\end{array}\quad,\\
\text{right-hand side}:\quad & p^{\uparrow T}\bef p\bef\text{ftn}_{F}=\,\begin{array}{|c||cc|}
 & F^{A} & F^{T^{F^{A}}}\\
\hline A & \text{pu}_{F} & \bbnum 0\\
F^{T^{A}} & \overline{p}^{\uparrow F}\bef\text{ftn}_{F} & \bbnum 0\\
F^{T^{T^{A}}} & \bbnum 0 & \overline{p}^{\uparrow T\uparrow F}
\end{array}\,\bef\,\begin{array}{|c||c|}
 & F^{F^{A}}\\
\hline F^{A} & \text{pu}_{F}\\
F^{T^{F^{A}}} & \overline{p}^{\uparrow F}\bef\text{ftn}_{F}
\end{array}\,\bef\text{ftn}_{F}\\
 & \quad=\,\begin{array}{|c||c|}
 & F^{A}\\
\hline A & \text{pu}_{F}\bef\gunderline{\text{pu}_{F}\bef\text{ftn}_{F}}\\
F^{T^{A}} & \overline{p}^{\uparrow F}\bef\text{ftn}_{F}\bef\gunderline{\text{pu}_{F}\bef\text{ftn}_{F}}\\
F^{T^{T^{A}}} & \overline{p}^{\uparrow T\uparrow F}\bef\overline{p}^{\uparrow F}\bef\gunderline{\text{ftn}_{F}\bef\text{ftn}_{F}}
\end{array}\,=\,\begin{array}{|c||c|}
 & F^{A}\\
\hline A & \text{pu}_{F}\\
F^{T^{A}} & \overline{p}^{\uparrow F}\bef\text{ftn}_{F}\\
F^{T^{T^{A}}} & \overline{p}^{\uparrow T\uparrow F}\bef\overline{p}^{\uparrow F}\bef\text{ftn}_{F}^{\uparrow F}\bef\text{ftn}_{F}
\end{array}\quad.
\end{align*}

\end_inset

The last two matrices differ only in the last rows, and the difference is
\begin_inset Formula 
\[
\overline{\text{ftn}}_{T}^{\uparrow F}\bef\overline{p}^{\uparrow F}\overset{?}{=}\overline{p}^{\uparrow T\uparrow F}\bef\overline{p}^{\uparrow F}\bef\text{ftn}_{F}^{\uparrow F}\quad.
\]

\end_inset

Omitting the lifting to 
\begin_inset Formula $F$
\end_inset

, we get:
\begin_inset Formula 
\[
\overline{\text{ftn}}_{T}\bef\overline{p}\overset{?}{=}\overline{p}^{\uparrow T}\bef\overline{p}\bef\text{ftn}_{F}\quad.
\]

\end_inset

This holds by the inductive assumption that the recursive calls to 
\begin_inset Formula $\overline{p}$
\end_inset

 already obey the composition law.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 The function 
\begin_inset Formula $q\triangleq f\rightarrow\bbnum 0+f\triangleright(x\rightarrow x+\bbnum 0)^{\uparrow F}$
\end_inset

 fails the monad morphism identity law.
 Given 
\begin_inset Formula $f\triangleq\text{pu}_{F}(a)$
\end_inset

, we compute: 
\begin_inset Formula 
\[
q(f)=\bbnum 0+a\triangleright\text{pu}_{F}\triangleright(x\rightarrow x+\bbnum 0)^{\uparrow F}=\bbnum 0+a\triangleright(x\rightarrow x+\bbnum 0)\triangleright\text{pu}_{F}=\bbnum 0+\text{pu}_{F}(a+\bbnum 0)\quad.
\]

\end_inset

However, the expected value is 
\begin_inset Formula $\text{pu}_{T}(a)=a+\bbnum 0$
\end_inset

, which cannot equal  
\begin_inset Formula $\bbnum 0+\text{pu}_{F}(a+\bbnum 0)$
\end_inset

.
\end_layout

\begin_layout Section
Working with quantified types
\end_layout

\begin_layout Subsection
The Yoneda identities
\end_layout

\begin_layout Standard
The following statement shows that the equivalence between the type 
\begin_inset Formula $\forall X.\,\left(A\rightarrow X\right)\rightarrow X$
\end_inset

 and the type 
\begin_inset Formula $A$
\end_inset

 can be generalized to involve an arbitrary functor 
\begin_inset Formula $F$
\end_inset

.
 The Church encoding of a simple type is then regarded as a particular case
 of the Yoneda identity where the functor 
\begin_inset Formula $F$
\end_inset

 is chosen as the identity functor.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-covariant-yoneda-identity-for-types"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-covariant-yoneda-identity-for-types"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (covariant Yoneda identity)
\begin_inset Index idx
status open

\begin_layout Plain Layout
Yoneda identity!covariant
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $A$
\end_inset

 is any fixed type and 
\begin_inset Formula $F^{\bullet}$
\end_inset

 is any functor, the type 
\begin_inset Formula $F^{A}$
\end_inset

 is equivalent to the function type 
\begin_inset Formula $\forall X.\,(A\rightarrow X)\rightarrow F^{X}$
\end_inset

, where the functions of that type are additionally required to be natural
 transformations between the functors 
\begin_inset Formula $A\rightarrow\bullet$
\end_inset

 and 
\begin_inset Formula $F^{\bullet}$
\end_inset

.
 (The naturality law will be satisfied automatically if those functions
 are implemented using fully parametric code.)
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
The isomorphism between the two types is implemented via two functions 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

toC
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fromC
\end_layout

\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{toC}:F^{A}\rightarrow\forall X.\,(A\rightarrow X)\rightarrow F^{X}\quad, & \quad\quad\text{toC}\triangleq p^{:F^{A}}\rightarrow\forall X.\,g^{:A\rightarrow X}\rightarrow p\triangleright g^{\uparrow F}\quad,\\
\text{fromC}:(\forall X.\,(A\rightarrow X)\rightarrow F^{X})\rightarrow F^{A}\quad, & \quad\quad\text{fromC}\triangleq q^{:\forall X.\,(A\rightarrow X)\rightarrow F^{X}}\rightarrow q^{A}(\text{id}^{:A\rightarrow A})\quad.
\end{align*}

\end_inset

In the last line, the function 
\begin_inset Formula $q$
\end_inset

 is required to be a natural transformation between functors 
\begin_inset Formula $A\rightarrow\bullet$
\end_inset

 and 
\begin_inset Formula $F^{\bullet}$
\end_inset

, where 
\begin_inset Formula $X$
\end_inset

 is a type parameter of 
\begin_inset Formula $q$
\end_inset

.
 To apply 
\begin_inset Formula $q$
\end_inset

 to an argument 
\begin_inset Formula $\text{id}$
\end_inset

 of type 
\begin_inset Formula $A\rightarrow A$
\end_inset

 in the last line, we set 
\begin_inset Formula $q$
\end_inset

's type parameter 
\begin_inset Formula $X$
\end_inset

 as 
\begin_inset Formula $X=A$
\end_inset

.
 This is indicated by the superscript 
\begin_inset Formula $A$
\end_inset

 in 
\begin_inset Formula $q^{A}$
\end_inset

.
 
\end_layout

\begin_layout Standard
We need to show that 
\begin_inset Formula $\text{fromC}\bef\text{toC}=\text{id}$
\end_inset

 and 
\begin_inset Formula $\text{toC}\bef\text{fromC}=\text{id}$
\end_inset

.
 To verify that 
\begin_inset Formula $\text{fromC}\bef\text{toC}=\text{id}$
\end_inset

, apply both sides to an arbitrary function 
\begin_inset Formula $q^{:\forall X.\,(A\rightarrow X)\rightarrow F^{X}}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }q:\quad & \gunderline{q^{:\forall X.\,(A\rightarrow X)\rightarrow F^{X}}\triangleright\text{fromC}}\bef\text{toC}=q^{A}(\text{id})\triangleright\text{toC}=\forall X.\,g^{:A\rightarrow X}\rightarrow q^{A}(\text{id})\triangleright g^{\uparrow F}\quad.
\end{align*}

\end_inset

To proceed, we use the assumption that 
\begin_inset Formula $q$
\end_inset

 satisfies a naturality law: for any 
\begin_inset Formula $r^{:A\rightarrow B}$
\end_inset

 and 
\begin_inset Formula $f^{:B\rightarrow C}$
\end_inset

, 
\begin_inset Formula 
\begin{equation}
q^{B}(r)\triangleright f^{\uparrow F}=q^{C}(r\bef f)\quad.\label{eq:assumed-naturality-of-argument-q}
\end{equation}

\end_inset

Applying this law with 
\begin_inset Formula $B=A$
\end_inset

, 
\begin_inset Formula $C=X$
\end_inset

, 
\begin_inset Formula $f=g$
\end_inset

, and 
\begin_inset Formula $r=\text{id}$
\end_inset

, we get
\begin_inset Formula 
\[
q^{A}(\text{id})\triangleright g^{\uparrow F}=q^{X}(\text{id}\bef g)=q^{X}(g)\quad.
\]

\end_inset

We can now show that the function 
\begin_inset Formula $q\triangleright\text{fromC}\bef\text{toC}$
\end_inset

 is the same as 
\begin_inset Formula $q$
\end_inset

:
\begin_inset Formula 
\[
q\triangleright\text{fromC}\bef\text{toC}=\forall X.\,g^{:A\rightarrow X}\rightarrow\gunderline{q^{A}(\text{id})\triangleright g^{\uparrow F}}=\forall X.\,\gunderline{g^{:A\rightarrow X}\rightarrow g\,\triangleright}\,q^{X}=\forall X.\,q^{X}=q\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
To verify that 
\begin_inset Formula $\text{toC}\bef\text{fromC}=\text{id}$
\end_inset

, apply both sides to an arbitrary 
\begin_inset Formula $p^{:F^{A}}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }p:\quad & \gunderline{p^{:F^{A}}\triangleright\text{toC}}\bef\text{fromC}=(\forall X.\,g^{:A\rightarrow X}\rightarrow p\triangleright g^{\uparrow F})\triangleright\text{fromC}\\
 & =(g^{:A\rightarrow A}\rightarrow p\triangleright g^{\uparrow F})(\text{id}^{:A\rightarrow A})=p\triangleright\text{id}^{\uparrow F}=p\quad.
\end{align*}

\end_inset

It remains to check that the function 
\begin_inset Formula $q^{X}\triangleq g^{:A\rightarrow X}\rightarrow p\triangleright g^{\uparrow F}$
\end_inset

, used as an argument of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fromC
\end_layout

\end_inset

, is always a natural transformation.
 To verify the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:assumed-naturality-of-argument-q"
plural "false"
caps "false"
noprefix "false"

\end_inset

): 
\begin_inset Formula 
\begin{align*}
\text{expect to equal }q^{C}(r\bef f):\quad & q^{B}(r)\triangleright f^{\uparrow F}=p\triangleright r^{\uparrow F}\triangleright f^{\uparrow F}=p\triangleright r^{\uparrow F}\bef f^{\uparrow F}=p\triangleright(r\bef f)^{\uparrow F}=q^{C}(r\bef f)\quad.
\end{align*}

\end_inset

This completes the proof of the covariant Yoneda identity.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
A similar type equivalence holds for contrafunctors:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-contravariant-yoneda-identity-for-types"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-contravariant-yoneda-identity-for-types"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (contravariant Yoneda identity
\begin_inset Index idx
status open

\begin_layout Plain Layout
Yoneda identity!contravariant
\end_layout

\end_inset

)
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $A$
\end_inset

 is a fixed type and 
\begin_inset Formula $H^{\bullet}$
\end_inset

 is any contrafunctor, the type 
\begin_inset Formula $H^{A}$
\end_inset

 is equivalent to the function type 
\begin_inset Formula $\forall X.\,(X\rightarrow A)\rightarrow H^{X}$
\end_inset

, where the functions of that type are additionally required to be natural
 transformations between the contrafunctors 
\begin_inset Formula $\bullet\rightarrow A$
\end_inset

 and 
\begin_inset Formula $H^{\bullet}$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
The isomorphism between the two types is implemented via two functions 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

toC
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fromC
\end_layout

\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{toC}:H^{A}\rightarrow\forall X.\,(X\rightarrow A)\rightarrow H^{X}\quad, & \quad\quad\text{toC}\triangleq p^{:H^{A}}\rightarrow\forall X.\,g^{:X\rightarrow A}\rightarrow p\triangleright g^{\downarrow H}\quad,\\
\text{fromC}:(\forall X.\,(X\rightarrow A)\rightarrow H^{X})\rightarrow H^{A}\quad, & \quad\quad\text{fromC}\triangleq q^{:\forall X.\,(X\rightarrow A)\rightarrow H^{X}}\rightarrow q^{A}(\text{id}^{:A\rightarrow A})\quad.
\end{align*}

\end_inset

In the last line, the function 
\begin_inset Formula $q$
\end_inset

 is required to be a natural transformation between contrafunctors 
\begin_inset Formula $X\rightarrow A$
\end_inset

 and 
\begin_inset Formula $F^{X}$
\end_inset

, where 
\begin_inset Formula $X$
\end_inset

 is a type parameter of 
\begin_inset Formula $q$
\end_inset

.
\end_layout

\begin_layout Standard
We need to show that 
\begin_inset Formula $\text{fromC}\bef\text{toC}=\text{id}$
\end_inset

 and 
\begin_inset Formula $\text{toC}\bef\text{fromC}=\text{id}$
\end_inset

.
 To verify that 
\begin_inset Formula $\text{fromC}\bef\text{toC}=\text{id}$
\end_inset

, apply both sides to an arbitrary function 
\begin_inset Formula $q^{:\forall X.\,(X\rightarrow A)\rightarrow H^{X}}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }q:\quad & \gunderline{q^{:\forall X.\,(X\rightarrow A)\rightarrow H^{X}}\triangleright\text{fromC}}\bef\text{toC}=q^{A}(\text{id})\triangleright\text{toC}=\forall X.\,g^{:X\rightarrow A}\rightarrow q^{A}(\text{id})\triangleright g^{\downarrow H}\quad.
\end{align*}

\end_inset

By assumption, 
\begin_inset Formula $q$
\end_inset

 satisfies a naturality law: for any 
\begin_inset Formula $r^{:B\rightarrow A}$
\end_inset

 and 
\begin_inset Formula $f^{:C\rightarrow B}$
\end_inset

, 
\begin_inset Formula 
\begin{equation}
q^{B}(r)\triangleright f^{\downarrow H}=q^{C}(f\bef r)\quad.\label{eq:assumed-naturality-of-argument-q-contravariant}
\end{equation}

\end_inset

Applying this law with 
\begin_inset Formula $B=A$
\end_inset

, 
\begin_inset Formula $C=X$
\end_inset

, 
\begin_inset Formula $f=g$
\end_inset

, and 
\begin_inset Formula $r=\text{id}$
\end_inset

, we get
\begin_inset Formula 
\[
q^{A}(\text{id})\triangleright g^{\downarrow H}=q^{X}(g\bef\text{id})=q^{X}(g)\quad.
\]

\end_inset

We can now show that the function 
\begin_inset Formula $q\triangleright\text{fromC}\bef\text{toC}$
\end_inset

 is the same as 
\begin_inset Formula $q$
\end_inset

:
\begin_inset Formula 
\[
q\triangleright\text{fromC}\bef\text{toC}=\forall X.\,g^{:X\rightarrow A}\rightarrow q^{X}(g)=\forall X.\,q^{X}=q\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
To verify that 
\begin_inset Formula $\text{toC}\bef\text{fromC}=\text{id}$
\end_inset

, apply both sides to an arbitrary 
\begin_inset Formula $p^{:H^{A}}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }p:\quad & \gunderline{p^{:H^{A}}\triangleright\text{toC}}\bef\text{fromC}=(\forall X.\,g^{:X\rightarrow A}\rightarrow p\triangleright g^{\downarrow H})\triangleright\text{fromC}\\
 & =(g^{:A\rightarrow A}\rightarrow p\triangleright g^{\downarrow H})(\text{id}^{:A\rightarrow A})=p\triangleright\text{id}^{\downarrow H}=p\quad.
\end{align*}

\end_inset

Finally, we check that the function 
\begin_inset Formula $q^{X}\triangleq g^{:X\rightarrow A}\rightarrow p\triangleright g^{\downarrow H}$
\end_inset

, used as an argument of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fromC
\end_layout

\end_inset

, is always a natural transformation.
 To verify the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:assumed-naturality-of-argument-q-contravariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

): 
\begin_inset Formula 
\begin{align*}
\text{expect to equal }q^{C}(f\bef r):\quad & q^{B}(r)\triangleright f^{\downarrow H}=p\triangleright r^{\downarrow H}\bef f^{\downarrow H}=p\triangleright(f\bef r)^{\downarrow H}=q^{C}(f\bef r)\quad.
\end{align*}

\end_inset

This completes the proof of the contravariant Yoneda identity.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
The Yoneda identities can be extended to many other contexts.
 For instance, a Yoneda identity holds for types parameterized by a type
 constructor:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-covariant-yoneda-identity-for-type-constructors"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-covariant-yoneda-identity-for-type-constructors"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (covariant Yoneda identity for functors)
\begin_inset Index idx
status open

\begin_layout Plain Layout
Yoneda identity!for functors
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Assume that 
\begin_inset Formula $P^{\bullet}$
\end_inset

 is any type constructor and 
\begin_inset Formula $S^{F}$
\end_inset

 is a higher-order functor, i.e., 
\begin_inset Formula $S$
\end_inset

 depends covariantly on an arbitrary type constructor 
\begin_inset Formula $F^{\bullet}$
\end_inset

.
 (An example of such 
\begin_inset Formula $S$
\end_inset

 is 
\begin_inset Formula $S^{F}\triangleq F^{\text{Int}}\times F^{\text{String}}$
\end_inset

.) Then the type 
\begin_inset Formula $S^{P}$
\end_inset

 is equivalent to the function type 
\begin_inset Formula $\forall F^{\bullet}.\,(P^{\bullet}\leadsto F^{\bullet})\rightarrow S^{F}$
\end_inset

, where the function is required to be natural in the parameter 
\begin_inset Formula $F^{\bullet}$
\end_inset

 (while its argument, of type 
\begin_inset Formula $P^{\bullet}\leadsto F^{\bullet}$
\end_inset

, is 
\emph on
not
\emph default
 required to be a natural transformation since 
\begin_inset Formula $P$
\end_inset

 and 
\begin_inset Formula $F$
\end_inset

 are not required to be functors).
 The corresponding naturality law for functions 
\begin_inset Formula $\sigma$
\end_inset

 of type 
\begin_inset Formula $\forall F^{\bullet}.\,(P^{\bullet}\leadsto F^{\bullet})\rightarrow S^{F}$
\end_inset

 involves arbitrary type constructors 
\begin_inset Formula $Q^{\bullet}$
\end_inset

, 
\begin_inset Formula $R^{\bullet}$
\end_inset

, and arbitrary functions 
\begin_inset Formula $f:P^{\bullet}\leadsto Q^{\bullet}$
\end_inset

 and 
\begin_inset Formula $g:Q^{\bullet}\leadsto R^{\bullet}$
\end_inset

, and may be written as
\begin_inset Formula 
\begin{equation}
\sigma^{Q}(f)\bef g^{\uparrow S}=\sigma^{R}(f\bef g)\quad.\label{eq:assumed-naturality-of-argument-sigma}
\end{equation}

\end_inset

Here, 
\begin_inset Formula $g^{\uparrow S}$
\end_inset

 has type 
\begin_inset Formula $S^{Q}\rightarrow S^{R}$
\end_inset

 and is a lifting of the function 
\begin_inset Formula $g:Q^{\bullet}\leadsto R^{\bullet}$
\end_inset

 to the higher-order functor 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
The isomorphism is implemented via two functions 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

toC
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fromC
\end_layout

\end_inset

,
\begin_inset Formula 
\begin{align*}
\text{toC}:S^{P}\rightarrow\forall F.\,(P\leadsto F)\rightarrow S^{F}\quad, & \quad\quad\text{toC}\triangleq s^{:S^{P}}\rightarrow\forall F.\,g^{:P\leadsto F}\rightarrow s\triangleright g^{\uparrow S}\quad,\\
\text{fromC}:(\forall F.\,(P\leadsto F)\rightarrow S^{F})\rightarrow S^{P}\quad, & \quad\quad\text{fromC}\triangleq\sigma^{:\forall F.\,(P\leadsto F)\rightarrow S^{F}}\rightarrow\sigma^{P}(\text{id}^{:P\leadsto P})\quad.
\end{align*}

\end_inset

In the last line, the function 
\begin_inset Formula $\sigma$
\end_inset

 is required to be natural in its type parameter 
\begin_inset Formula $Q$
\end_inset

.
\end_layout

\begin_layout Standard
We need to show that 
\begin_inset Formula $\text{fromC}\bef\text{toC}=\text{id}$
\end_inset

 and 
\begin_inset Formula $\text{toC}\bef\text{fromC}=\text{id}$
\end_inset

.
 To verify that 
\begin_inset Formula $\text{fromC}\bef\text{toC}=\text{id}$
\end_inset

, apply both sides to an arbitrary function 
\begin_inset Formula $\sigma^{:\forall F.\,(P\leadsto F)\rightarrow S^{F}}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\sigma:\quad & \sigma^{:\forall F.\,(P\leadsto F)\rightarrow S^{F}}\triangleright\text{fromC}\bef\text{toC}=\sigma^{P}(\text{id})\triangleright\text{toC}=\forall F.\,g^{:P\leadsto F}\rightarrow\sigma^{P}(\text{id})\triangleright g^{\uparrow S}\quad.
\end{align*}

\end_inset

Since by assumption 
\begin_inset Formula $\sigma$
\end_inset

 satisfies the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:assumed-naturality-of-argument-sigma"
plural "false"
caps "false"
noprefix "false"

\end_inset

), we may apply that law with 
\begin_inset Formula $Q=P$
\end_inset

, 
\begin_inset Formula $R=F$
\end_inset

, and 
\begin_inset Formula $f=\text{id}$
\end_inset

:
\begin_inset Formula 
\[
\sigma^{P}(\text{id})\bef g^{\uparrow S}=\sigma^{F}(\text{id}\bef g)=F^{F}(g)\quad.
\]

\end_inset

It follows that the function 
\begin_inset Formula $\sigma\triangleright\text{fromC}\bef\text{toC}$
\end_inset

 is the same as 
\begin_inset Formula $\sigma$
\end_inset

:
\begin_inset Formula 
\[
\sigma\triangleright\text{fromC}\bef\text{toC}=\forall F.\,g^{:P\leadsto F}\rightarrow\sigma^{F}(g)=\forall F.\,\sigma^{F}=\sigma\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
To verify that 
\begin_inset Formula $\text{toC}\bef\text{fromC}=\text{id}$
\end_inset

, apply both sides to an arbitrary 
\begin_inset Formula $s^{:S^{P}}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }s:\quad & s^{:S^{P}}\triangleright\text{toC}\bef\text{fromC}=s\triangleright\text{toC}\triangleright\text{fromC}=(\forall F.\,g^{:P\leadsto F}\rightarrow s\triangleright g^{\uparrow S})\triangleright\text{fromC}\\
 & =(g^{:P\leadsto P}\rightarrow s\triangleright g^{\uparrow S})(\text{id}^{:P\leadsto P})=s\triangleright\text{id}^{\uparrow S}=s\quad.
\end{align*}

\end_inset

It remains to check that the function 
\begin_inset Formula $\sigma^{F}\triangleq g^{:P\leadsto F}\rightarrow s\triangleright g^{\uparrow S}$
\end_inset

, used as an argument of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fromC
\end_layout

\end_inset

, is natural in 
\begin_inset Formula $F$
\end_inset

.
 To verify the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:assumed-naturality-of-argument-sigma"
plural "false"
caps "false"
noprefix "false"

\end_inset

): 
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\sigma^{R}(f\bef g):\quad & \sigma^{Q}(f)\bef g^{\uparrow S}=s\triangleright f^{\uparrow S}\bef g^{\uparrow S}=s\triangleright(f\bef g)^{\uparrow S}=\sigma^{R}(f\bef g)\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subsection
Recursive type equations with different fixpoints
\end_layout

\begin_layout Standard
A recursive type is usually defined as a fixpoint of a functor; that is,
 a solution of a type equation
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursive type equation
\end_layout

\end_inset

 of the form 
\begin_inset Formula $T\cong F^{T}$
\end_inset

, where 
\begin_inset Formula $F$
\end_inset

 is a 
\begin_inset Quotes eld
\end_inset

structure functor
\begin_inset Quotes erd
\end_inset

 that specifies the details of the type recursion.
 A solution of the type equation 
\begin_inset Formula $T\cong F^{T}$
\end_inset

 is a type 
\begin_inset Formula $T$
\end_inset

 that is equivalent to 
\begin_inset Formula $F^{T}$
\end_inset

 via two isomorphisms:
\begin_inset Formula 
\[
\text{fix}:F^{T}\rightarrow T\quad,\quad\quad\text{unfix}:T\rightarrow F^{T}\quad,\quad\quad\text{fix}\bef\text{unfix}=\text{id}\quad,\quad\text{unfix}\bef\text{fix}=\text{id}\quad.
\]

\end_inset

Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Recursive-types-and-the-existence-of-their-values"
plural "false"
caps "false"
noprefix "false"

\end_inset

 gave a condition for implementability of such types 
\begin_inset Formula $T$
\end_inset

.
 We will now consider the question of whether there can be several fixpoint
 
\begin_inset Formula $T$
\end_inset

.
\end_layout

\begin_layout Standard
If a functor has several 
\emph on
inequivalent
\emph default
 fixpoints 
\begin_inset Formula $T_{1}$
\end_inset

, 
\begin_inset Formula $T_{2}$
\end_inset

, etc., it means that each 
\begin_inset Formula $T_{i}$
\end_inset

 separately satisfies the fixpoint equation 
\begin_inset Formula $T\cong F^{T}$
\end_inset

.
 An example is the fixpoint equation for the 
\begin_inset Quotes eld
\end_inset

lazy list
\begin_inset Quotes erd
\end_inset

:
\begin_inset Formula 
\begin{equation}
L^{A}\cong\bbnum 1+(\bbnum 1\rightarrow A\times L^{A})\quad.\label{eq:fixpoint-type-equation-for-oncall-list}
\end{equation}

\end_inset

We may also write the same equation using a structure functor 
\begin_inset Formula $F$
\end_inset

:
\begin_inset Formula 
\[
L^{A}\cong F^{A,L^{A}}\quad,\quad\quad F^{A,R}\triangleq\bbnum 1+(\bbnum 1\rightarrow A\times R)\quad.
\]

\end_inset

A solution of this fixpoint equation can be visualized (non-rigorously)
 as the type
\begin_inset Formula 
\[
L^{A}=F^{A,F^{A,F^{A,...}}}=\bbnum 1+(\bbnum 1\rightarrow A\times(\bbnum 1+(\bbnum 1\rightarrow A\times(...))))\quad,
\]

\end_inset

representing an 
\begin_inset Quotes eld
\end_inset

on-call
\begin_inset Quotes erd
\end_inset

 list of values of type 
\begin_inset Formula $A$
\end_inset

.
 To get the next value of type 
\begin_inset Formula $A$
\end_inset

, one must run a function call.
 In this way, the elements of the on-call list are computed only when needed.
 It could happen that a value of type 
\begin_inset Formula $L^{A}$
\end_inset

 will 
\emph on
never
\emph default
 stop yielding new values of type 
\begin_inset Formula $A$
\end_inset

 if we keep requesting the next elements of the list.
\end_layout

\begin_layout Standard
To see that the fixpoint equation
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:fixpoint-type-equation-for-oncall-list"
plural "false"
caps "false"
noprefix "false"

\end_inset

) has (at least) three inequivalent solutions, consider a function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

toList
\end_layout

\end_inset

 that converts a value of type 
\begin_inset Formula $L^{A}$
\end_inset

 into a sequence of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List[A]
\end_layout

\end_inset

, whose elements are eagerly evaluated.
 The function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

toList
\end_layout

\end_inset

 keeps recursively requesting new elements of the on-call list and accumulates
 the resulting values of type 
\begin_inset Formula $A$
\end_inset

:
\begin_inset Formula 
\[
\text{toList}:L^{A}\rightarrow\text{List}^{A}\quad,\quad\quad\text{toList}\triangleq\begin{array}{|c||cc|}
 & \bbnum 1 & \bbnum 1+A\times\text{List}^{A}\\
\hline \bbnum 1 & \text{id} & \bbnum 0\\
\bbnum 1\rightarrow A\times L^{A} & \bbnum 0 & p\rightarrow p(1)\triangleright(\text{id}\boxtimes\overline{\text{toList}})
\end{array}\quad.
\]

\end_inset

Does this function terminate? It is clear that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

toList
\end_layout

\end_inset

 will terminate only if the on-call list eventually stops yielding new values
 of type 
\begin_inset Formula $A$
\end_inset

.
 On the other hand, if the on-call list never stops yielding new values
 of type 
\begin_inset Formula $A$
\end_inset

, the function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

toList
\end_layout

\end_inset

 will not terminate.
 So, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

toList
\end_layout

\end_inset

 must be a partial function.
 
\end_layout

\begin_layout Standard
Let us denote by 
\begin_inset Formula $L_{\text{fin}}^{A}$
\end_inset

 the type corresponding to 
\begin_inset Quotes eld
\end_inset

finite
\begin_inset Quotes erd
\end_inset

 on-call lists, i.e., on-call lists that eventually stop yielding new values
 of type 
\begin_inset Formula $A$
\end_inset

.
 Then the function
\begin_inset Formula 
\[
\text{toList}:L_{\text{fin}}^{A}\rightarrow\text{List}^{A}
\]

\end_inset

is total.
 On-call lists of type 
\begin_inset Formula $L_{\text{fin}}^{A}$
\end_inset

 contain a finite number of values and thus are equivalent to eager lists.
 To make this equivalence formal, we may define isomorphism functions 
\begin_inset Formula $\text{toList}:L_{\text{fin}}^{A}\rightarrow\text{List}^{A}$
\end_inset

 and 
\begin_inset Formula $\text{fromList}:\text{List}^{A}\rightarrow L_{\text{fin}}^{A}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Let us also denote by 
\begin_inset Formula $L_{\text{inf}}^{A}$
\end_inset

 the type corresponding to 
\begin_inset Quotes eld
\end_inset

infinite
\begin_inset Quotes erd
\end_inset

 on-call lists, i.e., those that 
\emph on
never
\emph default
 stop yielding new values of type 
\begin_inset Formula $A$
\end_inset

.
 The function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

toList
\end_layout

\end_inset

 does not terminate for arguments of type 
\begin_inset Formula $L_{\text{inf}}^{A}$
\end_inset

, because a list (of type 
\begin_inset Formula $\text{List}^{A}$
\end_inset

) cannot contain infinitely many values.
 So, the types 
\begin_inset Formula $L_{\text{fin}}^{A}$
\end_inset

 and 
\begin_inset Formula $L_{\text{inf}}^{A}$
\end_inset

 are 
\emph on
not
\emph default
 equivalent.
 Were they equivalent, we would have an isomorphism 
\begin_inset Formula $q:L_{\text{inf}}^{A}\rightarrow L_{\text{fin}}^{A}$
\end_inset

, and then we could compose 
\begin_inset Formula $q$
\end_inset

 with 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

toList
\end_layout

\end_inset

 to obtain a function 
\begin_inset Formula $\text{toList}:L_{\text{inf}}^{A}\rightarrow\text{List}^{A}$
\end_inset

 that terminates, which is impossible.
\end_layout

\begin_layout Standard
To show that both types (
\begin_inset Formula $L_{\text{fin}}^{A}$
\end_inset

 and 
\begin_inset Formula $L_{\text{inf}}^{A}$
\end_inset

) satisfy the fixpoint type equation
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:fixpoint-type-equation-for-oncall-list"
plural "false"
caps "false"
noprefix "false"

\end_inset

), we can implement the corresponding isomorphisms 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fix
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

unfix
\end_layout

\end_inset

.
 Each of these functions will either add or remove one element at the beginning
 of the list.
 These operations keep finite lists finite and infinite lists infinite.
 So, a composition (such as, 
\begin_inset Formula $\text{unfix}\bef\text{fix}$
\end_inset

) of these isomorphisms will act as an identity function on 
\begin_inset Formula $L_{\text{fin}}^{A}$
\end_inset

 or on 
\begin_inset Formula $L_{\text{inf}}^{A}$
\end_inset

.
\end_layout

\begin_layout Standard
The type 
\begin_inset Formula $L^{A}$
\end_inset

 is an on-call list that may or may not terminate.
 So, 
\begin_inset Formula $L^{A}$
\end_inset

 is equivalent to a disjunction 
\begin_inset Formula $L_{\text{fin}}^{A}+L_{\text{inf}}^{A}$
\end_inset

.
 We see that the type equation
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:fixpoint-type-equation-for-oncall-list"
plural "false"
caps "false"
noprefix "false"

\end_inset

) has three inequivalent solutions: 
\begin_inset Formula $L_{\text{fin}}^{A}$
\end_inset

, 
\begin_inset Formula $L_{\text{inf}}^{A}$
\end_inset

, and 
\begin_inset Formula $L^{A}$
\end_inset

.
\end_layout

\begin_layout Standard
Some fixpoints represent 
\begin_inset Quotes eld
\end_inset

larger
\begin_inset Quotes erd
\end_inset

 types than other fixpoints.
 For instance, 
\begin_inset Formula $L^{A}$
\end_inset

 is 
\begin_inset Quotes eld
\end_inset

larger
\begin_inset Quotes erd
\end_inset

 than either of 
\begin_inset Formula $L_{\text{fin}}^{A}$
\end_inset

 and 
\begin_inset Formula $L_{\text{inf}}^{A}$
\end_inset

.
 To see this formally, we consider the functions 
\begin_inset Formula $f_{1}:L_{\text{fin}}^{A}\rightarrow L^{A}$
\end_inset

 and 
\begin_inset Formula $f_{2}:L_{\text{inf}}^{A}\rightarrow L^{A}$
\end_inset

.
 The function 
\begin_inset Formula $f_{1}$
\end_inset

 embeds values of type 
\begin_inset Formula $L_{\text{fin}}^{A}$
\end_inset

 (finite lists) in the type 
\begin_inset Formula $L^{A}$
\end_inset

 that includes both finite and infinite lists.
 It is clear that 
\begin_inset Formula $f_{1}$
\end_inset

 is injective; the same holds also for 
\begin_inset Formula $f_{2}$
\end_inset

.
\end_layout

\begin_layout Standard
Additionally, we can show that the functions 
\begin_inset Formula $f_{1}$
\end_inset

 and 
\begin_inset Formula $f_{2}$
\end_inset

 preserve the fixpoint structure of the types.
 ***
\end_layout

\begin_layout Subsection
The Church encoding of recursive types
\end_layout

\begin_layout Standard
Any given type can be represented in a 
\series bold
Church encoding
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Church encoding
\end_layout

\end_inset

, which is a function type with a universally quantified type parameter.
 A simple Church encoding is given by the type equivalence
\begin_inset Formula 
\[
T\cong\forall X.\,\left(T\rightarrow X\right)\rightarrow X\quad,
\]

\end_inset

which follows from the covariant Yoneda identity (Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-covariant-yoneda-identity-for-types"
plural "false"
caps "false"
noprefix "false"

\end_inset

 with the functor 
\begin_inset Formula $F\triangleq\text{Id}$
\end_inset

).
 
\end_layout

\begin_layout Standard
There is rarely an advantage in replacing a simple type 
\begin_inset Formula $T$
\end_inset

 by a more complicated function type, 
\begin_inset Formula $\forall X.\,(T\rightarrow X)\rightarrow X$
\end_inset

.
 However, the Church encoding has a different form when 
\begin_inset Formula $T$
\end_inset

 is a recursive type.
\end_layout

\begin_layout Standard
Consider a recursive type 
\begin_inset Formula $T$
\end_inset

 defined by a fixpoint equation 
\begin_inset Formula $T\triangleq F^{T}$
\end_inset

 with a given structure functor 
\begin_inset Formula $F$
\end_inset

.
 We could write a Church encoding for 
\begin_inset Formula $T$
\end_inset

 as 
\begin_inset Formula $\forall X.\,(T\rightarrow X)\rightarrow X$
\end_inset

 or as 
\begin_inset Formula $\forall X.\,(F^{T}\rightarrow X)\rightarrow X$
\end_inset

, but these encodings give no advantages.
 It turns out that another, more useful Church encoding for 
\begin_inset Formula $T$
\end_inset

 is:
\begin_inset Formula 
\begin{equation}
T\cong\forall X.\,(F^{X}\rightarrow X)\rightarrow X\quad\text{if the type }T\text{ is defined by }T\triangleq F^{T}\quad.\label{eq:Church-encoding-recursive-type}
\end{equation}

\end_inset

The Scala code for the type 
\begin_inset Formula $\forall X.\,(F^{X}\rightarrow X)\rightarrow X$
\end_inset

 is:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

trait TC[F[_]] { def run[X](fold: F[X] => X): X }
\end_layout

\end_inset

In this section, we will study the type equivalence
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Church-encoding-recursive-type"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Note that the Yoneda lemma cannot be used to prove Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Church-encoding-recursive-type"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 The Yoneda lemma only applies to types of the form 
\begin_inset Formula $\forall X.\,(A\rightarrow X)\rightarrow F^{X}$
\end_inset

, where the type 
\begin_inset Formula $A$
\end_inset

 cannot depend on the quantified type 
\begin_inset Formula $X$
\end_inset

.
 
\end_layout

\begin_layout Standard
The following statement
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See also the papers 
\begin_inset Quotes eld
\end_inset

A note on strong dinaturality
\begin_inset Quotes erd
\end_inset

 (
\family typewriter

\begin_inset CommandInset href
LatexCommand href
name "http://www.cs.ioc.ee/~tarmo/papers/fics10.pdf"
target "https://web.archive.org/web/20110601105059/http://www.cs.ioc.ee/~tarmo/papers/fics10.pdf"
literal "false"

\end_inset


\family default
) and 
\begin_inset Quotes eld
\end_inset

Build, augment, and destroy universally
\begin_inset Quotes erd
\end_inset

 (
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://kodu.ut.ee/~varmo/papers/aplas04.ps.gz"
literal "false"

\end_inset


\family default
).
\end_layout

\end_inset

 shows that the Church encoding
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Church-encoding-recursive-type"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is a fixpoint:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-Church-encoding-recursive-type-covariant"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-Church-encoding-recursive-type-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
For a given structure functor 
\begin_inset Formula $F$
\end_inset

, define the type 
\begin_inset Formula $T$
\end_inset

 as
\begin_inset Formula 
\[
T\triangleq\forall X.\,(F^{X}\rightarrow X)\rightarrow X\quad.
\]

\end_inset

Additionally, we require all values 
\begin_inset Formula $t$
\end_inset

 of type 
\begin_inset Formula $T$
\end_inset

 to satisfy the strong dinaturality law,
\begin_inset Index idx
status open

\begin_layout Plain Layout
strong dinaturality law!of Church encoding
\end_layout

\end_inset

 which for the given type 
\begin_inset Formula $T$
\end_inset

 has the following form: for any 
\begin_inset Formula $r^{:F^{A}\rightarrow A}$
\end_inset

, 
\begin_inset Formula $s^{:F^{B}\rightarrow B}$
\end_inset

, and 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\text{if }\quad r\bef f=f^{\uparrow F}\bef s\quad\text{ then }\quad r\triangleright t^{A}\triangleright f=s\triangleright t^{B}\quad.\label{eq:strong-dinaturality-for-church-encoded-fix-unfix}
\end{equation}

\end_inset

(Strong dinaturality holds for all fully parametric functions of type 
\begin_inset Formula $T$
\end_inset

.
 This follows from Example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-strong-dinaturality-for-some-type-signatures"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c) with 
\begin_inset Formula $G^{A}\triangleq A$
\end_inset

 and 
\begin_inset Formula $H^{A}\triangleq A$
\end_inset

.) Defined in this way, the type 
\begin_inset Formula $T$
\end_inset

 is a solution of the fixpoint equation 
\begin_inset Formula $T\cong F^{T}$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
We will use typed holes to derive the code for the isomorphisms
\begin_inset Formula 
\[
\text{fix}:F^{T}\rightarrow T\quad,\quad\quad\text{unfix}:T\rightarrow F^{T}\quad.
\]

\end_inset

Begin by writing out the type signature of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fix
\end_layout

\end_inset

 and an implementation with a typed hole:
\begin_inset Formula 
\begin{align*}
 & \text{fix}:F^{\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow\forall Y.\,(F^{Y}\rightarrow Y)\rightarrow Y\quad,\\
 & \text{fix}\triangleq f^{:F^{\forall X.\,(F^{X}\rightarrow X)\rightarrow X}}\rightarrow\forall Y.\,q^{:F^{Y}\rightarrow Y}\rightarrow\text{???}^{:Y}\quad.
\end{align*}

\end_inset

The only way of computing a value of type 
\begin_inset Formula $Y$
\end_inset

 is to apply 
\begin_inset Formula $q$
\end_inset

 to an argument of type 
\begin_inset Formula $F^{Y}$
\end_inset

:
\begin_inset Formula 
\[
\text{fix}=f^{:F^{\forall X.\,(F^{X}\rightarrow X)\rightarrow X}}\rightarrow\forall Y.\,q^{:F^{Y}\rightarrow Y}\rightarrow\big(\text{???}^{:F^{Y}}\big)\triangleright q\quad.
\]

\end_inset

The functor 
\begin_inset Formula $F$
\end_inset

 is arbitrary, so the only way of computing a value of type 
\begin_inset Formula $F^{Y}$
\end_inset

 is to use the given value 
\begin_inset Formula $f$
\end_inset

 with a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map
\end_layout

\end_inset

 method (the only method we can use with any functor 
\begin_inset Formula $F$
\end_inset

):
\begin_inset Formula 
\[
\text{???}^{:F^{Y}}=f\triangleright(p^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow\text{???}^{:Y})^{\uparrow F}\quad.
\]

\end_inset

Since the type parameter 
\begin_inset Formula $X$
\end_inset

 is universally quantified inside 
\begin_inset Formula $p$
\end_inset

, we may set 
\begin_inset Formula $X$
\end_inset

 to any type as needed.
 So, we set 
\begin_inset Formula $X=Y$
\end_inset

 and use the given value 
\begin_inset Formula $q^{:F^{Y}\rightarrow Y}$
\end_inset

 to fill the typed hole:
\begin_inset Formula 
\[
\text{???}^{:F^{Y}}=f\triangleright(p^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow q\triangleright p^{Y})^{\uparrow F}\quad.
\]

\end_inset

This allows us to complete the code of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fix
\end_layout

\end_inset

:
\begin_inset Formula 
\[
\text{fix}\triangleq f^{:F^{\forall X.\,(F^{X}\rightarrow X)\rightarrow X}}\rightarrow\forall Y.\,q^{:F^{Y}\rightarrow Y}\rightarrow f\triangleright\big(p^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow q\triangleright p^{Y}\big)^{\uparrow F}\triangleright q\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
We turn to implementing 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

unfix
\end_layout

\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \text{unfix}:\big(\forall Y.\,(F^{Y}\rightarrow Y)\rightarrow Y\big)\rightarrow F^{\forall X.\,(F^{X}\rightarrow X)\rightarrow X\big)}\quad,\\
 & \text{unfix}\triangleq t^{:\forall Y.\,(F^{Y}\rightarrow Y)\rightarrow Y}\rightarrow\text{???}^{:F^{T}}\quad.
\end{align*}

\end_inset

The only way of filling the typed hole 
\begin_inset Formula $\text{???}^{:F^{T}}$
\end_inset

 is to apply 
\begin_inset Formula $t^{Y}$
\end_inset

 while setting the type parameter 
\begin_inset Formula $Y$
\end_inset

 to 
\begin_inset Formula $F^{T}$
\end_inset

:
\begin_inset Formula 
\[
\text{unfix}=t^{:\forall Y.\,(F^{Y}\rightarrow Y)\rightarrow Y}\rightarrow t^{F^{T}}\big(\text{???}^{:F^{F^{T}}\rightarrow F^{T}}\big)\quad.
\]

\end_inset

We can now fill the typed hole 
\begin_inset Formula $\text{???}^{:F^{F^{T}}\rightarrow F^{T}}$
\end_inset

 by lifting 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fix
\end_layout

\end_inset

 to the functor 
\begin_inset Formula $F$
\end_inset

:
\begin_inset Formula 
\[
\text{unfix}\triangleq t^{:\forall Y.\,(F^{Y}\rightarrow Y)\rightarrow Y}\rightarrow t^{F^{T}}\big(\text{fix}^{\uparrow F}\big)\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
It remains to show that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fix
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

unfix
\end_layout

\end_inset

 are inverses.
 Start with one direction:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }t:\quad & t^{:T}\triangleright\text{unfix}\bef\text{fix}=t^{F^{T}}(\text{fix}^{\uparrow F})\triangleright\text{fix}\\
 & =\forall Y.\,q^{:F^{Y}\rightarrow Y}\rightarrow\text{fix}^{\uparrow F}\triangleright t^{F^{T}}\triangleright\big(p^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow q\triangleright p^{Y}\big)^{\uparrow F}\triangleright q\quad.
\end{align*}

\end_inset

The resulting function will be equal to 
\begin_inset Formula $t$
\end_inset

 if we show that it gives the same result when applied to an arbitrary argument
 
\begin_inset Formula $q^{:F^{Y}\rightarrow Y}$
\end_inset

 (where the type parameter 
\begin_inset Formula $Y$
\end_inset

 is free):
\begin_inset Formula 
\begin{equation}
\text{fix}^{\uparrow F}\triangleright t^{F^{T}}\triangleright\big(p^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow p^{Y}(q)\big)^{\uparrow F}\triangleright q\overset{?}{=}t^{Y}(q^{:F^{Y}\rightarrow Y})\quad.\label{eq:unfix-fix-identity-derivation1}
\end{equation}

\end_inset

To proceed, we need to use the strong dinaturality law of 
\begin_inset Formula $t$
\end_inset

 with suitable 
\begin_inset Formula $r$
\end_inset

, 
\begin_inset Formula $s$
\end_inset

, and 
\begin_inset Formula $f$
\end_inset

:
\begin_inset Formula 
\begin{equation}
r^{:F^{A}\rightarrow A}\triangleright t^{A}\triangleright f^{:A\rightarrow B}=s^{:F^{B}\rightarrow B}\triangleright t^{B}\quad.\label{eq:unfix-fix-strong-dinaturality-derivation1}
\end{equation}

\end_inset

This law will reproduce Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:unfix-fix-identity-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) if we choose 
\begin_inset Formula $r$
\end_inset

, 
\begin_inset Formula $s$
\end_inset

, and 
\begin_inset Formula $f$
\end_inset

 such that
\begin_inset Formula 
\[
r=\text{fix}^{\uparrow F}\quad,\quad\quad f=\big(p^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow q\triangleright p^{Y}\big)^{\uparrow F}\bef q\quad,\quad\quad s=q\quad.
\]

\end_inset

For these equations to hold, the type parameters 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 must be set appropriately in Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:unfix-fix-strong-dinaturality-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 The type of 
\begin_inset Formula $\text{fix}^{\uparrow F}$
\end_inset

 is 
\begin_inset Formula $F^{F^{T}}\rightarrow F^{T}$
\end_inset

, which means that 
\begin_inset Formula $A=F^{T}$
\end_inset

.
 The type of 
\begin_inset Formula $q$
\end_inset

 is 
\begin_inset Formula $F^{Y}\rightarrow Y$
\end_inset

, so 
\begin_inset Formula $B=Y$
\end_inset

.
 This agrees with the type of 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

.
 So, the strong dinaturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:unfix-fix-strong-dinaturality-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) will yield Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:unfix-fix-identity-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) as long as the chosen variables satisfy the condition
\begin_inset Formula 
\[
r\bef f\overset{?}{=}f^{\uparrow F}\bef s\quad.
\]

\end_inset

It remains to verify that the last line holds.
 Substituting the values of the variables, we get:
\begin_inset Formula 
\begin{align*}
 & \text{fix}^{\uparrow F}\bef f\overset{?}{=}f^{\uparrow F}\bef q\quad,\\
\text{or equivalently}:\quad & \text{fix}^{\uparrow F}\bef\big(p^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow q\triangleright p^{Y}\big)^{\uparrow F}\bef q\overset{?}{=}\big(p^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow q\triangleright p^{Y}\big)^{\uparrow F\uparrow F}\bef q^{\uparrow F}\bef q\quad.
\end{align*}

\end_inset

Evaluate the function composition in the left-hand side, and make both sides
 equal:
\begin_inset Formula 
\begin{align*}
 & \gunderline{\text{fix}}^{\uparrow F}\bef\big(p^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow q\triangleright p^{Y}\big)^{\uparrow F}\bef q\\
\text{expand function}:\quad & =\big((f^{:F^{T}}\rightarrow f\triangleright\text{fix})\bef(p\rightarrow q\triangleright p^{Y})\big)^{\uparrow F}\bef q=\big(f^{:F^{T}}\rightarrow q\triangleright(f\triangleright\gunderline{\text{fix}})^{Y}\big)^{\uparrow F}\bef q\\
\text{definition of }\text{fix}:\quad & =\big(\gunderline{f^{:F^{T}}\rightarrow f\,\triangleright}\,(p\rightarrow q\triangleright p^{Y})^{\uparrow F}\bef q\big)^{\uparrow F}\bef q=\big((p\rightarrow q\triangleright p^{Y})^{\uparrow F}\bef q\big)^{\uparrow F}\bef q\quad.
\end{align*}

\end_inset

The last expression is equal to the right-hand side.
\end_layout

\begin_layout Standard
This proves one direction of the isomorphism between 
\begin_inset Formula $T$
\end_inset

 and 
\begin_inset Formula $F^{T}$
\end_inset

 (
\begin_inset Formula $\text{unfix}\bef\text{fix}=\text{id}$
\end_inset

).
 
\end_layout

\begin_layout Standard
To verify the opposite direction of the isomorphism, we write:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }f:\quad & f^{:F^{T}}\triangleright\text{fix}\triangleright\text{unfix}=\big(\forall Y.\,q^{:F^{Y}\rightarrow Y}\rightarrow f\triangleright\big(p^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow q\triangleright p^{Y}\big)^{\uparrow F}\triangleright q\big)\triangleright\text{unfix}\\
 & =f\triangleright\big(p^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow p^{F^{T}}(\text{fix}^{\uparrow F})\big)^{\uparrow F}\triangleright\text{fix}^{\uparrow F}\\
 & =f\triangleright\big(p^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow p^{F^{T}}(\text{fix}^{\uparrow F})\triangleright\text{fix}\big)^{\uparrow F}\quad.
\end{align*}

\end_inset

The last value will be equal to 
\begin_inset Formula $f$
\end_inset

 if the function under 
\begin_inset Formula $(...)^{\uparrow F}$
\end_inset

 is an identity function:
\begin_inset Formula 
\[
p^{F^{T}}(\text{fix}^{\uparrow F})\triangleright\text{fix}\overset{?}{=}p\quad.
\]

\end_inset

Since 
\begin_inset Formula $p$
\end_inset

 is of function type, both sides must be equal when applied to an arbitrary
 
\begin_inset Formula $s^{:F^{B}\rightarrow B}$
\end_inset

:
\begin_inset Formula 
\begin{equation}
s\triangleright(p^{F^{T}}(\text{fix}^{\uparrow F})\triangleright\text{fix})\overset{?}{=}s\triangleright p\quad.\label{eq:fix-unfix-derivation2}
\end{equation}

\end_inset

To prove the last equation, we use the assumption that all values of type
 
\begin_inset Formula $T$
\end_inset

 satisfy the strong dinaturality law.
 So, the law must apply to the value 
\begin_inset Formula $p$
\end_inset

:
\begin_inset Formula 
\[
r\triangleright p\triangleright f=s\triangleright p\quad.
\]

\end_inset

This law reproduces Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:fix-unfix-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) if we define 
\begin_inset Formula $r$
\end_inset

 and 
\begin_inset Formula $f$
\end_inset

 by
\begin_inset Formula 
\[
r\triangleq\text{fix}^{\uparrow F}\quad,\quad\quad f\triangleq u^{:F^{T}}\rightarrow s\triangleright(u\triangleright\text{fix})\quad.
\]

\end_inset

It remains to verify that the assumption of the strong dinaturality law
 holds:
\begin_inset Formula 
\begin{align*}
 & r\bef f\overset{?}{=}f^{\uparrow F}\bef s\quad,\\
\text{or equivalently}:\quad & \text{fix}^{\uparrow F}\bef(u\rightarrow s\triangleright(u\triangleright\text{fix}))\overset{?}{=}\big(u^{:F^{T}}\rightarrow s\triangleright(u\triangleright\text{fix})\big)^{\uparrow F}\bef s\quad.
\end{align*}

\end_inset

Rewrite the left-hand side above until it becomes equal to the right-hand
 side:
\begin_inset Formula 
\begin{align*}
 & \text{fix}^{\uparrow F}\bef(u\rightarrow s\triangleright(u\triangleright\text{fix}))=(u^{:F^{F^{T}}}\rightarrow u\triangleright\text{fix}^{\uparrow F})\bef(u\rightarrow s\triangleright(u\triangleright\text{fix}))\\
\text{compute composition}:\quad & =u\rightarrow s\triangleright(u\triangleright\text{fix}^{\uparrow F}\triangleright\gunderline{\text{fix}})=\gunderline{u\rightarrow u\,\triangleright}\,\text{fix}^{\uparrow F}\triangleright(q\rightarrow s\triangleright q)^{\uparrow F}\bef s\\
\text{unexpand function}:\quad & =\big(\text{fix}\bef(q\rightarrow s\triangleright q)\big)^{\uparrow F}\bef s=\big((u^{:F^{T}}\rightarrow u\triangleright\text{fix})\bef(q\rightarrow s\triangleright q)\big)^{\uparrow F}\bef s\\
\text{compute composition}:\quad & =\big(u^{:F^{T}}\rightarrow s\triangleright(u\triangleright\text{fix})\big)^{\uparrow F}\bef s\quad.
\end{align*}

\end_inset

The two sides are now equal.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
A curious property of the type 
\begin_inset Formula $T$
\end_inset

 is that it is a function with argument of type 
\begin_inset Formula $F^{X}\rightarrow X$
\end_inset

, where 
\begin_inset Formula $X$
\end_inset

 can be any type, including 
\begin_inset Formula $T$
\end_inset

 itself.
 But we already have a function of type 
\begin_inset Formula $F^{T}\rightarrow T$
\end_inset

; it is the function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fix
\end_layout

\end_inset

.
 So, applying a value 
\begin_inset Formula $t$
\end_inset

 of type 
\begin_inset Formula $T$
\end_inset

 to the function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fix
\end_layout

\end_inset

 yields again a value of type 
\begin_inset Formula $T$
\end_inset

.
 As the next statement shows, that value is the same as 
\begin_inset Formula $t$
\end_inset

:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-strong-dinaturality-property-of-fix"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strong-dinaturality-property-of-fix"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Consider the Church-encoded type 
\begin_inset Formula $T$
\end_inset

 and the function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fix
\end_layout

\end_inset

 defined in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-Church-encoding-recursive-type-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 It follows from the strong dinaturality law
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
Dan Doel
\end_layout

\end_inset

Dan Doel gave a proof using relational parametricity: see 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://cs.stackexchange.com/questions/131901/"
literal "false"

\end_inset


\end_layout

\end_inset

 for any value 
\begin_inset Formula $t^{:T}$
\end_inset

 that 
\begin_inset Formula 
\begin{equation}
t^{T}(\text{fix})=t\quad.\label{eq:fix-unfix-property-of-T}
\end{equation}

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
We use the strong dinaturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong-dinaturality-for-church-encoded-fix-unfix"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\begin_inset Formula 
\[
\text{if }\quad r\bef f=f^{\uparrow F}\bef s\quad\text{ then }\quad r\triangleright t^{A}\triangleright f=s\triangleright t^{B}\quad.
\]

\end_inset

It remains to choose suitable values 
\begin_inset Formula $r^{:F^{A}\rightarrow A}$
\end_inset

, 
\begin_inset Formula $s^{:F^{B}\rightarrow B}$
\end_inset

, and 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 so that the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong-dinaturality-for-church-encoded-fix-unfix"
plural "false"
caps "false"
noprefix "false"

\end_inset

) reproduces Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:fix-unfix-property-of-T"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Since the law always involves applying the function 
\begin_inset Formula $t$
\end_inset

 to some arguments, while the right-hand side of Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:fix-unfix-property-of-T"
plural "false"
caps "false"
noprefix "false"

\end_inset

) contains just 
\begin_inset Formula $t$
\end_inset

, let us apply both sides of Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:fix-unfix-property-of-T"
plural "false"
caps "false"
noprefix "false"

\end_inset

) to an arbitrary value 
\begin_inset Formula $s^{:F^{B}\rightarrow B}$
\end_inset

, where the type 
\begin_inset Formula $B$
\end_inset

 is also arbitrary:
\begin_inset Formula 
\[
s\triangleright(\text{fix}\triangleright t^{T})\overset{?}{=}s\triangleright t^{B}\quad.
\]

\end_inset

The left-hand side will have the form 
\begin_inset Formula $r\triangleright t^{A}\triangleright f$
\end_inset

 if we set 
\begin_inset Formula $A=T$
\end_inset

, 
\begin_inset Formula $r=\text{fix}$
\end_inset

, and 
\begin_inset Formula $f$
\end_inset

 a function that applies its argument to 
\begin_inset Formula $s$
\end_inset

:
\begin_inset Formula 
\[
f^{:T\rightarrow B}\triangleq u^{:T}\rightarrow s\triangleright u^{B}\quad.
\]

\end_inset

It remains to verify the assumption of the strong dinaturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong-dinaturality-for-church-encoded-fix-unfix"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\begin_inset Formula 
\begin{align*}
 & r\bef f\overset{?}{=}f^{\uparrow F}\bef s\quad,\\
\text{or equivalently}:\quad & \text{fix}\bef(u^{:T}\rightarrow s\triangleright u^{B})\overset{?}{=}(u^{:T}\rightarrow s\triangleright u^{B})^{\uparrow F}\bef s\quad.
\end{align*}

\end_inset

Rewrite the left-hand side of the last line above:
\begin_inset Formula 
\begin{align*}
 & \text{fix}\bef(u^{:T}\rightarrow s\triangleright u^{B})=f^{:F^{T}}\rightarrow s\triangleright(f\triangleright\text{fix})^{B}\\
\text{definition of }\text{fix}:\quad & =\gunderline{f^{:F^{T}}\rightarrow f\,\triangleright}\,(q\rightarrow s\triangleright q)^{\uparrow F}\bef s\\
\text{unexpand function}:\quad & =(q\rightarrow s\triangleright q)^{\uparrow F}\bef s\quad.
\end{align*}

\end_inset

This is equal to the left-hand side after renaming 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $u$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
The Church encoding 
\begin_inset Formula $T\triangleq\forall X.\,(F^{X}\rightarrow X)\rightarrow X$
\end_inset

 of the fixpoint has a special property: for any other fixpoint 
\begin_inset Formula $R$
\end_inset

, there is a unique fixpoint-preserving map 
\begin_inset Formula $T\rightarrow R$
\end_inset

 called a catamorphism
\begin_inset Index idx
status open

\begin_layout Plain Layout
catamorphism
\end_layout

\end_inset

.
 To define that map, assume that the fixpoint 
\begin_inset Formula $R$
\end_inset

 has a known function 
\begin_inset Formula $\text{fix}_{R}:F^{R}\rightarrow R$
\end_inset

 and write
\begin_inset Formula 
\[
\text{cata}:T\rightarrow R\quad,\quad\quad\text{cata}\triangleq t^{:\forall X.\,(F^{X}\rightarrow X)\rightarrow X}\rightarrow\text{fix}_{R}\triangleright t^{R}\quad.
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-catamorphism-church-encoding"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-catamorphism-church-encoding"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 The function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

cata
\end_layout

\end_inset

 (defined above) is a fixpoint-preserving map.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 Any other fixpoint-preserving function of type 
\begin_inset Formula $T\rightarrow R$
\end_inset

 is equal to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

cata
\end_layout

\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
***
\end_layout

\begin_layout Subsection
The co-Yoneda identities
\end_layout

\begin_layout Standard
The Yoneda identities allow us in many cases to simplify type expressions
 with universal quantifiers.
 Similar identities hold for existentially quantified types.
 
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-co-Yoneda-two-identities"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-co-Yoneda-two-identities"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
For any functor 
\begin_inset Formula $F$
\end_inset

 and any contrafunctor 
\begin_inset Formula $H$
\end_inset

, the following identities hold:
\begin_inset Formula 
\begin{align*}
\text{\textbf{(a)} }\text{covariant co-Yoneda identity}:\quad & \exists R.\,F^{R}\times\left(R\rightarrow A\right)\cong F^{A}\quad,\\
\text{\textbf{(b)} }\text{contravariant co-Yoneda identity}:\quad & \exists R.\,H^{R}\times\left(A\rightarrow R\right)\cong H^{A}\quad.
\end{align*}

\end_inset

(The equivalence is observational.)
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
***
\end_layout

\begin_layout Standard
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
Note that the Scala type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Any
\end_layout

\end_inset

 closely corresponds to the type 
\begin_inset Formula $\exists X.\,X$
\end_inset

, which is observationally equivalent to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Unit
\end_layout

\end_inset

 .
 The advantage of using 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Any
\end_layout

\end_inset

 instead of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Unit
\end_layout

\end_inset

 is that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Any
\end_layout

\end_inset

 is a supertype of 
\emph on
all
\emph default
 Scala types.
 Indeed, for any type 
\begin_inset Formula $T$
\end_inset

 there is an injective function 
\begin_inset Formula $T\rightarrow\exists X.\:X$
\end_inset

, This function corresponds to a function of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

T => Any
\end_layout

\end_inset

 in Scala:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def toAny[T](t: T): Any = t
\end_layout

\end_inset

 This is just an identity function that relabels the types; so, this function
 establishes the subtyping relation 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

T <: Any
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Subsection
Beyond Yoneda: using parametricity to simplify quantified types
\end_layout

\begin_layout Standard
The covariant Yoneda identity,
\begin_inset Formula 
\[
\forall R.\,(A\rightarrow R)\rightarrow F^{R}\cong F^{A}\quad,
\]

\end_inset

and other similar identities hold for fully parametric code.
 If we assume parametricity, we can also simplify certain expressions containing
 quantified types where the Yoneda identities cannot be applied.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-quantifier-across-functor"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-quantifier-across-functor"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
For any exponential-polynomial functor 
\begin_inset Formula $F$
\end_inset

 and for any profunctor 
\begin_inset Formula $P^{X,Y}$
\end_inset

, the types 
\begin_inset Formula $\forall A.\,F^{P^{A,A}}$
\end_inset

 and 
\begin_inset Formula $F^{\forall A.\,P^{A,A}}$
\end_inset

 are equivalent when restricted to fully parametric implementations.
 The same holds when 
\begin_inset Formula $F$
\end_inset

 is an exponential-polynomial contrafunctor.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
***
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-existential-quandifier-via-Church-encoding"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-existential-quandifier-via-Church-encoding"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 For any profunctor 
\begin_inset Formula $P^{X,Y}$
\end_inset

, the types 
\begin_inset Formula $\exists A.\,P^{A,A}$
\end_inset

 and 
\begin_inset Formula $\forall B.\,(\forall A.\,P^{A,A}\rightarrow B)\rightarrow B$
\end_inset

 are equivalent when restricted to fully parametric implementations.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 Without the outer quantifier (
\begin_inset Formula $\forall B$
\end_inset

), this property does not hold: the types 
\begin_inset Formula $(\exists A.\,P^{A,A})\rightarrow B$
\end_inset

 and 
\begin_inset Formula $\forall A.\,(P^{A,A}\rightarrow B)$
\end_inset

 are 
\emph on
not
\emph default
 equivalent, at least for some profunctors 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
***
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
jatin or the functional programming tutorial the focus of this chapter is
 on three type constructions to begin let us consider the interpreter pattern
 this is a design pattern where you present your program as a data structure
 and you program an interpreter to run your data structure so as an example
 consider this domain specific language for complex numbers it's a very
 simple language it has three operations to create a complex number out
 of string to multiply complex numbers and to compute the complex conjugate
 number if I want to represent this computation as data in other words not
 to run it yet but to write down the operations as data then I could imagine
 implementing it like this I can implement some case classes in a disjunction
 like this so I have a program type it has three parts of the disjunction
 which is either a string which will represent this operation parsing a
 string into a complex number multiplication of two complex numbers and
 computing the complex conjugate number and then I can imagine that instead
 of this program I will have a data structure with nested case classes like
 this in order to be able to define such a data structure in my case classrooms
 should have these types so for instance multiplication case class will
 contain two parts and each can be itself another program so that's why
 the types of the parts of these schemes classes are again the type program
 itself so in this way having defined these type parts of the case class
 as programs I enable myself to write down arbitrary nested case classes
 so this has type program I can use this as part of another case class like
 MO or conjugate so in this way I have created a domain-specific language
 that expresses computations with complex numbers as data structures in
 order to actually compute anything with any complex numbers I would need
 to run this program this dsl program as I would say the interpreter will
 be a function of the type signature it may be like this it will take an
 argument of type program and it will return a pair of double numbers which
 would represent a complex number that is the result of computing this program
 so why would you use the interpreter pattern because it has certain benefits
 in certain cases one main main benefit is that you represent a certain
 domain specific language that is a number of operations that are specific
 to a certain task set or a domain such as complex number of computations
 you encapsulate all these operations in a data type that fully describes
 what needs to be done without actually doing it so you present as data
 what otherwise you would write as executable code data is much more easily
 composable it can be manipulated transformed before running it so before
 you run here DSO program you can store it in some data structure you can
 put it on disk in a file read it back send it over the internet and compose
 it with other DSL programs in the larger DSL program all that is data manipulat
ion that has nothing running yet nothing has computed yet when you're ready
 you call the run function and actually compute the results so this very
 simple DSL domain-specific language has shortcomings specifically it works
 only with simple expressions it represents expressions as unev a lated
 expression trees so every operation needs to be some vertex of the tree
 but that's that's okay but we don't have enough different operations defined
 so that for instance you cannot express variable binding and conditions
 here for instance we can imagine that this a could be used somehow in these
 operations but I cannot express it here all I can express is multiplying
 two complex numbers converting strings to complex numbers and computing
 a complex conjugate number there is no way to express that I have a variable
 in my language in the DSL not color variable Scala variables I can of of
 course have I can say Val x equals this but that is not at the level of
 the domain-specific language the language itself doesn't know as so far
 anything about defining variables and because of this I cannot use any
 code that is not expressed in this DSL so for example I could imagine calling
 a numerical algorithms library to compute some special function of the
 complex number and that could be a complicated algorithm but I cannot put
 it into a DSL I would have to express the entire algorithm using DSL operations
 if I wanted to do that so let's try to overcome these shortcomings these
 are certainly not due to interpreter pattern itself it's just that our
 DSL is too simple so let's see how we can do variable binding in a DSL
 like this now let's consider another example for this which is a DSL for
 reading and writing files but let's just look at reading files for now
 so the DSL will have two operations first so this on the left is a non
 DSL program is a program that we write in Scala we want to replace this
 with a DSL program within data structure so the functionality we want to
 implement is to create a path for a given file name so this could check
 that it exists or whatever translate this into some URL if necessary we
 don't know so right now we just say there is some operation that creates
 Bath's out of strings and there is another operation that reads a file
 at the given path and the result is a string so you read the contents of
 a file so then suppose we have this logic we read one file and if its contents
 is not empty and then we interpret its contents as another file name and
 we read that and then we want to return the string that is in the second
 file if it's an empty file then we return an error string like this so
 how can we implement this logic in the DSL well we need to bind a variable
 such as here STR to a value that is computed by the DSL at runtime and
 we need to evaluate some condition or generally we need to use the value
 of this variable while constructing further DSL expressions so to understand
 how we can implement this consider that in the DSL everything must be some
 kind of expression tree and this part of the program needs to be also represent
ed by an expression tree and this expression tree is actually a function
 of the variable STR so the variable STR will be assigned when we run this
 DSL program and actually read the files but before we do that the DSL already
 needs to specify that this entire rest of the program is a function of
 this variable so in order to represent that we need a special construction
 in the expression tree and I call this construction bind which is just
 the name of a case class and this case class will have an argument which
 is a function actually a scholar function from a Scala variable STR to
 another tree and so this is how I implement this domain-specific language
 again we I have a seal trade program or probe which now has four case classes
 and the three case classes here are the ones that I would need to implement
 functionality so for example I need literal strings so I'll represent that
 with this literal case class I need paths whose contents are maybe programs
 again because I don't know path can be computed and I need to read again
 I need to read something which could be another DSL program so that's what
 I do in these three case classes and I also had a case class bind which
 represents binding enum DSL variable to a value which is computed when
 you run the DSL and then so I have the first part of this case class is
 a DSL program which when run will give me a value of type string and the
 second part of the case class is a function from string to another DSL
 programmer so this function is a scalar function is not a DSL function
 is a scholar function which is now part of my data structure in this way
 I can inject arbitrary Scala code in principle in the code of this function
 including conditions or creating another dsl program by using the values
 of these variables in an arbitrary way so this variable will be the argument
 of F so here is an example I make a bind so this entire thing becomes a
 blind of this which is read path literal file and this which is a scholar
 function that executes my conditional computation and then returns a value
 of type program again so it returns a DSL program so this is a function
 that takes a string and returns a program so that is how I can easily implement
 the requirement that the DSL should express variable binding conditional
 computations arbitrary Scala code in those calculations and using the scala
 variables such as this one in creating expression trees so I still have
 an expression tree this entire thing is still expression tree and still
 undervalued but now I have a lot more flexibility in what sort of computations
 I can implement with the DSL the interpreter for the DSL will still have
 the same type signature it will be perhaps slightly more complicated so
 let's look at a code examples so first the DSL for complex numbers which
 is what we saw before so the only interesting code here is in running a
 DSL program and here's how we run we basically take the value of the program
 which is going to be one of these three case classes and we match it in
 each case we run what's inside so in this strain case the inside is a definitio
n of a complex number by string such as this one we need to parse it so
 I have some regular expression that I parse this with and the result is
 going to be one value than a sign and another value and then I create a
 complex number out of that a multiplication is a standard formula for complex
 multiplication but notice that both of these are programs so the mall case
 class contains two programs that first have to be run in order to get a
 complex numbers out of them and then I execute a complex multiplication
 similarly the conjugate operation first I have to run the program that
 is the argument here and then I execute the operation so here's a test
 conjugate of multiply of this which is equal to this complex number so
 in order to get it I do run of program so when I do this nothing is wrong
 yet it's a data structure and I could have code that for example simplifies
 this in some way maybe or prints it or whatever it's a data structure that
 is available for me to work with I could type set this in latex if I wanted
 to before running it so then I also can run it so this is the power of
 the interpreter pattern let's look at implementing the DSL for file operations
 that I described in order to run this I will have a mock file system which
 we just a map from string to string so that the filename is mapped to the
 text inside the farm so that this is just so that my tests are easy and
 I don't need to write a lot of code actually reading and writing files
 so I declare my probe type as a disjunction like this like shown in the
 slide and now I need to define the run now run is similar to what we had
 in the complex number case and that for example I need to always run the
 arguments first and then I do something with them so for simplicity path
 will just evaluate your string and read will look up the file contents
 in the dictionary so note we cannot guarantee that three is a path here
 he is just a program it could it is evaluated to a string but so maybe
 it surpassed maybe maybe not we have to be careful what right right writing
 this program the runner cannot check what the program makes sense and finally
 let's look at how we implement the bind so the bind is actually easy to
 implement so key as a type program we need to run it to get a string out
 of it F has a private string to program so we run the P then we apply F
 to that result which is a straining so then F of string is another program
 which we again run so that's how mind works and that's the entire implementatio
n of variable binding for our four in claim which for the DSL domain-specific
 language here is an example program this is what is shown in the slide
 and we can run it and see that it is equal to text this is equal to text
 because first we read the file 1 which gives us the string and we will
 read the file at this path which gives us the string so that's the text
 now notice that as DSL is not typesafe it allows us to read to write nonsensica
l programs like this when you read read read and that is nonsensical because
 you can only read the path and the result of a read is not a path as a
 string and the program doesn't know about it and just it gives us an exception
 key not found text which is a kind of a runtime exception since we don't
 have a file named text in our file system but this should not be the error
 the error should be you cannot read a literal string you must read a class
 on the file system which would have been a type error if this were a type
 safe language so that's the next concern our DSL so far has no type safety
 every value in it is a program and it's evaluated per string so what can
 we do if we wanted to avoid errors such that for example read of raid shouldn't
 even compile it should be impossible to write programs like this and compile
 them and run so the way to solve this problem is to change the type of
 the program data type to a type constructor so let us denote by this program
 of a a DSL program that when run will return a value of type a now in our
 case right now is going to be string but let's make sure it's string and
 not some other type such as a file fast so here's how we do it we define
 a disjunction type characterised by type a type parameter in and everything
 else remains the same except now we explicitly say that for example the
 argument of bind is a program that has a string result and a function will
 take that result and output another program with string result whereas
 previously bind had a program and this function returned the program now
 we explicitly demand the result must be of type string and then we can
 apply F to that result so literal will also give us a program returning
 a string and path will take a program that returns a string but it will
 heal the program that has the past in Iowa file path type in other words
 it's not a program returning string and the read will take that kind of
 program and return a program that evaluates the string so in this way we
 can achieve type safety so the program remains mostly the same except for
 the type the interpreter remains mostly the same except now it has type
 safety let's see how that works now so let's implement instead of niño
 Java file types let's just have a mock type that represents a file path
 so now how do we implement run you know it's the same except now it's impossibl
e to have pass in a program of type string so the program of type strain
 can only be by and literal or read it cannot be a path because that's a
 program of type the are G of F path so we don't need this case here and
 instead we just implement directly this case where we have a read of the
 text because there is nothing else we can have so now the code is type
 safe it still works the same code works but a program like this doesn't
 compile this is a compile time error so we will not be able to even create
 data structures that represent incorrect expressions that's the advantage
 of making the DSL file save our types a so here is our DSL so far there
 is a problem with it which is it basically only binds variables of type
 string it cannot bind variables of other types or it cannot also return
 variables of other values of other types because our runner returns string
 and requires a program of strings so still the string type is very special
 and limiting us so for example we cannot do this we must have a program
 that returns at rest so we cannot directly read the past and if we wanted
 to compute this path using a scholar program then we cannot convert this
 into a program of path because there is no way to do that literal can only
 take a string and extends program of string so let's fix these problems
 now so first of all let's make literal a fully parameterize declaration
 so that it's literal of a and it returns program of a for any a and secondly
 let's replace this string by a parameter a as well so that would be a parameter
 even will be an aid to program of B so we want to now have arbitrary types
 instead of string here so we introduce two type parameters in Bound and
 we will have this generality everything else stays the same and except
 we get rid of this program of string and program of path because now we
 have a literal and the literal can always convert a string into a program
 of strain in the path into a program of path with no problem so we don't
 need to have programs as types here if we need this kind of thing we just
 bind a variable and we'll get get what we need so now this is an interesting
 type because the signatures of bind and literal are very similar to signatures
 of flat map and pure if you look at this carefully so literal is of type
 a to program of a bind is of this type program of a a to program of B and
 it returns program will be so if we imagine that this is a function from
 here to here then this is going to be just type signature flatmap and actually
 it is in some sense a function binding dot apply is a function that takes
 these as arguments and returns a value of this type except it's not just
 any function so type constructor so this function is defined in a special
 way so essentially this type has methods of type signature flat map and
 pure it looks like this type is a moment so let's actually define these
 methods flat map map and pure and it's very easy to do that flat map will
 just create a data structure with the case class bind map we defined automatica
lly by a flat map on theorem as we know that in a wallet you can define
 Maps through flat map and pure the pure is defined as just literal case
 closed so these methods don't actually compute anything they don't run
 the DSL they create further unevaluated data structures in other words
 these methods create DSL programs out of previously defined DSL programs
 these are combinators innocence but usually says then the combinators data
 are functions that take values of some type and circle those and create
 new values of the same type the advantage of Khalid affined in flat map
 map and pure is that we can write the assault programs as functor blocks
 and we can compose them very easily so for example if you look at the previous
 program we have a bit of a repetition to have this read past literal which
 we are using twice so how can we reuse that well they are easily make a
 function that returns a string value program like this so we take a path
 we read that files contents and this is a standard Scala syntax for the
 Thunderer block as I call it for yield block and we can use this syntax
 now because we have defined flat map and map in the program trade and now
 we can easily combine and reuse the mimetic values in another factor block
 so we can write this code as functor blocks as we would do with any other
 moaner let's see what the interpreter looks like for this one I think DSL
 now I have full dramatization of types defined viewer and map and flatmap
 and before as a shown in the slide now there is a bit of ugliness in the
 runner because of the problems with type pattern matching scholar has this
 problem where you want to have image at least closet has type parameters
 it's not easy to do that so I have to do a bit of dancing around first
 I match the bind and then I imagine a result I cannot put I parameters
 here that won't compile I think maybe it will but I wasn't able to do it
 right let me see if I can do it in one go Ashley you can see this was entirely
 wrong a great simplification maybe my idea is not the literal and other
 things are the same except now I have to do typecast so again Scala is
 not great when you have to do type parameters on a case class and the dual
 match expression so that's a bit of ugliness but that's not so bad perhaps
 so let's see that all of this actually works and so now we are pretty happy
 we can a monadic DSL now it's perhaps a little too cumbersome because you
 need to define all these things every time so if I wanted to define a DSL
 for complex numbers in the same way as this DSL then I would have to add
 the bind and the literal and these definitions every time so I would have
 to repeat this code every time note that there are no code changes between
 this DSL for the file operations and this DSL for complex numbers up to
 here so this is completely the same the custom code starts later when we
 define some more case classes so let's refactor the DSL so that the common
 code is separated and the custom code is just wrapped in some type constructor
 called F so here's how we do that we say there's a DSL type constructor
 that is paralyzed by the type a is minus 1 and it type constructor F that
 will encapsulate always custom code so the type constructor F will have
 the definition like this just like our first first try at DSL so this could
 be once we add the type parameter this could be the type constructor F
 and then we define just the typeclass the case classes that are necessary
 to implement the moon add functionality to bind and literal case classes
 and then we have this case class ops for operations which contain a value
 of type F of n and so this is a wrapper over whatever custom operations
 we have in our DSL and notice here DSL does not have programmers parameters
 here has the complex as parameters it's up to us we could have programmers
 parameters it's a matter of convenience what important in it but whatever
 that is it's going to be encapsulated now in the case class ops so this
 entire code is going to be generic in operations of your DSL so the type
 constructor F represents the operations of the DSL and power the our tech
 constructor DSL is a melodic DSL is permit rised by that tightness factor
 f so this car is now engineered in the operations of your Union now the
 cost of this is that the interpreter now needs to know how to interpret
 your operations so you have to write extra code as opposed to hard coding
 is you just write extra code that converts your operations to values so
 you evaluate your operation so for example this operation would be the
 domain specific part inside this F type constructor it needs to be evaluated
 to yield this path so let's see how that works so the DSL will be general
 so all this part of code is generic it does not depend on the domain all
 the domain-specific operations are encapsulated by the type constructor
 S which is defined later in a different place of your code so in this way
 we penalize by this type constructor in this code is fully generic in any
 domain so now we need to have the extractor the value extractor were evaluated
 for your domain so this needs to be a function as I showed of this type
 I would like to emphasize of this type is actually parameterize by a typewriter
 a inside the expression it is not business for all a I quantifier needs
 to be inside here it cannot be over there when the reason is that when
 we run the DSL it takes a program that evaluates a value of type a but
 intermediate steps could have different types it could be that in order
 to compute a value of type a you first need to compute some value of pi
 b r c and so on and when you run those programs you need to extract a value
 of type b from some domain-specific operation or a type c so you actually
 need to have a function in the extractor that is parametrized by an arbitrary
 other type it's not going to be of the same type a as the runner and that's
 why we cannot use in scala just a type parameter you need to have an extra
 trait that encapsulate inside but another type parameter so the extractor
 is not parameterize by eight here this parameter is just by F and it's
 function applied or extract or whatever you want to call it just has a
 single method and this method is paralyzed itself by the type aid so in
 this way if the runner has a parameter which is the extractor the runner
 is able to call the function extract on arbitrary types here not necessarily
 the same type as this one so this I could rename for clarity that's necessary
 for the correct operation so that's why this parameter of the runner is
 not characterized by a it's only parameterize by F and inside that drag
 that that value there is a function that works for every X for every type
 X so that is a little clunky in Scala Scala does not have right now a good
 syntax that expresses such a function but the cats library has a case class
 but essentially does this so you can use that it's called the natural transform
ation however so in the cats library this will be like that it's a natural
 transformation which has code something like that now in this case F does
 not have to be a factor you see if you look at our code for our domain-specific
 language this program is not a factor because we have specific types here
 now we do have a map function but only on the entire DSL the F will only
 encapsulate these two case classes because we are now separating the custom
 code from the generic monadic wrapper the binding literal and the F type
 constructor will only encapsulate the domain-specific code which has specific
 types here and does not have a map method so it cannot be a functor it's
 a partial type two type function that's only defined for specific type
 parameters and that cannot be a factor and so it's not really a natural
 transformation in the usual sense because natural transformations are defined
 between factors but it's very similar it's kind of a generic or maybe more
 general case of a natural transformation which you don't need a name for
 it's basically this generic mapping from f of X to G of X for any given
 X so that's the Scala code that expresses this and this now needs to be
 the argument of run so the first argument of run is this extractor and
 the second argument of run is this DSL program so how do we implement run
 very similarly to what we have before except now we have this extra argument
 extract if you compare this with the previous Runner code same code except
 we have run of extract here every time run extract run extract and the
 ops case is slightly different very similar to those other things but here
 we already take care of any custom operations because the extract function
 knows how to evaluate them so extract of F is the apply method which will
 give you an X out of f of X whatever X might might be and so this ops doesn't
 know what type it is doesn't it's parameterize by a type and that's fine
 so the result of this extract is is an f of a and so some kind of f of
 a for unknown type really not there's necessarily the same as this a so
 let's see now how we use this so we now define a type constructor just
 for the custom file operations so this is going to be the F here so we
 called File ops and now this is just the domain-specific operations there
 are no bind case constants were literally classes we don't need those those
 are going to be provided generically extractor needs to be defined only
 for these so this is the domain specific code how to read files how to
 create file paths or verify them or whatever this needs to be so this is
 going to be actual domain specific code and then how do we write programs
 the same way we just need to wrap our domain specific operations in ops
 case class that's all we could define helper functions to have less boilerplate
 in this code but that doesn't really matter right now what matters is that
 we are able to simply write monadic code with their little boilerplate
 so imagine that all this up here with a runner it's completely generic
 it's in the library our code is just this it's only the domain-specific
 operations and then we just use the DSL type constructor from the and we're
 done we use the oops from the library so cats library provides this it's
 called Freeman art and it works let's see how we can use now this is interestin
g yes L know we don't just want to rewrite code in a fancy way we want to
 have value out of this generality so one example of how we extract great
 value from this code is that now we can easily handle errors so previously
 we evaluated a DSL of FA to a now we can evaluate it to either of error
 and a all we need to do is to provide a different extractor an extractor
 would be of this type so instead of going FA to a and goes to fheo some
 error type was in it and the code of the interpreter is almost unchanged
 except so this is the same except the pure needs to put the or the literal
 case cause it's a pure function in the Monad it needs to put this into
 the right or the either and the bind needs to use the flat map on the either
 other than that it's exactly the same so how does this code work well it
 goes through the expression tree when it finds the bind expression it will
 now use the flat map of the either when Al it will first run the same it's
 the same around functions recursive will run on the P so we have a bind
 of P and F run the PETA gives you an either when you use the flat map on
 that either with a function that runs on the result and then applies the
 run to the result of the run ISM is a curried function so that I can write
 this more easily F and then run so the flat map here is from the ether
 moment and this is the pure function of the ether moment so it's very interesti
ng to see that the code of runner only uses flat map and pure from the ether
 moment it's not otherwise aware of the fact that we are running to evaluate
 things into the ether moment and that's very good because it means we can
 very easily generalize to any other model except instead of this one so
 let's look at the code for the either one and the way to do that so see
 the program remains the same we do not change the program at all we just
 evaluate it into a different unit into the ether moment instead of evaluating
 it to just the value a which is actually the identity moment so previously
 we evaluated the code into the identity monad now we are going to evaluate
 it into the either movement so all we need to do when define a new extractor
 which are called e^x just for brevity a new Runner which is aware of an
 arbitrary well it's aware of the either one I'm actually not arbitrable
 not yet and I just rewrite things a little bit so that I compile as : Scala
 and I find that these type parameters are required but that's all right
 so the code works in the same way as in the slides and it applies this
 functional F which is of type that it doesn't know it's not really of type
 in E it's of type type parameter that I have here but it doesn't know that
 so this function f computes a DSL program which I then run so I applied
 a runner to that program so that's exactly the same code as I had before
 except I'm extremely inserting a flight map from the either Monat and here
 is the implementation of the extractor so need a new extractor which will
 run domain-specific code and catch exceptions so I would very easily do
 it like this now I have an extractor that takes my file operations and
 from file operations of a gives me an either of throneworld name so that's
 all I need to run my program now you see I running exactly the same program
 as before I did not have to change that code but domain-specific language
 and I wrote here in order to add error extraction arrogantly that is a
 great power so I can just replace the extractor here and I run exactly
 the same program so this program could be computed by one part of the code
 and the extractor could be prepared by another part of the code completely
 independently and here I have shown how we can interpret the program with
 the result being an either so I call this to interpret the DSL into a monad
 and so here we interpreted this DSL into the ether moment we can just as
 easily interpret it into any other modern by adding the moolaade here is
 a type parameter and getting rid of either here and that's it the changes
 will be minimal because we're not actually using a specifics of either
 here we'll have to replace this by pure that's all so let us see what the
 resulting construction actually is we start with an Operations type constructor
 denoted by F such as this one v oops so this is a type constructor that
 needs to have a type parameter and it needs to encapsulate your domain
 specific operations in a very special way namely it takes the arguments
 of the operations as parts of the case class and the return type of the
 operation becomes the type parameter of this type constructor so that's
 the encoding this is because I remind you that this means a program that
 when run will compute a value of type a so this is a program that when
 run will compute a value of type path and that's how we encode domain-specific
 operations so this operation could be a function from string to file path
 and this is a function from file path to string so that's what we need
 to encompassed and often this type constructor will be not a factor maybe
 it will be a partial type to type function not a factor that needs to be
 a total type to type function always then we use this DSL which is a library
 construction that is written once for all F the interpreter again has written
 once for all F and then we run that program once we prepare a program value
 actually which we can do using a functor block or in any other way or we
 can do it directly using helper functions for instance we do ops of something
 and so on flat map we can just write by hand map flatmap and so on so in
 this way we can prepare a value of this type by combining value so this
 is very composable it's pure value it doesn't yet run anything can be stored
 in variables and arrays whatever you want then you prepare an extractor
 value that will run just your operations or your custom operations and
 represents their values in some monad so this mu naught can be identity
 mu naught if you already want just the final results it could be an error
 gathering monad it could be some other moment for instance could be a state
 monad if you want to represent your operations purely as a state updates
 or someone base it can be a combination of monads it can be anything that
 is a monad it could be another DSL with a different F it could be anything
 so once you have this extractor you run the program like this and this
 computes a value of that moment which could be just a or it could be error
 something or and so on so to summarize so far we begin with a number of
 operations and these operations could have these types we define a type
 constructor then like this typically well this could be more arguments
 and I'll have more parts in the case class if I have no arguments then
 I would have a case class with zero arguments but I need to have a type
 here so usually a domain-specific language would have functions like this
 with some return types so you just put them into your type constructor
 like this and then you do what I just described now there are some other
 things you can do which I will not discuss in a lot of detail in this chapter
 for instance you can choose a different monad and then you can interpret
 this value that you have into another moment so this transformation you
 can define separately and if this itself is a different DSL created in
 the same way then this will be the runner for that DSL that evaluated into
 yet another will not in so this could be very useful if you want to say
 test your your program so you have exactly the same program and you run
 a test interpreter into someone and that catches all the calls to something
 and prints Diagnostics or whatever or you could give design a different
 kinetic DSL that is more optimal let's say more low-level and then you
 can have a sophisticated optimizer that translates one DSL into another
 and the second DSL will be run later in a yet another runner you can use
 monad transformers since this is a monad API and you can combine these
 cells very easily using disjunction so you have several factors or type
 constructors not necessarily factors you can define a disjunction factor
 and the DSL of that contains all the operations from each of these factors
 in a single DSL so in this way you can define separately several dia cells
 using these different F's you could have F G H and so on and then you put
 all of them at once into a monadic wrapper so this is what I call DSL of
 something is really a monadic wrapper over type constructors so these are
 all the benefits that you get by modeling operations one article so let's
 see whether this dsl program respond which i and keep calling it an attic
 DSL is it really omona does it satisfy Monad laws it turns out that no
 it does not satisfy mana flows but it actually does satisfy them once you
 evaluate the program once you interpret it so after you run the program
 that's when the Monad laws are satisfied and that is a very interesting
 property let's see why that is so so consider one more nut law this this
 is one of the identity laws so flatmap applied to pure must be identity
 let's see if this is so now both sides of this law are functions on the
 moon'll so Munna is this so it's a function from this to this so we need
 to apply both sides to some arbitrary program of this type and we need
 to get the new value and see if that value is the same because that should
 be identity so let's see so what happens if we take a program and we execute
 dot flatmap of pure on it now flatmap according to our definition just
 makes bind data structure since nothing is really evaluated we'll just
 put more these classes on the data structure so that that is going to be
 the result now this value is a new data structure it's not equal to program
 PRG it cannot be equal because it contains that thing inside a case class
 it cannot be itself equal to a PRG so it means that this monitor law fails
 and we find that other laws also fail because those laws usually say that
 something is equal to something but all our operations if you look at the
 implementation of flatmap and mount all they do is put more case classes
 on top of things they don't actually simplify anything ever so for this
 reason it cannot simplify this to PRT it will create a new bind and all
 the other monad operations will create new case classes and never reduce
 anything so basically the laws fail if you demand that they hold literally
 like this so our data structure DSL is not a lawful munna it does not satisfy
 the laws but once you interpret this data structure into a target monad
 and assuming that this monad satisfies the Lord then the resulting values
 will satisfy the Lord and that's a very interesting property let's see
 how that works so let's run this value so how would you run this value
 if you apply a run to this and by definition of the code it needs to first
 run this and then apply flatmap with this function and then run the results
 of this function so that is the code and if we now symbolically evaluate
 this code will find that the runner of the literal it will just give you
 a write of a let's say in the ether moment it will be really pure of a
 in general but I'm just substituting the code from the previous line and
 because this is a pure for the either moment the either moment has the
 wall satisfied and so flat map of error is identity and so the result will
 be equal to running the program PRG so in this way assuming that the laws
 will hold for the monel m this both sides when we run them will won't be
 the same so all other laws also hold I will show that next but think about
 what it means it means that the violations of the Monad laws that this
 data structure has are not observable once you run the computation so the
 data structure and they have some extra information inside that gets computed
 away it gets reduced or simplified when you run or when you evaluate this
 into or interpret this into some target unit so in this sense I would say
 that the moral law violations are not observable when you actually observe
 or run or interpret this program there are no violations so these violations
 are hidden somewhere in this data structure and they don't change the results
 they don't make the results invalid and so it's okay to have those violations
 so let me show you now in the code why the moon at law was called after
 evaluating entire law faloona so we will reason by taking an arbitrary
 DSL program and just denote by M the result of running this program for
 brevity and let's see what happens when we run monadic operations on this
 program so for example let's say that program is a pure of something when
 we run that then we execute the code of the runner and that code is a pure
 in the case of the either mona this was the right of X but in the case
 of a general one other will be pure of X so therefore running the pure
 of the DSL gives you the pure of the target monad let's now run the map
 in the DSL and get some other ESL program with some arbitrary function
 f and by definition is going to be translated into this and we run this
 we have to translate that into flatmap because that's how buying is translated
 and then we get this combination now we know that when we do run dot flat
 map this is a flat map in them monad M now if we look at this this is a
 run of the pure so that is already as we know Emma dot pure so now we have
 a flat map in the moon at M of F followed by pure so that is the definition
 in the monad M of map so now this is equal to map in limited M in other
 words running the results of map in the DSL gives you the result of melt
 in the target monad and the same happens with flat map if you run the result
 of flat mapping in the DSL which is another DSL program and F is a function
 from some type a to a different ESL program now we still need to interpret
 the result of this F in the mana dem so this will give us a function G
 of this type instead of a going to DSL of B it's going to be a going to
 M of B this function is like this is f and then run so now if we interpret
 the bind it is going to be the flat map in the model M of F and then run
 and if you just look at what that is that's the function G that we defined
 which is the evaluating of the result of the function f so in this sense
 evaluating flatmap first in the DSL and then running the results is the
 same as evaluating in the Monad M with a function G which is obtained from
 F by running its results so in this sense all the Monad operations in the
 DSL are directly translated by the interpreter into the corresponding one
 at operations in the target one of them now if we consider the laws it's
 very easy to see that they hold after interpreting now we already saw that
 in the slides for this right identity long let's look at the left identity
 law this it needs to be verified we have apply run to both sides and we
 have to show that run of this is equal to run of that so let's evaluate
 the run if we do the pure flat map then this is translated into that we
 run that get run of literal which is just M of pure so you have a pure
 followed by flat map of this but pure followed by flat map is going to
 be in the Monon m and that is equivalent to just this function which is
 G so that's why the run of the two sides is the same because the run of
 this is G of X the natural T law for pure is like this so the DSL peer
 of X of f of X is the slf map of f of dsl P of X so now if we evaluate
 run on both sides then this becomes ampere this becomes MF map this becomes
 ampere so now obviously this hold because M has this law too and finally
 associative 84 flat map it is this one so that lets apply both sides to
 some program PRG and then apply run to both sides so we have the run of
 this should be equal to the run of that so if we now simplify this into
 the Monad m operations then we get this now this flat map G is still a
 bit complicated because G is not yet run in the moon and heaven into the
 moon and M so let's use the law and let's rewrite somehow this expression
 so that we get associative et law for the moon at M now the left hand side
 is this and it should be equal to run of this which is flat map of F and
 the run flat map of G and then run now notice these flat maps are in the
 m1 had this flat map is in the M walnut but the argument of that flat map
 is complicated so we do have the same law for the moon at em but we just
 need to rewrite this a little bit so because that this is going to be M
 flat map something flat map something needs to be simplified into M flat
 map this and then that so how do we figure that out we rewrite this complicated
 expression as an explicit function from a to - what well first we apply
 F to a size F of a then we apply map of G which is this and then we apply
 run so let's run over all this so let's simplify now so run of F of a now
 if we run a flat map that's the same as running this flat mapping of running
 that so what's this and equivalently we can say this is just F and then
 run applied to a and then this is flat map genome then run so if we get
 rid of this a now then we get just a function f and then run and then M's
 flat map of G and then run so that's exactly what we have in the associativity
 wall for EM it's M flat map of this is equal to that so now FM and GM are
 just these FM then run is FM G and the run is G M so we get the associativity
 law the naturality was for flat map could be verified as well we don't
 need to do that since our code is purely type parametric and naturality
 is automatic for that code so I mentioned that this construction is called
 a free Monat and in the cat's library is called free why this word free
 what does it mean free why do we call it a free construction well this
 terminology comes from mathematics in mathematics usually free construction
 is a group or mono end or vector space or some other kind of right construction
 that is generated by certain data with no constraints so free means no
 constraints so let me illustrate this is a bit vague so let me illustrate
 in two by two examples consider two things and I will choose things that
 mean very little by themselves the Russian lettered said and the Chinese
 word way the water say it doesn't really mean anything by itself it's just
 a letter of acrylic alphabet and the Chinese word sway it means water but
 it doesn't matter for now so now suppose what I wanted to multiply them
 I wanted to multiply say by Chui so what does it mean to multiply how would
 I multiply them so mathematicians first asked what kind of product do you
 want do you want associative commutative distributive product so let's
 say we want an associative product not necessarily commutative so mathematician
s would then say very very well what you want is to define some kind of
 semi group in other words a structure that has an associative but not necessari
ly too negative product and you want a semi group that contains say and
 Shui as elements that's what you want you don't and and you would say well
 but I have no idea what these are would say in Shui is I've no idea no
 no worries I'll get you a semi group that contains them and if you have
 a semi group that contains on a semi group is a set and these will be elements
 of that set and if you have a semi group that contains them then you can
 take a product of them so here's how the mathematicians would do it they
 would consider the set of all unevaluated expressions of this kind any
 onion valued expression with the multiplication sign or a product symbol
 dot which I have here and one of these symbols say say or Shui so this
 would be an unrelated expression this will be another undervalued expression
 but we will have the law that this product is associative so see this expressio
n isn't equal to another letter of the Russian alphabet or another Chinese
 word it's not equal to any of those things it's just an expression that's
 not evaluative it's a new thing so we have a set of a lot of new things
 and say and Troy is our one of those things but there are a lot more of
 those things in the set because we are considering the set of all unevaluated
 expressions of this kind so the set of all these expressions is called
 a free semi group generated by of the elements say and Shui and in some
 sense it's the most unrestricted semi group that contains these two things
 you could have a lot of semi groups that contain these two things as elements
 but this one is the least restrictive it's the most free of all arbitrary
 restrictions as long as of course you have associative 'ti of multiplication
 so you can calculate in this semi group for example this is a calculation
 that I can do I take these two expressions I take their product and then
 I multiplied by this expression and I get this expression as a result these
 are calculations that I would do in this free seminar and what would I
 do with that well I could interpret the semigroup value into another semi
 group for example integers imagine integers as a semi group with multiplication
 as a semi group operation I say that say is 17 and Troy is 3 so then these
 are just going to be 3 370 370 will take a product of all of those and
 I have a number so I have evaluated this so in other words this is going
 to be some kind of symbolic program that will later be evaluated in some
 way and that's very similar to what we have been doing with our DSL was
 a symbolic program that was interpreted at the end into a specific values
 but we can do calculations like this before evaluation and this is a similar
 to combining parts of a DSL into a larger DSL program and while we're doing
 this we still have the illusion we are performing these operations so how
 do we represent this as a data type now the easiest thing and what we have
 been doing so far is what I call the tree encoding in other words we represent
 the free semi group as a full expression tree so here's an example each
 operation of product is just a pair in the data structure so I have a tuple
 of this and this and I'm missing one parentheses on the left I will insert
 that in the slides and after the recording yeah so I have a tuple and this
 tuple represents the free product of the tube Shui then I have this tuple
 which is a free product then I have a free product of these two and finally
 a free product of the result and it's a and so that in this way I represent
 my expressions it's very easy and operations are very easy to implement
 because in order to do for example multiplication I just put the two parts
 into pop and I'm done so this is exactly equivalent to adding one more
 case class on top and having a nested structure and in this way I implement
 all my required operations but there is a another encoding which I call
 reduced encoding and this encoding is smarter it is less redundant and
 in this case it's going to be a list of all these things taken in this
 order this list is equivalent to what you would write on paper because
 the associativity law means that it doesn't matter where the parentheses
 are you can omit all parentheses and they will still get the correct result
 and so since we know about that we are clever and smart and we realize
 that the list of these things in this order is sufficient it is sufficient
 information to represent a value in the threesome Anoop now if we want
 to implement the multiplication operation you cannot just put the two lists
 in a tuple you need to actually concatenate the two lists and that could
 be more expensive depending on your implementation of Lists it could be
 a very quick Big O of one operation or it could be a more expensive operation
 but this structure has no redundancy whereas this structure has redundancy
 you could put parentheses in different order and it will be a different
 expression tree although the final value is supposedly the same let's consider
 another example which is a product of n dimensional vectors so what if
 I wanted to define a product of two n dimensional vectors or we have such
 a product for three dimensional vectors this is the well-known vector product
 in the usual euclidean three-dimensional space but let's ignore that and
 in any case I want product for n dimensional vectors with any n and that
 doesn't seem to be generalizable from three dimensional vectors so how
 do I do that all a mathematician again will ask me what kind of product
 do I want I say well it's a product of vectors so I expect it to be linear
 and distributive not necessarily commutative but I want a product that
 has these properties for example I want to be able to add so linear means
 I supposed to be able to add different products together and that should
 be associative and I'm supposed to do this so if I have a linear combination
 of vectors under a product I should be able to pull this thing out and
 expand the parentheses and that's a distributive law and the distributive
 law should hold for left and for right as well all right says the mathematician
 you need a free vector space generated by all kinds of pairs of vectors
 from your own dimensional space so let's do it in this way we consider
 all unevaluated expressions of this form where u and v are arbitrary vectors
 from your n-dimensional space so this is a the first step the second step
 is to impose the equivalence relationship so before this you gather just
 a free vector space you have all all possible linear combinations of all
 possible products that's the first step the second step is to impose equivalenc
e relations so you will consider certain pairs of expressions to be equivalent
 according to these laws the result is usually called the tensor product
 of vectors and again we can have two in codings for the tensor product
 the first encoding is the full onion valuated expression tree and that
 will be just a list of these vector pairs and that could be a very inefficient
 representation if you have a lot of those pairs but it could also be a
 very efficient representation if you have a very sparse tensor product
 the reduced encoding that is the encoding that has no redundancy is to
 represent tensor product as an N by n matrix of vector coordinates in some
 basis now reducing this expression to the matrix form requires computation
 and it could be well first we need to prove that you're encoding is adequate
 that for example this expression and this expression always corresponds
 to the same encoding and then your laws would be satisfied your preferences
 will be satisfied and any component operations so we'll translate this
 into matrix and add matrices and so on but do that so that's a choice so
 this is why we use the word free construction so basically we can use the
 mathematician the mathematics intuition to implement data structures with
 properties generated by things that don't have these properties you see
 the the common topic here is that I wanted to define an operation for things
 that don't have this operation like I wanted to multiply a Chinese and
 Russian together its word and the latter it's it's not defined but I wanted
 to define it in some way and I can in a free way so in the programming
 language we just saw an example where I was able to define a monad out
 of a type constructor that isn't even a function let's look at some other
 examples and here would be an example of a semigroup that's generated by
 two types so that's kind of similar to my chinese and russian example so
 how do we define that so let's see how that works so let's call it FS is
 which is free semigroup from integer and string so a value of FS is could
 be an integer or it could be a string also or if x and y are already of
 type of a silenced and so is this combination of ex-wife co-come the case
 class so i straightforwardly translate this specification into the datatype
 and this will be the three encoding it's a full expression tree unevaluated
 and but that's okay it's a good encoding for some usages the short type
 notation for this is going to be this is recursive type that is defined
 by this type equation so let's think about how we can use it now if we
 have an actual semigroup as a specific 7u and we know how to map integers
 and strings into that same group then we can map this FS is interested
 in you that's our interpretation so let's see how that works it's a little
 too specific with integers and strings let's just put all of these domain
 types into a type Z and make that type of parameter so then the three encoding
 would look like this it's a recursive type that's defined like this so
 I omit the Scour definition let me just write the definitions of the methods
 so the method of semigroup operation is very easy I just put the two arguments
 into a case class and the run method takes a semigroup and an extractor
 function which Maps my Z into a semigroup and that's equivalent to the
 two functions that I assumed here before just a single function from Z
 to s so then I get a function from my free semigroup generated by Z to
 us how would that work I match on the free Simon group it has two cases
 the case of F well I call it rap here let's call it f then I just oops
 I just extract I have a value of Z and I call this function extract and
 to extract the value of semigroup s from it and if I have a combination
 then I first run these two and then I get two values of type s and I just
 combined them in the seven group operation of s quite similarly the semigroup
 laws will hold after I try this run they did not hold before applying rather
 why is that it's well it's very easy to see that social Timothy does not
 hold because I would have a comp nested in different order and that's not
 equal so it's only after applying the interpreter that laws will start
 holding and the reduced encoding is a non-empty list of Z's so that's a
 reduced encoding actually I should have said here it's non empty list I
 didn't make that that remark MFG lists cannot be constructed because you
 have to start with either sell or Shui and apply the semigroup operation
 there is no empty value possible so that's why it's a non empty list and
 then the combination operation will require when you run this you'll have
 to concatenate the lists but maybe the run operation will become faster
 because then you have fewer structures to traverse as another example let's
 implement implement the feel annoyed the Fremen are generated by type Z
 it's very similar to a free summer the value of free monoid of Z can be
 empty because it's a monoid or it can be a Z and then you have a multiplication
 so I should have called it comm not law so therefore the female noid of
 Z in the tree encoding has these case classes the empty the wrap which
 has the inside and the chemical combination which has two values of F M
 of Z inside the short type notation for this is just like that so here's
 an implementation of there brother the plus operation simply puts to the
 occasion top and the runner just does the same thing as before and it puts
 the MS empty and Emma being Illinois it has an empty element instead of
 this so when we interpret this tree structure we just substitute specific
 operations of the monoi M except for the wrapped case when we use the extractor
 and Malloy Clause will hold after we apply this function so this was the
 tree encoding and the reduced encoding is just a simple list where this
 operation is concatenate in the lists the empty is the empty list and the
 wrap is a list over one element and so it's interesting actually to notice
 that after running the trillion coding and the reduced encoding would give
 you the same result there are just different in coulombs of the same value
 there are not equivalent in terms of their performance perhaps and memory
 requirements are different our equivalent in terms of the resulting value
 let's look at the code so here is an implementation of the free moderate
 generated by type Z so Z is some domain specific type and we have this
 combination and we just implement what I said in the slides and here's
 an example of using this definition so first I define an annoyed of integers
 in the standard way and then I want to do a free monoid over this this
 was my example in the slides so I define Z to be that then I if I an extractor
 extractor is a function from z to integer so how do I do that well if I
 have an integer I just leave it there if I have a string I have length
 of the string it's just for this illustration so now I construct a free
 monoid value so how do I do that well I use the wrap constructor to do
 specific values of Z so either left of interest right of strength so I
 wrap them and then I combine them with the plus operation so this is a
 free monoid value which I can then run with my extractor and the result
 is 16 because it's 12 and then 3 the length of this and then 0 because
 it's empty and then one so all this must be added so that's why it's 16
 so let me also verify that the monoid laws would hold after running so
 let's just maybe make extract into an implicit argument and not not right
 every time or something just I'll just run of excellent yes miss oh shit
 a beauty law so I run this and I should get the same result as when I'm
 running it with people other order of parentheses when I run this I run
 over this structure now you see this structure still has the information
 about the order of parenthesis but when they run it each comb is translated
 into the monoid operation plus in the target memory M and so when I run
 it the second time I get this result which is in the target monoid m and
 it has now no more information about the order of parentheses and so when
 I run the other order of parentheses I get the same result let's check
 the identity law this must be equal to the result of running X now this
 is not actually equal to X because it's this combination this class so
 as usual the laws do not hold before you run because you are piling up
 case classes but when you run that iran identity that becomes m empty then
 you're on of X and that's a monoid law in humanoid m that this should be
 equal to run of X and so running of empty + X gives you the same result
 as running X and the same will be for the other order now in the reduced
 encoding it's obvious that all of this works because it's just a list we
 know that list as I will know it so there's not much to implement and the
 runner however needs to go over the entire list so the runner I'm implementing
 it using a fold over list and I'm folding with the monoid operation in
 the target one with and I'm running exactly the same code as before with
 pretty much the same code except here I'm using a helper function to wrap
 my values I get again exactly the same result so what if we interpret this
 free semi group that we had before into another free semi group well that
 would be an interesting thing to do in general we can interpret if we have
 so for example free semi group generated by Y into a free semi group generated
 by Z we can interpret if we have an embedding from Y into the free seminar
 of Z that is certainly what we can do but we know it's a free semi group
 so what if we just haven't been emitting from Y to Z not from Y to the
 free Simon group of Z there's a free semi group is a big thing it's not
 maybe it's much easier to do this indeed that's very easy because we just
 need to map this into that and it's straightforward because this is a fun
 trip so this type constructor is a factor as you see it has the type parameter
 always in a covariant position for positive position so this is a standard
 code that you would write with your eyes closed to implement the map for
 this function so now we can use that and have a chain like this we first
 map map and then run let's think about how we can simplify this well first
 of all this is a functor so functor laws hold for its of' map is composable
 we can compose these two functions from X to Y and from Y to Z into a single
 function from X to Z and just F map once instead of F mapping twice what's
 interesting is that the interpreter also composes with F map in a way and
 this is done by this diagram so if you first so I'm killing the Z here
 so I have just FS x FS y and s if the first F map X to Y and then run through
 some function G that is the extractor from Y to s we should get the same
 result as when we are running with the composition of these two functions
 indeed that is a law that the interpreter satisfies and we can combine
 the semigroups in this way and we can also combine them in disjunctive
 way why is that well consider this semigroup we have obviously an injection
 from X to the disjunction X plus y so then we can F map it and we automatically
 get this injection which means that a free semigroup generated by a disjunction
 of some types contains a free seminar generated by one of these types so
 in this way we can combine semigroups in easily if we know the types of
 free semigroups to combine free semigroups if we know the types from which
 they were generated so next we will consider what we can do further to
 simplify mapping free semigroups to different targets 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
if we need to map a free semigroup into multiple targets in groups say s1
 s2 and so on then it would require many extractor functions with this type
 signature each extractor function will have to convert the generating element
 Z over the free semi group into a specific segment Rufus 1 as 2 and so
 on we can refactor these extractors it into evidence of a typeclass constraint
 so instead of saying we have a semi group s and we have this function for
 that semi group it would say we have a semi group s that additionally has
 a typeclass constraint and so we define a new typeclass let's call it X
 Z for extracting from Z and it has a single method of this type signature
 then we can refactor the run function into this form it will be now parameteriz
e by a semi group s that additionally to the semi group typeclass also has
 an extract Z typeclass instance and that would mean would have an evidence
 on value of this type which would contain this function so that's very
 similar to what we had before when we had the run method it had an argument
 containing the extract now we will have no such argument we'll just have
 an argument specifying the free semi group value and additionally we'll
 have a typeclass constraint which in Scala is translated into an implicit
 argument of the type exe of Seminole which will just contain this extract
 function so far this is a refactoring that doesn't seem to bring a lot
 of benefit except that now this code is going to be completely the same
 for all extractors and we just need to define different extractor typeclasses
 for different semi groups so another refactoring that will follow from
 this is found if we look at the structure of this run function so what
 does it do it translates the free semi group value into a value of the
 specific semi group s by pattern matching on the case classes from the
 free semi group and the free semi group has two case classes the rapp and
 the combined case class what the run does is that it replaces these case
 classes by some fixed functions and these fixed functions are permit rised
 by a semi group having this extractor constraint so all we have done is
 first we have created a value of free semigroup which will be some case
 classes and then we just translate these case classes mechanically into
 these fixed functions so the main idea of what is called the church encoding
 is to represent the free semi group directly by these functions just skip
 the case classes all these cases class case classes do is to denote what
 needs to be done what these functions will have to do when we run the free
 value so instead of representing a free semigroup through these case classes
 represented directly through these pieces of the run function in other
 words instead of saying that the free symmetric value is of type rap we
 say it is equal to this function which will be terrorized by this semi
 group s with two typeclass constraints so here's what will happen if we
 do that we will have two functions so one would be the combining function
 and one would be the wrapping function but the combining function actually
 is defined in the semi group s it is not something we define so really
 we just need to define the wrapping function so this wrapping function
 will be this part of the room and the combining function is already defined
 because the plus operation is part of the semi group typeclass so the definitio
n of the free semi group just becomes the definition of a wrap function
 which is parameter I'll begin by by this we don't need the semi group constrain
t right now for this function we could have written it but we wouldn't have
 used it and then suppose we want to define the value X of type free semigroup
 which would be say combination of wrapping one and wrap in two instead
 of doing that we just write down this so you know what these are values
 of the free semi group and these values are now deaf because they're they're
 not vowels their deaths because they're actually functions parametrized
 by a type parameter and having implicit arguments so they cannot really
 be valid anymore because they're parameterize by a type parameter that's
 another difference so now we have encoded this X so this X is basically
 a function that already runs it's waiting for you to give it a semigroup
 yes but once you give it then it will run and all the implicit arguments
 will be substituted and you will have a value in your signature but until
 then you have defined it and it's waiting for you to run it so this is
 then the encoding of the free semigroup using functions using directly
 pieces of the run function so we don't need a run function anymore we already
 encode values on the free semigroup through the pieces of the run function
 that would be run in the previous encoding so the previous including is
 a tree encoding or the expression tree encoding this encoding is called
 the Trojan Colin let's look at the type of X explicitly let's drop all
 this syntax what is the type of X well it's first of all is parameterize
 by a semi group type s and so this is a function that will work for any
 type s so let's write it down explicitly as a universal quantifier which
 will be read for all s so for all s we have a function that takes the extract
 Z typeclass evidence which is a function type z2 s it takes the semigroup
 class Evelyn's likewise evidence which is this method and it produces the
 value of s so in other words it is this function which is parameterized
 by type s so this should work for every s and we want to write those explicitly
 using the universal quantifier now we can simplify this type using an identity
 but the product of these two functions is equivalent to a single function
 from disjunction of Z and s times s to s so now this type which is equivalent
 to this type which is equivalent to this this is the church encoding of
 the free semi group over Z or free semi group generated by a type Z I call
 this charge encoding for reasons that I will explain but look at this type
 signature this type signature looks a little bit like a continuation monad
 continuation monad would have this type now we have this and then these
 two nested functions they are very similar to a continuation monad but
 it isn't really that it's it's not really a continuation monad because
 of this quantified type the continuation monad has a fixed result type
 R it is not quantified over that type does not permit rised by that type
 and does not have for all our in front of this but we do have for all s
 because this is our type parameter in the function so each value over the
 free Simon group is a function parameterize by an arbitrary s s being a
 concrete non free semi group or github perhaps another free semi group
 but eventually it must have must be a non free Simon group in order to
 get any values onto this non free actual useful values so that's the type
 now there is a theorem in type theory which is that this type expression
 is equivalent to just a type a I will present a derivation of this somewhat
 informally but this is the basic fact that is at the basis of the entire
 idea of the church encoding what I call the church encoding of a type a
 is this type expression so whatever type a is you can just say I have a
 type a or you can say I have this function parameterize by an arbitrary
 X with this type signature that's equivalent to having a type a so I call
 this the church encoding of other type a and so unlike the continuation
 monad the the presence of the universal quantifier makes this function
 fully generic in X and it becomes like a natural transformation between
 this factor and this identity factor so this is a reader factor with type
 a being read X is the parameter and this is the identity function with
 X as the parameter so this is resembling a natural transformation between
 these two functions and we know that if this is a a function with fully
 parametric code in other words code that does not use any type information
 about X then this will actually be a natural transformation so there is
 however a bit of difficulty in understanding how to work with Church encoded
 types there are complicated there is this function whose argument is again
 a function and it's parameterize over arbitrary X it's actually not easy
 to reason about such types so in order to develop intuition let us consider
 a simpler example where we take a disjunction type just an ordinary disjunction
 type not a functor nothing like that just an ordinary disjunction of types
 P and Q and let's work with its Church in Korea so by definition the church
 encoding of this type is this type expression now we can simplify this
 because it's a disjunction in a function argument and this is equivalent
 to a product of two functions from P to X and from Q to X and this is equivalen
t to a curried function with this type so so far I have done nothing but
 I have equivalently transformed this type into this for convenience now
 in Scala in order to implement such things I have to hide this type parameter
 somehow I cannot have a type so I need to have a type that has inside it
 inside of it a def with type parameter so in order to hide it I have this
 Scala code which is the usual pattern for putting a universally quantified
 value into star distance car does not have the universally quantified values
 it must be a def as I did before now this is not very convenient you want
 to have a Val with the universal quantification inside so in order to do
 that you define a trait let's call this trait disjunction it's going to
 be church and call it disjunction P and Q are going to be just parameters
 for it I didn't necessarily have to do it this way importantly the street
 has a method inside that is parameterize by X and this X is not one of
 these type parameters so this type parameter X is hidden inside the trait
 in this way as a method of the trait and when that happens when a type
 parameterize function is a method of the trait it means that you can call
 this method with any type parameter X so in this way it implements the
 universally quantified type X and it's very easy to just write down this
 function signature like this so how can we define values of this type so
 for example we define left given some ULP we want to define a left part
 of the disjunction we need to create a value of type disjunction so in
 Scala this would be creating a new anonymous class by extending this trait
 and implementing the method round so this is Scala's boilerplate for hiding
 the universal quantifier but then we just need to implement this function
 which is easy we need to return X we have the two functions P to X and
 Q to X and we have a P so how do we return X we'll just call this function
 on the P so in this way we implement the left we'll also implement the
 right in this way we can create values of this type now quite easily so
 suppose that this this this G is a value of this type how can we implement
 a case expression well we can just call the run method on two functions
 like this and that would be actually the case expression so the result
 would be of type X because that's the result of the run so in this way
 we program with disjunctions in the church including and note that this
 would work in any programming language that has nameless functions it does
 not the programming language does not need to have disjunction types built-in
 so all we need to do is we need to create this construction which does
 not have any disjunctions inside now this does so this I would not be able
 to implement in a programming language that doesn't have disjunctions but
 this I can implement in such a programming language and so actually I have
 heard that people have used this trick the church encoding for implementing
 disjunctions in JavaScript the GU language also comes to mind as a very
 primitive type system and I'm not sure how but with generics it would certainly
 be able to implement disjunction types Java could do this too so general
 recipe for church encoding is that you need to hide your universal quantifier
 so you create a trait with method which adi will always call run in this
 tutorial this method has an argument which is this continuation like function
 or this function maybe several of them may be a product of them if you
 have a disjunction and then you can also think about making it more convenient
 so if you have a lot of things here and not just one function but a lot
 of parts of the disjunction this could be cumbersome so you could split
 it into products product of functions and then you could say this is a
 value of some type so you could even do a trait or a case class and parameteriz
e by X containing just this argument of the Church encoding just for convenience
 and this is specifically very convenient with disjunctions because you
 could just define like this instead of defining a run method with this
 type signature define it as a function from exo X to X and so this is actually
 much easier to use with languages such as Java or JavaScript where you
 have objects with methods but you do not have disjunctions now notice that
 case expression which replaces pattern matching for these junctions is
 actually consisting of running this function so the church encoding of
 the type is a function and calling that function means running so just
 like in the free type constructions when you interpret the free value or
 DSL or your interpreter runs you get some final value that's in the Church
 in Korean means you call this function and get your final result the church
 encoding in some sense encodes your DSL or your operations or your program
 your declarative program encodes in terms of pieces of the interpreter
 that are necessary to run it and so pattern matching is impossible on functions
 you cannot determine whether this function uses its argument or not for
 example by any kind of pattern matching on this function value you cannot
 do that the only thing you can do is to run this function so one deficiency
 of church encoded types is that they have to be run in order to a pattern
 match they cannot pattern match say on disjunction without actually having
 some kind of result type some kind of target X and putting that X in there
 putting the extractors in there and running this function now certainly
 you could be clever and your ex could be another Church encoded something
 else so you or non Church encoded something else you could very easily
 convert this back into the ordinary disjunction type and then you could
 pattern match on that but in order to convert this to anything you have
 to run it so Church encoding has certain advantages it is easier to work
 with if you have many targets and we will see other advantages of the church
 and queen it does have also disadvantages and I will talk about them but
 one disadvantage we see right away is that pattern matching is impossible
 until you run or unless you actually run your church encoded value so let
 us see how the church encoding works so why is this type equivalent to
 the type a so let's just consider this very simple church encoding of a
 fixed type a which will be implemented like this so in order to show equivalenc
e between the church encoding and the type a we need to present isomorphism
 between the types which is a pair of functions from a to the church encoding
 and from the church encoding vector a and we need to show that these functions
 are inverses of each other so that a composition of these two functions
 in every order is identity so if we have a value of a how do we get the
 value of church encoded a well if we have a value of a then in order to
 produce this we take this argument which is a function of a and apply that
 function to the value of a that we have the result will be a value of x
 which we return so that is the code I just applied this given function
 or the continuation argument if you will to the given value of a so that
 is in one direction in the other direction in order to extract a out of
 this we can call well the only thing we can do obviously on this value
 which is a function is the call that function on which argument and with
 which type X that is our choice so we call this function by calling run
 with type X equal to a so like this and in an argument which is identity
 function from a to a the result would be some a so that's our second converter
 c28 Church included two direct type so it remains to show that these functions
 are inverses of each other so how do we do that let's think about how could
 it be that we have a value of this type for any X given this function we're
 able to produce a value of x now if I I'm able to produce a value of an
 arbitrary type X and I don't know anything about that type the only way
 I can do that is by using this function somehow and this function needs
 to be called to produce an X on some value of a so unless I have a value
 away I can't possibly have this so this is the intuition that explains
 why this type is equivalent to a the only way of having a value of this
 type is to have some value of a now this value what if I have two different
 values of a well the problem is I could only use one of these two values
 because I'm supposed to produce this which has a universally quantified
 X and I'm not supposed to look at X so this is supposed to be generic in
 X so I could not for example check whether X is integer then I use one
 value of a if X is not integer then I use another value of a that is not
 allowed by by this type this type is fully generic in X and so I am not
 allowed to use any specific information about what the type X might be
 I could not write code like that I mean I can write code like this and
 scholar of course but that is not what this type is this type says this
 is a fully generic function which is a natural transformation from this
 function to this functor I'm not allowed to look at the code of X at the
 type of X I'm not allowed to use reflection for instance or any other informati
on about the type of X or or the value of anything I'm supposed to be completely
 generic so if I had many values of a at my disposal I be forced to choose
 one of them for all X and use that one value of a in order to create this
 thing for all X in other words the only way to have a value of this type
 is to have a fixed value of a and then this is how I'm forced to implement
 a value of this type so that's intuition now I would like to be more formal
 and show that for any Church encoded value CH if I first convert it to
 a using this converter and then I converted back to CH then I have the
 same stage as I started with but what does it mean I have the same CHCH
 as a function so this function must be equal to that function now equality
 of functions means if I substitute some argument into that function I get
 the same value as a result by applying this side and this side so let's
 apply both sides to some function f of type a 2x and then we can simplify
 this so what does the CH run of f is on the left hand side and the right
 right hand side is this run of F now this run of F we can see what that
 is it is a continuation of a which means it is an F because the continuation
 is going to be F the argument of run is going to be f so f of this now
 substitute the definition of c2a it is this and F of that so see H dot
 run of a to a now we cannot really simplify this anymore because we don't
 know what CH that run does it is a arbitrary given value of this type so
 we don't really know what it does when we call it on a to it but if we
 look carefully at this equation so we are now required to prove that this
 is equal to that looking careful in this equation we find that this is
 the condition of naturality of the function G H run as a transformation
 between the reader factor and the identity function applied at type X this
 is a natural allottee condition here is how I can illustrate this using
 a type diagram naturality condition means that if we do an F map so we
 have one factor on the left another factor on the right we have a natural
 transformation between them if we now F map with some function on the left
 and we F map with the same function on the right diagram should commute
 and this is precisely the equation what we have written here run over F
 is precisely that F sorry I'm I'm confused it is this direction first the
 left hand side is this direction this is the run of F and the right hand
 side is this direction first Iran of identity and then you apply F to that
 so the left-hand side corresponds to this direction on the diagram and
 the right-hand side responds to that direction on the diagram commutativity
 of the diagram is therefore exactly the same as this equation so in other
 words we have shown that this function will be equal to that function as
 long as we demand that this is a natural transformation so this code must
 be fully generic should not use any type information about X and the counter
 example would be looking at the type of X and using different values of
 a to create a to see here so calling this on different values of a depending
 on what X is so that we could write this code in Scala but this would not
 be an actual transformation the other direction is easy very fun if we
 just substitute the code C to a of a to C of a C to a is this and then
 a to C away as a run function and then you have identity applied to a and
 that's 8 so in this way we can show more formally that this type the church
 encoded a is actually equivalent to the type a as long as we understand
 that this must be fully generic code and in other words a natural transformatio
n that means these two parameters and another property of the church encoding
 is that since it is built up from parts of the run method of some typeclass
 usually it will automatically satisfy the laws of that typeclass now this
 example as well as this example were not examples of typeclasses that are
 and what I was going to church in code this example was a typeclass the
 tie church encoded the free semi group and the property of the church encoding
 is that it will automatically satisfy the laws and the reason is we know
 that laws will be satisfied after you run the typeclass a free time class
 instance this we already saw and therefore since our church encoding is
 basically functions that run and the only way you can use them is to call
 these functions then Church including will satisfy laws automatically in
 the same ways this function is equal to that function which we verify by
 calling these functions applying them to specific arbitrary argument a
 war for a typeclass means that you need to run the church encoding and
 then compare the results so since we know that the run method for free
 typeclasses satisfies the laws it follows that the church enrolling over
 free typeclass will automatically satisfy the laws of the type course so
 this is a very nice property of the church encoding let us look at the
 code of church encoding a free similar here we define the extraction as
 a typeclass and then in order to define the free semi group we have very
 low to work left to do unlike previous implementations where we have to
 first define case classes and so on we don't define any case classes here
 the Reb constructor is like this and then we are ready after this we have
 defined the extraction typeclass we are ready to start working with seven
 group values don't need any anymore preparation so here is x and y these
 are already values of the three seven groups so here's a computation we
 wrap one wrap to wrap three add them that's it we have now defined x and
 y these are three similar values no more ceremony so this is another good
 thing about the church including perhaps in order to interpret we don't
 need to define interpreters these are already interpreters let's see how
 that works we will interpret this threesome in two string which would have
 a standard seven group instance so let's define are those standard semi
 group instance for string now in order to extract into string we need to
 have an extractor so let's make it available so now string has a typeclass
 instance of the extractor typeclass and we can run that's it that's how
 we run we do need to specify the type parameter but that's it so we don't
 say or run this with that extractor all of that is in place and so we have
 a lot of computations in our DSL those computations are going to be more
 concise here is the code for implementing disjunction with some testing
 here is for example how we have a case expression so X is a disjunction
 which is left of ABC and here we want to match on X and we have the two
 possible cases and that's how it works so now we have seen the encoding
 coatings of three typeclasses let's now look at examples and have a more
 have more intuition about how these including actually work and what are
 the trade-offs in each of these in committees the simplest typeclass that
 has type constructors is factor now until now we are looking at the semi
 group or Minh mono it now these are typeclasses for types functor is a
 typeclass for type constructors and for type constructors things are a
 little more difficult and there will be more syntax and more type notations
 however they are quite similar to non-constructive typeclasses in very
 important ways they are very similar so keep in mind that free semigroup
 Freeman or your free filter are basically applications of the same construction
 to different typeclasses in order to construct a free functor the first
 question we need to ask is what methods is typeclass requires so there
 is one method let's look at this method so the tree encoding of a free
 factor would have directly encoded this as a case class let's call it f
 map and it will also have a case class for wrapping a type constructor
 that we base that we generate from so to remind the free functor typeclass
 needs to be generated by a type constructor so we don't just have a free
 semi group we have a seat free semi group generated by type Z so we don't
 have a free functor we have a free functor generated by a type constructor
 if we need to start with some type constructor which doesn't have to be
 a functor it can be but it doesn't have to be so we I call this free funder
 over F now I introduce this notation this bullet in order to emphasize
 that F is a type constructor it has a type argument here which I'm not
 writing I could write F a but a is not known is an argument so it's a type
 function really so I'm trying to find notation for type function so in
 Scala it'll be like this and I don't like this notation so much but it's
 okay but in my short notation I right now found this to be a little better
 more visual so this is a type constructor F that waits to be given a type
 arguments so just like this in Scala and so this is the tree encoding of
 a free factor so I call this a tree encoding because this encodes an expression
 tree unevaluated expression tree for a functor valley now what did I do
 in order to write this code are basically the wrapping now a trait must
 be there this is a scala syntax for disjunction so I need a disjunction
 so one case class raps a value of F of N and the other case class raps
 this so it's it's going to denote the result of applying F map to a free
 constructor note that this F map has an extra type parameter because we
 extend the F of a so I have chosen the name Z here the result of F map
 is F of a so we extend f of a but the arguments of this case class or the
 parts of the case class have a parameter Z it's an arbitrary FZ which is
 going to be this free functor of Z which we map with a function of Z to
 it and the result is a free factor of a so this type parameter Z is hidden
 inside the type constructor we extend F of F F F F a naught of Z so the
 Z is not visible outside so we outside we will think this is a value of
 this type but actually inside it has a Z now this is a very interesting
 situation that we have a case class permit rise by an extra type parameter
 which is hidden from the outside type and let us look a little in more
 detail about what it means to have such a type parameter let's consider
 a simpler example simpler than all this and write this code so I declare
 a sealed trait with a type parameter a and inside it I have a case class
 that is permit rised by another type parameter Z and it has values but
 depend on Z but it extends key of it so it hides the Z from the outside
 type let's look at how this works what if I wanted to construct a value
 of type K of F how would I do that well here's here's how there's only
 this case class so I have to use this case class and I have to specify
 some other type for Z let's specify string and then I would have a value
 which has visible type Q int but actually inside it's hiding a string type
 and it knows that it's hiding experiment right so it could have been another
 type so when we have a value Q of this type we know that it is integer
 in this parameter but we don't know what is this other parameter Z we know
 that it exists inside Q hidden inside Q so it is called the existential
 quantified type so this is a tie Plantation that I would use to denote
 this this definition this definition is a type constructor with parameter
 a witch inside hides a type Z which must exists also to build a value this
 type we need to find some type or select some type Z put it in put a value
 of this type in there but we hide it so other outside we don't see that
 Z it's exists inside so this is a notation and this is called the existential
 quantifier so this existential quantifier basically says that this I constructo
r it has this type so the function qz construct s-- a value of key of a
 so it hides zi some very interesting thing so the syntax says that qz is
 parameterize by both NZ but rho is very different for a and precede the
 role for Z is existentially quantified because it's hidden from the outside
 role of a is a type parameter visible from outside and the functor ends
 in a so this is always a factor in a it is not universally quantified so
 even though it's a type parameter here it's not universally quantified
 with respect to Z and this is so because when you build up a value of this
 type you must use a specific Z it will not work for another see later it
 would have that specific Z baked in the value Q once you construct it so
 that's why it is an existential quantifier and not a universal quantifier
 but the code does not show this explicitly the code is a bit confusing
 we have just seen a universal quantifier in the code here and here and
 the way to implement this universal quantifier was to have a method insider
 threat a trait and the method was paralyzed by this X the way to have an
 existential quantifier is to have a case class inside the trait and the
 case class experiment rised by the Z the method inside the trade hides
 the X because the X is not a parameter here the case class inside the trade
 hides the Z because the Z is not a parameter here so until now it's very
 similar but case class is not method quite rate so this is the crucial
 difference so if it's a method of a trait then this would be a universal
 quantifier a method that has an extra parameter hidden from the outside
 a case class with an extra parameter hidden from the outside that represents
 the existence of quantifier so we have to keep track of this ourselves
 the syntax of Scala does not help so much to keep track of this but this
 is a very significant difference between the types 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
so we need to keep in mind that the encoding of the three-factor uses here
 Z as the existence of quantified title to get a little more intuition about
 how the existence of modified type works let us consider a simple example
 similar to this one where you have existential quantified type Z with a
 function mapping it to something and another piece of data containing that
 type so consider this type expression just temporarily I denoted this by
 P a and we will now show that P a is actually equivalent to the type a
 a scholar implementation of PA would look like this we would have a sealed
 trait and a single case class that hides the type Z now imagine we would
 like to construct a value of P a where a would be some fixed type say integer
 in order to construct it it would have to use the case class easy and we
 would have to give some value of the type Z and the function from Z to
 a so imagine that we have the type Z equal to a well it's our choice we
 can choose that we give a value of type a and here instead of this function
 will give identity we can always do that for any type a and so this means
 we can always build a value of this type if we have a value of type a so
 that gives us a function that converts from a value of type a to a value
 of this type just inserting identity function here and inserting the value
 a here and setting Z equal to a so we are free to choose what Z is when
 we construct the value of this type so this gives us the equivalence function
 in one direction from a to P now how about extracting a from P if we have
 a value of this type we actually cannot extract Z out of it so a value
 of this type contains Z as part of it but we don't know what the type of
 Z is and because the type Z is hidden we cannot extract it out of the function
 PA we cannot have a function whose type is unknown whose whose type signature
 contains an unknown type however what we can do is we can extract a out
 of PA in order to do that we need to apply this function to this value
 this is the code and we don't need to know what the type disease this would
 be some unknown type the function f has the right type signature so that
 we can apply it to that Valley so this is a well defined value and so in
 this way we can extract a value V out of PA no actually we cannot transform
 PA into anything else other than into a value of type a because this data
 only allows us to get a Z or to get this function or to apply this function
 to this now we cannot get a Z out because we don't know the type of Z we
 cannot get this out because we don't know the type of this function so
 we cannot write code that says take a pee and output some unknown type
 that doesn't work in Scala the result type of the function must be given
 must be fixed before you can write the code of the function so this means
 this value is observable only via this function so the only way of doing
 any computations with this PA is to apply is extracting function and to
 get an A out of it and so if you wanted for example to compare two different
 values of type PA then you cannot directly do that because you don't know
 what what Z is you cannot look into it it's hidden so the only thing you
 have to you are then forced to do is to extract an a out of this and compare
 the resulting values of type a and so for this reason the functions a to
 P and P to a are inverse to each other when we use P to a in order to come
 compare any values of type P a so this can be shown relatively easily thank
 you for example take a composition of a to P and P to a in one or another
 direction and you can substitute the code in one direction this will be
 identity of Z so that's clearly going to be identity in the other direction
 you have this and this should be equal to the results on so this a equal
 to a PTA of sum P and that should be equal to that P in order to show the
 isomorphism in the opposite direction so that requires us to compare two
 different values of type P of a and we have to do that by applying P to
 a to both sides and that's what will again give us identity so I skipped
 this calculation but this is very similar to what we did for proving the
 identity of types and a couple of slides before when we used the universally
 quantified type so this proves this equivalence and actually there is a
 stronger version of the equivalence which is this if you have a functor
 if so this is not a free construction this is just a given factor then
 this is equivalent to that factor and this is proved in a very similar
 way the only way to observe a value of QA in other words to compute anything
 out of it is to extract an FA out of it you can extract an FA by taking
 FZ and doing F map with this function and you can't extract anything else
 cannot extract an FZ out of it because you don't know Z you can't extract
 this function out of it you don't know what this function is what would
 the type of this function is so the only thing you can get out of this
 QA is some value of type of a so that's the transform transformed q2 f
 f2 q is similar to this one you take an affiliate take identity function
 and very similarly we can show that these two are observational inverse
 is now they are not directly inverses in a sense because you cannot directly
 compare values of this type because that contains some unknown type Z inside
 and what if this type is different however this type Z is not observable
 even if it's different so you have some value of Q with one Z and another
 value of Q with another Z you cannot see that this type z are different
 in these two values you have to first extract the observable value out
 of this which is a value of this type once you have extracted it you compare
 those so this is what I mean by a traditional equality and so you can show
 that these two functions are inverse of each other when the Equality is
 understood as observational equality so whenever you compare values of
 this type instead you extract FA by using this function and compare the
 resulting values so this is how the existing shop type works now in the
 free functor construction we use the extensional type and we can rewrite
 a construction using this type expression so I just taken this code I have
 rewritten it using the type notation that I'm using so that is the definition
 of the free function so this is a recursive definition because we're reusing
 the type FF itself as we are doing here so if F is reused as part of one
 of the case classes so this is the tree encoding in other words this encodes
 the young unevaluated expression tree of an expression obtained from with
 a free factor of values and operations so there are operations which are
 insert an FA into the free function and apply and a map to free frontier
 so using these operations in any order we gets arbitrary values of the
 free functor so let us derive reduced in cooking to derive the reduced
 important we start from the tree including we try to see how it could simplify
 values of the tree encoded type using the laws of the typeclass so the
 furniture typeclass has two laws there are the identity and the composition
 law and composition is also associative so that's another property so we
 need to see if we can simplify values of this type so let's consider values
 of this type any value of this type you must be by construction either
 wrapping of this or it will be a previously constructed value of this type
 multiplied by a function like this so essentially we have to start with
 some wrapping and then we multiply a few times every time we multiply so
 we use a map function every time we do that we add another existing type
 parameter so then we have all these existential type parameters then we
 have the first wrapped value of this type constructor F which is not necessaril
y itself a functor and we have a bunch of functions of different types now
 all these functions must be composed associatively in other words the law
 of composition is that the result of mapping with this function and then
 later mapping with another function and then later again mapping with another
 function must be the same as a result of a single mapping with the composition
 of all these functions and the composition is associative so in other words
 we should be able to simplify this value into a product of this and the
 single function here which is composed out of all of these and the result
 of the composition doesn't depend on on the order in which we evaluate
 the composition because of associativity so therefore by using these laws
 we can simplify this expression into this expression where there is only
 one quantified type all of these other types are not visible anymore because
 we're not using them and there's only one function here or also there is
 a possibility that we just have this no functions and this possibility
 should be equivalent to having this value mapped with an identity function
 because of the identity law for function so therefore we can say let's
 just always have this type and if necessary put identity function here
 and we always have some value of type constructive F and we always have
 a single function but we no longer have disjunction because we can represent
 this case by putting an identity function in here due to the identity law
 of the factor so this concludes the derivation of the reduced encoding
 so the result is this formula which means we have successfully simplified
 this expression we got rid of a disjunction and we got rid of the recursion
 this is non recursive we don't use the recursive instance anymore we just
 found that it's equivalent to have just type constructor F and that's the
 reduced encoding of the free factor so the only important remark here is
 that it requires a proof that actually this is a reduced in Korean so by
 definition a reduced encoding is such that it respects the laws so if you
 apply for example map to a value of this type with identity the result
 must be equal to this it must so it is not true for the tree encoding the
 result will have an extra function here an extra existential type and so
 on and that's kind of not good enough for reduced encoding it must not
 be there so the reduced income must satisfy the laws and that's what it
 does so it requires nevertheless some ingenuity we have to derive it doesn't
 follow automatically what it should be and the proof that it is equivalent
 to the tree in holding and satisfies a lot another good result from reduced
 encoding is that we can see what happens when the type constructor from
 which we generate the free function is already itself a functor so if we
 are taking a free factor of a tied over a type constructor that is already
 a factor then as I already already said this expression which is that is
 equivalent to the factor itself so so this type is going to be equivalent
 which means that while there's no harm done including this free function
 except maybe performance will suffer you have some extra stuff will have
 some identity function here's a mother function basically you are just
 postponing the map there might be some advantages in doing that which I
 will show because you can make this stack safe but this will certainly
 be a performance hit so don't do this if the type constructor is already
 a function if you can avoid it but there's no harm done it's the same equivalen
t type so you won't have more information so proud so this is an interesting
 property because usually what happens with free constructions is that they
 wrap you're generating type in some stuff and so they add information to
 it so the resulting type is usually not equivalent to the type constructor
 that your racket but in this case a physical one so for functors functors
 are special and free functor all over a functor is equivalent to that function
 so that's a special property finally let's look at the church and according
 now this is a more challenging task because we are dealing with the type
 constructor so we let's start with this and what's children coldness now
 church encoding means we need to add a universal quantifier but since our
 result is a type constructor the universal quantifier must be for a type
 constructor so the church encoding that I have shown before was for a ordinary
 type or a free semigroup or something like that for a free semi group the
 type is not a type constructor for a free factor it is a type constructor
 so therefore the church encoding must have a universally quantified type
 constructor in it and things are just going to be more complicated because
 here's the structure of the type expression in the church encoding of a
 type constructor we have a universally quantified different type constructor
 then you have a function from your type to that type constructor and again
 from that to your type constructor so that's the general structure of the
 church encoding but because the insides are type constructors then this
 must be natural transformation so this must have another Universal quantified
 type inside so I use this squiggly arrow to indicate universally quantified
 functions such as natural transformations just it's the same error it's
 just suggestive so that like keep track of where I have universally quantified
 where I don't so if you follow this structure then this is going to be
 the entire expression for the church encoded free function now this is
 starting from the tree encoding we have a choice what do we charge encode
 which version code this or do we charge encode this and they're going to
 be two different Church encoders so starting from the tree encoding that's
 what we need to do now there's one interesting side of the church including
 that I'm going to explore in more detail now which is that the recursive
 use of the type is not seen in the church including in instead he replaced
 that with this universally quantified type constructor that is present
 so to speak so instead of the recursive use of free factor here I have
 this universally quantified P that is a very important part how church
 including works with recursive types and just before we go through that
 I want to remark that in this expression the quantifiers cannot be moved
 and you cannot move this quantifier to the outside it is really inside
 these parentheses that the C is dis quantified so to all see this function
 is given so for all C this function is given and that function is the argument
 of the outside function so this is important for the church included so
 you have several layers where types are 25 this type quantifier is specific
 to the free functor this wouldn't appear if we had no type quantifier here
 so this is specific but this would be always true for any Church including
 of a type constructor have a type quantifier inside that cannot be moved
 to the outside and of course also you cannot move this existential quantifier
 to the outside so for this reason when we write code we have to take care
 to hide these quantified types at the right place inside the data structure
 so let's look at in more detail on at how church encoding deals with recursive
 types and with type constructors so let's consider an example here's a
 recursive type not a type constructor it's just a type with fixed type
 Z it's a tree with leaves carrying values of type C the church encoding
 of this type looks like this so I'm looking directly at our encoding of
 the fee-free mono which was very similar and this was the encoding the
 church including of the free memory so we know this is correct now let's
 look at how it works we take this expression which uses the type P recursively
 twice and we write it here but instead of the recursive type P we replace
 that with X where X is the universal quantified type given outside so in
 this way the church encoding replaces the inductive use or recursive use
 of P by using this parameter X so the result is a non recursive type expression
 or at least it doesn't look recursive it does not use itself somehow to
 define it it's type but it is equivalent to this recursive type so it's
 very interesting that just by using a type quantifier you can remove type
 recursion well at least on the surface you don't of course actually remove
 it because the type is equivalent it's still encodes a tree with devalued
 leaves so it's still a recursive type or your recursive data structure
 but it's encoding does not show recursion so that's that's interesting
 so how shall we understand the way it works this is a run method of a declarati
ve way encoded DSL and so this method tells us that in order to extract
 a value what you need is to be able to extract value from this and here
 you have again these values how would you ever get the value X in practice
 in practice it would have to call this function on a Z several times to
 get some X's and then you would put these X's in here call this function
 again to get some more X's and so on so in practice it is a recursive process
 it can encode recursion but all of this is already encoded in this function
 so the type does not show recursion so in other words how can we produce
 a value of type X and we don't know what that type is it's we're required
 to write code that produces an value of type X whatever the type might
 be well the only ways to use this function somehow and this function requires
 us to give this as an argument so how can we give this as an argument either
 we give a value of Z as an argument and then we have our X we can return
 it or we give two excess as arguments and then we have a new value of x
 and we can return it but how where do we get the two x's well we still
 have this function so again either we give some Z to this function or we
 give a two-axis to this function so this is where the recursion comes in
 in order to produce a value of this type we need to have a tree with Z
 valued leaves and once we have that tree we can write this function so
 these functions are equivalent to trees with Z value leaves in this way
 now we can generalize this construction to a recursive type defined arbitrarily
 like this now here s is an arbitrary function that is fixed and this functor
 determines the structure of the step of recursion so for example here this
 functor would be as P equals Z plus P times P so this factor I call this
 induction factor because it describes one step of the induction when we
 derived values of the type so what we have seen right now suggests that
 the church encoding of this recursive type looks like this so this is a
 general way of encoding recursive types by church encoding and it's not
 recursive at least on the surface and I will show an example of church
 encoding of lists of integers [Music] so here's an example of church encoding
 of list of integers first let's do the recursive encoding just for reference
 it would have a be a shield trait with two case classes one representing
 the end of the list or an empty list and another representing non empty
 link in other words a value of integer type and and next value now Scala
 does not allow us to do this this would be the short type notation but
 this cannot be done in Scala because Scala does not allow you to do universal
 quantifiers while is explicitly so instead we denote first this as some
 helper case class CP just to make it easier for us and well we could actually
 probably define this as a type rather than as a case class but let's keep
 it like this for clarity so the CP of a is just a helper case class that
 represents this type it represents a product because we can simplify this
 function as a product of two functions one to a and this to and then we
 can simplify further 1/2 is just a and this is like that just for convenience
 later now it's very easy to encode the church encoding of the rest of it
 just a function from C POA to it now if you look at what that type signature
 is it's very similar to the type signature we'll fold it's a function from
 a and this function which looks like an updated updated function for fall
 gives you an A and a is arbitrary so here a needs to be hidden inside the
 trade as a universal quantifier so as I said before that's how we need
 to keep in mind that this is universal quantifier and therefore we do a
 method in a trade so we don't do a case class parameterize by a hidden
 parameter that would be an existential qualifier we do a method in a trade
 because it means that this method can be called with any parameter unknown
 at the time of defining this method and that's what the universal quantifier
 does so ok we are done we define this type let's define values of this
 type so to create an empty list we need to write this boilerplate now how
 do we implement an empty list well we need to implement a function that
 takes this and returns that you know this has two functions inside we need
 to think about what these functions mean in order to be able to implement
 anything here so what do they mean all these functions mean what to do
 we'll look at this for example what to do when the list is empty how to
 run the list how to fold the list what is the result value when the list
 is empty and this function tells you what is the result value when the
 list is not empty it has a head value act some type integer and it has
 some additional arrest values which have been already evaluated or folded
 that your value a is given so what do you do then how do you update your
 fold down now an empty list would never get into this case it will always
 just give you the eighth so therefore this function for an empty list ignores
 the link function and just returns in whatever the end is the empty list
 when folded always gives you gives you that justice this value which is
 denoted by hint in the fold signature this is denoted by in it but we're
 trying to imagine the list being created so there's a empty list or end
 of the list that's just the name of the variable so for this reason that's
 the implementation of an empty list in the church encoding now let's do
 them list with one element how do we do that so we need to fold and in
 order to fold with a list with one element we need to use this updater
 function on this element and on the rest of the list which is empty which
 is going to always evaluate to the end value so that's there for the implementa
tion of a one element list so this is now more suggestive but we are having
 an and one element list linking X to end so this could be this class like
 this in your case class in coin but you know this word we don't have any
 case classes here representing lists all the lists are our functions the
 CP is just a convenience type where pattern matching here just for convenience
 we don't need to do that if we for example encoded this just as a tuple
 of two values then we would not need the case expression we would just
 take this under square one on your store two and so on but it will be less
 readable so that's why I I write it like this let's implement appending
 so we have an element X and a previous list we want to add this to the
 list what we need to implement is how to run the resulting list or running
 a list means folding it we are given the initial value of length function
 now we need to use the link function on the X and on the rest of the list
 but the rest of the list is this so we need to run this using the same
 fold information so the CP case class encapsulate all the fold information
 we need in order to run the list so when you run it with the same old informati
on we get a value and then we update with the X so this is how we append
 now folding is just the same as run so we can implement the fold function
 with this type signature and it's just calling run with these arguments
 notice that fold is non recursive the fold function is non recursive actually
 none of these functions are recursive we can implement convert into ordinary
 lists just as a fold with a list constructor we can implement math again
 this is going to be non recursive because we're just going to pass some
 modified food so the lists are how do we run how do we fold a list after
 mapping we just fold it with modified function so instead of X's we substitute
 f of X that's all this is not recursive so the map is non recursive on
 these lists the fold is non recursive in these lists all the recursion
 has hidden inside these functions that they run functions those run functions
 will call other run functions and critically what we don't see that our
 our code here is not you closer here's how do we--how implement has option
 we run it on an especially crafted folder folding information and [Music]
 that actually is an interesting observation that I would like to make is
 that pattern matching such as head and tail is not directly available on
 this data structure this is a function now it is not a bunch of case classes
 we cannot directly pattern mention it and determine if it's empty or not
 for example we have to run this function on some arguments and this run
 could take a while so for example tail cannot be implemented efficiently
 as a Big O of one operation it has to run lowest to the end and build the
 tails as a second list so that's a deficiency of the church encoding but
 if you need pattern matching operations you need to run the structure or
 the entire function which might take a while so let's run some tests here
 implement just some function so here's how we create it's just a folding
 with the Sun here's how we create some lists in the church encoding so
 it's a pure of ten which is one element list we append five to this we
 get a two element lists with five and ten in it so then we check the sum
 of these elements is correct and converting it to list gives you what you
 expect in the map gives you what you expect now the map operation here
 is perhaps stock safe we can check that some is stack safe so our fold
 implementation is stack safe creating a list of any elements is stack safe
 when implemented in this way so what we need to do is we need to compose
 many links together but this needs to be done in a stack safe way which
 is why we do it by hand here we don't just do link compose link composing
 writing this would actually not be stack safe you'll see that later in
 more detail also appending many elements is not stack safe we obtained
 a large number of elements then trying to run that list do anything with
 it would be a stack overflow so you see the sum the sum function itself
 is a stack safe as long as you can run the list inside it but it's the
 list itself that needs to be stack safe now the function that constructs
 the list is a function that builds other functions and that function needs
 to be stack safe I should for example avoid composing many functions but
 you can't avoid that if you do attending one by one so you need some more
 clever implementation which is possible but I will not discuss it right
 here let us see that the church encoding of a type constructor so I'm using
 this notation with a bullet to denote type functions so the scows index
 for that will be this so the church encoding let's begin with the church
 encoding of a type function P just the type constructor P so what is the
 church encoding of that this is the church encoding of the type constructor
 P you have to have two quantified types and one of them is a new type construct
ion which is quantified in other words this is a function others parameterize
 by an arbitrary type constructor F and it's argument is a function that's
 parameterize by an arbitrary X which has this type signature so this function
 world alternatively can denote it like that with the squiggly arrow that
 I'm using just it's the same I just want to have a different notation for
 this it resembles a natural transformation however these P and F are not
 necessarily filters so we don't necessarily have a naturality law it's
 just a generic function parameterize by a very mature X with fully generic
 code but if these are not factors then there are no materiality laws imposed
 on us so this is not a natural transformation but a type signature is exactly
 the same so this is somewhat complicated and for this reason I'm going
 to show you an example of how to encode the option type yeah the option
 type constructor in the church encoding so that you see how all this is
 translated into code so the direct encoding option would be a polynomial
 data type like this and with these classes that you could call like this
 so we're going to implement this type expression now where this is going
 to be the first type parameter and this is going to be a second type parameter
 which is inside this argument so let's first encode this argument has a
 separate type for convenience so this argument is a function that extracts
 a P from an option so it's again looks like a natural transformation from
 option to P except P is not necessarily a function so let's denote this
 X option which is this extractor from option now this X option just for
 convenience we define this type separately parameterize by P but it is
 not parameterize by X because X is the universal quantifier type which
 needs to be hidden inside this X option so therefore we have methods in
 the X option what are characterized by X now I could have just had one
 method here such as apply with parameter X and then I would have this function
 as the type of that method but it is actually more convenient especially
 in Scala to have separated methods so if this is a typical pattern of a
 function from a disjunction to something is equivalent to product of functions
 from each part of the disjunction to that something so then the equivalent
 type is less and we can just denote each of these as a separate method
 in the trait so that's just convenience we haven't done anything really
 we just equivalently transformed this type for convenience it's a little
 easier to read and we can give these trade methods suggestive names so
 having defined this type it's now easy to define the church encoding on
 the option which is parameterize by a notice listen thing has only one
 type parameter which is a that is visible outside the type parameters P
 and X should not be visible outside they're hidden inside his type expression
 so therefore we put the type parameter a outside and the run method I just
 call this run for convenience to suggest what the church encoding does
 is that if it runs a DSL program with an interpreter so this is an interpreter
 for the the operations of the DSL and this entire thing is the runner of
 the DSL program into an arbitrary target type so that's why I always call
 these methods run but this is just been named doesn't do anything by itself
 it is the type that do all the word no types so the run method needs to
 be permit rised by the parameter P which is itself a type constructor and
 this is the type of the run so that's it we have finished implementing
 the church encoding as a type now we need some helper functions so that
 we can easily create values of the Church encoded option so how do we implement
 for instance constructors the Sun and none now these are not these trade
 methods these are our so these are our methods mean we could you could
 make these methods private if we wanted to this entire type could be made
 private the users should not have access to it so to define some we need
 to put an X of type a into the auction so how do we do that we define this
 church and call it option with around method and we need to implement this
 so how do we run a non empty option well clearly we use the sum method
 on the x value that we have to get a P of X so that's what we do here how
 do we run an empty option we use the non method which has no arguments
 and gives us a P of X that's it a lot of boilerplate as you can notice
 all of this is boilerplate all this is boilerplate this is the actual code
 implementing the Constructors for direction there are some libraries that
 make it easier to use but it doesn't matter enough so we can also show
 that option the ordinary option is equivalent to the church encoded option
 to do that we do a wrap and unwrap methods let's say so first we take an
 ordinary option and we implement the church encoded option that's very
 easy we just do one of these two constructors unwrapping from a see option
 into an ordinary option requires running let's see option again we have
 the same [Music] same phenomenon but if you want to pattern match for instance
 you want to detect whether this option is empty or not you have to run
 it there is nothing we can pattern match directly on this value because
 this values a function you cannot pattern match on code of functions so
 how do we do that so we need to run it but to run it on what we need to
 provide an interpreter so the interpreter will take our church encoded
 option and produce an ordinary option so that's what we need to prove produce
 and these are just the standard methods of the standard Scala option and
 that's that's it so here's how we can use it so we can create some values
 of option type now pattern matching does not work cannot directly implement
 that imagine so which if we try it there's a type of problem so for example
 we wanted to pattern match directly like this by running the option on
 something but I can't really do that because we need to provide an interpreter
 that interprets arbitrary type X under the option but we only have a specific
 types here type a so if we write this code which will be kind of what we
 want we gathered a pair so the only way of doing a case expression would
 be first to run this like this to unwrap it convert it to an actual option
 with case buttons and then we can pattern match on those on the other hand
 natural transformations work fine they don't require running on some first
 on on a real option you can just run on a constructed interpreter and interpret
 this into another function so that's that works fine and here's the test
 code so now finally let's look at how the church encoding works for a recursive
ly defined type constructor so this is very similar to how it works for
 a recursive type in that all the recursive usages of the type constructor
 are replaced by this type that is universally quantified and since now
 we are dealing with a type constructor we need to adjust our notation so
 that we define first of all the reclusive type constructor like this where
 s is now a factor that describes at the induction principle but it's now
 paralyzed by this type constructor so this notation that I'm using for
 a higher-order type function in other words it's a it's a functional of
 types that are themselves function of types and Escalus index won't be
 like this so an example of that would be a list cursor we define like this
 and if we define s like this then you see the P parameter P denotes the
 recursive use of the type constructor in its recursive definition so this
 is how we could denote this construction and then the church encoding of
 this looks like that so there is similar to a church including for cursor
 types and it's non-recursive it's a type expression that does not require
 recursion so let's see how the list constructor is defined in the church
 encoding this is the type expression for the church encoding of the list
 because this is the structure or induction factor for a list we just saw
 and I'm just adding all the type quantifiers explicitly I have a B which
 works inside these parentheses only it's hidden I'm gonna have a tree which
 gives me this is this it's also hidden from the outside I can equivalently
 transform this type signature into this where I [Music] again replace a
 function from disjunction to B or B by a function from just part of the
 disjunction to P of B and then from this part of the disjunction to P of
 B which I simplify to just beyond P so that is how I would seem to fight
 now I will deliberately write code similarly to an on parameterize list
 that I did first so the end needs to be paralyzed by this B now I used
 X instead of B here and now finally I search encode the list of a just
 as a function from this to P of a very similar code that I had before in
 order to define empty list a list of one element and appending there was
 a difference that link and the run I'm getting them as methods of a trait
 whereas before I was getting them as parts of a case class I could have
 done a trait before as well because really it's just a convenience but
 here I could not do case class because I need this type parameter oh I
 didn't know that this be in English used for consistency this type parameter
 being what I have here needs to be hidden inside the type CL which is this
 type which is the argument of this function and case classes will not do
 this frame so I need a little trade with methods in Scala other than that
 the code is very similar fold is non recursive in order to implement fold
 I need to have a bit of typecasting because the only way to get anything
 out of the list is to run but I need to run on an interpreter if I'm folding
 are not interpreting into another type constructor I am interpreting into
 a single type so however need to pretend I'm interpreting into a type construct
or because that's the type signature of the church encoding it's run into
 an arbitrary type constructor so I can choose that type constructor to
 be the identity factor and in this way I can get ordinary types out so
 I define or constant factor be another possibility so I define a constant
 factor and then I run into that so I give that C is a type parameter and
 then I encode the running just like I did in the fold implementation above
 in this hold implementation here except that now I need to specify this
 as methods over trait rather than as parts of the case class other than
 that it's very similar and here I typecast X X has type X but I know this
 will only be called on values of type a so I know that even though I'm
 supposed to provide [Music] this CL of C with arbitrary X actually this
 will only be called on values of type a so I can cast this safe way to
 satisfy the type checker now this is a little ugly but that's what I found
 to be necessary with the constant factor being used so using this I define
 a sum I define two lists and I run exactly the same tests as I ran before
 network of the lists so now I would like to generalize the constructions
 we have seen two arbitrary typeclasses so this is something that the church
 encoding makes it particularly easy to understand but it does not have
 anything to do with the church encoding so let's look at first of the church
 encoding of a three-cylinder looked like this now here X is an arbitrary
 type but this is a signature of the semi group method which is combined
 so if X were constrained to the semi group typeclass and this would be
 given already as an implicit argument let's omit that argument and I would
 denote it like this so here the typeclass constraint is denoted here like
 this so now it is an arbitrary type X which must be of this typeclass and
 then I have this so it's a much simpler presentation and notice that the
 induction factor for semi group over Z is this so basically what happens
 is that a church encoding of a cylinder which is this one which we can
 generally write down as the semi group functor or induction functor as
 I call it before but actually this is always going to be of the form Z
 plus something when we do a free side quest inspection because we have
 to wrap the Z pipe and then we have these methods this tells us how to
 generalize the country construction to arbitrary typeclasses so first of
 all we define a functor that describes the operations of the typeclass
 so for example for the semi group we have a single operation and writing
 it in this form means that CX is just a pair of XX but in more general
 typeclasses ships would be more more general and so that would be what
 I call the method factor this type is in a category theory called an algebra
 or sea algebra so if C is a functor when this type is called a sea algebra
 which is a type parameterize by X but I just mentioned this because the
 fact that it is called sea algebra in category theory it doesn't really
 help us so much it is suggestive typeclass has some operations these operations
 maybe have some laws some algebraic laws and so for this reason it is suggestiv
e to call this an algebra but it's perhaps more confusing than suggested
 so let's just not use that terminology instead let's concentrate on what
 these things actually do so this I would call the method factor of the
 typeclass C I would call the typeclass C inductive if such a functor exists
 why because it appears that we are defining values of x by induction so
 if this factor is given so this is some kind of container of some shape
 containing X then we can derive new values of X using these operations
 so the operations the value of this type that tells us how we can derive
 new values of x given some previous values and how we're supposed to have
 the previous values is described by the shape of the method functor so
 for instance this method FUNKER could have a disjunction of several parts
 and each part would have zero one or more X's in it and so that would correspon
d to operations with zero one or more arguments in the operations of the
 typeclass so for the semigroup the C is just a pair for others it will
 be more complicated but given this C we can write down a general formula
 for the free typeclass C over a type Z so the three encoding would be like
 this so the free c generated by z or free c over z is a recursive type
 defined like this the church encoding would be like this because we replace
 the recursive use of the type through the type parameter X now quite equivalent
ly we could say the church encoding is like this it's for every X of the
 typeclass C in other words for which we have this value we have this it
 is then obvious that also the laws of the typeclass will be automatically
 satisfied by the church encoding after running and this value and the reason
 is X must be of typeclass C and so after you run this you would have a
 value of typeclass C so whatever operations you apply to this are actually
 implemented in the typeclass C and they therefore already satisfied law
 type constructors used in the same way here I have shown what to do with
 new type constructors with ordinary types it's just that there's more notation
 and more parameters so for example the freetypeclass C over a type constructor
 F in the church encoding looks like this where you have an arbitrary P
 from typeclass C and then you have this generic transformation or natural
 transformation which might be mapped into PA now it's very important to
 notice where the tag trailers are here so this a is the outside a this
 is the only outside type parameter that is visible and this type rather
 is hidden and also this is a hidden type parameter inside so we have generalize
d from our examples to an arbitrary typeclass let us remind ourselves what
 we have done first we start with some arbitrary type z and we enriched
 it to a monoid which was a free monoid we have started with an arbitrary
 that constructor and we enriched it to a unit which is DSL that was motivated
 by the interpreter pattern but this was actually a free monad so this enrichmen
t was done in the tree encoding by adding case classes that simply represented
 the operations but there are also other encoded in cuttings that are more
 sophisticated and so this works for any type Zi and any type constructor
 and the result is a free type construction and this type construction performs
 no computations it just accumulates all the data and it needs to be run
 in order to actually perform computations and so intuitively the free Mona
 and mono it over the type Zi adds some wrapping to Z just enough to make
 it look like a monoid to satisfy the type signatures of the moon your head
 doesn't actually perform computations inside it just adds some stuff so
 that the result looks like a mono it similarly the free functor it wraps
 a type constructor and just enough stuff to make it look like a functor
 and we can interpret these free values into non free values into specific
 concrete functors monomers and so on by running please notice so we have
 seen several coatings and running is done differently for these inquiries
 but all of these including do the same thing they provide you a free type
 construction which performs no computations it delays all the computations
 records all the data that you to perform these computations later and later
 happens when you run so you create a DSL program you can combine different
 programs very easily and you can then run so what are the questions that
 are but remain to us so what are the five classes we can construct in this
 way so can we construct for a given typeclass C can we construct a free
 instance on the typeclass over and given say FA the answer is in turns
 out to be yes with some typeclasses no with others so I will show examples
 I really started with functor I will show examples of these typeclasses
 and I will show why you cannot sometimes have a free typeclass which encoding
 is to use this is an important question for reference some recordings perform
 better than others these encoders are not the only ones available but I
 don't want to go too far into other possible encodings and if you're interested
 look up church encoding and you would immediately see other related components
 such as course encoding every go encoding and some other info base and
 another set of questions related to each other are about the laws so what
 are the properties of this free instance can we define the free instance
 by its properties formulated in some way in the turns out there are four
 main properties that are important first of all if we have a free instance
 of a typeclass over a type construct if it means that we need to be able
 to wrap a value of F into a value of this free type lasso this free C is
 this free instance of a typeclass so we should have a function with this
 type signature now for second property is that for all specific instances
 of this typeclass we should be able to run our type free instance into
 that specific instance given this function so this function the extractor
 as I was used calling it before this extractor only shows how to map the
 generating element or to generating type the F into m and once we know
 how to do that we should be able to wrap the entire tree instance into
 him so in other words is generating type the Z here and the F here has
 been wrapped into some stuff to make it look like typeclass C and we should
 be able to unwrap it into a specific M only knowing how to transform to
 generating type into him so this extra stuff should be transferable automatical
ly into the correct typeclass the laws of the typeclass must hold after
 running into that ami and the last property is interesting is that if we
 transform the generating type into another type then we should be able
 to automatically transform the free instance as well so in other words
 the free instance should be so to speak a factor in F except of course
 F is a type constructor so we need to generalize the notion of laughter
 it should be covariant in the type parameter F and so we should have some
 kind of map function that map's atlandis indeed if we look at this definition
 we had right here it satisfies all these properties so for example this
 is covariant in F because F is behind two arrows this is covariant in Z
 obviously so these are the properties that we will show that how we already
 know that some of these properties hold but we will show that more more
 formally so what is the recipe for encoding a freetypeclass the recipe
 is this first the typeclass needs to be understood as having methods that
 is functions with some type signatures like this and all these Q's must
 be covariant complete there are some functors or some type constructors
 that must be covariant in the parameter P and that is required that all
 these methods should have a type signature of this form in other words
 the final return type must be the type constructor not here that were given
 if that is so we can put all of these Q's together in a disjunction like
 this call it s and then this generic function will be a single value that
 represents all the methods of the typeclass at once and then we call s
 the methods factor so once we do that we define the tree encoding which
 would look like this it will be recursive because these queues will have
 FC inside them perhaps but that that's fine now the queues might contain
 existential type primer so if if these methods contain more type parameters
 on the left hand side it's fine they will become type parameters here and
 as we have seen type parameters in case class inside a trait that are hidden
 from the trait become exist tential type parameters and so those are fine
 those might be present and then finally we can implement the run method
 for this there are easier so if we are in the wrap case which is this part
 of the disjunction then we just map it to him and we're done and for all
 other parts these methods are run recursively so we run recursively all
 the keys that are inside the queues and then we just use the method of
 the typeclass M which will have the same signature except that instead
 of peas will have specific values already of type M and so we can just
 use those methods and that's how the run function works so this is very
 easy to encode the tree with coding it's very straightforward almost mechanical
 so you have a definition of a typeclass you can mechanically generate this
 and it's run method there's no problem at all to generate instance of the
 typeclass and the run method mechanical in order to get a reduced encoding
 however you need to perform reasoning about what are the possible values
 of this free typeclass instance and what are the laws of a typeclass and
 how you can simplify if possible values you would start with the tree encoding
 which is going to give you some nested case classes and then you try to
 simplify them and that is non trivial you don't have a generic procedure
 for doing that so that has to be done separately in each case or factor
 for contra contrary and so on so the factor we have done this but we will
 do that for all the other typeclasses finally the church encoding can be
 defined either using the tree encoding which again is completely mechanical
 so we just do this you do the S and then you have SP TP all in parentheses
 going to P put a type quantifier and P and you're done or you can do a
 church encoding of the reduced encoding so that's a choice and there might
 be different performance in all these occurrences so this in other words
 well we will show the more formally if this is all true but if you have
 an inductive typeclass which is characterized by a methods fantasy and
 so it's methods are this algebra the C algebra then you have a free instance
 always it has all the properties and we have further properties for instance
 if P and Q are instances of this class then the product of P and Q and
 the function from z2 p where Z is a fixed type are also instances of pi
 plus C not necessarily these sum or a disjunction and the product with
 a constant type are not necessary parts of it last class but those are
 and this is relatively easy to prove for instance if you have this and
 this means you have a P is an instance of C and you have a Q as an instance
 of C and you can derive this easily just project this to this project out
 the Q C is a factor so you can do that project out the P to get sick you
 get your P get your Q get their product so that's very easy and it's similar
 will you come to this but you cannot implement the disjunction for example
 because you would need to decide which part of the disjunction you have
 but you can decide that because we have a C of P plus Q and it's not necessaril
y that you can decide which part of the disjunction it must be so that function
 cannot be implemented without losing information so that won't satisfy
 lowest similarly you cannot get Z P because if we need to create values
 of type Z but you don't have them necessarily plus Z so it's also an instance
 of the same of course and indeed we have seen looking at all the previous
 typeclasses that we analyzed factored contra functor applicative Minard
 and so on they all have this property the product of two typeclass instances
 and this construction always again if you have a new type cross sixties
 so that is one because they are inducted all inductive typeclasses have
 this property and type constructor typeclasses have the same property just
 that the methods function needs to be in coded language what type lasses
 cannot be trained included and they're not inductive well one typeclass
 that's not inductive is reversible and indeed this is not true for traversable
 this construction does not work for traversable if P is favorable than
 a function from some types need P is not reversible in general any typeclass
 that has a method that's not returning a value of that type that's not
 inductive the reason is methods must be of this sort so if you have methods
 not of the sort that did not return values of this type then it's not an
 inductive typeclass so here's an example imagine a typeclass for a type
 constructor PA it has two methods point which inserts a value of a into
 P and extract which extracts a value of a out of P now this would be of
 this form because it returns the type construction but this is not it returns
 just bear type a and so this typeclass that has both of these methods is
 not inductive it does not have a representation of methods through a methods
 function like this or like this and therefore we cannot do a free construction
 of it using trees and we don't know how to encode free instances of this
 class traversable functor is another example of non-inductive now just
 to mention that if all methods of the typeclass have the opposite form
 that it consumes a value of this type constructor and then gives you something
 like this but if all methods are on this for not just some so this is still
 not non good enough there's some methods did not consume values over this
 high class of this type constructor but if all methods are of this form
 they consume PA and return something then there is another way of doing
 a free instance which is called Co free and these typeclasses are called
 Co inductive I'm not going to describe them in this tutorial but perhaps
 in another chapter so if we're going to free control function let me go
 to the code over free factor which I have not yet shown but actually here's
 the code what I was just talking about I can define free instance of any
 inductive typeclass I can write code for this generically so it's a free
 instance of an arbitrary inductive typeclass now this is not for type construct
ors for simplicity this is just for ordinary types this before semigroup
 monoid and such typeclasses and here goes the rap and the operation so
 the operations contains the sea of free so this is the definition but I
 just showed of the free instructor so that is the hopes and basically that's
 it we can show that it has methods of the typeclass and we can run we can
 write the run method so you see the run method is for a generic oh it means
 to assume is that C is a functor C not not everything I see is this methods
 function and and I'm done so the P method C is the evidence that the type
 P into which I am running is an instance of typeclass C so this is a value
 that encapsulates all the required methods so that's why I called P methods
 C so P has all the methods of C and this is a very easy code that just
 checks whether it's wrapping then it runs the extractor or if it's the
 operation then it runs the methods of T on the result of running under
 map so I'm required to run under map because I'm under the sea and coming
 here I need to run this first into a value of P under map of C so then
 I get C of P and then I can use methods to convert that to pee that's how
 it works and there's an example I use this for a generic construction to
 define some free semigroup so these are this is the methods functor for
 the semigroup I'll show it as a factor this is a free semi-group that's
 it generate it by screen now this is just to be clear this is my own definition
 here it's not the cats library definition or any other or scalzi definition
 I believe in those libraries what is called free is actually the free Mona
 it's a free Mona not just freaking structure any type cons so in my definition
 here it's of generic free instance of a given typeclass for inductive typeclass
es and here's code that creates some values and runs them so I create ABC
 XYZ wrap them then I use operations to add them and I run this into a string
 and I'm done and I can do the same with the church encoding it's slightly
 more type definitions but it's exactly similar the church encoding is this
 type equivalently it is this type and so I just define the trait for the
 argument and then I have this and then I can show that it's a five class
 now the showing that it is a typeclass is actually non-trivial this church
 encoding must have methods of the typeclass C in other words it must have
 a function of this type C of the charging : must be mapped into the church
 encoding itself and the types here are different with an X inside here
 and all Y inside here because are different so this actually is not very
 trivial to derive you just need to be very careful and following the types
 and here's how this works so how can we get this value now we would get
 this value we have Z or we don't have a Z obviously all we have is this
 we have C of something so it looks like our only hope is to get this C
 of Y and then we would have a function from C of Y to Y and we can call
 on that C of one and that give us the result now we are given this so we
 are required to be able to work with an arbitrary given Y so imagine we
 are given someone but then we have this function which has an arbitrary
 X inside that we can set so this function accepts arbitrary axis so let's
 set this X equal to Y in that function and then we would have a value of
 C with Y in here Z plus C of Y going to 1 but we have AZ plus C of Y going
 to 1 we are given that value so we can substitute that value in here mapping
 undersea so that we can get a sea of why as a result so then we get a sea
 of why we can put it in here and get the white house so this is a little
 convoluted but that's the code we map under sea given a type train with
 your Y in here to run the free instance and then we use the ops and the
 resulting sea wide so this is this gives us a CL what we run the ops on
 it we get away and that's what we returned so if you want to understand
 exactly how this code works you would have to write it yourself it's a
 lot of manipulation with types all these types are permit rised so this
 is kind of technical and not so easy to see looking at the code but this
 is the only way to implement the required type signature which is this
 and now we implement the rap which is straightforward and the Run which
 is straightforward by using these methods so this again we run the semigroup
 example is exactly the same code up to some syntax changes give us exactly
 the same results so let us now look at the functor so I already showed
 how the functor here the free functor is implemented and I derived the
 tree encoding and the reduced income and then I started to talk about the
 church encoding and that was so complicated that we have to go through
 much slower and through all the parts that are required so let's now look
 at the code for the free functor so the free functor actually starts from
 a given type constructor so it's always a free funder generated by a given
 type constructor or a free funder over a card constructor and that that
 constructor doesn't have to be a function and actually in many applications
 it is a node is not a factor and it cannot be possibly a functor because
 it has index types with specific type parameters and it tries types with
 non-free specific sign type parameters like this so I call these things
 unfocus it's a funny term that I think is appropriate here because this
 is it is like a factor because it's characterized by a type but it couldn't
 possibly be a furniture because of the way it's defined so this unfactored
 could be seen as describing two operations in some business logic where
 you add the name to some database say and you get an ID back don't you
 get named by ID and this name may may not exist in a database and so the
 result is an option of string now we would like to transform this unfilter
 into a factor run some program with it and then transform that into an
 ordinary option of some result so say sometimes you would have an option
 of strange sometimes not so let's be safe and run this into an option so
 in order to do this we need to define an extractor or interpreter for this
 and type constructor into options so this is this type which is natural
 transformation but actually doesn't have to be natural transformation it's
 just a generic transformation from one type constructor to another I'm
 using the cats library type it's defined there so how do I transform other
 two cases if it's alone then I just transform it into a one and if it's
 an option string then I transform it into none so doesn't matter it's just
 an interpreter of some kind it doesn't all it does is gives me an empty
 option or non empty option it doesn't really do a lot of good so that's
 what I'm going to be using so I'm going to right now a free factor based
 on this free function over this on Fronter I'm going to write some maps
 on it add some transformations and then run into an option that's going
 to be the example so here's where the code starts this is the three encoding
 of the three factor and have the wrap case class I have the map case class
 map case class has an existential type B I define the function instance
 for the typeclass functor and the map method does nothing just creates
 a new wrapping with map typeclass case classes then I have my function
 here which creates a free program 300 programs all it does it applies map
 to some given value many times so this number of iterations is given so
 that many times I apply map with the same function to that value so this
 is just a test I'm going to start with some value wrap it and then map
 many times the runner I'm trying to make it stack safe and that's a little
 bit of a problem actually and here is why I will have a lot of nested case
 classes I'll have to and go through all of them so the unfold function
 and I'm defining here is going to call itself and so one thing I could
 have done is just applied in the map we see that F of Z is a free functor
 value I could just have run it through the same function and then apply
 the map with F to it but that would have been not like safe so I did another
 thing so I didn't take a recursive unfold where I first accumulate so what
 I did here actually is I did and then George that was my first implementation
 every time I have a map I have a new function so the result is this accumulator
 that I have in the unfold and so I just accumulate all the functions inside
 the map and I run them only at the end so I I run this only at the end
 so that's the idea so that is tail recursive and then I hope to be stack
 safe but I'm not stuck safe this will actually give me a stack overflow
 and the reason is that and then is problematic in Scala and that was quite
 surprising to me because it's not so in Haskell and I didn't expect it
 but and then is actually not stack safe in this car here's why here's my
 sample test code that shows why this is so let's compose a large number
 of functions and call the resulting function so here's a code it does this
 let's just compose a lot of functions all these functions are just adding
 one to their argument and so that's very simple but if we do do this with
 a large number of functions we'll have a stack overflow so whatever we
 do we'll have a stack work for we we can compose these functions or we
 can directly compute still we have a stack overflow so the reason is that
 composition of functions introduces another stack frame and that's unfortunate
 and it cannot be removed apparently in job in JVM for technical reasons
 so you could not have a compiler that automatically removes this extra
 stack frame so what do we do well cats library includes this and then structure
 which you can use and if you use that so if you start with this and then
 you compose with more functions then this is stack safe how does it work
 it doesn't actually compose these functions until much later until you
 need to run this function and then it actually accumulates all the functions
 you give it in the list and then it runs that so I implemented the same
 kind of thing which I call safe compose using a data structure called chain
 which is from the cat's library which is a very high-performance list and
 so here's what I implemented based on some of these suggestions actually
 Michael Gilchrist suggested this so I just did good massaging so now the
 idea is that instead of composing you wrap the function into this chain
 F data structure and then composing this with others things doesn't actually
 compose functions it adds to the to the chain of functions of these functions
 are all stored in lists and only after you run them so the apply function
 is called then you fold over the chain and apply these functions so that's
 how it works and I made it so that you can compose on the left or on the
 right with the chain and you get a chain again so this what I did and the
 result is good so it's actually faster then using cats library and attend
 so that's what I had to do introduced here I have to use before before
 is my replacement of anything which is easier to use than cats library
 and it is faster so this is what I would do if I didn't have this I would
 accumulate results functions in the list one at the end I would fold over
 that list so this is kind of uglier and it's better to put this code into
 a library and here's a benchmark free functor in the reduced encoding it
 has fewer at least classes but it has a more complicated map because now
 it needs to do this in the map notice that in the tree encoding the map
 didn't do anything it just wrapped the data into a nucleus class but in
 the reduced encoding the map method of the factor actually performs a computati
on it already composes the functions although were revealing this smart
 composition but that's what we do before and after are the smart methods
 of I implemented here in place and then compose in the sky and then I do
 the same testing and it's slightly slower than three encoding 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
now let us consider the church including of the three functor the church
 including is our equivalent as types but they have different performance
 characteristics and they are more complicated to implement the three including
 of the three factor is like this and in order to implement it we would
 have to first implement the trait that hides this inside type parameter
 you will have to implement the trait that hides this type parameter and
 the outside parameter as well so that's why there is quite a lot of boilerplate
 involved so first I define this auxiliary type and then i encode the free
 factor using a trick that if if I look at the type expression here then
 this is the same as the magnitude of the function so I can transform this
 type expression into this which is an equivalent type and this is the same
 as the magnitude of the factor and so a shorter way of implementing a free
 typeclass in the church tree encoding is to impose a type constraint typeclass
 constraint on G and to declare this as an argument so that's why I'm saving
 a lot of typing if I do that but it's not necessary it's equivalent to
 doing it in a straightforward way now the result is that in life refactor
 looks like this it has a single method trade parameterize by an arbitrary
 type constructor which needs to have a functor constraint and the type
 of the method is this now we know that the three-factor has a punctured
 typeclass instance and in the tree encoding it was trivial to define it
 but in the church including it is much less trivial because of the complicated
 type signatures of these functions so these are functions whose arguments
 or functions and type parameters are hidden inside so here is the definition
 of the factor instance for this type I need to define a map function that
 takes a previous ffs away in function a to be and return the new F F of
 B where F is kept as a type parameter throughout now in order to return
 a new fffb the only thing i can do is to create a new anonymous instance
 of the trait and overwrite the run method so now I'm here in the run method
 I'm supposed to do this so let me write a function so now I have the following
 data I have this church encoded fffe I have a function A to B by heaven
 FF C which is simply a natural transformation F to G or if you wish generic
 transformation after Jesus if F is not necessarily a function so given
 this data I need to produce G of B how do I do that well the only way to
 produce any kind of G is to call this run method from the previous F of
 a which will give me a G of some X where X is up to this F of a so is going
 to give me G of a out of here there's no other way I can get any G here
 I need to run therefore this method but I'm free to specify a type parameter
 for this run method so I specify the G which is given to me here at that
 type parameter and then I apply that to an F FC which I have so that gives
 me a G of a now I need to write this syntax and not just run away for see
 because run has an implicit argument and it will be confused if I do that
 this will not work so having gotten G of a I just map it through the function
 f into a G of B since G has a functor instance so I do it like this just
 very explicitly so that's my implementation now in order to use this I
 need a helper function that lifts values of F of a into the free functor
 so that is like that we need to implement the run method so the only way
 to create a value of the free founder is to do this too to have a new FF
 with the run method so then I have an FF C I can apply this to FA and I
 get G of a out of it since F FC is directly a transformation from F to
 G so that's very easy and another helper function is to interpret free
 factor into a given specific function G so that is also very easy just
 to run the function the run function itself is already the interpreter
 that is a defining characteristic of the church encoding it is encoding
 which is assembled out of pieces of the run function so the value of a
 church included type itself is already its own interpreter now performing
 tests performance tests given some reasonable results however some paper
 claims that church and coatings are always slower it's not necessarily
 always the case you need to benchmark your code if you want to be sure
 now the problem with this code is that there there's a stack overflow because
 this run method is actually not stack safe again as before I already said
 stack safety in the Trojan Queen it is up to the implementation of the
 run method if the run method calls functions too many times then it's not
 going to I'm not going to be able to make it stack safe in the other parts
 of my implementation and can't really made stock safe the reason being
 that I have to do so the map function needs to do this I have to apply
 to this FFC and you have to run in the map function so since map function
 has to run there's no way to guarantee stack safety every time if you have
 a million maps when I would have a million nested calls here so that's
 a stack overflow now let's consider the church encoding of the reduced
 encoding of the free function [Music] reduced in Korean is slightly simpler
 for the free function and so let's search encode that we can search encode
 anything any any type can be Church encode the question it doesn't bring
 us any advantage it turns out it does because the church encoding of the
 reduced encoding of the free factor can be made stack safe and here is
 how so first of all we cannot do the same trick as before with the typeclasses
 we have to encode directly this type expression so that's encoded directly
 so first we called the exists tential type so we named a straight and it
 will have a single case class representing this value and here instead
 of B and is a Z so that's the implementation of an existential type expression
 then I implement this function for all a from that to G of a so that's
 the straight with apply method parameterize by a and finally I'll code
 the type by having another universal quantifier outside which is paralyzed
 here so in this way I have encoded this type expression so this is the
 boilerplate in Scala that is required in order to encode this type expression
 now to define the function instance I'm going to be more careful in order
 to make its taxi so I'm going to pull things out of the run method they
 have to be if they don't have to be reevaluated and so one thing I can
 pull outside is to reevaluate the run it can be done once so it can be
 done outside of this room if I do that and I actually can achieve stage
 stack safety another way but I use the before method which is my own implementa
tion my IntelliJ is a bit confused right now but before it's my own implementati
on of a function composition which is tag safe so how do i implement this
 well it's kind of cumbersome because of all these boilerplate and types
 I have a very complicated type expression it is still a factor the church
 encoding doesn't change the properties of the type that will church encoding
 it just adds a lot of functions and have a choice types and quantified
 types but it doesn't change the properties of the type it's just a different
 encoding of the same type so clearly we should be able to define a furniture
 instance if we are able to define a factor instance before church including
 but defining the file that would just be more work but this has work done
 only once so here's what we need to do we need to define a lab method and
 that method needs to return a new FF of FB so we return that and overwrite
 the run method in it run method takes an FF C and now we have the situation
 at work that we have this data and we need to produce G OD now the only
 way of getting G of B anywhere is to use this run to run this but running
 this will give us a value of death commit which will produce us G of B
 so where do we get that value we need to get that value out of our church
 included free function that we have we have before so now let's remember
 that the church encoding is equivalent to the type that is being encoded
 so you can extract that type outer that encoded value so since the church
 encoding of the reduced encoding of the free factor is basically encoding
 of this we can retrieve this back from a church encoded type no need to
 do this is where it is done so basically we get this free F of fa out of
 C F of a which is basically running it with identity so random with identity
 is the way to retrieve the underlying type out of a church and call it
 that so that's what we do in these two lines and we put these lines outside
 of the run because this needs to be done it doesn't depend on these arguments
 needs to be done outside a memory also achieve star safety when we economize
 on the stack doing this one side of the run function so haven't gotten
 this value we imagine it or we imagine it just because we need to extract
 the parts the F Z and Z to be parts of this 3 F 3 F is just the case one
 side you find right here with this map C so I'm going to extract those
 things in it to match and this is a key part of the implementation I'm
 composing the functions inside the map case class I'm not actually running
 the map anywhere yet I'm only going to be running it here so this together
 with putting this outside achieves tag safety if I remove this replace
 Ness with and then or if I put this inside into the run function I will
 have a stack waterfall everything else in this encoding is very similar
 to what we had before the wrapping the run is trivial the interpreter is
 stack safe it just runs them up and we guarantee that run is stuck safe
 so performance test shows us that this is actually significantly slower
 then especially creating this method and all these things that come with
 creating nested Maps method is significantly slower than other in puddings
 but as we will see later Church encoding has certain advantages so if performan
ce is not a great concern but flexibility of design is a great concern as
 well in charge encoding has significant advantages so this concludes our
 implementation of the free function let us look at other three type questions
 how they are implemented the next typeclass is the free culture hunter
 in order to implement it let us follow the general procedure first be right
 down the methods of the typeclass it has only one method which has this
 type signature we realize that it's inductive because this method returns
 again the value of the type we're constraining and also we realize that
 it has an existential type inside because it's parameterize with this be
 there for the three encoding looks like this it's again we are just following
 the general recipe what tree encoding is a recursive type what is made
 out of a disjunction the first is the wrapping of the generating type construct
or F and the second part of the disjunction is the method the method factor
 now in this case this is what we need to do this is the accuracy of instance
 of that type now reduced encoding quite similarly to deriving the reduced
 including for the free filter we derived for the free control enter a value
 of a free country func you type in the tree encoding will always be of
 the form that either we have a NFB or we apply several times map to FB
 which will add here I forgot the direct product sign we add a few terms
 of this kind with products of functions and existence or quantifiers the
 difference between this and a fee factor is the opposite directions of
 the function arrows so this starts with Z 1 and then we have a function
 Z - 2 Z 1 and so on the N to the N minus 1 B to Z and the result is a contra
 factor parameterize by B however the property of contra funky are still
 such that we need to compose these functions associatively and we can compose
 them before doing map or other contra motive or we can compose them after
 doing Countryman that's a composition law there for the reduced encoding
 can simply compose all these functions and put them inside a single function
 of this type and so the equivalent type is just this with all these other
 and residential types simply dropped since they are not used so that's
 how we derive the reduced encoding we need to figure out what are the possible
 expressions and how they can be simplified using the laws of the typeclass
 there's some simpler type expression notice that the reduced encoding is
 non recursive just as it is for the free functor and I'm going to show
 code now this free country function might be a little difficult to understand
 or to see where it is to be used but it is just a general scan you know
 I don't take any type constructor and wrap it into some stuff can make
 it into a pet typeclass instance of an arbitrary typeclass so for instance
 I can take a function such as this one you know identity factor and I can
 wrap it into a freaking tree function so then this will become a contractor
 after wrapping and I can create a control factor program by replying confirm
 I have a few times to this then I can interpret the results interspecific
 control function such as this one and the interpreter the only thing the
 interpreter needs is a function from here to here this function example
 the something like this where we take a value and return a contractor and
 contractors are usually consumers of values so imagine you're logging something
 that can see so the logger is a typical consumer of values I'm just going
 to simplify this very much and consider this function as a contractor and
 then this would be a transformation from identity factor to this control
 factor which is prepending prefix to the log message and that's I'm going
 to show the code in a few minutes that's how we would use a free contractor
 anything that another important property is that if the type constructor
 F is already a contractor then this wrapping does not produce a new in
 equivalent type it's the result is equivalent the free country function
 of over F is equivalent to F you just like it is the case for the pre factor
 or the look at example code so here's how I encode the free country function
 tree encoding I encode the wrapping case - and then code the culture map
 case using an existing show a quantified type when I create a helper function
 to wrap things it's just putting it into the wrap is constantly the country
 funky turquoise instance which does nothing but wrap into the typeclass
 sorry into the in our case cost so there is no complete computation done
 here other than memory allocations finally I write an interpreter which
 is trivial you just run you do a controller and I implement it producing
 coding reduced encoding is shorter he just has a single case class with
 existential 25 type a wrapper for than a reduced encoding now that wrapper
 is less trivial because we don't have the wrap case anymore so wrapping
 a value of F means we have this reduced case when we have we put this F
 here and we supply an identity function in this place the control factor
 instance is stuck safe because we reduce every function we don't apply
 map and you are we and I don't run anything we just collect all these functions
 and we collect them in a stack safely using this before method which is
 a stack safe alternative to and then and here is a rather so we just run
 by extracting a value of C out of the value of F and then running a contra
 map with the single function that is left so that's the example I just
 described we have a logger with the prefix now the writer factor is going
 to be wrapped in two star to make it into a country funky so we have a
 free country founder over the writer function so the fact that it is a
 factor is just I chosen us to show that I can take anything but including
 the furniture that certainly is not a country function and I can wrap it
 into this construction 3 CFR and the result is a contractor so that's an
 that's an interesting property so the result is is a contractor but if
 you look at the country factories type signature it is say this it's a
 contractor in being but it is no longer a functor so even if the constructor
 that we used was a functor it is no longer function and indeed so it's
 a contractor indeed so we have we if we do this we take a function like
 the right here function we wrap it into American structure and we lose
 the factor for it's a little bit you know it is a country function just
 to make it clear what's going on and here is some example code where and
 have some prefix logger and I wrap my writer function which could be computed
 after something sound function computation that I wrap it in their country
 factor then I do some contour map on it and the result can be used I interpret
 that I run this thing and the result is as expected the next example is
 a free pointed front kick a pointed funder is a flat class it has a symbol
 method other than function so if we say that this is an arbitrary type
 construction done that pointer factor pointed functor class has two methods
 to the point which is this or it is just the same type signature as the
 pure method and moanin an applicative but since this is not going to be
 a monitor a negative this method is called point it just takes a and inject
 stuff into p8 and map so this is familiar so what's the tree encoding of
 this well it's just a so we follow the recipe we have the wrapping yes
 we have the first method which takes a few turns PA I have a second method
 which takes this in turns so that's how we encode so we have a disjunction
 with three parts always going to be like this one part is going to be the
 wrapping and the other parts correspond each to a metal in inductive typeclasse
s are all going to be minus three encoded to derive the reduced encoding
 we're going to have a bit more work need to do a bit more work we see what
 kind of expressions can be found by using this definition so we took we
 take the tree encode it and reason about it so either we take an A and
 apply a bunch of maps to it so we first apply points to some value you
 get an a value type a and then we apply some map state so that would be
 one possibility another possibility that would take some F a wrap it and
 then apply some maps to it so therefore we only have two cases one is like
 this a general value of this type will be either like this or like this
 well it also could be a single affair or a single a but none of those so
 if we do have those things we can compose all of them and just as we did
 before so we just have one function one function is sufficient now consider
 the second case we have a value and then a function we can just apply this
 function to a value and we just have a single pure value so we can encode
 the single pure value therefore and we can encode a function x sorry a
 functor wrapped x a single function and if if we just have this we put
 identity function in there as we did before there for the reduced encoding
 has only two cases one is a pure value and the second is this wrapped construct
or times the function and it's not recursive so that's very nice note that
 this is exactly the same as a free function over F Z so basically this
 is what we have if the type constructor F is already a functor then this
 is equivalent to F itself therefore a three-pointed function over a functor
 is just this it is a very simple expression so just adding the type a to
 a factor makes it into a three-pointed so that becomes appointed and it's
 actually free pointed and of course if it is already pointed factor we
 should not use this construction because then this would be not the same
 as a factor itself so unlike other cases if we just saw I should not use
 a free construction if a factor already has the pointed method only it
 functor and contra fun to have the property that applying the free construction
 doesn't change them all other typeclasses will change usually when you
 do free type construction so for example free wound at over a moment is
 not the same moment free pointed over a point that is not the same function
 only factors and country functions pure factors pure country funky typeclasses
 do not change under applying the free construction let's look at the code
 it's very easy to implement this we need three case classes that encapsulate
 these three parts and to implement this we only need two his courses and
 in implementing the factor is very similar except now we have a point case
 so in a point case we need to implement the function by him so applying
 a map to the value of this type will just need to apply that function to
 that type so consider a pretty filterable now the filterable typeclass
 was explained in chapter 6 it is not a class that is widely known so look
 at chapter 6 for more details it has two methods map and map ok so these
 are the methods of of inductive kind or inductive type signature when they
 return the type of know actually it's sufficient to keep just map upped
 because we can restore map from it so let's not overdo things and let's
 just implement one method in the free construction since we can easily
 get this out of this in other words if we have this function and we can
 implement this function by substituting a going to zero plus B yeah so
 the tree encoding has two cases very similar to tree encoding on a three-factor
 you start here we have this type signature if the F type constructor is
 already a function we can simplify the tree encoding by using the identity
 the basic identity of existential types and then we just obtained this
 recursive definition so we'll get rid of the essential type and this recursive
 definition can be visualized as an infinite disjunction like this so it's
 F a F 1 plus a F 1 plus 1 plus a and so on so clearly applying filter function
 to this will give us this applying filter to this will give us this so
 on so it's this in this way it's implementing the free filterable in the
 green color now this is not the most economical encoding and it reduced
 including actually is like this it is non recursive and you can size in
 order to derive it we do the same procedure as we did before these are
 we stay this is this should be essential like 25 not universal level correctly
 since lights now an arbitrary value of this type in the tree encoding would
 be FA to which a bunch of map opt have been applied so that will give you
 a product like this now using the laws remember that these are composed
 using the class like composition because these are of type a to option
 B so these can be composed since option of the moment so that composition
 needs to be done and it gives us a single function so that can be done
 and if we just have a single affair with no function that will encoded
 like this so we can still encode it so that's going to be reduced encoding
 and the most interesting simplification is when F is already itself a factor
 then we'll use basic identity and we get F of 1 plus a so the free filterable
 over F factor is just this you can just implement a filter for any factor
 applied to an option so for any function f f co-option of a is filterable
 and that's a free filterable over a functor and this is a free filterable
 over an arbitrary type constructor so we see again that free filterable
 over f is not the same as f in a very similar way we can construct filterable
 contra factors free filter whole country hunters will not go into details
 about free filter will control factors because that is completely analogous
 here's the code for the free filter will factor I'm just sure this is nothing
 new in terms of how to implement existential types and recursive types
 in three encoding introduced encode consider now Freeman and the moolaade
 has two methods pure and flat map the map method can be recovered and in
 this way we formulate inductive teleclass now just a comment and we have
 seen in previous chapters that typeclasses can be formulated in different
 ways you can for example cumulative monad as having methods pure and flat
 map or you can do flatten instead of flat map but flatten does not have
 the same power as pure and flat map because you cannot restore a flat map
 from flatten so you would have to have map here as a third method if you
 wanted to if you wanted to do a free one over an arbitrary type constructor
 that is not itself already a factor for the filterable there could be different
 ways of doing the definition as well and for the implicit if there's the
 different ways but what we need is a set of methods that return the type
 that we are constraining type itself and not something else and we need
 a set of methods that are sufficient so without assuming that the function
 instance is already given for example so that's why would she was pure
 and flat map here and we can recover map from that so now the tree encoding
 is very similar so what we have before except now it has two places in
 which we use the same type recursively free m and freedom so the reduced
 encoding needs to be derived let's derive it so first of all let's see
 what happens come on we use the tree encoding and create some values of
 the free monotype first we can take this cut type constructor and apply
 a few flat maps to it second we can take this constructor which will appear
 when the playa few flatmap start but these are the two possibilities if
 we take a pure value and apply a flat map to it that can be simplified
 due to the laws of the minute so if you take something else and apply two
 flat maps they also can be simplified to a single flat map with a more
 complicated function here again this is what social tivity load of the
 Bonett so therefore it is not necessary to have many flat maps here they
 can all be collapsed to a single flat map maybe with a more complicated
 function inside so so so then clearly the first element in the product
 does not have to be a pure that can also always be replaced so the first
 element in the product is going to be F a or F C for some for some Z and
 then we have a single flat map so we don't need more than one flat map
 however this does not let us encode the pure value in without any flat
 maps applied to it so that means we cannot just have one part of a disjunction
 we need to we still need to keep this part of the disjunction that we have
 here but we can eliminate a fee and we can eliminate one of the recursive
 usages but not the second one so the reduced in chlorine is still recursive
 it is somewhat shorter but it's still recursive now one comment is that
 recently the so-called final tagless style of programming has become more
 known in a scale community has become also known and has gotten into a
 few years before in my terminology what is called final Tablas style is
 nothing more than the church encoding of a free moment so you can do Church
 encoding of any type and you can do free going out without a church encoding
 and if you want you can do Georgian going over three mooner and you have
 a choice you can charge encode this or you can Church encode this and that
 could have different performance implications however just keep in mind
 I'm not going to talk about final tagless because it's not really something
 specific or or special to jamuna's or put the portal DSL it's just the
 church encoding of a free movement and you can choose it for certain reasons
 or anything not choose it for other it is stack safety is important I have
 just found that the church encoding of a free factor is not stack safe
 and unless you use reduced encoding first so you first reduce the improvement
 using the frontier laws and the nutrition code the results and that can
 be made stack safe most likely it's similar with monads and because the
 three encoding is twice recursive use of the type so that was probably
 going to prevent you from being stuck safe this is difficult enough to
 make a stack safe but may be possible certainly I would if I were to make
 a library I would use reduced encoding and Church encode that as an option
 but also provide non-church encoded reduced encoding of the free moment
 as an option there's almost never advantages in using a non reduced encoding
 but there might be an advantage in a church encoding so again let us consider
 what happens if you do a free Mon and over a functor so you can actually
 save yourself a lot of trouble because if F is a factor then we can use
 the identity which says that this expression is equal to F of this which
 is this so now we get recursive definition which is much simple which is
 a free monad over a factor so I would also provide this as an option in
 the library because it's so much simpler and more efficient perhaps definition
 and also it shows you that a free monad is different from the mana of itself
 if you just substitute it into here warranty here so the free mode of Ramon
 odd is not equivalent to that normal so don't do it as an exercise we can
 ask what is a 3-1 out over a pointed functor so again all we need to do
 is we need to start with 3 encoding and try to reduce it so how do we reduce
 it well first we start with this clearly the pointed factor doesn't mean
 this part of the disjunction and clearly we can start with this encoding
 collapsing all those flat map functions into one and the result is going
 to be this and that's it we cannot really simplify this because we don't
 have a pure encoded so we cannot say oh let's only have this case because
 we cannot encode a fade so we don't have a permitted for free we have a
 pure method for F a itself but not for free we have eliminated that so
 we cannot encode a failure we cannot save us as part of the disjunction
 therefore this is the reduced encoding we use again the identity for the
 existential type to get F of this so therefore the reduced encoding is
 FA plus F of this still record so going to be recursive free if free M
 of F is FA plus this so that's reduced encoding here is a code for the
 free moment so you spend a lot of time on this let's consider the free
 plug ative which is an interesting tie class it has two methods we choose
 pure and app because the other choice would be for example wrapped unit
 and zip they do not return the type that we're constraining so wrapped
 unit returns F of one not F of a and zip returns F of pair a B but we cannot
 have that as a return targetnode type must be the simple F a with no changes
 if it is not that and our typeclass is not inductive so if the typeclass
 allows us to have a formulation equivalent to the previous formulation
 of the typeclass such that the new formulation contains only methods of
 inductive type signatures that is methods that return the typeclass the
 instructor constraint then it's an inductive type cons so as before we
 think about which methods to choose and which is pure and half because
 map can be recovered from these so the tree encoding is straightforward
 and in order you can have two usages of the recursive type let's derive
 the reduced encoding that's going to be this so how do we derive that so
 we reason about what structure of the values we will have either we take
 F a and we apply a bunch of apps to it or we take a and apply bunch of
 apps to it so we can encode if we have an a to which we apply we can encode
 that as something like like this so we can do an app with a pure here with
 a different type signature because that's basically it's going basically
 going to be a Mac due to the laws of the zip so it's going to be equivalent
 to if free app on the Left just the one that is on the right we'll put
 it on the left and on the right we put some other thing so that means if
 the first one does not have to be a pure well the first value in this product
 it does not have to be a pure value it can always be wrapped F so but then
 we cannot encode the pure value so we still need in that case so therefore
 we need only two cases the pure value and the wrapped constructor with
 a free app so that's there for the reduced encoding a free applicative
 over a factor is taken from here we use this representation and what we
 find is that we cannot really reduce this using the identity for the existentia
l type because this is not of the form exists Z and then F Z and Z goes
 to something it is not Z goes to something it is a type constructor so
 therefore free applicative over a factor it looks like this we can still
 reduce this but we do need to have a rap constructor but the a is outside
 of the recursion so the only game that we have is that if the type constructor
 F is already a functor then the pure value is outside the recursion and
 other than that it's a very similar construction so first we construct
 the recursive case which is which can be seen as a reduced encoding of
 freezy bubble that is a type coins were only the ab method is given the
 no pure so this is a freezie bubble and then we do any three pointed out
 of that it's a free pointed over a freezie bubble over a functor if and
 we see that again free applicative over applicative is not the same as
 that functor so here's the code of the free applicative in the trie encoding
 and introduced including so having gone through all these examples let
 us generalize what our laws of the freetypeclass constructions so we will
 consider a general inductive typeclass and for simplicity we will not consider
 type constructors here only ordinary types so the typeclass will have methods
 of this type signature but you see all the examples we have seen have been
 inductive so it's going to be equivalent for them except is going to be
 much more syntax for all these types of constructors and type parameters
 so I'm not going to go through laws for type construction typeclasses they're
 going to be my analogous up to a much more complicated syntax I'm going
 to consider in inductive typeclasses that have just ordinary types as elements
 of the or instances of that class so a typeclass with a method functor
 c has these methods and this is the definition of the three instance of
 c over c over a fixed type z so that's we have seen so there are several
 general properties that this construction has i'm not going to consider
 church encoding because the church encoding is equivalent to this it has
 exactly the same properties but it's much more complicated to reason about
 it's just a much more complicated type I'm going to use a recursive algebraic
 or polynomial definition of the three type instance the first property
 is that this type is actually an instance of typeclass C so in other words
 we can implement these methods all the methods are summarized in a single
 value of this type and so once we show that we can implement a value of
 this type we're done we have implemented methods another property is that
 it is a function in Z so it has an F map which works by changing the generating
 type another property is that if we have a specific type of that see we
 can implement these functions around and wrap so the wrap will lift a value
 of Z into the freetypeclass instance and the run will take a free typeclass
 instance it will also take this extractor function which translates Z into
 P and then it can translate the entire free instance entity these functions
 have certain laws the first law is that run of the rap is identity so what
 does it mean um if we wrap a value Z and then you run it then it's the
 same as if you did not wrap so he transforms e to the same P if you first
 just take Z to P or you first wrap it and then you run it you get the same
 P so that's this law the second law is the natural allottee of run so the
 run was this z type argument and in this type argument it is natural so
 the naturality law as usual it is a lot of how to put F map outside or
 inside of your function so this is typically an equation of this sort you
 left map either the right hand side has no F mat board has an F map on
 the other side so in this case it has no worth map here is a type diagram
 so you start with a crease free instance of C over Y you can transform
 it into a free C over Z using the F not function f map of F f is an arbitrary
 transformation Y to Z and then you can run this into P or you can run this
 into P and that shouldn't be different so you can first run directly with
 the combine function or you can run first by transforming into Z and then
 you can run from Z and it should be exactly the same so that's what this
 law specifies another important property is the so called Universal property
 and this property says that the Runner is universal you only have one runner
 so if you have for example to run into two different types and the same
 runner works for them in a way that is compatible so suppose you have two
 types a and Q and you want to run into P and run into Q and there is a
 function that transforms from P to Q well this function preserves the typeclass
 so it's not just an arbitrary transformation from P to Q it's a transformation
 that preserves the time class the property of preserving the typeclass
 is this diagram which is that here is the methods frontier of the typeclass
 and here's the method for P and here are the methods for Q and if you map
 P the Q and the methyls are also mapped to each other so in other words
 for instance if the class is a monoid then the function f must transform
 the unit element of the mono would P into the unit element of the monomyth
 Q and it must transform product in the P monoid into the product in the
 QM owner so that's automatically guaranteed by this diagram because the
 ops value is already all the methods but all the metals put together into
 a single so if the function f from P to Q satisfies this commutativity
 condition then what I say it preserves the typeclass and for these functions
 f you can see this diagram that you can run first into P and then you transform
 into Q or you directly transform into Q and that's the same function run
 does it so that is another kind of property that is it is quite important
 so let's see how these properties can be proved so first I will repeat
 the code for the universal construction of a tree encoded typeclass now
 you noticed I have been using a tree encoding here again this is the simplest
 encoding it is mechanically produced does not require any reasoning in
 order to be implemented whereas the reduced encoding requires some reasoning
 improves to show that it is actually reduced and adequate for encoding
 all possible values and so it's much more difficult to reason about although
 it can give you advantages in performance so that's why I'm reasoning about
 the tree in going here so I implemented the function ops that basically
 says that the free typeclass has the methods that are required for that
 typeclass C so the opposite of function from C all free to free so that's
 this function and that that's the first one that I need and put in this
 the second is that I can wrap that is trivial I just put the wrap constructor
 then of that I can interpret interpreter it's just the general interpreter
 which we have seen I sure that it is a functor well this is a simple exercise
 in making a functor instance for a recursive type where I use the recursively
 the map function in the hopes because obviously the recursive part of the
 type so the first law is that um if we run on wrap let's our identity on
 both sides from the first law are functions of this type so therefore we
 need to apply both functions on arbitrary value of this type so let's call
 this value free seasonally and also instead of this because we're working
 in this type the runner needs an even argument of this obstacle need to
 have the hopes for the free type constructor so that's our hopes you find
 above so if we do that and we substitute the code then this is what we
 get now if we look at this this function must be identity which means that
 it's a free CZ match something in this match should be just identity cases
 cases like this indeed they are identity the rap case is just rap which
 is defined like this that's the definition of herbs and wrap so oops requires
 us to execute a recursive call to the run and so we can use the induction
 assumption but run of ramp is identity and that assumption can be applied
 to recursive calls of the function that we are proving more for so therefore
 this is identity so that's a map on identity well that's just observe C
 F which is equal to that so that is again identity the second law is a
 little more involved it's a natural T now I could say well much reality
 is obvious because our code doesn't look at an edit type but we can prove
 this informally so again we look at two sides of this equation the functions
 of this type so we apply both sides to an arbitrary value of that type
 when we just substitute and compute the left-hand side which is going to
 be this and run of that is going to be that then we compute the right-hand
 side so we already see that the wrap case is the same and water is what
 remains is to demonstrate that the ops case is the same you know there
 is a slight difference between these two expressions and the difference
 can be resolved because we can use the induction assumption for this so
 we are proving the law of this kind and we can use this law for the recursive
 call here so if we do that we can assume this is true and then that's exactly
 what remains to be demonstrated that we can do the map so this is a functor
 whose map for United we're using so we can use a composition law for the
 function and that's exactly the expression that we have here what remains
 not equal that's the composition of two maps so we simplify that we get
 this so the universal property is slightly more involved yet but it is
 proved in a similar way so both sides are functions of this type so we
 apply both sides to an arbitrary value of type faces E or compute the left
 hand side will contain the right hand side and we use the typeclass preserving
 property which is this equation or it will only written in a scholar corner
 to space equation so when we have F of ops P we replace that with upscale
 of something so oops P and obscure are assumed to be available now these
 are typeclass evidence for P and Q and simplifying the code we put the
 code until identical shape so that leaves us home proof from the laws now
 what she would call that I have here that code is for the next slide so
 another general thing we can do the free typeclass is that we can combine
 different generating instructors so far we have been only looking at a
 free instance of a typeclass C generated by a single type Z but we can
 also consider several constructors at the same time several generating
 types of constructors and this would correspond in a monadic DSL that we
 have different sets of operations that are defined separately we would
 like to combine them and recall that monads did not compose in general
 so it is in general not easy to compose different sets of operations but
 it is actually easy in the free typeclass because all you need to do is
 to take a disjunction since the definition of the free typeclass is this
 if you have several generating types all you need to do is to have several
 parts of the disjunction here Z 1 plus Z 2 plus Z 3 and so on which means
 that the free instance of C over several constructor is the same as the
 free instance of C over the disjunction of these constructors so it is
 sufficient to take the disjunction and generate the free type cause using
 a disjunction now the only inconvenience is that you would need to inject
 parts into the disjunction that it can become cumbersome I will show called
 in a minute and the church encoding actually makes it easier to manage
 this situation so the reason is that the church encoding for an inductive
 typeclass it looks like yes if you have several constructors and it will
 be like this you can take the junction and transform it into this sort
 of expression now you can do the trick of type questions so you can encode
 each of these as extractor typeclass and then the church encoding would
 look like this and you can even simplify it further by saying that even
 this is a typeclass constraint on X which means that X must be of type
 C and so the church encoding would look like this so in this in this form
 it is an easier code to maintain at the same time we find that this definition
 actually works for any number of generators and for any typeclass C it's
 a general formula for Church encoded free instance of class typeclass C
 and generated by any number of given types so in this very concise form
 it's very easy to implement as well let's see how this works in order to
 test this I have three type constructors that are not functions in other
 words unfactored and they describe different kinds of operations in some
 kind of imaginary business project the first one factor adds a name care
 database and returns a database ID and it gets named by second and funky
 logs a message returns unit a third on factor creates a new ID so these
 are just for example and I defined generic transformations from each of
 these unfactored to the option factor these are just defined in arbitrary
 ways for testing purposes only this is not useful for any kind of application
 this kind of transformation which are none a lot nicer just testin I testing
 that all the types fit together so the first way of combining the three
 operation constructors I'm going to put them into a three factor and as
 we have seen all I need to do is I need to take a disjunction of all these
 constructors so let me define this unfold as a disjunction of the three
 type constructors now I also need to define a generic transformation from
 the new function to option let me put the syntax a little easier like this
 now notice that I need to write this column in this code this code is pure
 boilerplate but it depends on how I defined my unfunny here if I add another
 one then this entire core don't have to be reversed and this is kinda this
 is a bit of a burden now defining a free function in the reduced encoding
 is straightforward in order to use it I need to lift values from each of
 the unfactored into the free function so I define these lifting functions
 and again I have boilerplate that depends on how the order of disjunction
 is chosen now this is an example computation where I require this type
 annotation in order to lift I could have called these functions directly
 : over keys I could have called them directly where I can do this but I
 have to do it so let's see how the same works in the church encoding so
 first I define an extractor typeclasses and then I define the church encoding
 this is the entire church including it has a type parameter G and then
 there are three type constraints for each of the unfactored extractors
 and then a function type constraint and I've done this is the entire encoding
 the furniture instance is trivial but it is not stock safe unfortunately
 because we know that the church including of the three encoding over three
 frontier is not stack safe now the boilerplate for lifting does not depend
 on the order of the heart functions there's no notion of order anywhere
 if I need the first one I can just add it here here here and here there's
 no possibility of making a mistake there and finally I run the computation
 the extractors are need to declare and see there is the run is very simple
 I don't need an extra brother I have less code [Music] another important
 thing that we can do is combining different trade type process so suppose
 you have two different hypotheses C 1 and C 2 and you want to combine them
 several ways of doing that and one is to use factor composition so for
 example I can do 3 C 1 over a 3 C 2 over Z I can do that there are disadvantage
s in doing this one big disadvantage is that the order of composition actually
 matters in terms of what semantics I get if these type assets return effects
 and the effects are combined and nested in this order and not in the opposite
 order so I would not be able to encode this order of nesting I must encode
 always miss order of nesting and of course all the operations that I want
 to execute in situ need to be lifted through the factor C 1 I can do it
 because it's a factor as we have seen and this only works for inductive
 typeclasses of course well that is not a big limitation perhaps since most
 of our typeclasses are inductive not all for example traversable is not
 inductive so there is no free traversable that can be encoded in this way
 but these are significant disadvantages most importantly we are not free
 to encode arbitrary nesting of effects the second option is to use the
 disjunction of method factors and then you build the free typeclass instance
 using this C in other words you make a new typeclass that has all the methods
 of the previous hypothesis disjunction of method functors is equivalent
 to conjunction of the f-typeclass evidence families because type costs
 evidence values are of type function CX to X and so this disjunction is
 equivalent to taking a conjunction of those functions so that's the same
 as building one big type ones with all the methods put together now this
 is of course not ideal because you would have to change the code if you
 wanted to combine different typeclasses but church encoding can give you
 this combination for free because all you need to do is to write this kind
 of type and then obviously this was just a product of c1 c2 so you have
 this formula where you can put different typeclasses here and different
 in your use here and so the church encoding automatically gives you a way
 to have a way of having a free typeclass instance for any combination of
 typeclasses and any combination of generators it's a very powerful mechanism
 let's consider just two examples one is for curiosity what if we combine
 the filter in the control function we would have a typeclass that is at
 once a function and the control factor and that's possible we can do it
 the question is what do you do with this class because this class is going
 to be free encoding so you need to interpret it into some specific class
 typeclass so you could probably interpret it in a pro factor although I
 don't know what is the use case for this a better example is to combine
 munna and applicative this is actually useful in practice because ma not
 an applicative encode slightly different kind of effects monad encodes
 sequential effects look at them encodes effects that are partially parallel
 so not necessarily completely independent but the effect parts can be run
 in Kerala so computation with applicative factor can be paralyzed very
 easily but computations with monads cannot be paralyzed because they are
 sequentially the next step depends on the value of the previous step and
 the effect also depends on the value of the previous step so you cannot
 start running the effect before you know the value but with a quick edit
 of you can now ordinarily a monad also has an applicative instance however
 in Sun walnuts in other words you can implement zip if you have flat map
 but in some walnuts there is a non-standard implementation of zip that
 has specific advantages in other words an implementation of zip that is
 not equal to that which you get out of a flat map and you do that for specific
 reasons either for performance so it could it could give you the same results
 but it will run effects differently and will have different performance
 for example imagine that you have a future monad and the zip can be implemented
 as parallel execution of futures and flatmap is implemented as sequential
 execution of futures so if you combined monad and duplicative in the freetypecl
ass and interpreted that pi plus into a future such that the monadic methods
 the flat map are converted into flat map in the future but applicative
 methods are converted into parallel execution of futures using a special
 code then you get an advantage because each zip or create fellow branches
 in each flat mark sequential branches so let's see how that works in some
 example code so here's the encoding of the free monad and applicative at
 the same time so I put them into one typeclass for simplicity I could have
 done it differently you could have done it using the church including the
 real is right before but this is more interesting because you can see how
 you would run a combined frame on a duplicative over a type constructor
 G that has both applicative and one on instances the way you would do that
 is that all you would translate of course wrapping to wrap here into pure
 flatmap you would translate like this you would run and then you run this
 you so you run the flat map in the target unit but the applicative you
 know that you translate like this you run in parallel and then you combine
 them using an applicative method in the model so you see this run is not
 in peril because this is inside the function which is this function which
 will be called only inside the flat map after the first effect is finished
 but these two effects are going to be run in parallel so if I implement
 the interpreter like this and I will automatically translate all the applicativ
e operations into parallel executions potentially parallel executions let's
 see for example for future I just translate the same into futures and this
 is actually going to be pair execution of futures because we know what's
 calendars once you have a future it already is scheduled and run I give
 it an execution context and it's already run so in this way I can have
 so I don't have the typeclass instances for functor monad it's more or
 less boilerplate I just do a little bit of simplification it's not important
 most so let me just skip this and then here is my DSL I have some operations
 I make a free monad out of it which is at the same time a free applicative
 and then I run it through the future so I can run my code melodically so
 this is nomadic code the lift is a just method that I defined to make it
 quicker to lift things it's a wrapper so basically I generate an ID when
 I generate three new IDs and I validate them in parallel and I wait until
 all of this validation is done and I close the session so this is a combination
 of melodic and wicked methods at the same time the interpreter is just
 some translating these into specific business logic that I imagined and
 this is all for a less boilerplate so basically when I run this computations
 computations of course just a pure value doesn't do anything it's a pure
 data structure that describes what needs to be done but when I run this
 computation and automatically all these zipped parts become executed in
 parallel but all the mimetic parts are executed sequentially and I can
 I don't need to worry about the order of these things I can nest them in
 any way want for example I could define first validate using monadic the
 line I combine different validates using applicative and I again put the
 results into a monadic context it's fine it's all working it all works
 in arbitrary order this is what I was indicating here and this is an advantage
 over this method the frankly composition where I would have to choose whether
 I have moon add outside applicative inside or more not inside applicative
 outside and whatever I choose I can only then encode one of those combinations
 so this concludes this chapter and here are some exercises for making your
 dream code introduced in coding and working with inductive typeclasses
 implement an idea cells implementing the church encoding simplifying quantified
 types and deriving a reduced encoding color of a tree encoding for different
 cases this concludes chapter tune 
\end_layout

\end_inset


\end_layout

\end_body
\end_document
