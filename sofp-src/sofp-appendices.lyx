#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
\usepackage[all]{xy} % xypic

% pstricks with support for pdflatex
%\usepackage{pdftricks}
%\begin{psinputs}
%   \usepackage{pstricks}
%   \usepackage{multido}
%\end{psinputs}
\usepackage{pstricks}

% Cover picture on first page.
\usepackage{wallpaper}
% Custom commands for cover page.
\usepackage[absolute,overlay]{textpos}

% No page numbers on "Part" pages.
\renewcommand*{\partpagestyle}{empty}


% Running head: works, but results are not satisfactory.
%\usepackage{scrlayer-scrpage}
%\automark[subsection]{chapter}


% "Better text justification"? Actually, this causes a fatal error "auto expansion is only possible with scalable fonts".
%\usepackage{microtype}

% Fix the numbering of exercises: subsubsections appear as paragraphs but are numbered.
%\usepackage{titlesec} % Incompatible with komascript's later versions.
% See https://tex.stackexchange.com/questions/7627/how-to-reference-paragraph
% See the `titlesec` package documentation at http://www.ctex.org/documents/packages/layout/titlesec.pdf
%\titleformat{\subsubsection}[runin]{\normalfont\normalsize\bfseries}{}{0pt}{}
%\titlespacing{\subsubsection}{0pt}{5pt}{3\wordsep}
%\titleformat{\subparagraph}[runin]{\normalfont\normalsize\bfseries}{}{0pt}{}
%\titlespacing{\subparagraph}{\parindent}{\parskip}{3\wordsep}
%\titlespacing{\paragraph}{0pt}{3pt}{2\wordsep}

\renewcommand*{\subsubsectionformat}{}
\RedeclareSectionCommand[ % Statement 1.2.3.4
  runin=true,
  afterskip=2ex,
  beforeskip=2.5pt plus 0.3pt minus 0.05pt,
  afterindent=false,
  font={\normalfont\normalsize\bfseries}
]{subsubsection}
\RedeclareSectionCommand[ % Proof
  runin=true,
  font={\normalfont\normalsize\bfseries},
  afterindent=false,
  afterskip=2ex,
  beforeskip=0pt
]{subparagraph}
\RedeclareSectionCommand[
  runin=true,
  font={\normalfont\normalsize\bfseries},
  afterskip=1.3ex,
  beforeskip=0pt
]{paragraph}

% Make page headers and page numbers smaller
\addtokomafont{pagehead}{\small}
\addtokomafont{pagenumber}{\small}

% Double-stroked fonts to replace the non-working \mathbb{1}.
\usepackage{bbold}
\DeclareMathAlphabet{\bbnumcustom}{U}{BOONDOX-ds}{m}{n} % Use BOONDOX-ds or bbold.
\newcommand{\custombb}[1]{\bbnumcustom{#1}}
% The LyX document will define a macro \bbnum{#1} that calls \custombb{#1}.

% Scala syntax highlighting. See https://tex.stackexchange.com/questions/202479/unable-to-define-scala-language-with-listings
%\usepackage[T1]{fontenc}
%\usepackage[utf8]{inputenc}
%\usepackage{beramono}
%\usepackage{listings}
% The listing settings are now supported by LyX in a separate section "Listings".
\usepackage{xcolor}

\definecolor{scalakeyword}{rgb}{0.16,0.07,0.5}
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{aqua}{rgb}{0.9,0.96,0.999}
\definecolor{scalatype}{rgb}{0.2,0.3,0.2}
\definecolor{teal}{rgb}{0,0.6,0}

% These settings are now in the Listings tab in LyX.
%\lstdefinestyle{myScalastyle}{
%  language=scala, % This should be defined first!!! Otherwise it overrides all customization via morekeywords / otherkeywords.
%  otherkeywords={{=,=>,<-,<\%,<:,>:,\#,@,*,+,-,/,::,:,[,]}},
%  frame=tb,
%  aboveskip=2mm,
%  belowskip=2mm,
%  showstringspaces=false,
%  columns=flexible,
%  basicstyle={\small\ttfamily},
%  extendedchars=true,
%  %numbers=none,
%  numberstyle=\tiny\color{gray},
%  keywordstyle=\color{blue},
%  commentstyle=\color{dkgreen},
%  stringstyle=\color{mauve},
%  frame=single,
%  framerule=0.01mm,
%  breaklines=true,
%  breakatwhitespace=true,
%  tabsize=3,
%  framexleftmargin=4mm, framexrightmargin=4mm,
%  xleftmargin=4mm, xrightmargin=4mm, % Making these margins the same has a good effect.
%  framextopmargin=0.5mm, framexbottommargin=.5mm,
%  fillcolor=\color{aqua},
%  rulecolor=\color{aqua},
%  rulesepcolor=\color{aqua},
%  backgroundcolor=\color{aqua},
%  mathescape=true,
%}

% Example usage: \begin{lstlisting}[style=myScalastyle]  object blah \end{lstlisting}
%\newenvironment{scala}{\begin{lstlisting}[style=myScalastyle]}{\end{lstlisting}}
%\lstnewenvironment{scala}{\lstset{style=myScalastyle}}{}

\usepackage[nocenter]{qtree} % simple tree drawing
\usepackage{relsize} % make math symbols larger or smaller; supports \smaller etc.
\usepackage{stmaryrd} % some extra symbols such as \fatsemi
% Note: using \forwardcompose inside a \text{} will cause a LaTeX error!
\newcommand{\forwardcompose}{\hspace{1.2pt}\ensuremath\mathsmaller{\fatsemi}\hspace{1.5pt}}
% this is ugly, I used this before I found \fatsemi:
%\newcommand{\bef}{\hspace{1.0pt}\ensuremath\raisebox{2pt}{$\mathsmaller{\mathsmaller{\circ}}$}\hspace{-2.9pt},}
%\makeatletter
% Macros to assist LyX with XYpic when using scaling.
\newcommand{\xyScaleX}[1]{%
\makeatletter
\xydef@\xymatrixcolsep@{#1}
\makeatother
} % end of \xyScaleX
\makeatletter
\newcommand{\xyScaleY}[1]{%
\makeatletter
\xydef@\xymatrixrowsep@{#1}
\makeatother
} % end of \xyScaleY

% Increase the default vertical space inside table cells.
\renewcommand\arraystretch{1.4}

% Color for PDF hyperlinks.
\definecolor{hlink}{rgb}{0.06, 0.14, 0.48}

% Make underline green.
\definecolor{greenunder}{rgb}{0.1,0.6,0.2}
%\newcommand{\munderline}[1]{{\color{greenunder}\underline{{\color{black}#1}}\color{black}}}
\def\mathunderline#1#2{\color{#1}\underline{{\color{black}#2}}\color{black}}
% The LyX document will define a macro \gunderline{#1} that will use \mathunderline with the color `greenunder`.
%\def\gunderline#1{\mathunderline{greenunder}{#1}} % This is now defined by LyX itself with GUI support.


% Prepare settings for imposing a color background for all displayed math. This will be done by a script later.
\usepackage{empheq} % Background on all displayed equations.
\definecolor{mathbg}{rgb}{1.0, .98, .87}
\newcommand*\mymathbgbox[1]{%
\setlength{\fboxsep}{0pt}%
\colorbox{mathbg}{\hspace{0.5mm}#1\hspace{0.5mm}}}
%\renewenvironment{align}{%
%\begin{empheq}[box=\mymathbgbox]{align}}{%
%\endalign\end{empheq}}
% Run a command such as LC_ALL=C sed -i bak -e 's|\\begin{align}|\\begin{empheq}[box=\\mymathbgbox]{align}|; s|\\end{align}|\\end{empheq}|' sofp-filterable.tex
% This is not used now because the results are not great.

% Better text quotes.
\renewcommand\textquotedblleft{``}
\renewcommand\textquotedblright{''}

% Better symbol for the pair mapper instead of \ogreaterthan and \varogreaterthan.
\newcommand{\boxrightarrow}{\mathbin{\ensuremath{%
\mathchoice%
  {\displaystyle{\boxminus}\kern-5.35pt\raisebox{0.75pt}{$\scriptstyle{\succ}$}}%
  {\boxminus\kern-5.35pt\raisebox{0.75pt}{$\scriptstyle{\succ}$}}%
  {\textstyle{\boxminus}\kern-5.35pt\raisebox{0.75pt}{$\scriptstyle{\succ}$}}%
  {\scriptstyle{\boxminus}\kern-3.7pt\raisebox{0.49pt}{$\scriptscriptstyle{\succ}$}}%
}% end of mathchoice with raisebox
\hspace{1.0pt}}}
\renewcommand{\ogreaterthan}{\boxrightarrow}
\renewcommand{\varogreaterthan}{\boxrightarrow}
\end_preamble
\options open=any,numbers=noenddot,index=totoc,bibliography=totoc,listof=totoc,fontsize=10pt
\use_default_options true
\master sofp.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "palatino" "default"
\font_sans "helvet" "default"
\font_typewriter "cmtt" "default"
\font_math "newtxmath" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command makeindex
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_title "The Science of Functional Programming: A Tutorial, with Examples in Scala"
\pdf_author "Sergei Winitzki"
\pdf_subject "Functional programming"
\pdf_keywords "Functional programming, Scala, Type theory, Category theory, Formal logic, Programming languages"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 2
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref page
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=hlink"
\papersize custom
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification false
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\paperwidth 7.444in
\paperheight 9.68in
\leftmargin 2.2cm
\topmargin 1.175cm
\rightmargin 1.3cm
\bottommargin 1.275cm
\headsep 0.4cm
\footskip 0.72cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\listings_params "language=Scala,morekeywords={{scala}},otherkeywords={=,=>,<-,<\%,<:,>:,\#,@,:,[,],.,???},keywordstyle={\color{scalakeyword}},morekeywords={[2]{String,Short,Int,Long,Char,Boolean,Double,Float,BigDecimal,Seq,Map,Set,Option,Either,Future,Successful,LazyList,Vector,Range,IndexedSeq,true,false,None,List,Nil,Try,Success,Failure,Some,Left,Right,Nothing,Any,Array,Unit,Iterator,Stream,Throwable,Integer,Object}},keywordstyle={[2]{\color{scalatype}}},frame=tb,aboveskip={1.5mm},belowskip={0.5mm},showstringspaces=false,columns=fullflexible,keepspaces=true,basicstyle={\smaller\ttfamily},extendedchars=true,numbers=none,numberstyle={\tiny\color{gray}},commentstyle={\color{dkgreen}},stringstyle={\color{mauve}},frame=single,framerule={0.0mm},breaklines=true,breakatwhitespace=true,tabsize=3,framexleftmargin={0.5mm},framexrightmargin={0.5mm},xleftmargin={1.5mm},xrightmargin={1.5mm},framextopmargin={0.5mm},framexbottommargin={0.5mm},fillcolor={\color{aqua}},rulecolor={\color{aqua}},rulesepcolor={\color{aqua}},backgroundcolor={\color{aqua}},mathescape=false,extendedchars=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\start_of_appendix
Notations
\begin_inset CommandInset label
LatexCommand label
name "chap:Appendix-Notations"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\renewcommand{\gunderline}[1]{\mathunderline{greenunder}{#1}}
{\underline{#1}}
\end_inset


\begin_inset FormulaMacro
\renewcommand{\bef}{\forwardcompose}
{\fatsemi}
\end_inset


\begin_inset FormulaMacro
\renewcommand{\bbnum}[1]{\custombb{#1}}
{\underline{#1}}
\end_inset


\begin_inset FormulaMacro
\renewcommand{\pplus}{{\displaystyle }{+\negmedspace+}}
{{\color{lime}++}}
\end_inset

This book chooses certain notations differently from what the functional
 programming community currently uses.
 The proposed notation is well adapted to reasoning about types and code,
 and especially for designing data types and proving the laws of various
 typeclasses.
\end_layout

\begin_layout Section
Summary of notations
\end_layout

\begin_layout Description
\begin_inset Formula $A$
\end_inset

 — type parameter.
 Names of type parameters are always capitalized.
\end_layout

\begin_layout Description
\begin_inset Formula $F^{A}$
\end_inset

 — type constructor 
\begin_inset Formula $F$
\end_inset

 with type argument 
\begin_inset Formula $A$
\end_inset

.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[A]
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $F^{\bullet}$
\end_inset

 — the type constructor 
\begin_inset Formula $F$
\end_inset

 understood as a type-level function.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[_]
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
\begin_inset Formula $x^{:A}$
\end_inset

 — value 
\begin_inset Formula $x$
\end_inset

 has type 
\begin_inset Formula $A$
\end_inset

; in Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x:A
\end_layout

\end_inset

.
 Value names are always in lowercase.
\end_layout

\begin_layout Description
\begin_inset Formula $\bbnum 1,\,1$
\end_inset

 — the unit type and its value; in Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Unit
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

()
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\bbnum 0$
\end_inset

 — the void type.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Nothing
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $A+B$
\end_inset

 — a disjunctive type (co-product).
 In Scala, this type is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Either[A, B]
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
\begin_inset Formula $x^{:A}+\bbnum 0^{:B}$
\end_inset

 — a value of a disjunctive type 
\begin_inset Formula $A+B$
\end_inset

.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Left(x)
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $A\times B$
\end_inset

 — a product (tuple) type.
 In Scala, this type is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(A,B)
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $a^{:A}\times b^{:B}$
\end_inset

 value of a tuple type 
\begin_inset Formula $A\times B$
\end_inset

.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(a, b)
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $A\rightarrow B$
\end_inset

 — the function type, mapping from 
\begin_inset Formula $A$
\end_inset

 to 
\begin_inset Formula $B$
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $x^{:A}\rightarrow f$
\end_inset

 — a nameless function (as a value).
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

{ x:A => f }
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\text{id}$
\end_inset

 — an identity function; in Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

identity[A]
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\triangleq$
\end_inset

 — 
\begin_inset Quotes eld
\end_inset

is defined to be
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

is equal by definition
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\overset{!}{=}$
\end_inset

 — 
\begin_inset Quotes eld
\end_inset

must be equal according to what we know
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\overset{?}{=}$
\end_inset

 — 
\begin_inset Quotes eld
\end_inset

we ask — is it equal? — because we still need to prove that
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\square$
\end_inset

 — 
\begin_inset Quotes eld
\end_inset

this proof or this derivation or this definition or this example is finished
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\cong$
\end_inset

 — for types, a natural isomorphism between types; for values, 
\begin_inset Quotes eld
\end_inset

equivalent
\begin_inset Quotes erd
\end_inset

 values according to an already established isomorphism
\end_layout

\begin_layout Description
\begin_inset Formula $A^{:F^{B}}$
\end_inset

 — special type annotation, used for defining unfunctors (GADTs)
\end_layout

\begin_layout Description
\begin_inset Formula $\wedge$
\end_inset

 — logical conjunction; 
\begin_inset Formula $\alpha\wedge\beta$
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

both 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 are true
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\vee$
\end_inset

 — logical disjunction; 
\begin_inset Formula $\alpha\vee\beta$
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

either 
\begin_inset Formula $\alpha$
\end_inset

 or 
\begin_inset Formula $\beta$
\end_inset

 or both are true
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\Rightarrow$
\end_inset

 — logical implication; 
\begin_inset Formula $\alpha\Rightarrow\beta$
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

if 
\begin_inset Formula $\alpha$
\end_inset

 is true then 
\begin_inset Formula $\beta$
\end_inset

 is true
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\text{fmap}_{F}$
\end_inset

 — the standard method 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 of a functor 
\begin_inset Formula $F$
\end_inset

.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Functor[F].fmap
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\text{flm}_{F},\text{ftn}_{F},\text{pu}_{F}$
\end_inset

 — the standard methods 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

, and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

 of a monad 
\begin_inset Formula $F$
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $F^{\bullet}$
\end_inset

 — the type constructor 
\begin_inset Formula $F$
\end_inset

 understood as a type-level function.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[_]
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
\begin_inset Formula $F^{\bullet}\leadsto G^{\bullet}$
\end_inset

 — or 
\begin_inset Formula $F\leadsto G$
\end_inset

 a natural transformation between functors 
\begin_inset Formula $F$
\end_inset

 and 
\begin_inset Formula $G$
\end_inset

.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F ~> G
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\forall A.\,P^{A}$
\end_inset

 — a universally quantified type expression.
 In Scala 3, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

[A] => P[A]
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\exists A.\,P^{A}$
\end_inset

 — an existentially quantified type expression.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

{ type A; val x: P[A] }
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
\begin_inset Formula $f\bef g$
\end_inset

 — the forward composition of functions: 
\begin_inset Formula $f\bef g$
\end_inset

 is 
\begin_inset Formula $x\rightarrow g(f(x))$
\end_inset

.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

f andThen g
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $f\circ g$
\end_inset

 — the backward composition of functions: 
\begin_inset Formula $f\circ g$
\end_inset

 is 
\begin_inset Formula $x\rightarrow f(g(x))$
\end_inset

.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

f compose g
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $F\circ G$
\end_inset

 — the backward composition of type constructors: 
\begin_inset Formula $F\circ G$
\end_inset

 is 
\begin_inset Formula $F^{G^{\bullet}}$
\end_inset

.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[G[A]]
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
\begin_inset Formula $\triangleright$
\end_inset

 — use a value as the argument of a function: 
\begin_inset Formula $x\triangleright f$
\end_inset

 is 
\begin_inset Formula $f(x)$
\end_inset

.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x.pipe(f)
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $f^{\uparrow G}$
\end_inset

 — a function 
\begin_inset Formula $f$
\end_inset

 lifted to a functor 
\begin_inset Formula $G$
\end_inset

; same as 
\begin_inset Formula $\text{fmap}_{G}(f)$
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $f^{\uparrow G\uparrow H}$
\end_inset

 — a function lifted first to 
\begin_inset Formula $G$
\end_inset

 and then to 
\begin_inset Formula $H$
\end_inset

.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

h.map(_.map(f))
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
\begin_inset Formula $f^{\downarrow H}$
\end_inset

 — a function 
\begin_inset Formula $f$
\end_inset

 lifted to a contrafunctor 
\begin_inset Formula $H$
\end_inset

 
\end_layout

\begin_layout Description
\begin_inset Formula $\diamond_{M}$
\end_inset

 — the Kleisli product operation for the monad 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $L\varangle M$
\end_inset

 or equivalently 
\begin_inset Formula $T_{L}^{M}$
\end_inset

 — the monad 
\begin_inset Formula $L$
\end_inset

's transformer applied to a monad 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\oplus$
\end_inset

 — the binary operation of a monoid.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x |+| y
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\Delta$
\end_inset

 — the 
\begin_inset Quotes eld
\end_inset

diagonal
\begin_inset Quotes erd
\end_inset

 function of type 
\begin_inset Formula $\forall A.\,A\rightarrow A\times A$
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\pi_{1},\pi_{2},...$
\end_inset

 — the projections from a tuple to its first, second, ..., parts
\end_layout

\begin_layout Description
\begin_inset Formula $\boxtimes$
\end_inset

 — pair product of functions: 
\begin_inset Formula $(f\boxtimes g)(a\times b)\triangleq f(a)\times g(b)$
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\boxplus$
\end_inset

 — pair co-product of functions
\end_layout

\begin_layout Description
\begin_inset Formula $\ogreaterthan$
\end_inset

 — pair mapper of relations
\end_layout

\begin_layout Description
\begin_inset Formula $\left[a,b,c\right]$
\end_inset

 — an ordered sequence of values.
 In Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Seq(a, b, c)
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $\begin{array}{||cc|}
x\rightarrow x & \bbnum 0\\
\bbnum 0 & a\rightarrow a\times a
\end{array}$
\end_inset

 
\begin_inset space ~
\end_inset

 — a function that works with disjunctive types (a 
\begin_inset Quotes eld
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
disjunctive functions
\end_layout

\end_inset

disjunctive function
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Section
Detailed explanations
\end_layout

\begin_layout Standard
\begin_inset Formula $F^{A}$
\end_inset

 means a type constructor 
\begin_inset Formula $F$
\end_inset

 with a type parameter 
\begin_inset Formula $A$
\end_inset

.
 In Scala, this is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[A]
\end_layout

\end_inset

.
 Type parameters are uppercase (
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, ...).
 Type constructors with multiple type parameters are denoted by 
\begin_inset Formula $F^{A,B,C}$
\end_inset

.
 Nested type constructors such as Scala's 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[G[A]]
\end_layout

\end_inset

 are denoted by 
\begin_inset Formula $F^{G^{A}}$
\end_inset

, meaning 
\begin_inset Formula $F^{(G^{A})}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $x^{:A}$
\end_inset

 means a value 
\begin_inset Formula $x$
\end_inset

 that has type 
\begin_inset Formula $A$
\end_inset

; this is a 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
type annotation
\end_layout

\end_inset

type annotation
\series default
.
 In Scala, a type annotation is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x:A
\end_layout

\end_inset

.
 The colon symbol, 
\begin_inset Formula $:$
\end_inset

, in the superscript shows that 
\begin_inset Formula $A$
\end_inset

 is not a type argument (as it would be in a type constructor, 
\begin_inset Formula $F^{A}$
\end_inset

).
 A less concise notation for 
\begin_inset Formula $x^{:A}$
\end_inset

 is 
\begin_inset Formula $x:A$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\bbnum 1$
\end_inset

 means the unit type
\begin_inset Index idx
status open

\begin_layout Plain Layout
unit type
\end_layout

\end_inset

, and 
\begin_inset Formula $1$
\end_inset

 means the value of the unit type.
 In Scala, the unit type is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Unit
\end_layout

\end_inset

, and its value is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

()
\end_layout

\end_inset

.
 An example of this notation is 
\begin_inset Formula $\bbnum 1+A$
\end_inset

, which corresponds to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Option[A]
\end_layout

\end_inset

 in Scala.
\end_layout

\begin_layout Standard
\begin_inset Formula $\bbnum 0$
\end_inset

 means the void
\begin_inset Index idx
status open

\begin_layout Plain Layout
void type
\end_layout

\end_inset

 type (the type with no values).
 In Scala, this is the type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Nothing
\end_layout

\end_inset

.
 The notation 
\begin_inset Formula $\bbnum 0$
\end_inset

 is often used to denote an empty part of disjunctive types or values.
 E.g., the disjunctive type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Option[A]
\end_layout

\end_inset

 has two parts: 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Some[A]
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

None
\end_layout

\end_inset

.
 These types are denoted by 
\begin_inset Formula $\bbnum 0+A$
\end_inset

 and 
\begin_inset Formula $\bbnum 1+\bbnum 0$
\end_inset

 respectively.
 Similarly, 
\begin_inset Formula $A+\bbnum 0$
\end_inset

 denotes the first part of the type 
\begin_inset Formula $A+B$
\end_inset

 (in Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Left[A]
\end_layout

\end_inset

), while 
\begin_inset Formula $\bbnum 0+B$
\end_inset

 denotes its second part (in Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Right[A]
\end_layout

\end_inset

).
 Values of disjunctive types are denoted similarly.
 E.g., 
\begin_inset Formula $x^{:A}+\bbnum 0^{:B}$
\end_inset

 denotes a value of the left part of the type 
\begin_inset Formula $A+B$
\end_inset

.
 In Scala, this value is written with fully annotated types as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Left[A,B](x)
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $A+B$
\end_inset

 means the disjunctive type made from types 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 In Scala, this is the type 
\family typewriter

\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Either[A, B]
\end_layout

\end_inset


\family default
.
\end_layout

\begin_layout Standard
\begin_inset Formula $x^{:A}+\bbnum 0^{:B}$
\end_inset

 denotes a value of a disjunctive type 
\begin_inset Formula $A+B$
\end_inset

, where 
\begin_inset Formula $x$
\end_inset

 is the value of type 
\begin_inset Formula $A$
\end_inset

, which is the chosen case, and 
\begin_inset Formula $\bbnum 0$
\end_inset

 stands for other possible cases.
 For example, 
\begin_inset Formula $x^{:A}+\bbnum 0^{B}$
\end_inset

 is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Left[A,B](x)
\end_layout

\end_inset

 in Scala.
 Type annotations 
\begin_inset Formula $^{:A}$
\end_inset

 and 
\begin_inset Formula $^{:B}$
\end_inset

 may be omitted if the types are unambiguous from the context.
\end_layout

\begin_layout Standard
\begin_inset Formula $A\times B$
\end_inset

 means the product type made from types 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 In Scala, this is the tuple type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(A,B)
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $a^{:A}\times b^{:B}$
\end_inset

 means a value of a tuple type 
\begin_inset Formula $A\times B$
\end_inset

; in Scala, this is the tuple value 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(a, b)
\end_layout

\end_inset

.
 Type annotations 
\begin_inset Formula $^{:A}$
\end_inset

 and 
\begin_inset Formula $^{:B}$
\end_inset

 may be omitted if the types are unambiguous from the context.
\end_layout

\begin_layout Standard
\begin_inset Formula $A\rightarrow B$
\end_inset

 means the type of functions 
\begin_inset Formula $A$
\end_inset

 to 
\begin_inset Formula $B$
\end_inset

.
 In Scala, this is the type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A => B
\end_layout

\end_inset

.
 The function type's arrow binds weaker than 
\begin_inset Formula $+$
\end_inset

, which binds weaker than 
\begin_inset Formula $\times$
\end_inset

.
 So, 
\begin_inset Formula $A+B\rightarrow C\times D$
\end_inset

 means 
\begin_inset Formula $(A+B)\rightarrow(C\times D)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $x^{:A}\rightarrow y$
\end_inset

 means a nameless function with argument 
\begin_inset Formula $x$
\end_inset

 of type 
\begin_inset Formula $A$
\end_inset

 and function body 
\begin_inset Formula $y$
\end_inset

.
 (Usually, the body 
\begin_inset Formula $y$
\end_inset

 will be an expression that uses 
\begin_inset Formula $x$
\end_inset

.
 In Scala, this is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

{ x: A => y }
\end_layout

\end_inset

.
 Type annotation 
\begin_inset Formula $^{:A}$
\end_inset

 may be omitted if the type is unambiguous from the context.
\end_layout

\begin_layout Standard
\begin_inset Formula $\text{id}$
\end_inset

 means the identity function.
 The type of its argument should be either specified as 
\begin_inset Formula $\text{id}^{A}$
\end_inset

 or 
\begin_inset Formula $\text{id}^{:A\rightarrow A}$
\end_inset

, or else should be unambiguous from the context.
 In Scala,  
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

identity[A]
\end_layout

\end_inset

 corresponds to 
\begin_inset Formula $\text{id}^{A}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\triangleq$
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

equal by definition
\begin_inset Quotes erd
\end_inset

.
 A definition of a function 
\begin_inset Formula $f$
\end_inset

 is written as 
\begin_inset Formula $f\triangleq(x^{:\text{Int}}\rightarrow x+10)$
\end_inset

; in Scala, this is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

val f = { x: Int => x + 10 }
\end_layout

\end_inset

.
 A definition of a type constructor 
\begin_inset Formula $F$
\end_inset

 is written as 
\begin_inset Formula $F^{A}\triangleq\bbnum 1+A$
\end_inset

; in Scala, this is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

type F[A] = Option[A]
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\cong$
\end_inset

 for types means an equivalence (an isomorphism) of types.
 For example, 
\begin_inset Formula $A+A\times B\cong A\times\left(\bbnum 1+B\right)$
\end_inset

.
 The same symbol 
\begin_inset Formula $\cong$
\end_inset

 for 
\emph on
values
\emph default
 means 
\begin_inset Quotes eld
\end_inset

equivalent
\begin_inset Quotes erd
\end_inset

 according to an equivalence relation that needs to be established in the
 text.
 For example, if we have established an equivalence that allows nested tuples
 to be reordered whenever needed, we can write 
\begin_inset Formula $\left(a\times b\right)\times c\cong a\times\left(b\times c\right)$
\end_inset

, meaning that these values are mapped to each other by the established
 isomorphism functions.
 
\end_layout

\begin_layout Standard
\begin_inset Formula $A^{:F^{B}}$
\end_inset

 in type definitions means that the definition assigns the type 
\begin_inset Formula $F^{B}$
\end_inset

 to the type expression 
\begin_inset Formula $A$
\end_inset

.
 This notation is used for defining unfunctors (GADTs).
 For example, the Scala code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sealed trait F[A]
\end_layout

\begin_layout Plain Layout

case class F1() extends F[Int]
\end_layout

\begin_layout Plain Layout

case class F2[A](a: A) extends F[(A, String)]
\end_layout

\end_inset

defines an unfunctor
\begin_inset Index idx
status open

\begin_layout Plain Layout
unfunctor
\end_layout

\end_inset

 denoted by 
\begin_inset Formula $F^{A}\triangleq\bbnum 1^{:F^{\text{Int}}}+A^{:F^{A\times\text{String}}}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\wedge$
\end_inset

 (conjunction), 
\begin_inset Formula $\vee$
\end_inset

 (disjunction), and 
\begin_inset Formula $\Rightarrow$
\end_inset

 (implication) are used in formulas of Boolean as well as constructive logic
 in Chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:5-Curry-Howard"
plural "false"
caps "false"
noprefix "false"

\end_inset

, e.g., 
\begin_inset Formula $\alpha\wedge\beta$
\end_inset

, where Greek letters stand for logical propositions.
\end_layout

\begin_layout Standard
\begin_inset Formula $\text{fmap}_{F}$
\end_inset

 is a functor 
\begin_inset Formula $F$
\end_inset

's the standard method 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 of the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Functor
\end_layout

\end_inset

 typeclass.
 In Scala, this may be written as 
\family typewriter

\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Functor[F].fmap
\end_layout

\end_inset


\family default
.
 Since each functor 
\begin_inset Formula $F$
\end_inset

 has its own specific implementation of 
\begin_inset Formula $\text{fmap}_{F}$
\end_inset

, the subscript 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $F$
\end_inset


\begin_inset Quotes erd
\end_inset

 is 
\emph on
not
\emph default
 a type parameter of 
\begin_inset Formula $\text{fmap}_{F}$
\end_inset

.
 The function 
\begin_inset Formula $\text{fmap}_{F}$
\end_inset

 has two type parameters, which may be written as 
\begin_inset Formula $\text{fmap}_{F}^{A,B}$
\end_inset

, and we may write its type signature as 
\begin_inset Formula $\text{fmap}_{F}^{A,B}:\left(A\rightarrow B\right)\rightarrow F^{A}\rightarrow F^{B}$
\end_inset

.
 In most cases, the type parameters 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

 can be omitted without loss of clarity.
\end_layout

\begin_layout Standard
\begin_inset Formula $\text{pu}_{F}$
\end_inset

 denotes a monad 
\begin_inset Formula $F$
\end_inset

's method 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

.
 This function has type signature 
\begin_inset Formula $A\rightarrow F^{A}$
\end_inset

 and has a type parameter 
\begin_inset Formula $A$
\end_inset

.
 In the code notation, the type parameter may be either omitted or denoted
 as 
\begin_inset Formula $\text{pu}_{F}^{A}$
\end_inset

.
 If we are using 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

 with a complicated type, e.g., 
\begin_inset Formula $\bbnum 1+P^{B}$
\end_inset

, as of the type parameter 
\begin_inset Formula $A$
\end_inset

, we may write the type parameter for clarity as 
\begin_inset Formula $\text{pu}_{F}^{\bbnum 1+P^{B}}$
\end_inset

.
 The type signature of that function then becomes: 
\begin_inset Formula 
\[
\text{pu}_{F}^{1+P^{B}}:\bbnum 1+P^{B}\rightarrow F^{\bbnum 1+P^{B}}\quad.
\]

\end_inset

But in most cases we will not need to write out the type parameters.
\end_layout

\begin_layout Standard
\begin_inset Formula $\text{flm}_{F}$
\end_inset

 denotes the curried version of a monad 
\begin_inset Formula $F$
\end_inset

's method 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

.
 The type signature of 
\begin_inset Formula $\text{flm}_{F}$
\end_inset

 is 
\begin_inset Formula $\text{flm}_{F}:(A\rightarrow F^{B})\rightarrow F^{A}\rightarrow F^{B}$
\end_inset

.
 Note that Scala's standard 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

 type signature is not curried.
 The curried method 
\begin_inset Formula $\text{flm}_{F}$
\end_inset

 is easier to use in calculations involving the monad laws.
\end_layout

\begin_layout Standard
\begin_inset Formula $\text{ftn}_{F}$
\end_inset

 denotes a monad 
\begin_inset Formula $F$
\end_inset

's method 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 with the type signature 
\begin_inset Formula $\text{ftn}_{F}:F^{F^{A}}\rightarrow F^{A}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $F^{\bullet}$
\end_inset

 means the type constructor 
\begin_inset Formula $F$
\end_inset

 understood as a type-level function, — that is, with a type parameter unspecifi
ed.
 In Scala, this is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[_]
\end_layout

\end_inset

.
 The bullet symbol, 
\begin_inset Formula $\bullet$
\end_inset

, is used as a placeholder for the missing type parameter.
 When no type parameter is needed, 
\begin_inset Formula $F$
\end_inset

 means the same as 
\begin_inset Formula $F^{\bullet}$
\end_inset

.
 (For example, 
\begin_inset Quotes eld
\end_inset

a functor 
\begin_inset Formula $F$
\end_inset


\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

a functor 
\begin_inset Formula $F^{\bullet}$
\end_inset


\begin_inset Quotes erd
\end_inset

 mean the same thing.) However, it is useful for clarity to be able to indicate
 the place where the type parameter would appear.
 For instance, functor composition is denoted as 
\begin_inset Formula $F^{G^{\bullet}}$
\end_inset

; in Scala 2, this is 
\family typewriter

\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Lambda[X => F[G[X]]]
\end_layout

\end_inset


\family default
 when using the 
\begin_inset Quotes eld
\end_inset

kind projector
\begin_inset Quotes erd
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
kind@
\begin_inset Quotes eld
\end_inset

kind projector
\begin_inset Quotes erd
\end_inset

 plugin
\end_layout

\end_inset

 plugin.
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
\begin_inset CommandInset href
LatexCommand href
name "https://github.com/typelevel/kind-projector"
target "https://github.com/typelevel/kind-projector"
literal "false"

\end_inset


\end_layout

\end_inset

 When the type parameter 
\begin_inset Formula $B$
\end_inset

 of a bifunctor 
\begin_inset Formula $P^{A,B}$
\end_inset

 is fixed to 
\begin_inset Formula $Z$
\end_inset

, we get a functor (with respect to 
\begin_inset Formula $A$
\end_inset

) denoted by 
\begin_inset Formula $P^{\bullet,Z}$
\end_inset

.
 Another example: 
\begin_inset Formula $T_{L}^{M,\bullet}$
\end_inset

 denotes a monad transformer for the base monad 
\begin_inset Formula $L$
\end_inset

 and the foreign monad 
\begin_inset Formula $M$
\end_inset

.
 The foreign monad 
\begin_inset Formula $M$
\end_inset

 is a type parameter in 
\begin_inset Formula $T_{L}^{M,\bullet}$
\end_inset

.
 The symbol 
\begin_inset Formula $\bullet$
\end_inset

 stands for the transformer's second type parameter.
 (The base monad 
\begin_inset Formula $L$
\end_inset

 is not a type parameter in 
\begin_inset Formula $T_{L}^{M,\bullet}$
\end_inset

 because the construction of the monad transformer depends on the internal
 details of 
\begin_inset Formula $L$
\end_inset

.)
\end_layout

\begin_layout Standard
\begin_inset Formula $F^{\bullet}\leadsto G^{\bullet}$
\end_inset

 or 
\begin_inset Formula $F\leadsto G$
\end_inset

 means a natural transformation between two functors 
\begin_inset Formula $F$
\end_inset

 and 
\begin_inset Formula $G$
\end_inset

.
 In some Scala libraries, this is denoted by 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F ~> G
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\forall A.\,P^{A}$
\end_inset

 is a universally quantified type expression, in which 
\begin_inset Formula $A$
\end_inset

 is a bound type parameter.
\end_layout

\begin_layout Standard
\begin_inset Formula $\exists A.\,P^{A}$
\end_inset

 is an existentially quantified type expression, in which 
\begin_inset Formula $A$
\end_inset

 is a bound type parameter.
\end_layout

\begin_layout Standard
\begin_inset Formula $\bef$
\end_inset

 means the forward composition
\begin_inset Index idx
status open

\begin_layout Plain Layout
forward composition
\end_layout

\end_inset

 of functions: 
\begin_inset Formula $f\bef g$
\end_inset

 (reads 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $f$
\end_inset

 before 
\begin_inset Formula $g$
\end_inset


\begin_inset Quotes erd
\end_inset

) is the function defined as 
\begin_inset Formula $x\rightarrow g(f(x))$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\circ$
\end_inset

 means the backward composition
\begin_inset Index idx
status open

\begin_layout Plain Layout
backward composition
\end_layout

\end_inset

 of functions: 
\begin_inset Formula $f\circ g$
\end_inset

 (reads 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $f$
\end_inset

 after 
\begin_inset Formula $g$
\end_inset


\begin_inset Quotes erd
\end_inset

) is the function defined as 
\begin_inset Formula $x\rightarrow f(g(x))$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\circ$
\end_inset

 with type constructors means their (backward) composition, for example
 
\begin_inset Formula $F\circ G$
\end_inset

 denotes the type constructor 
\begin_inset Formula $F^{G^{\bullet}}$
\end_inset

.
 In Scala, this is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[G[A]]
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Formula $x\triangleright f$
\end_inset

 (the 
\series bold
pipe notation
\series default
)
\begin_inset Index idx
status open

\begin_layout Plain Layout
pipe notation
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
$@
\begin_inset Formula $\triangleright$
\end_inset

-notation!see 
\begin_inset Quotes eld
\end_inset

pipe notation
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

 is a different syntax for 
\begin_inset Formula $f(x)$
\end_inset

.
 The value 
\begin_inset Formula $x$
\end_inset

 is passed as the argument to the function 
\begin_inset Formula $f$
\end_inset

.
 In Scala, the expression 
\begin_inset Formula $x\triangleright f$
\end_inset

 is written as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x.pipe(f)
\end_layout

\end_inset

 or, if 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 is a method, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x.f
\end_layout

\end_inset

.
 This syntax is used with many standard methods such as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

size
\end_layout

\end_inset

 or 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

toSeq
\end_layout

\end_inset

.
 Because the argument 
\begin_inset Formula $x$
\end_inset

 is to the left of the function 
\begin_inset Formula $f$
\end_inset

 in this notation, forward compositions of functions such as 
\begin_inset Formula $x\triangleright f\triangleright g$
\end_inset

 are naturally grouped to the left as it is done in Scala code, for example
 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x.toSeq.sorted
\end_layout

\end_inset

.
 The operation 
\begin_inset Formula $\triangleright$
\end_inset

 (pronounced 
\begin_inset Quotes eld
\end_inset

pipe
\begin_inset Quotes erd
\end_inset

) groups weaker than the forward composition (
\begin_inset Formula $\bef$
\end_inset

), and so we have 
\begin_inset Formula $x\triangleright f\bef g=x\triangleright f\triangleright g$
\end_inset

 in this notation.
 Reasoning about code in the pipe notation uses the identities:
\begin_inset Formula 
\begin{align*}
x\triangleright f=f(x)\quad,\quad\quad & \left(x\triangleright f\right)\triangleright g=x\triangleright f\triangleright g\quad,\\
x\triangleright f\bef g=x\triangleright\left(f\bef g\right)\quad,\quad\quad & x\triangleright f\triangleright g=x\triangleright f\bef g\quad.
\end{align*}

\end_inset

The pipe symbol groups stronger than the function arrow, so 
\begin_inset Formula $x\rightarrow y\triangleright f$
\end_inset

 is the same as 
\begin_inset Formula $x\rightarrow(y\triangleright f)$
\end_inset

.
 Here are some examples of reasoning with functions in the pipe notation:
\begin_inset Formula 
\begin{align*}
 & \left(a\rightarrow a\triangleright f\right)=\left(a\rightarrow f(a)\right)=f\quad,\\
 & f\triangleright\left(y\rightarrow a\triangleright y\right)=a\triangleright f=f(a)\quad,\\
 & f(y(x))=x\triangleright y\triangleright f\neq x\triangleright\left(y\triangleright f\right)=f(y)(x)\quad.
\end{align*}

\end_inset

The correspondence between the forward composition and the backward composition:
\begin_inset Formula 
\begin{align*}
 & f\bef g=g\circ f\quad,\\
 & x\triangleright(f\bef g)=x\triangleright f\bef g=x\triangleright f\triangleright g=g(f(x))=(g\circ f)(x)\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $f^{\uparrow G}$
\end_inset

 means a function 
\begin_inset Formula $f$
\end_inset

 lifted to a functor 
\begin_inset Formula $G$
\end_inset

.
 For a function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, the application of 
\begin_inset Formula $f^{\uparrow G}$
\end_inset

 to a value 
\begin_inset Formula $g^{:G^{A}}$
\end_inset

 is written as 
\begin_inset Formula $f^{\uparrow G}(g)$
\end_inset

 or as 
\begin_inset Formula $g\triangleright f^{\uparrow G}$
\end_inset

.
 In Scala, this is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

g.map(f)
\end_layout

\end_inset

.
 Nested lifting (i.e., lifting to the functor composition 
\begin_inset Formula $H\circ G$
\end_inset

) can be written as 
\begin_inset Formula $f^{\uparrow G\uparrow H}$
\end_inset

, which means 
\begin_inset Formula $\left(f^{\uparrow G}\right)^{\uparrow H}$
\end_inset

, and produces a function of type 
\begin_inset Formula $H^{G^{A}}\rightarrow H^{G^{B}}$
\end_inset

.
 Applying a nested lifting to a value 
\begin_inset Formula $h$
\end_inset

 of type 
\begin_inset Formula $H^{G^{A}}$
\end_inset

 is written as 
\begin_inset Formula $h\triangleright f^{\uparrow G\uparrow H}$
\end_inset

.
 In Scala, this is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

h.map(_.map(f))
\end_layout

\end_inset

.
 The functor composition law is written as:
\begin_inset Formula 
\[
p^{\uparrow G}\bef q^{\uparrow G}=\left(p\bef q\right)^{\uparrow G}\quad.
\]

\end_inset

The notation 
\begin_inset Formula $x\triangleright p^{\uparrow G}\triangleright q^{\uparrow G}$
\end_inset

 is intended to be similar to the Scala code 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x.map(p).map(q)
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $f^{\downarrow H}$
\end_inset

 means a function 
\begin_inset Formula $f$
\end_inset

 lifted to a contrafunctor 
\begin_inset Formula $H$
\end_inset

.
 For a function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, the application of 
\begin_inset Formula $f^{\downarrow H}$
\end_inset

 to a value 
\begin_inset Formula $h:H^{B}$
\end_inset

 is written as 
\begin_inset Formula $h\triangleright f^{\downarrow H}$
\end_inset

 and yields a value of type 
\begin_inset Formula $H^{A}$
\end_inset

.
 In Scala, this may be written as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

h.contramap(f)
\end_layout

\end_inset

.
 Nested lifting is denoted as, e.g., 
\begin_inset Formula $f^{\downarrow H\uparrow G}\triangleq(f^{\downarrow H})^{\uparrow G}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\diamond_{M}$
\end_inset

 means the Kleisli product operation for a given monad 
\begin_inset Formula $M$
\end_inset

.
 This is a binary operation working on two Kleisli functions of types 
\begin_inset Formula $A\rightarrow M^{B}$
\end_inset

 and 
\begin_inset Formula $B\rightarrow M^{C}$
\end_inset

 and yields a new function of type 
\begin_inset Formula $A\rightarrow M^{C}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $L\varangle M$
\end_inset

 denotes the monad 
\begin_inset Formula $L$
\end_inset

's transformer applied to a foreign monad 
\begin_inset Formula $M$
\end_inset

.
 We define 
\begin_inset Formula $(K\varangle L)\varangle M\triangleq K\varangle(L\varangle M)$
\end_inset

, which makes the monad transformer application into an associative operation.
\end_layout

\begin_layout Standard
\begin_inset Formula $\oplus$
\end_inset

 means the binary operation of a monoid, e.g., 
\begin_inset Formula $x\oplus y$
\end_inset

.
 For this expression to make sense, a specific monoid type should be defined
 .
 In Scala libraries, 
\begin_inset Formula $x\oplus y$
\end_inset

 is often denoted as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x |+| y
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\Delta$
\end_inset

 means the standard 
\begin_inset Quotes eld
\end_inset

diagonal
\begin_inset Quotes erd
\end_inset

 function of type 
\begin_inset Formula $\forall A.\,A\rightarrow A\times A$
\end_inset

, i.e., 
\begin_inset Formula $\Delta\triangleq a^{:A}\rightarrow a\times a$
\end_inset

.
 In Scala:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def delta[A](a: A): (A, A) = (a, a)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\pi_{1},\pi_{2},...$
\end_inset

 denote the functions extracting the first, second, ..., parts in a tuple.
 In Scala, 
\begin_inset Formula $\pi_{1}$
\end_inset

 is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(_._1)
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\boxtimes$
\end_inset

 means the pair product
\begin_inset Index idx
status open

\begin_layout Plain Layout
pair product of functions
\end_layout

\end_inset

 of functions, defined by 
\begin_inset Formula $(f\boxtimes g)(a\times b)=f(a)\times g(b)$
\end_inset

.
 In Scala, the pair product can be implemented as a higher-order function:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def pair_product[A,B,P,Q](f: A => P, g: B => Q): ((A, B)) => (P, Q) = {
\end_layout

\begin_layout Plain Layout

  case (a, b) => (f(a), g(b))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The operations 
\begin_inset Formula $\Delta$
\end_inset

, 
\begin_inset Formula $\pi_{i}$
\end_inset

 (where 
\begin_inset Formula $i=1,2,...$
\end_inset

), and 
\begin_inset Formula $\boxtimes$
\end_inset

 allow us to express any function operating on tuples.
 Useful properties for reasoning about code of such functions: 
\begin_inset Formula 
\begin{align*}
\text{identity law}:\quad & \Delta\bef\pi_{i}=\text{id}\quad,\\
\text{naturality law}:\quad & f\bef\Delta=\Delta\bef(f\boxtimes f)\quad,\\
\text{left and right projection laws}:\quad & (f\boxtimes g)\bef\pi_{1}=\pi_{1}\bef f\quad,\quad\quad(f\boxtimes g)\bef\pi_{2}=\pi_{2}\bef g\quad,\\
\text{composition law}:\quad & (f\boxtimes g)\bef(p\boxtimes q)=(f\bef p)\boxtimes(g\bef q)\quad,
\end{align*}

\end_inset

as well as the functor lifting laws for 
\begin_inset Formula $\Delta$
\end_inset

 and 
\begin_inset Formula $\pi_{i}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & f^{\uparrow F}\bef\Delta=\Delta\bef f^{\uparrow(F\times F)}=\Delta\bef(f^{\uparrow F}\boxtimes f^{\uparrow F})\quad,\\
 & (f^{\uparrow F}\boxtimes f^{\uparrow G})\bef\pi_{1}=f^{\uparrow(F\times G)}\bef\pi_{1}=\pi_{1}\bef f^{\uparrow F}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left[a,b,c\right]$
\end_inset

 means an ordered sequence of values, such as a list or an array.
 In Scala, this can be 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List(a, b, c)
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Vector(a, b, c)
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Array(a, b, c)
\end_layout

\end_inset

, or another collection type.
\end_layout

\begin_layout Standard
\begin_inset Formula $f^{:Z+A\rightarrow Z+A\times A}\triangleq\,\begin{array}{||cc|}
z\rightarrow z & \bbnum 0\\
\bbnum 0 & a\rightarrow a\times a
\end{array}\,\,$
\end_inset

 is the 
\series bold
matrix notation
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
matrix notation
\end_layout

\end_inset

 for a function whose input and/or output type is a disjunctive type (
\begin_inset Index idx
status open

\begin_layout Plain Layout
disjunctive functions
\end_layout

\end_inset

a 
\series bold
disjunctive function
\series default
).
 In Scala, the function 
\begin_inset Formula $f$
\end_inset

 is written as:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def f[Z, A]: Either[Z, A] => Either[Z, (A, A)] = {
\end_layout

\begin_layout Plain Layout

  case Left(z)   => Left(z)       // Identity function on Z.
\end_layout

\begin_layout Plain Layout

  case Right(a)  => Right((a, a)) // Delta on A.
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The rows of the matrix indicate the different 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

case
\end_layout

\end_inset

s in the function's code, corresponding to the different parts of the input
 disjunctive type.
 If the input type is not disjunctive, there will be only one row.
 The columns of the matrix indicate the parts of the output disjunctive
 type.
 If the output type is not disjunctive, there will be only one column.
\end_layout

\begin_layout Standard
A matrix may show all parts of the disjunctive types in separate 
\begin_inset Quotes eld
\end_inset

type row
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

type column
\begin_inset Quotes erd
\end_inset

:
\begin_inset Formula 
\begin{equation}
f^{:Z+A\rightarrow Z+A\times A}\triangleq\,\begin{array}{|c||cc|}
 & Z & A\times A\\
\hline Z & \text{id} & \bbnum 0\\
A & \bbnum 0 & a\rightarrow a\times a
\end{array}\quad.
\end{equation}

\end_inset

This notation clearly indicates the input and the output types of the function
 and is useful for reasoning about the code.
 The vertical double line separates the 
\emph on
input
\emph default
 types from the function code (output types have a single line).
 In the code above, the 
\begin_inset Quotes eld
\end_inset

type column
\begin_inset Quotes erd
\end_inset

 shows the parts of the input disjunctive type 
\begin_inset Formula $Z+A$
\end_inset

.
 The 
\begin_inset Quotes eld
\end_inset

type row
\begin_inset Quotes erd
\end_inset

 shows the parts of the output disjunctive type 
\begin_inset Formula $Z+A\times A$
\end_inset

.
\end_layout

\begin_layout Standard
The matrix notation is adapted to 
\emph on
forward
\emph default
 function composition (
\begin_inset Formula $f\bef g$
\end_inset

).
 Assume that 
\begin_inset Formula $A$
\end_inset

 is a monoid type, and consider the composition of the function 
\begin_inset Formula $f$
\end_inset

 shown above and the function 
\begin_inset Formula $g$
\end_inset

 defined as:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def g[Z, A: Monoid]: Either[Z, (A, A)] => A = {
\end_layout

\begin_layout Plain Layout

  case Left(_)          => Monoid[A].empty
\end_layout

\begin_layout Plain Layout

  case Right((a1, a2))  => a1 |+| a2
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

In the matrix notation, the function 
\begin_inset Formula $g$
\end_inset

 is written (with and without types) as:
\begin_inset Formula 
\[
g\triangleq\,\begin{array}{|c||c|}
 & A\\
\hline Z & \_\rightarrow e^{:A}\\
A\times A & a_{1}\times a_{2}\rightarrow a_{1}\oplus a_{2}
\end{array}\quad,\quad\quad g\triangleq\,\begin{array}{||c|}
\_\rightarrow e^{:A}\\
a_{1}\times a_{2}\rightarrow a_{1}\oplus a_{2}
\end{array}\quad.
\]

\end_inset

The forward composition 
\begin_inset Formula $f\bef g$
\end_inset

 is computed by forward-composing the matrix elements using the rules of
 the ordinary matrix multiplication, omitting any terms containing 
\begin_inset Formula $\bbnum 0$
\end_inset

:
\begin_inset Formula 
\begin{align*}
f\bef g & =\,\begin{array}{||cc|}
\text{id} & \bbnum 0\\
\bbnum 0 & a\rightarrow a\times a
\end{array}\,\bef\,\begin{array}{||c|}
\_\rightarrow e^{:A}\\
a_{1}\times a_{2}\rightarrow a_{1}\oplus a_{2}
\end{array}\\
 & =\,\,\begin{array}{||c|}
\text{id}\bef(\_\rightarrow e^{:A})\\
\left(a\rightarrow a\times a\right)\bef\left(a_{1}\times a_{2}\rightarrow a_{1}\oplus a_{2}\right)
\end{array}\,=\,\begin{array}{||c|}
\_\rightarrow e^{:A}\\
a\rightarrow a\oplus a
\end{array}\quad.
\end{align*}

\end_inset

Applying a function to a disjunctive value such as 
\begin_inset Formula $x^{:Z+A}$
\end_inset

 is computed by writing 
\begin_inset Formula $x$
\end_inset

 as a row vector:
\begin_inset Formula 
\[
x=z^{:Z}+\bbnum 0^{:A}=\,\begin{array}{|cc|}
z^{:Z} & \bbnum 0\end{array}\quad.
\]

\end_inset

Then the computation 
\begin_inset Formula $x\triangleright f\bef g$
\end_inset

 again follows the rules of matrix multiplication:
\begin_inset Formula 
\[
x\triangleright f\bef g=\,\begin{array}{|cc|}
z^{:Z} & \bbnum 0\end{array}\,\triangleright\,\begin{array}{||c|}
\_\rightarrow e^{:A}\\
a\rightarrow a\oplus a
\end{array}\,=z\triangleright(\_\rightarrow e)=e\quad.
\]

\end_inset

Since the standard rules of matrix multiplication are associative, the propertie
s of the 
\begin_inset Formula $\triangleright$
\end_inset

-notation such as 
\begin_inset Formula $x\triangleright(f\bef g)=(x\triangleright f)\triangleright g$
\end_inset

 are guaranteed to hold with matrices.
\end_layout

\begin_layout Standard
To use the matrix notation with 
\emph on
backward
\emph default
 compositions (
\begin_inset Formula $f\circ g$
\end_inset

), all code matrices need to be transposed.
 (A standard identity of matrix calculus is that the transposition reverses
 the order of composition: 
\begin_inset Formula $\left(AB\right)^{T}=B^{T}A^{T}$
\end_inset

.) The input types will then appear in the 
\emph on
top
\emph default
 
\emph on
row
\emph default
 and the output types in the left column.
 The double line is at the top of a code matrix since that is where the
 function inputs come from.
 The above calculations are then rewritten as:
\begin_inset Formula 
\begin{align*}
g\circ f & =\,\begin{array}{|c|cc|}
 & Z & A\times A\\
\hline\hline A & \_\rightarrow e^{:A} & a_{1}\times a_{2}\rightarrow a_{1}\oplus a_{2}
\end{array}\,\circ\,\begin{array}{|c|cc|}
 & Z & A\\
\hline\hline Z & \text{id} & \bbnum 0\\
A\times A & \bbnum 0 & a\rightarrow a\times a
\end{array}\\
 & =\,\,\begin{array}{|cc|}
\hline\hline \text{id}\bef(\_\rightarrow e^{:A}) & \left(a\rightarrow a\times a\right)\bef\left(a_{1}\times a_{2}\rightarrow a_{1}\oplus a_{2}\right)\end{array}\,=\,\begin{array}{|cc|}
\hline\hline \_\rightarrow e^{:A} & a\rightarrow a\oplus a\end{array}\quad.\\
(g\circ f)(x) & =\,\begin{array}{|cc|}
\hline\hline \_\rightarrow e^{:A} & a\rightarrow a\oplus a\end{array}\,\,\begin{array}{|c|}
z^{:Z}\\
\bbnum 0
\end{array}\,=(\_\rightarrow e^{:A})(z)=e\quad.
\end{align*}

\end_inset

The 
\emph on
forward
\emph default
 composition (
\begin_inset Formula $\bef$
\end_inset

) may be easier to read and to reason about in the matrix notation.
\end_layout

\begin_layout Chapter
Glossary of terms
\begin_inset CommandInset label
LatexCommand label
name "chap:Appendix-Glossary-of-terms"

\end_inset


\end_layout

\begin_layout Description
Code
\begin_inset space ~
\end_inset

notation 
\begin_inset Index idx
status open

\begin_layout Plain Layout
code notation
\end_layout

\end_inset

A mathematical notation developed in this book for deriving properties of
 code in functional programs.
 Variables have optional type annotations, such as 
\begin_inset Formula $x^{:A}$
\end_inset

 or 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

.
 Nameless functions are denoted by
\begin_inset Formula $x^{:A}\rightarrow f$
\end_inset

, products by 
\begin_inset Formula $a\times b$
\end_inset

, and values of a disjunctive type 
\begin_inset Formula $A+B$
\end_inset

 are written as 
\begin_inset Formula $x^{:A}+\bbnum 0^{:B}$
\end_inset

 or 
\begin_inset Formula $\bbnum 0^{:A}+y^{:B}$
\end_inset

.
 Functions working with disjunctive types are denoted by matrices.
 Lifting of functions to functors, such as 
\begin_inset Formula $\text{fmap}_{L}(f)$
\end_inset

, is denoted by 
\begin_inset Formula $f^{\uparrow L}$
\end_inset

; function compositions are denoted by 
\begin_inset Formula $f\bef g$
\end_inset

 (forward composition) and 
\begin_inset Formula $f\circ g$
\end_inset

 (backward composition); and function applications by 
\begin_inset Formula $f(x)$
\end_inset

 or equivalently 
\begin_inset Formula $x\triangleright f$
\end_inset

.
 See Appendix
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Appendix-Notations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for details.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
contrafunctor
\end_layout

\end_inset

Contrafunctor A type constructor having the properties of a contravariant
 functor
\begin_inset Index idx
status open

\begin_layout Plain Layout
contrafunctor
\end_layout

\end_inset

 with respect to a type parameter.
 Instead of 
\begin_inset Quotes eld
\end_inset

contravariant functor
\begin_inset Quotes erd
\end_inset

, this book uses the shorter name 
\begin_inset Quotes eld
\end_inset

contrafunctor
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Description
Disjunctive
\begin_inset space ~
\end_inset

type 
\begin_inset Index idx
status open

\begin_layout Plain Layout
disjunctive type
\end_layout

\end_inset

A type representing one of several distinct possibilities.
 In Scala, this is usually implemented as a sealed trait extended by several
 case classes.
 The standard Scala disjunction types are 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Option[A]
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Either[A, B]
\end_layout

\end_inset

.
 Also known as 
\begin_inset Index idx
status open

\begin_layout Plain Layout
sum type!see 
\begin_inset Quotes eld
\end_inset

disjunctive type
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\series bold
sum 
\series default
type, 
\series bold
tagged union
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
tagged union type!see 
\begin_inset Quotes eld
\end_inset

disjunctive type
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

 type, 
\series bold
co-product
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
co-product type!see 
\begin_inset Quotes eld
\end_inset

disjunctive type
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

 type, and variant type (in Object Pascal and in OCaml).
 The shortest name is 
\begin_inset Quotes eld
\end_inset

sum type,
\begin_inset Quotes erd
\end_inset

 but the English word 
\begin_inset Quotes eld
\end_inset

disjunctive
\begin_inset Quotes erd
\end_inset

 is less ambiguous to the ear than 
\begin_inset Quotes eld
\end_inset

sum
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Description
Exponential-polynomial
\begin_inset space ~
\end_inset

type 
\begin_inset Index idx
status open

\begin_layout Plain Layout
exponential-polynomial type
\end_layout

\end_inset

A type constructor built using products, disjunctions (sums or co-products),
 and function types (
\begin_inset Quotes eld
\end_inset

exponentials
\begin_inset Quotes erd
\end_inset

), as well as type parameters and fixed types.
 For example,  
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

type F[A] = Either[(A,A), Int=>A]
\end_layout

\end_inset

 is an exponential-polynomial type constructor.
 Such type constructors are always profunctors and can also be functors
 or contrafunctors.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
functor block
\end_layout

\end_inset

Functor
\begin_inset space ~
\end_inset

block A short syntax for composing several 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

, and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

filter
\end_layout

\end_inset

 operations applied to a functor-typed value.
 The type constructor corresponding to that value must be a functor and
 is fixed throughout the entire functor block.
 For example, the Scala code
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for { x <- List(1,2,3); y <- List(10, x); if y > 2 }
\end_layout

\begin_layout Plain Layout

  yield 2 * y
\end_layout

\end_inset

is equivalent to the code
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

List(1, 2, 3).flatMap(x => List(10, x))
\end_layout

\begin_layout Plain Layout

  .filter(y => y > 1).map(y => 2 * y)
\end_layout

\end_inset

and computes the value 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List(20, 20, 20, 6)
\end_layout

\end_inset

.
 This is a functor block that 
\begin_inset Quotes eld
\end_inset

raises
\begin_inset Quotes erd
\end_inset

 computations to the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List
\end_layout

\end_inset

 functor.
 Similar syntax exists in a number of languages and is called a 
\series bold

\begin_inset Quotes eld
\end_inset

for-comprehension
\begin_inset Quotes erd
\end_inset


\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
for
\family default
-comprehensions (Python)
\end_layout

\end_inset

 or a 
\begin_inset Quotes eld
\end_inset

list comprehension
\begin_inset Quotes erd
\end_inset

 in Python, 
\series bold

\begin_inset Quotes eld
\end_inset

do-notation
\begin_inset Quotes erd
\end_inset


\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
do
\family default
-notation (Haskell)
\end_layout

\end_inset

 in Haskell, and 
\series bold

\begin_inset Quotes eld
\end_inset

computation expressions
\begin_inset Quotes erd
\end_inset


\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
computation expressions (F#)
\end_layout

\end_inset

 in F#.
 I use the name 
\begin_inset Quotes eld
\end_inset

functor block
\begin_inset Quotes erd
\end_inset

 in this book because it is shorter and more descriptive.
 (The type constructor used in a functor block needs to be at least a functor
 but does not have to be a monad.)
\end_layout

\begin_layout Description
Kleisli
\begin_inset space ~
\end_inset

function 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Kleisli!functions
\end_layout

\end_inset

 A function with type signature 
\begin_inset Formula $A\rightarrow M^{B}$
\end_inset

 (in Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A => M[B]
\end_layout

\end_inset

) for some fixed monad 
\begin_inset Formula $M$
\end_inset

.
 Also called a Kleisli morphism
\begin_inset Index idx
status open

\begin_layout Plain Layout
Kleisli!morphisms
\end_layout

\end_inset

 (a morphism in the Kleisli category corresponding to the monad 
\begin_inset Formula $M$
\end_inset

).
 The monadic method 
\begin_inset Formula $\text{pure}_{M}:A\rightarrow M^{A}$
\end_inset

 has the type signature of a Kleisli function.
 The Kleisli composition operation, 
\begin_inset Formula $\diamond_{M}$
\end_inset

, is a binary operation that combines two Kleisli functions (of types 
\begin_inset Formula $A\rightarrow M^{B}$
\end_inset

 and 
\begin_inset Formula $B\rightarrow M^{C}$
\end_inset

) into a new Kleisli function (of type 
\begin_inset Formula $A\rightarrow M^{C}$
\end_inset

).
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
method
\end_layout

\end_inset

Method This word is used in two ways: 1) A method
\begin_inset Formula $_{1}$
\end_inset

 is a Scala function defined as a member of a typeclass.
 For example, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

 is a method defined in the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Monad
\end_layout

\end_inset

 typeclass.
 2) A method
\begin_inset Formula $_{2}$
\end_inset

 is a Scala function defined as a member of a data type declared as a Java-compa
tible 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

class
\end_layout

\end_inset

 or 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

trait
\end_layout

\end_inset

.
 Trait methods
\begin_inset Formula $_{2}$
\end_inset

 are necessary in Scala when implementing functions whose arguments have
 type parameters (because Scala function values defined via 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

val
\end_layout

\end_inset

 cannot have type parameters).
 So, many typeclasses such as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Functor
\end_layout

\end_inset

 or 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Monad
\end_layout

\end_inset

, whose methods
\begin_inset Formula $_{1}$
\end_inset

 require type parameters, will use Scala 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

traits
\end_layout

\end_inset

 with methods
\begin_inset Formula $_{2}$
\end_inset

 for their implementation.
 The same applies to type constructions with quantified types, such as the
 Church encoding.
 
\end_layout

\begin_layout Description
Nameless
\begin_inset space ~
\end_inset

function 
\begin_inset Index idx
status open

\begin_layout Plain Layout
nameless function
\end_layout

\end_inset

An expression of function type, representing a function.
 For example, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(x: Int) => x * 2
\end_layout

\end_inset

.
 Also known as function expression, function literal, anonymous function,
\begin_inset Index idx
status open

\begin_layout Plain Layout
anonymous function!see 
\begin_inset Quotes eld
\end_inset

nameless functions
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

 closure, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
lambda-function!see 
\begin_inset Quotes eld
\end_inset

nameless function
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

lambda-function, lambda-expression, or simply a 
\begin_inset Quotes eld
\end_inset

lambda
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Description
Partial
\begin_inset space ~
\end_inset

type-to-value
\begin_inset space ~
\end_inset

function
\begin_inset space ~
\end_inset

(PTVF) A function with a type parameter but defined only for a certain subset
 of types.
\begin_inset Index idx
status open

\begin_layout Plain Layout
partial type-to-value function
\end_layout

\end_inset

 In Scala, PTVFs are implemented via a typeclass constraint:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def double[T: Semigroup](t: T): T = implicitly[Semigroup[T]].combine(t, t)
\end_layout

\end_inset

This PTVF is defined only for types 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

T
\end_layout

\end_inset

 for which a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Semigroup
\end_layout

\end_inset

 typeclass instance is available.
\end_layout

\begin_layout Description
Polynomial
\begin_inset space ~
\end_inset

functor 
\begin_inset Index idx
status open

\begin_layout Plain Layout
polynomial functor
\end_layout

\end_inset

A type constructor built using disjunctions (sums), products (tuples), type
 parameters and fixed types.
 For example, in Scala, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

type F[A] = Either[(Int, A), A]
\end_layout

\end_inset

 is a polynomial functor with respect to the type parameter 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, while 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Int
\end_layout

\end_inset

 is a fixed type (not a type parameter).
 Polynomial functors are also known as 
\series bold
algebraic data types
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
algebraic data types
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
Product
\begin_inset space ~
\end_inset

type 
\begin_inset Index idx
status open

\begin_layout Plain Layout
product type
\end_layout

\end_inset

A type representing several values given at once.
 In Scala, product types are the tuple types, for example 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(Int, String)
\end_layout

\end_inset

, and case classes.
 Also known as 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tuples
\end_layout

\end_inset


\series bold
tuple
\series default
 type, 
\series bold
struct
\series default
 (in C and C++), and 
\series bold
record
\series default
.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
profunctor
\end_layout

\end_inset

Profunctor A type constructor whose type parameter occurs in both covariant
 and contravariant positions and satisfying the appropriate laws; see Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:f-Profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Description
Type
\begin_inset space ~
\end_inset

notation 
\begin_inset Index idx
status open

\begin_layout Plain Layout
type notation
\end_layout

\end_inset

A mathematical notation for type expressions developed in this book for
 easier reasoning about types in functional programs.
 Disjunctive types are denoted by 
\begin_inset Formula $+$
\end_inset

, product types by 
\begin_inset Formula $\times$
\end_inset

, and function types by 
\begin_inset Formula $\rightarrow$
\end_inset

.
 The unit type is denoted by 
\begin_inset Formula $\bbnum 1$
\end_inset

, and the void type by 
\begin_inset Formula $\bbnum 0$
\end_inset

.
 The function arrow 
\begin_inset Formula $\rightarrow$
\end_inset

 groups weaker than 
\begin_inset Formula $+$
\end_inset

, which in turn groups weaker than 
\begin_inset Formula $\times$
\end_inset

.
 This means
\begin_inset Formula 
\[
Z+A\rightarrow Z+A\times A\quad\text{is the same as}\quad\left(Z+A\right)\rightarrow\left(Z+\left(A\times A\right)\right)\quad.
\]

\end_inset

 Type parameters are denoted by superscripts.
 As an example, the Scala definition
\family typewriter

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

type F[A] = Either[(A, A => Option[Int]), String => List[A]]
\end_layout

\end_inset


\family default
is written in the type notation as 
\begin_inset Formula 
\[
F^{A}\triangleq A\times\left(A\rightarrow\bbnum 1+\text{Int}\right)+(\text{String}\rightarrow\text{List}^{A})\quad.
\]

\end_inset


\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
unfunctor
\end_layout

\end_inset

Unfunctor A type constructor that cannot possibly be a functor, nor a contrafunc
tor, nor a profunctor.
 An example is a type constructor with explicitly indexed type parameters,
 such as 
\begin_inset Formula $F^{A}\triangleq\left(A\times A\right)^{:F^{\text{Int}}}+\left(\text{Int}\times A\right)^{:F^{\bbnum 1}}$
\end_inset

.
 The Scala code for this type constructor is
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sealed trait F[A]
\end_layout

\begin_layout Plain Layout

final case class F1[A](x: A, y: A)   extends F[Int]
\end_layout

\begin_layout Plain Layout

final case class F2[A](s: Int, t: A) extends F[Unit]
\end_layout

\end_inset

This can be seen as a 
\begin_inset Index idx
status open

\begin_layout Plain Layout
GADT!see 
\begin_inset Quotes eld
\end_inset

unfunctor
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\series bold
GADT
\series default
 (generalized algebraic data type) that uses specific values of type parameters
 instead of the type parameter 
\begin_inset Formula $A$
\end_inset

 in at least some of its case classes.
\end_layout

\begin_layout Section
How the term 
\begin_inset Quotes eld
\end_inset

algebra
\begin_inset Quotes erd
\end_inset

 is used in functional programming
\end_layout

\begin_layout Standard
This book avoids using the terms 
\begin_inset Quotes eld
\end_inset

algebra
\begin_inset Index idx
status open

\begin_layout Plain Layout
algebra
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

algebraic
\begin_inset Index idx
status open

\begin_layout Plain Layout
algebraic
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 because these terms are too ambiguous.
 As we will see, the FP community uses the word 
\begin_inset Quotes eld
\end_inset

algebra
\begin_inset Quotes erd
\end_inset

 in at least 
\emph on
three
\emph default
 incompatible ways.
\end_layout

\begin_layout Paragraph
Definition 0.
\end_layout

\begin_layout Standard
In mathematics, an “algebra” is a vector space with a multiplication operation
 (
\begin_inset Formula $*$
\end_inset

) satisfying certain properties, such as distributivity: 
\begin_inset Formula $z*(x+y)=z*x+z*y$
\end_inset

.
 For example, the set of all 
\begin_inset Formula $10\times10$
\end_inset

 matrices with real coefficients is a 
\begin_inset Formula $100$
\end_inset

-dimensional vector space that satisfies the required properties.
 Such matrices form an “algebra” in the mathematical sense.
 (This meaning of the word 
\begin_inset Quotes eld
\end_inset

algebra
\begin_inset Quotes erd
\end_inset

 is 
\emph on
not
\emph default
 used in FP.)
\end_layout

\begin_layout Paragraph
Definition 1.
\end_layout

\begin_layout Standard
For a given functor 
\begin_inset Formula $F$
\end_inset

, an 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $F$
\end_inset

-algebra
\begin_inset Quotes erd
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $F$
\end_inset

-algebra
\end_layout

\end_inset

 is a type 
\begin_inset Formula $T$
\end_inset

 and a function with type signature 
\begin_inset Formula $F^{T}\rightarrow T$
\end_inset

.
 (This definition comes from category theory.
 This book does not use 
\begin_inset Formula $F$
\end_inset

-algebras because knowing their category-theoretic properties does not help
 in practical programming.) The name 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $F$
\end_inset

-algebra
\begin_inset Quotes erd
\end_inset

 emphasizes the dependence on a chosen functor 
\begin_inset Formula $F$
\end_inset

.
 There is no direct connection between this 
\begin_inset Quotes eld
\end_inset

algebra
\begin_inset Quotes erd
\end_inset

 and Definition
\begin_inset space ~
\end_inset

0, except when the functor 
\begin_inset Formula $F$
\end_inset

 is defined by 
\begin_inset Formula $F^{A}\triangleq A\times A$
\end_inset

: a function of type 
\begin_inset Formula $T\times T\rightarrow T$
\end_inset

 may then be interpreted as a 
\begin_inset Quotes eld
\end_inset

multiplication
\begin_inset Quotes erd
\end_inset

 operation for values of type 
\begin_inset Formula $T$
\end_inset

.
 However, even in that case 
\begin_inset Formula $T$
\end_inset

 will not necessarily satisfy the laws of a vector space.
\end_layout

\begin_layout Standard
A recursive type 
\begin_inset Formula $T$
\end_inset

 defined by 
\begin_inset Formula $F^{T}\cong T$
\end_inset

 has an isomorphism 
\begin_inset Formula $F^{T}\rightarrow T$
\end_inset

 and so is an 
\begin_inset Formula $F$
\end_inset

-algebra.
 Recursive polynomial types are known as 
\begin_inset Quotes eld
\end_inset

algebraic
\begin_inset Quotes erd
\end_inset

 in this sense:
\begin_inset Foot
status open

\begin_layout Plain Layout
For some proofs, see 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://homepages.inf.ed.ac.uk/wadler/papers/free-rectypes/free-rectypes.txt"
literal "false"

\end_inset


\family default
 
\end_layout

\end_inset

 they are 
\begin_inset Formula $F$
\end_inset

-algebras with a polynomial recursion scheme 
\begin_inset Formula $F^{\bullet}$
\end_inset

 and an added requirement of isomorphism for the map 
\begin_inset Formula $F^{T}\rightarrow T$
\end_inset

.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

algebra
\begin_inset Quotes erd
\end_inset

 defined in this sense is also relevant to the Church encoding of a free
 monad (also known as the 
\begin_inset Quotes eld
\end_inset

tagless final
\begin_inset Index idx
status open

\begin_layout Plain Layout
tagless final
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 pattern), which is the type 
\begin_inset Formula $\forall E^{\bullet}.\,(S^{E^{\bullet}}\leadsto E^{\bullet})\rightarrow E^{A}$
\end_inset

.
 This type uses a higher-order type 
\begin_inset Formula $S^{E^{\bullet}}$
\end_inset

 parameterized by a 
\emph on
type constructor
\emph default
 parameter 
\begin_inset Formula $E^{\bullet}$
\end_inset

.
 In this context, one calls an 
\begin_inset Quotes eld
\end_inset

algebra
\begin_inset Quotes erd
\end_inset

 a value of type 
\begin_inset Formula $S^{E^{\bullet}}\leadsto E^{\bullet}$
\end_inset

, which is an 
\begin_inset Formula $S$
\end_inset

-algebra in the category of type constructors.
 However, knowing that 
\begin_inset Formula $S^{E^{\bullet}}\leadsto E^{\bullet}$
\end_inset

 is an 
\begin_inset Formula $S$
\end_inset

-algebra in the category of type constructors does not provide any help
 or additional insights for practical work with the Church encoding of free
 monads.
\end_layout

\begin_layout Standard
The higher-order type constructor 
\begin_inset Formula $S$
\end_inset

 is used to parameterize the effects described by a Church-encoded free
 monad, so this book calls it the 
\begin_inset Quotes eld
\end_inset

effect constructor
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Paragraph
Definition 2.
\end_layout

\begin_layout Standard
Polynomial data types (for example, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

type F[A] = Option[(A, A)]
\end_layout

\end_inset

) are called “algebraic data types
\begin_inset Index idx
status open

\begin_layout Plain Layout
algebraic data types
\end_layout

\end_inset

”.
 Here, the word 
\begin_inset Quotes eld
\end_inset

algebraic
\begin_inset Quotes erd
\end_inset

 suggests 
\begin_inset Quotes eld
\end_inset

school-level algebra
\begin_inset Quotes erd
\end_inset

 dealing with polynomials: those data types are built from 
\begin_inset Quotes eld
\end_inset

sums
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

products
\begin_inset Quotes erd
\end_inset

 of types.
 The type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[A]
\end_layout

\end_inset

 may admit some binary or unary operations, but this does not turn it into
 an algebra in the sense of Definitions
\begin_inset space ~
\end_inset

0 or 1.
 Instead of calling types 
\begin_inset Quotes eld
\end_inset

algebraic
\begin_inset Quotes erd
\end_inset

, this book uses more precise terms “polynomial types” and “exponential-polynomi
al types”.
 Data types containing functions, such as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Option[Int => (A, A)]
\end_layout

\end_inset

, are exponential-polynomial (but not polynomial).
\end_layout

\begin_layout Paragraph
Definition 3.
\end_layout

\begin_layout Standard
One talks about the “algebra” of properties of functions such as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map
\end_layout

\end_inset

 or 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

, meaning that these functions satisfy certain 
\begin_inset Quotes eld
\end_inset

algebraic
\begin_inset Quotes erd
\end_inset

 laws (e.g., the composition, naturality, or associativity laws).
 But these laws do not make functions 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map
\end_layout

\end_inset

 or 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

 into an algebra in the sense of Definition
\begin_inset space ~
\end_inset

0 or in the sense of Definition
\begin_inset space ~
\end_inset

1.
 There is also no relation to the algebraic data types of Definition
\begin_inset space ~
\end_inset

2.
 So, this is a different usage of the word 
\begin_inset Quotes eld
\end_inset

algebra
\begin_inset Quotes erd
\end_inset

.
 However, there is no general 
\begin_inset Quotes eld
\end_inset

algebra of laws
\begin_inset Quotes erd
\end_inset

 that we can use; every derivation proceeds in a different way, specific
 to the laws being proved.
 In mathematics, 
\begin_inset Quotes eld
\end_inset

algebraic
\begin_inset Quotes erd
\end_inset

 equations are distinguished from differential or integral equations.
 In that sense, the laws used in FP are 
\emph on
always
\emph default
 algebraic: they are just equations with compositions and applications of
 functions.
 So, there is no advantage in calling laws 
\begin_inset Quotes eld
\end_inset

algebraic
\begin_inset Quotes erd
\end_inset

 within the context of FP.
 This book calls them 
\begin_inset Quotes eld
\end_inset

equations
\begin_inset Quotes erd
\end_inset

 or just 
\begin_inset Quotes eld
\end_inset

laws
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
We find that the current usage of the word 
\begin_inset Quotes eld
\end_inset

algebra
\begin_inset Quotes erd
\end_inset

 in FP is both inconsistent and unhelpful to software practitioners.
 In this book, the word 
\begin_inset Quotes eld
\end_inset

algebra
\begin_inset Quotes erd
\end_inset

 always means a branch of mathematics, as in 
\begin_inset Quotes eld
\end_inset

high-school algebra
\begin_inset Quotes erd
\end_inset

.
 Instead of 
\begin_inset Quotes eld
\end_inset

algebras
\begin_inset Quotes erd
\end_inset

 as in Definitions
\begin_inset space ~
\end_inset

1 to
\begin_inset space ~
\end_inset

3, this book talks about 
\begin_inset Quotes eld
\end_inset

polynomial types
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

recursive polynomial types
\begin_inset Quotes erd
\end_inset

; 
\begin_inset Quotes eld
\end_inset

equations
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

laws
\begin_inset Quotes erd
\end_inset

; and an 
\begin_inset Quotes eld
\end_inset

effect constructor
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $S$
\end_inset

.
 
\end_layout

\begin_layout Chapter
Deriving code from types.
 The LJT algorithm
\begin_inset CommandInset label
LatexCommand label
name "app:The-LJT-algorithm"

\end_inset


\end_layout

\begin_layout Standard
We have seen in Chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:5-Curry-Howard"
plural "false"
caps "false"
noprefix "false"

\end_inset

 how to derive code from a type signature as long as one has a proof of
 the sequent corresponding to that type signature.
 But Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example:-Proving-a-ch-proposition"
plural "false"
caps "false"
noprefix "false"

\end_inset

 gave an example showing that the rules in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Proof-rules-of-constructive-and-boolean"
plural "false"
caps "false"
noprefix "false"

\end_inset

 do not provide an algorithm for finding a proof for a given sequent.
\end_layout

\begin_layout Standard
To illustrate this problem on another example, let us try proving the sequent:
\begin_inset Formula 
\[
A,B\vee C\vdash(A\wedge B)\vee C\quad.
\]

\end_inset

We expect that this sequent is provable because we can write the corresponding
 Scala code:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def f[A, B, C](a: A): Either[B, C] => Either[(A, B), C] = {
\end_layout

\begin_layout Plain Layout

  case Left(b)    => Left((a, b))
\end_layout

\begin_layout Plain Layout

  case Right(c)   => Right(c)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

How can we obtain a proof of this sequent according to the rules in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Proof-rules-of-constructive-and-boolean"
plural "false"
caps "false"
noprefix "false"

\end_inset

? We find that we could potentially apply the rules 
\begin_inset Quotes eld
\end_inset

create 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Left
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

create 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Right
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

use 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Either
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

use function
\begin_inset Quotes erd
\end_inset

.
 However, no matter what rule we choose, we will get stuck at the next step.
 Let us see why:
\end_layout

\begin_layout Standard
To apply 
\begin_inset Quotes eld
\end_inset

create 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Left
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, we first need to prove the sequent 
\begin_inset Formula $A,B\vee C\vdash A\wedge B$
\end_inset

.
 But this sequent cannot be proved: we do not necessarily have values of
 both types 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 if we are only given values of type 
\begin_inset Formula $A$
\end_inset

 and of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Either[B, C]
\end_layout

\end_inset

.
 To apply 
\begin_inset Quotes eld
\end_inset

create 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Right
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, we need to prove the sequent 
\begin_inset Formula $A,B\vee C\vdash C$
\end_inset

.
 Again, we find that this sequent cannot be proved.
 The next choice is the rule 
\begin_inset Quotes eld
\end_inset

use 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Either
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 that matches any goal of the sequent as the proposition 
\begin_inset Formula $\gamma$
\end_inset

.
 But we are then required to choose two new propositions (
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

) such that we can prove 
\begin_inset Formula $A,B\vee C\vdash\alpha\vee\beta$
\end_inset

 as well as 
\begin_inset Formula $A,B\vee C,\alpha\vdash(A\wedge B)\vee C$
\end_inset

 and 
\begin_inset Formula $A,B\vee C,\beta\vdash(A\wedge B)\vee C$
\end_inset

.
 It is not clear how we should choose 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 in order to make progress in the proof.
 The remaining rule, 
\begin_inset Quotes eld
\end_inset

use function
\begin_inset Quotes erd
\end_inset

, similarly requires us to choose a new proposition 
\begin_inset Formula $\alpha$
\end_inset

 such that we can prove 
\begin_inset Formula $A,B\vee C\vdash\alpha$
\end_inset

 and 
\begin_inset Formula $A,B\vee C\vdash\alpha\Rightarrow((A\wedge B)\vee C)$
\end_inset

.
 Again, the algorithm gives us no guidance about choosing 
\begin_inset Formula $\alpha$
\end_inset

.
\end_layout

\begin_layout Standard
We see that the rules in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Proof-rules-for-constructive-logic"
plural "false"
caps "false"
noprefix "false"

\end_inset

 are not helpful for proof search.
 Certain rules (
\begin_inset Quotes eld
\end_inset

use function
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

use 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Either
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

) require us to choose new unknown propositions and prove more complicated
 sequents than the ones we had before.
 For instance, the rule 
\begin_inset Quotes eld
\end_inset

use function
\begin_inset Quotes erd
\end_inset

 gives a proof of 
\begin_inset Formula $\Gamma\vdash\beta$
\end_inset

 if we first choose some other proposition 
\begin_inset Formula $\alpha$
\end_inset

 and prove the sequents 
\begin_inset Formula $\Gamma\vdash\alpha$
\end_inset

 and 
\begin_inset Formula $\Gamma\vdash\alpha\Rightarrow\beta$
\end_inset

.
 The rule does not say how to choose the proposition 
\begin_inset Formula $\alpha$
\end_inset

 correctly.
 We need to guess the correct 
\begin_inset Formula $\alpha$
\end_inset

 by trial and error.
 Even after choosing 
\begin_inset Formula $\alpha$
\end_inset

 in some way, we will have to prove a more complicated sequent (
\begin_inset Formula $\Gamma\vdash\alpha\Rightarrow\beta$
\end_inset

).
 It is not guaranteed that we are getting closer to finding the proof of
 the initial sequent (
\begin_inset Formula $\Gamma\vdash\beta$
\end_inset

).
 
\end_layout

\begin_layout Standard
It is far from obvious how to overcome that difficulty.
 Mathematicians have studied the constructive logic for more than 60 years,
 trying to replace the rules in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Proof-rules-of-constructive-and-boolean"
plural "false"
caps "false"
noprefix "false"

\end_inset

 by a different but equivalent set of derivation rules that require no guessing
 when looking for a proof.
 The first partial success came in 1935 with an algorithm called 
\begin_inset Quotes eld
\end_inset

LJ
\begin_inset Quotes erd
\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://en.wikipedia.org/wiki/Sequent_calculus#Overview"
literal "false"

\end_inset


\end_layout

\end_inset

 The LJ algorithm still had a significant problem: one of its derivation
 rules may be applied infinitely many times.
 So, the LJ algorithm is not guaranteed to terminate without some heuristics
 for avoiding an infinite loop.
 A terminating version of the LJ algorithm, called 
\begin_inset Index idx
status open

\begin_layout Plain Layout
LJT algorithm
\end_layout

\end_inset

LJT, was formulated in 1992.
\begin_inset Foot
status open

\begin_layout Plain Layout
The history of this research is outlined in 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://research-repository.st-andrews.ac.uk/handle/10023/8824"
literal "false"

\end_inset


\family default
.
 An often cited paper by R.
\begin_inset space ~
\end_inset

Dyckhoff
\begin_inset Index idx
status open

\begin_layout Plain Layout
Roy Dyckhoff
\end_layout

\end_inset

 is 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://philpapers.org/rec/DYCCSC"
literal "false"

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
We will first present the LJ algorithm.
 Although that algorithm does not guarantee termination, it is simpler to
 apply by hand.
 Then we will show how to pass from the LJ algorithm to LJT.
\end_layout

\begin_layout Section
The LJ algorithm
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Rules-of-the-LJ-algorithm"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the LJ algorithm's axioms and derivation rules.
 Each rule says that the bottom sequent will be proved if proofs are given
 for sequent(s) at the top.
 For each possible sub-expression (conjunction 
\begin_inset Formula $X\wedge Y$
\end_inset

, disjunction 
\begin_inset Formula $X\vee Y$
\end_inset

, and implication 
\begin_inset Formula $X\Rightarrow Y$
\end_inset

) there is one rule where that sub-expression is a premise (at 
\begin_inset Quotes eld
\end_inset

left
\begin_inset Quotes erd
\end_inset

) and one rule where that sub-expression is the goal (at 
\begin_inset Quotes eld
\end_inset

right
\begin_inset Quotes erd
\end_inset

).
 Those sub-expressions are shown in blue in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Rules-of-the-LJ-algorithm"
plural "false"
caps "false"
noprefix "false"

\end_inset

 to help us look for a proof.
 To find out which rules apply, we just need to match some part of the sequent
 to a blue sub-expression in the rules.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "70line%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align*}
\frac{}{\Gamma,X\vdash{\color{blue}X}}~(\text{Id})\qquad & \qquad\frac{}{\Gamma\vdash{\color{blue}\top}}~(\text{True})\\
\frac{\Gamma,A\Rightarrow B\vdash A\quad\quad\Gamma,B\vdash C}{\Gamma,{\color{blue}A\Rightarrow B}\vdash C}~(\text{Left}\Rightarrow)\qquad & \qquad\frac{\Gamma,A\vdash B}{\Gamma\vdash{\color{blue}A\Rightarrow B}}~(\text{Right}\Rightarrow)\\
\frac{\Gamma,A_{i}\vdash C}{\Gamma,{\color{blue}A_{1}\wedge A_{2}}\vdash C}~(\text{Left}\wedge_{i})\qquad & \qquad\frac{\Gamma\vdash A\quad\quad\Gamma\vdash B}{\Gamma\vdash{\color{blue}A\wedge B}}~(\text{Right}\wedge)\\
\frac{\Gamma,A\vdash C\quad\quad\Gamma,B\vdash C}{\Gamma,{\color{blue}A\vee B}\vdash C}~(\text{Left}\vee)\qquad & \qquad\frac{\Gamma\vdash A_{i}}{\Gamma\vdash{\color{blue}A_{1}\vee A_{2}}}~(\text{Right}\vee_{i})
\end{align*}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Axioms and derivation rules of the LJ algorithm.
 Each of the rules 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\wedge_{i}$
\end_inset

)
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Right}\vee_{i}$
\end_inset

)
\begin_inset Quotes erd
\end_inset

 have two versions, with 
\begin_inset Formula $i=1$
\end_inset

 or 
\begin_inset Formula $i=2$
\end_inset

.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:Rules-of-the-LJ-algorithm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It turns out that the rules in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Rules-of-the-LJ-algorithm"
plural "false"
caps "false"
noprefix "false"

\end_inset

 are equivalent to the rules in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Proof-rules-for-constructive-logic"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The proof is beyond the scope of this book.
 We only remark that this equivalence is far from obvious.
 To prove it, one needs to demonstrate that any sequent derived through
 the first set of rules is also derivable through the second set, and vice
 versa.
\end_layout

\begin_layout Standard
To illustrate the LJ algorithm, let us prove the sequent
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:ch-example-sequent-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Denote that sequent by 
\begin_inset Formula $S_{0}$
\end_inset

:
\begin_inset Formula 
\[
S_{0}\triangleq\emptyset\vdash\left(\left(\alpha\Rightarrow\alpha\right)\Rightarrow\beta\right)\Rightarrow\beta\quad.
\]

\end_inset

 Since the goal of 
\begin_inset Formula $S_{0}$
\end_inset

 contains an implication, we use the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Right}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

 and get a sequent 
\begin_inset Formula $S_{1}$
\end_inset

:
\begin_inset Formula 
\[
S_{1}\triangleq\left(\alpha\Rightarrow\alpha\right)\Rightarrow\beta\vdash\beta\quad.
\]

\end_inset

Now the implication is in the premise, so we use the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

 and get two new sequents:
\begin_inset Formula 
\[
S_{2}\triangleq\left(\alpha\Rightarrow\alpha\right)\Rightarrow\beta\vdash\alpha\Rightarrow\alpha\quad,\quad\quad S_{3}\triangleq\beta\vdash\beta\quad.
\]

\end_inset

Sequent 
\begin_inset Formula $S_{3}$
\end_inset

 follows from the 
\begin_inset Quotes eld
\end_inset

(Id)
\begin_inset Quotes erd
\end_inset

 axiom, so it remains to prove 
\begin_inset Formula $S_{2}$
\end_inset

.
 Since 
\begin_inset Formula $S_{2}$
\end_inset

 contains an implication both as a premise and as the goal, we may apply
 either the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

 or the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Right}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

.
 We choose to apply 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

 and get two new sequents:
\begin_inset Formula 
\[
S_{4}\triangleq\left(\alpha\Rightarrow\alpha\right)\Rightarrow\beta\vdash\alpha\Rightarrow\alpha\quad,\quad\quad S_{5}:\beta\vdash\alpha\Rightarrow\alpha\quad.
\]

\end_inset

Notice that 
\begin_inset Formula $S_{4}=S_{2}$
\end_inset

.
 So, our proof search is getting into an infinite loop trying to prove the
 same sequent 
\begin_inset Formula $S_{2}$
\end_inset

 over and over again.
 We can prove 
\begin_inset Formula $S_{5}$
\end_inset

 but this will not help us break the loop.
\end_layout

\begin_layout Standard
Once we recognize the problem, we backtrack to the point where we chose
 to apply 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Formula $S_{2}$
\end_inset

.
 That was a bad choice, so let us instead apply 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Right}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Formula $S_{2}$
\end_inset

.
 This yields a new sequent 
\begin_inset Formula $S_{6}$
\end_inset

:
\begin_inset Formula 
\[
S_{6}\triangleq\left(\alpha\Rightarrow\alpha\right)\Rightarrow\beta,\alpha\vdash\alpha\quad.
\]

\end_inset

This sequent follows from the 
\begin_inset Quotes eld
\end_inset

(Id)
\begin_inset Quotes erd
\end_inset

axiom.
 There are no more sequents to prove, so the proof of 
\begin_inset Formula $S_{0}$
\end_inset

 is finished.
 It can be drawn as a 
\begin_inset Index idx
status open

\begin_layout Plain Layout
proof tree
\end_layout

\end_inset


\series bold
proof tree
\series default
 like this:
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{1.5pc}\xyScaleX{4pc} &  &  & (\text{Id})\\
\ar[r]\sp(0.35){S_{0}} & (\text{Right}\Rightarrow)\ar[r]\sp(0.5){S_{1}} & (\text{Left}\Rightarrow)\ar[r]\sp(0.5){S_{2}}\ar[ru]\sp(0.6){S_{3}} & (\text{Right}\Rightarrow)\ar[r]\sp(0.65){S_{6}} & (\text{Id})
}
\]

\end_inset

The nodes of the proof tree are axioms or derivation rules, and the edges
 are intermediate sequents required by the rules.
 Some rule nodes branch into several sequents because some rules require
 more than one new sequent to be proved.
 The leaves of the tree are axioms that do not require proving any further
 sequents.
 
\end_layout

\begin_layout Subsection
Extracting code from proofs
\end_layout

\begin_layout Standard
In the Curry-Howard correspondence, a sequent (such as 
\begin_inset Formula $A,B,...,C\vdash X$
\end_inset

) represents the task of writing a fully parametric code expression of type
 
\begin_inset Formula $X$
\end_inset

 that uses some given values of types 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, ..., 
\begin_inset Formula $C$
\end_inset

.
 The sequent is true (i.e., provable) if that code expression can be found.
 So, the code serves as an 
\begin_inset Quotes eld
\end_inset

evidence of proof
\begin_inset Quotes erd
\end_inset

 for the sequent.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align*}
\frac{}{\Gamma,A\vdash{\color{blue}A}}~(\text{Id})\quad & \quad\text{Proof}\,(\Gamma,A\vdash A)_{\text{given }p^{:\Gamma},x^{:A}}=x\\
\frac{}{\Gamma\vdash{\color{blue}\top}}~(\text{True})\quad & \quad\text{Proof}\,(\Gamma\vdash\top)_{\text{given }p^{:\Gamma}}=1\\
\frac{\Gamma,A\Rightarrow B\vdash A\quad\quad\Gamma,B\vdash C}{\Gamma,{\color{blue}A\Rightarrow B}\vdash C}~(\text{Left}\Rightarrow)\quad & \quad\text{Proof}\,(\Gamma,A\Rightarrow B\vdash C)_{\text{given }p^{:\Gamma},q^{:A\rightarrow B}}=\text{Proof}\,(\Gamma,B\vdash C)_{\text{given }p,b^{:B}}\\
 & \quad\quad\text{where}\quad b^{:B}\triangleq q\big(\text{Proof}\,(\Gamma,A\Rightarrow B\vdash A)_{\text{given }p,q}\big)\\
\frac{\Gamma,A\vdash B}{\Gamma\vdash{\color{blue}A\Rightarrow B}}~(\text{Right}\Rightarrow)\quad & \quad\text{Proof}\,(\Gamma\vdash A\Rightarrow B)_{\text{given }p^{:\Gamma}}=x^{:A}\rightarrow\text{Proof}\,(\Gamma,A\vdash B)_{\text{given }p^{:\Gamma},x^{:A}}\\
\frac{\Gamma,A\vdash C}{\Gamma,{\color{blue}A\wedge B}\vdash C}~(\text{Left}\wedge_{1})\quad & \quad\text{Proof}\,(\Gamma,A\wedge B\vdash C)_{\text{given }p^{:\Gamma},(a^{:A}\times b^{:B})}\\
 & \quad\quad=\text{Proof}\,(\Gamma,A\vdash C)_{\text{given }p^{:\Gamma},a^{:A}}\\
\frac{\Gamma,B\vdash C}{\Gamma,{\color{blue}A\wedge B}\vdash C}~(\text{Left}\wedge_{2})\quad & \quad\text{Proof}\,(\Gamma,A\wedge B\vdash C)_{\text{given }p^{:\Gamma},(a^{:A}\times b^{:B})}\\
 & \quad\quad=\text{Proof}\,(\Gamma,B\vdash C)_{\text{given }p^{:\Gamma},b^{:B}}\\
\frac{\Gamma\vdash A\quad\quad\Gamma\vdash B}{\Gamma\vdash{\color{blue}A\wedge B}}~(\text{Right}\wedge)\quad & \quad\text{Proof}\,(\Gamma\vdash A\wedge B)_{\text{given }p^{:\Gamma}}\\
 & \quad\quad=\text{Proof}\,(\Gamma\vdash A)_{\text{given }p^{:\Gamma}}\times\text{Proof}\,(\Gamma\vdash B)_{\text{given }p^{:\Gamma}}\\
\frac{\Gamma,A\vdash C\quad\quad\Gamma,B\vdash C}{\Gamma,{\color{blue}A\vee B}\vdash C}~(\text{Left}\vee)\quad & \quad\text{Proof}\,(\Gamma,A\vee B\vdash C)_{\text{given }p^{:\Gamma},q^{:A+B}}\\
 & \quad\quad=q\triangleright\begin{array}{|c||c|}
 & C\\
\hline A & x^{:A}\rightarrow\text{Proof}\,(\Gamma,A\vdash C)_{\text{given }p,x}\\
B & y^{:B}\rightarrow\text{Proof}\,(\Gamma,B\vdash C)_{\text{given }p,y}
\end{array}\\
\frac{\Gamma\vdash A}{\Gamma\vdash{\color{blue}A\vee B}}~(\text{Right}\vee_{1})\quad & \quad\text{Proof}\,(\Gamma\vdash A\vee B)_{\text{given }p^{:\Gamma}}=\text{Proof}\,(\Gamma\vdash A)+\bbnum 0^{:B}\\
\frac{\Gamma\vdash B}{\Gamma\vdash{\color{blue}A\vee B}}~(\text{Right}\vee_{2})\quad & \quad\text{Proof}\,(\Gamma\vdash A\vee B)_{\text{given }p^{:\Gamma}}=\bbnum 0^{:A}+\text{Proof}\,(\Gamma\vdash B)
\end{align*}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:proof-transformers-for-LJ-rules"

\end_inset

Proof transformers for the rules of the LJ algorithm.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the previous section, we have found a proof of the sequent 
\begin_inset Formula $S_{0}$
\end_inset

, which represents the task of writing a fully parametric function with
 type signature 
\begin_inset Formula $(\left(A\rightarrow A\right)\rightarrow B)\rightarrow B$
\end_inset

).
 Let us now see how we can extract the code of that function from the proof
 of the sequent 
\begin_inset Formula $S_{0}$
\end_inset

.
\end_layout

\begin_layout Standard
We start from the leaves of the proof tree and move step by step towards
 the initial sequent.
 At each step, we shorten the proof tree by replacing some sequent by its
 corresponding evidence-of-proof code.
 Eventually we will replace the initial sequent by its corresponding code.
 Let us see how this procedure works for the proof tree of the sequent 
\begin_inset Formula $S_{0}$
\end_inset

 shown in the previous section.
\end_layout

\begin_layout Standard
Since the leaves are axioms, let us write the code corresponding to each
 axiom of LJ:
\begin_inset Formula 
\begin{align*}
 & \frac{}{\Gamma,X\vdash X}~(\text{Id})\quad:\quad\quad\text{Proof}\,(\Gamma,X\vdash X)_{\text{given }p^{:\Gamma},x^{:X}}=x\quad;\\
 & \frac{}{\Gamma\vdash\top}~(\text{True})\quad:\quad\quad\text{Proof}\,(\Gamma\vdash\top)_{\text{given }p^{:\Gamma}}=1\quad.
\end{align*}

\end_inset

Here we denote explicitly the values (such as 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $x$
\end_inset

) given as premises to the sequent.
 The notation 
\begin_inset Formula $p^{:\Gamma}$
\end_inset

 means all values given in the set of premises 
\begin_inset Formula $\Gamma$
\end_inset

.
 Below we will assume that the propositions 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 correspond to types 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

; that is, 
\begin_inset Formula $\alpha\triangleq{\cal CH}(A)$
\end_inset

 and 
\begin_inset Formula $\beta\triangleq{\cal CH}(B)$
\end_inset

.
\end_layout

\begin_layout Standard
The leaves in the proof tree for 
\begin_inset Formula $S_{0}$
\end_inset

 are the 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Id}$
\end_inset

)
\begin_inset Quotes erd
\end_inset

 axioms used to prove the sequents 
\begin_inset Formula $S_{3}$
\end_inset

 and 
\begin_inset Formula $S_{6}$
\end_inset

.
 Let us write the code that serves as the 
\begin_inset Quotes eld
\end_inset

evidence of proof
\begin_inset Quotes erd
\end_inset

 for these sequents.
 For brevity, we denote 
\begin_inset Formula $\gamma\triangleq\left(\alpha\Rightarrow\alpha\right)\Rightarrow\beta$
\end_inset

 and 
\begin_inset Formula $C\triangleq\left(A\rightarrow A\right)\rightarrow B$
\end_inset

, so that 
\begin_inset Formula $\gamma={\cal CH}(C)$
\end_inset

.
 Then we can write:
\begin_inset Formula 
\begin{align*}
 & S_{3}\triangleq\beta\vdash\beta\quad,\quad\quad\text{Proof}\,(S_{3})_{\text{given }y^{:B}}=y\quad,\\
 & S_{6}\triangleq\gamma,\alpha\vdash\alpha\quad,\quad\quad\text{Proof}\,(S_{6})_{\text{given }q^{:C},x^{:A}}=x\quad.
\end{align*}

\end_inset

Note that the proof of 
\begin_inset Formula $S_{6}$
\end_inset

 does not use the first given value 
\begin_inset Formula $q^{:C}$
\end_inset

 (corresponding to the premise 
\begin_inset Formula $\gamma$
\end_inset

).
\end_layout

\begin_layout Standard
We now shorten the proof tree by replacing the sequents 
\begin_inset Formula $S_{3}$
\end_inset

 and 
\begin_inset Formula $S_{6}$
\end_inset

 by their 
\begin_inset Quotes eld
\end_inset

evidence of proof
\begin_inset Quotes erd
\end_inset

:
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{1.5pc}\xyScaleX{4pc} &  &  & \square\\
\ar[r]\sp(0.35){S_{0}} & (\text{Right}\Rightarrow)\ar[r]\sp(0.5){S_{1}} & (\text{Left}\Rightarrow)\ar[r]\sp(0.5){S_{2}}\ar[ru]\sp(0.6){(y)_{\text{given }y^{:B}}} & (\text{Right}\Rightarrow)\ar[r]\sp(0.65){(x)_{\text{given }q^{:C},x^{:A}}} & \square
}
\]

\end_inset


\end_layout

\begin_layout Standard
The next step is to consider the proof of 
\begin_inset Formula $S_{2}$
\end_inset

, which is found by applying the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Right}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

.
 This rule promises to give a proof of 
\begin_inset Formula $S_{2}$
\end_inset

 if we have a proof of 
\begin_inset Formula $S_{6}$
\end_inset

.
 In order to extract code from that rule, we can write a function that transform
s a proof of 
\begin_inset Formula $S_{6}$
\end_inset

 into a proof of 
\begin_inset Formula $S_{2}$
\end_inset

.
 We call this function the 
\series bold
proof transformer
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Curry-Howard correspondence!proof transformer
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
proof transformer
\end_layout

\end_inset

 corresponding to the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Right}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

.
 That rule and its transformer are defined as:
\begin_inset Formula 
\[
\frac{\Gamma,A\vdash B}{\Gamma\vdash A\Rightarrow B}~(\text{Right}\Rightarrow)\quad:\quad\quad\text{Proof}\,(\Gamma\vdash A\Rightarrow B)_{\text{given }p^{:\Gamma}}=x^{:A}\rightarrow\text{Proof}\,(\Gamma,A\vdash B)_{\text{given }p^{:\Gamma},x^{:A}}\quad.
\]

\end_inset

Applying the proof transformer to the known proof of 
\begin_inset Formula $S_{6}$
\end_inset

, we obtain a proof of 
\begin_inset Formula $S_{2}$
\end_inset

:
\begin_inset Formula 
\[
\text{Proof}\,(S_{2})_{\text{given }q^{:C}}=x^{:A}\rightarrow\text{Proof}\,(S_{6})_{\text{given }q^{:C},x^{:A}}=(x^{:A}\rightarrow x)_{\text{given }q^{:C}}\quad.
\]

\end_inset

The proof tree can be now shortened to:
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{1.5pc}\xyScaleX{3.5pc} &  &  & \square\\
\ar[r]\sp(0.35){S_{0}} & (\text{Right}\Rightarrow)\ar[r]\sp(0.5){S_{1}} & (\text{Left}\Rightarrow)\ar[rr]\sp(0.62){(x^{:A}\rightarrow x)_{\text{given }q^{:C}}}\ar[ru]\sp(0.6){(y)_{\text{given }y^{:B}}} &  & \square
}
\]

\end_inset


\end_layout

\begin_layout Standard
The next step is to get the proof of 
\begin_inset Formula $S_{1}$
\end_inset

 obtained by applying the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

.
 That rule requires two previous sequents, so its transformer is a function
 of two previously obtained proofs:
\begin_inset Formula 
\begin{align*}
 & \frac{\Gamma,A\Rightarrow B\vdash A\quad\quad\Gamma,B\vdash C}{\Gamma,A\Rightarrow B\vdash C}~(\text{Left}\Rightarrow)\quad:\\
 & \text{Proof}\,(\Gamma,A\Rightarrow B\vdash C)_{\text{given }p^{:\Gamma},q^{:A\rightarrow B}}=\text{Proof}\,(\Gamma,B\vdash C)_{\text{given }p^{:\Gamma},b^{:B}}\\
 & \quad\quad\text{where}\quad b^{:B}\triangleq q\big(\text{Proof}\,(\Gamma,A\Rightarrow B\vdash A)_{\text{given }p^{:\Gamma},q^{:A\rightarrow B}}\big)\quad.
\end{align*}

\end_inset

In the proof tree shown above, we obtain a proof of 
\begin_inset Formula $S_{1}$
\end_inset

 by applying this proof transformer to the proofs of 
\begin_inset Formula $S_{2}$
\end_inset

 and 
\begin_inset Formula $S_{3}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \text{Proof}\,(S_{1})_{\text{given }q^{:C}}=\text{Proof}\,(S_{3})_{\text{given }b^{:B}}\text{ where }b^{:B}\triangleq q(\text{Proof}\,(S_{2}))_{\text{given }q^{:C}}\\
 & \quad=b\text{ where }b^{:B}\triangleq q(x^{:A}\rightarrow x)_{\text{given }q^{:C}}=q(x^{:A}\rightarrow x)_{\text{given }q^{:C}}\quad.
\end{align*}

\end_inset

Substituting this proof into the proof tree, we shorten the tree to:
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{1.5pc}\xyScaleX{3.5pc}\ar[r]\sp(0.35){S_{0}} & (\text{Right}\Rightarrow)\ar[r]\sp(0.65){q(x^{:A}\rightarrow x)_{\text{given }q^{:C}}} & \square}
\]

\end_inset


\end_layout

\begin_layout Standard
It remains to obtain the proof of 
\begin_inset Formula $S_{0}$
\end_inset

 by applying the proof transformer of the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Right}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \text{Proof}\,(S_{0})=\text{Proof}\,(\emptyset\vdash(\alpha\Rightarrow\alpha)\Rightarrow\beta)\Rightarrow\beta)\\
 & =q^{:(A\rightarrow A)\rightarrow B}\rightarrow\text{Proof}\,(S_{1})_{\text{given }q^{:C}}=q^{:(A\rightarrow A)\rightarrow B}\rightarrow q(x^{:A}\rightarrow x)\quad.
\end{align*}

\end_inset

The proof tree is now shortened to a single code expression, 
\begin_inset Formula $q^{:(A\rightarrow A)\rightarrow B}\rightarrow q(x^{:A}\rightarrow x)$
\end_inset

, that serves as an evidence of proof for 
\begin_inset Formula $S_{0}$
\end_inset

 because this code has type 
\begin_inset Formula $\left(\left(A\rightarrow A\right)\rightarrow B\right)\rightarrow B$
\end_inset

.
 In this way, we have derived the code of a fully parametric function from
 its type signature.
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:proof-transformers-for-LJ-rules"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the proof transformers for all the rules of the LJ algorithm.
 Apart from the special rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

, all other rules have proof transformers using just one of the code constructio
ns (
\begin_inset Quotes eld
\end_inset

create function
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

create tuple
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

use tuple
\begin_inset Quotes erd
\end_inset

, etc.) allowed within fully parametric code.
\end_layout

\begin_layout Section
The LJT algorithm
\end_layout

\begin_layout Standard
As we have seen, the LJ algorithm can enter a loop if we apply the rule
 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

 and obtain a sequent we already had at a previous step.
 That rule requires us to prove two new sequents:
\begin_inset Formula 
\[
\frac{\Gamma,A\Rightarrow B\vdash A\quad\quad\Gamma,B\vdash C}{\Gamma,A\Rightarrow B\vdash C}~(\text{Left}\Rightarrow)\quad.
\]

\end_inset

A sign of trouble is that the first of these sequents (
\begin_inset Formula $\Gamma,A\Rightarrow B\vdash A$
\end_inset

) does not have a simpler form than the initial sequent (
\begin_inset Formula $\Gamma,A\Rightarrow B\vdash C$
\end_inset

).
 So, it is not clear that we are getting closer to completing the proof.
 If 
\begin_inset Formula $A=C$
\end_inset

, the new sequent will simply repeat the initial sequent, immediately creating
 a loop.
\end_layout

\begin_layout Standard
In some cases, a repeated sequent will occur after more than one step.
 It is not easy to formulate rigorous conditions for stopping the loop or
 for avoiding the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The LJT algorithm solves this problem by removing the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

 from the LJ algorithm.
 Instead, 
\emph on
four
\emph default
 new rules are introduced.
 Each of these rules contains a different pattern instead of 
\begin_inset Formula $A$
\end_inset

 in the premise 
\begin_inset Formula $A\Rightarrow C$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{(}A\text{ is atomic)\,}\frac{\Gamma,A,B\vdash D}{\Gamma,A,{\color{blue}A\Rightarrow B}\vdash D}~(\text{Left}\Rightarrow_{A})\qquad & \qquad\frac{\Gamma,A\Rightarrow B\Rightarrow C\vdash D}{\Gamma,{\color{blue}(A\wedge B)\Rightarrow C}\vdash D}~(\text{Left}\Rightarrow_{\wedge})\\
\frac{\Gamma,B\Rightarrow C\vdash A\Rightarrow B\quad\quad\Gamma,C\vdash D}{\Gamma,{\color{blue}(A\Rightarrow B)\Rightarrow C}\vdash D}~(\text{Left}\Rightarrow_{\Rightarrow})\qquad & \qquad\frac{\Gamma,A\Rightarrow C,B\Rightarrow C\vdash D}{\Gamma,{\color{blue}(A\vee B)\Rightarrow C}\vdash D}~(\text{Left}\Rightarrow_{\vee})
\end{align*}

\end_inset

The rule 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $\text{Left}\Rightarrow_{A}$
\end_inset


\begin_inset Quotes erd
\end_inset

 applies only if the implication starts with an 
\begin_inset Quotes eld
\end_inset

atomic
\begin_inset Quotes erd
\end_inset

 type expression, i.e., a single type parameter or a unit type.
 In all other cases, the implication must start with a conjunction, a disjunctio
n, or an implication, which means that one of the three remaining rules
 will apply.
\end_layout

\begin_layout Standard
The LJT algorithm retains all the rules in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:proof-transformers-for-LJ-rules"
plural "false"
caps "false"
noprefix "false"

\end_inset

 except the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\Rightarrow$
\end_inset

)
\begin_inset Quotes erd
\end_inset

, which is replaced by the four new rules.
 It is far from obvious that the new rules are equivalent to the old ones.
 It took mathematicians several decades to come up with the LJT rules and
 to prove their validity.
 This book will rely on that result and will not attempt to prove it.
\end_layout

\begin_layout Standard
The proof transformers for the new rules are shown in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:proof-transformers-for-LJT-rules"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Figures
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:proof-transformers-for-LJ-rules"
plural "false"
caps "false"
noprefix "false"

\end_inset

–
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:proof-transformers-for-LJT-rules"
plural "false"
caps "false"
noprefix "false"

\end_inset

 define the set of proof transformers sufficient for using the LJT algorithm
 in practice.
 The 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
curryhoward
\family default
 library
\end_layout

\end_inset


\begin_inset listings
inline true
status open

\begin_layout Plain Layout

curryhoward
\end_layout

\end_inset

 library
\family typewriter

\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://github.com/Chymyst/curryhoward"

\end_inset


\end_layout

\end_inset


\family default
 implements these proof transformers.
\end_layout

\begin_layout Standard
The most complicated of the new rules is the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\Rightarrow_{\Rightarrow}$
\end_inset

)
\begin_inset Quotes erd
\end_inset

.
 Applying that rule's transformer results in evidence-of-proof code that
 is longer than the code obtained via LJ's rule transformers.
 The resulting code will need to be simplified symbolically.
 
\end_layout

\begin_layout Standard
As an example of using the LJT algorithm, we prove the sequent 
\begin_inset Formula $S_{0}=\emptyset\vdash((\alpha\Rightarrow\alpha)\Rightarrow\beta)\Rightarrow\beta$
\end_inset

 from the previous section.
 At each step, only one LJT rule applies to each sequent.
 The initial part of the proof tree looks like this:
\begin_inset VSpace -100baselineskip%
\end_inset


\begin_inset Formula 
\[
\xymatrix{\xyScaleY{1.5pc}\xyScaleX{6pc} &  &  & ~\\
\ar[r]\sp(0.4){\emptyset\vdash((\alpha\Rightarrow\alpha)\Rightarrow\beta)\Rightarrow\beta} & (\text{Right}\Rightarrow)\ar[r]\sp(0.5){(\alpha\Rightarrow\alpha)\Rightarrow\beta\vdash\beta} & (\text{Left}\Rightarrow_{\Rightarrow})\ar[ru]\sp(0.65){\beta\vdash\beta}\ar[r]\sp(0.65){\alpha\Rightarrow\beta\vdash\alpha\Rightarrow\alpha} & ~
}
\]

\end_inset

The proofs for the sequents 
\begin_inset Formula $\beta\vdash\beta$
\end_inset

 and 
\begin_inset Formula $\alpha\Rightarrow\beta\vdash\alpha\Rightarrow\alpha$
\end_inset

 are the same as before:
\begin_inset Formula 
\[
\text{Proof}\,(\beta\vdash\beta)_{\text{given }y^{:B}}=y\quad,\quad\quad\text{Proof}\,(\alpha\Rightarrow\beta\vdash\alpha\Rightarrow\alpha)_{\text{given }r^{:A\rightarrow B}}=x^{:A}\rightarrow x\quad.
\]

\end_inset

Substituting these proofs into the proof transformer of the rule 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Formula $\text{Left}\Rightarrow_{\Rightarrow}$
\end_inset

)
\begin_inset Quotes erd
\end_inset

 produces this code:
\begin_inset Formula 
\begin{align*}
 & \text{Proof}\,((\alpha\Rightarrow\alpha)\Rightarrow\beta\vdash\beta)_{\text{given }q^{:(A\rightarrow A)\rightarrow B}}=q\big(\text{Proof}\,(\alpha\Rightarrow\beta\vdash\alpha\Rightarrow\alpha)_{\text{given }r^{:A\rightarrow B}}\big)\\
 & \quad\quad\text{where }r^{:A\rightarrow B}=a^{:A}\rightarrow q(\_^{:A}\rightarrow a)\\
 & =q(x^{:A}\rightarrow x)\quad.
\end{align*}

\end_inset

The proof of 
\begin_inset Formula $\alpha\Rightarrow\beta\vdash\alpha\Rightarrow\alpha$
\end_inset

 does not actually use the intermediate value 
\begin_inset Formula $r^{:A\rightarrow B}$
\end_inset

 provided by the proof transformer.
 As a symbolic simplification step, we may simply omit the code of 
\begin_inset Formula $r$
\end_inset

.
 The 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

curryhoward
\end_layout

\end_inset

 library always performs symbolic simplification after applying the LJT
 algorithm.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align*}
\frac{\Gamma,A,B\vdash D}{\Gamma,A,{\color{blue}A\Rightarrow B}\vdash D}~(\text{Left}\Rightarrow_{A})\quad & \quad\text{Proof}\,(\Gamma,A,A\Rightarrow B\vdash D)_{\text{given }p^{:\Gamma},x^{:A},q^{:A\rightarrow B}}\\
 & \quad\quad=\text{Proof}\,(\Gamma,A,B\vdash D)_{\text{given }p,x,q(x)}\\
\frac{\Gamma,A\Rightarrow B\Rightarrow C\vdash D}{\Gamma,{\color{blue}(A\wedge B)\Rightarrow C}\vdash D}~(\text{Left}\Rightarrow_{\wedge})\quad & \quad\text{Proof}\,(\Gamma,(A\wedge B)\Rightarrow C\vdash D)_{\text{given }p^{:\Gamma},q^{:A\times B\rightarrow C}}\\
 & \quad\quad=\text{Proof}\,(\Gamma,A\Rightarrow B\Rightarrow C\vdash D)_{\text{given }p,(a^{:A}\rightarrow b^{:B}\rightarrow q(a\times b))}\\
\frac{\Gamma,A\Rightarrow C,B\Rightarrow C\vdash D}{\Gamma,{\color{blue}(A\vee B)\Rightarrow C}\vdash D}~(\text{Left}\Rightarrow_{\vee})\quad & \quad\text{Proof}\,(\Gamma,(A\vee B)\Rightarrow C\vdash D)_{\text{given }p^{:\Gamma},q^{:A+B\rightarrow C}}\\
 & \quad\quad=\text{Proof}\,(\Gamma,A\Rightarrow C,B\Rightarrow C\vdash D)_{\text{given }p,r,s}\\
 & \quad\quad\text{where}~r\triangleq a^{:A}\rightarrow q(a+\bbnum 0)\text{ and }s\triangleq b^{:B}\rightarrow q(\bbnum 0+b)\\
\frac{\Gamma,B\Rightarrow C\vdash A\Rightarrow B\quad\quad\Gamma,C\vdash D}{\Gamma,{\color{blue}(A\Rightarrow B)\Rightarrow C}\vdash D}~(\text{Left}\Rightarrow_{\Rightarrow})\quad & \quad\text{Proof}\,(\Gamma,(A\Rightarrow B)\Rightarrow C\vdash D)_{\text{given }p^{:\Gamma},q^{:\left(A\rightarrow B\right)\rightarrow C}}\\
 & \quad\quad=\text{Proof}\,(\Gamma,C\vdash D)_{\text{given }p,c}\\
 & \quad\quad\text{ where}~c^{:C}\triangleq q\big(\text{Proof}\,(\Gamma,B\Rightarrow C\vdash A\Rightarrow B)_{\text{given }p,r}\big)\\
 & \quad\quad\text{ and }r^{:B\rightarrow C}\triangleq b^{:B}\rightarrow q(\_^{:A}\rightarrow b)
\end{align*}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:proof-transformers-for-LJT-rules"

\end_inset

Proof transformers for the four new rules of the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
LJT algorithm|textit
\end_layout

\end_inset

LJT algorithm.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The reason the LJT algorithm terminates is that each rule replaces a given
 sequent by one or more sequents with simpler premises or goals.
\begin_inset Foot
status open

\begin_layout Plain Layout
The paper 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.2618"
literal "false"

\end_inset


\family default
 shows that the LJT algorithm terminates by giving an explicit decreasing
 measure on proof trees.
\end_layout

\end_inset

 This guarantees that the proof search will terminate either with a complete
 proof or with a sequent to which no more rules apply.
 An example of such a 
\begin_inset Quotes eld
\end_inset

dead-end
\begin_inset Quotes erd
\end_inset

 sequent is 
\begin_inset Formula $\alpha\vdash\beta$
\end_inset

 where 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 are different, unrelated propositions.
 In that situation, the LJT algorithm concludes that the initial sequent
 cannot be proved.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Rule 
\begin_inset Formula $L\rightarrow_{4}$
\end_inset

 is based on the key theorem: 
\size footnotesize

\begin_inset Formula 
\[
\left(\left(A\rightarrow B\right)\rightarrow C\right)\rightarrow\left(A\rightarrow B\right)\,\Longleftrightarrow\,\left(B\rightarrow C\right)\rightarrow\left(A\rightarrow B\right)
\]

\end_inset


\end_layout

\begin_layout Plain Layout
The key theorem for rule 
\begin_inset Formula $L\rightarrow_{4}$
\end_inset

 is attributed to Vorobieff (1958)
\end_layout

\begin_layout Plain Layout
A stepping stone to this theorem:
\size footnotesize

\begin_inset Formula 
\[
\left(\left(A\rightarrow B\right)\rightarrow C\right)\rightarrow B\rightarrow C
\]

\end_inset


\size default
Proof: 
\begin_inset Formula $f^{:\left(A\rightarrow B\right)\rightarrow C}\rightarrow b^{:B}\rightarrow f\,(\_^{:A}\rightarrow b)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Plain Layout
Proof search V: From deduction rules to code
\end_layout

\begin_layout Plain Layout
The new rules are equivalent to the old rules, therefore...
\end_layout

\begin_layout Plain Layout
Proof of a sequent 
\begin_inset Formula $A,B,C\vdash G$
\end_inset

 
\begin_inset Formula $\Leftrightarrow$
\end_inset

 code/expression 
\begin_inset Formula $t(a,b,c):G$
\end_inset


\end_layout

\begin_layout Plain Layout
Also can be seen as a function 
\begin_inset Formula $t$
\end_inset

 from 
\begin_inset Formula $A,B,C$
\end_inset

 to 
\begin_inset Formula $G$
\end_inset


\end_layout

\begin_layout Plain Layout
Sequent in a proof follows from an axiom or from a transforming rule
\end_layout

\begin_layout Plain Layout
The two axioms are fixed expressions, 
\begin_inset Formula $x^{A}\rightarrow x$
\end_inset

 and 
\begin_inset Formula $1$
\end_inset


\end_layout

\begin_layout Plain Layout
Each rule has a 
\emph on
proof transformer
\emph default
 function: 
\begin_inset Formula $\text{PT}_{R\rightarrow}$
\end_inset

 , 
\begin_inset Formula $\text{PT}_{L+}$
\end_inset

 , etc.
\end_layout

\begin_layout Plain Layout
Examples of proof transformer functions:
\begin_inset Formula 
\begin{align*}
\frac{\Gamma,A\vdash C\quad\;\Gamma,B\vdash C}{\Gamma,{\color{blue}A+B}\vdash C}\,L+\\
PT_{L+}(t_{1}^{A\rightarrow C},t_{2}^{B\rightarrow C})=x^{A+B}\rightarrow & \ x\ \text{match}\begin{cases}
a^{A}\rightarrow t_{1}(a)\\
b^{B}\rightarrow t_{2}(b)
\end{cases}
\end{align*}

\end_inset


\begin_inset Formula 
\begin{align*}
\frac{\Gamma,A\rightarrow B\rightarrow C\vdash D}{\Gamma,{\color{blue}(A\times B)\rightarrow C}\vdash D}\,L\rightarrow_{2}\\
PT_{L\rightarrow_{2}}(f^{\left(A\rightarrow B\rightarrow C\right)\rightarrow D})=g^{A\times B\rightarrow C}\rightarrow & f\,(x^{A}\rightarrow y^{B}\rightarrow g(x,y))
\end{align*}

\end_inset


\end_layout

\begin_layout Plain Layout
Verify that we can indeed produce PTs for every rule of LJT
\end_layout

\begin_layout Plain Layout
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Plain Layout
Proof search example II: deriving code
\end_layout

\begin_layout Plain Layout
Once a proof tree is found, start from leaves and apply PTs
\end_layout

\begin_layout Plain Layout
For each sequent 
\begin_inset Formula $S_{i}$
\end_inset

, this will derive a 
\series bold
proof expression
\series default
 
\begin_inset Formula $t_{i}$
\end_inset


\end_layout

\begin_layout Plain Layout
Example: to prove 
\begin_inset Formula $S_{0}$
\end_inset

, start from 
\begin_inset Formula $S_{6}$
\end_inset

 backwards:
\size footnotesize

\begin_inset Formula 
\begin{align*}
S_{6}:\left(R\rightarrow R\right)\rightarrow Q;R\vdash R\quad(\text{axiom }Id)\quad & t_{6}(rrq,r)=r\\
S_{2}:\left(R\rightarrow R\right)\rightarrow Q\vdash\left(R\rightarrow R\right)\quad\text{PT}_{R\rightarrow}(t_{6})\quad & t_{2}(rrq)=\left(r\rightarrow t_{6}(rrq,r)\right)\\
S_{3}:Q\vdash Q\quad(\text{axiom }Id)\quad & t_{3}(q)=q\\
S_{1}:\left(R\rightarrow R\right)\rightarrow Q\vdash Q\quad\text{PT}_{L\rightarrow}(t_{2},t_{3})\quad & t_{1}(rrq)=t_{3}(rrq(t_{2}(rrq)))\\
S_{0}:\emptyset\vdash\left(\left(R\rightarrow R\right)\rightarrow Q\right)\rightarrow Q\quad\text{PT}_{R\rightarrow}(t_{1})\quad & t_{0}=\left(rrq\rightarrow t_{1}(rrq)\right)
\end{align*}

\end_inset


\end_layout

\begin_layout Plain Layout
The proof expression for 
\begin_inset Formula $S_{0}$
\end_inset

 is then obtained as
\begin_inset Formula 
\begin{align*}
t_{0} & =rrq\rightarrow t_{3}\left(rrq\left(t_{2}\left(rrq\right)\right)\right)=rrq\rightarrow rrq(r\rightarrow t_{6}\left(rrq,r\right)\\
 & =rrq\rightarrow rrq\left(r\rightarrow r\right)
\end{align*}

\end_inset

Simplified final code having the required type: 
\begin_inset Formula 
\[
t_{0}:\left(\left(R\rightarrow R\right)\rightarrow Q\right)\rightarrow Q=\left(rrq\rightarrow rrq\left(r\rightarrow r\right)\right)
\]

\end_inset


\end_layout

\end_inset

To 
\emph on
prove
\emph default
 that there is no proof, one needs to use methods that are beyond the scope
 of this book.
 An introduction to the required techniques is in the book 
\begin_inset Quotes eld
\end_inset

Proof and Disproof in Formal Logic
\begin_inset Quotes erd
\end_inset

 by R.
\begin_inset space ~
\end_inset

Bornat
\begin_inset Index idx
status open

\begin_layout Plain Layout
Richard Bornat
\end_layout

\end_inset

 (see footnote
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fn:Bornat-proof-book"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on page
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "fn:Bornat-proof-book"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Chapter
Parametricity theorem and naturality laws
\begin_inset CommandInset label
LatexCommand label
name "app:Proofs-of-naturality-parametricity"

\end_inset


\end_layout

\begin_layout Standard
Functional programming focuses on a small set of language features — the
 six type constructions and the nine code constructions
\begin_inset Index idx
status open

\begin_layout Plain Layout
nine code constructions
\end_layout

\end_inset

, introduced in Sections
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Type-notation-and-standard-type-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:The-rules-of-proof"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 These constructions, summarized again in Tables
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Mathematical-notation-for-basic-code-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:six-pure-type-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

–
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:nine-pure-code-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

, create 
\series bold
fully parametric
\series default
 programs
\begin_inset Index idx
status open

\begin_layout Plain Layout
fully parametric!code
\end_layout

\end_inset

 and are sufficient to implement all design patterns of functional programming.
 At the same time, restricting programs to be fully parametric will enable
 several ways of mathematical reasoning about code.
 Examples of such reasoning are treating programs as mathematical values
 (referential transparency
\begin_inset Index idx
status open

\begin_layout Plain Layout
referential transparency
\end_layout

\end_inset

); deriving the most general type from code (type inference
\begin_inset Index idx
status open

\begin_layout Plain Layout
type inference
\end_layout

\end_inset

); and deriving code from type (code inference
\begin_inset Index idx
status open

\begin_layout Plain Layout
code inference
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This is for testing only.
 REMOVE THIS 
\begin_inset Formula $r\ogreaterthan s^{r\ogreaterthan s^{r\ogreaterthan s}}$
\end_inset


\begin_inset Formula 
\[
r\ogreaterthan s^{r\ogreaterthan s^{r\ogreaterthan s}}
\]

\end_inset


\end_layout

\end_inset

Additionally, all fully parametric programs will automatically satisfy certain
 laws derived from the so-called 
\begin_inset Quotes eld
\end_inset

parametricity theorem
\begin_inset Quotes erd
\end_inset

.
 The most often used laws of this kind are naturality laws for natural transform
ations, i.e., for functions of type 
\begin_inset Formula $\forall A.\,F^{A}\rightarrow G^{A}$
\end_inset

 where both 
\begin_inset Formula $F^{\bullet}$
\end_inset

 and 
\begin_inset Formula $G^{\bullet}$
\end_inset

 are functors (or both contrafunctors).
 Not having to verify naturality laws by hand saves a lot of time.
\end_layout

\begin_layout Standard
Other laws that follow automatically from parametricity are composition
 laws for functors, commutativity laws for bifunctors, and dinaturality
 laws for profunctors.
 This Appendix presents sufficient theoretical material to be able to derive
 all those laws.
 
\end_layout

\begin_layout Standard
\begin_inset Wrap table
lines 0
placement l
overhang 0in
width "54.5col%"
status open

\begin_layout Plain Layout
\align center
\begin_inset VSpace -20baselineskip%
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Type construction
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Scala example
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Type notation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
unit or 
\begin_inset Quotes eld
\end_inset

named unit
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Unit
\end_layout

\end_inset

 or 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

None
\end_layout

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\bbnum 1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
type parameter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 as in 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

F[A]
\end_layout

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $A$
\end_inset

 as in 
\begin_inset Formula $F^{A}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
product type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(A, B)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $A\times B$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
co-product type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Either[A, B]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $A+B$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
function type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A => B
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $A\rightarrow B$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
recursive type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Fix[F[_]]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\text{Fix}^{F^{\bullet}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
fully parametric!type constructions
\end_layout

\end_inset

The six type constructions that may be used in fully parametric programs.
\begin_inset CommandInset label
LatexCommand label
name "tab:six-pure-type-constructions"

\end_inset


\end_layout

\end_inset


\begin_inset VSpace -20baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Code construction
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Scala example
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Code notation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
1.
 Use unit value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2.
 Use given argument
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3.
 Create function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x => expression
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $x\rightarrow expression$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4.
 Use function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

f(x)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $f(x)$
\end_inset

 
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset

 
\begin_inset Formula $x\triangleright f$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
5.
 Create tuple
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(a, b)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $a\times b$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
6.
 Use tuple
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

{ case (a, b) => ...
 }
\end_layout

\end_inset

 or 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p._1
\end_layout

\end_inset

 or 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p._2
\end_layout

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $a\times b\rightarrow...$
\end_inset

 
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset

 
\begin_inset Formula $p\triangleright\pi_{1}$
\end_inset

 
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset

 
\begin_inset Formula $p\triangleright\pi_{2}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
7.
 Create disjunctive value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Left[A, B](a)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "19col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\size small
\begin_inset VSpace 20baselineskip%
\end_inset


\begin_inset Formula $a^{:A}+\bbnum 0^{:B}$
\end_inset

 
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 
\begin_inset Formula $\begin{array}{|cc|}
a & \bbnum 0\end{array}$
\end_inset


\begin_inset VSpace 20baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
8.
 Use disjunctive value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "33col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p match { case Left(a)   => f(a)            case Right(b)  => g(b)     
     }
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "23col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\size small
\begin_inset VSpace 20baselineskip%
\end_inset


\begin_inset Formula $p\,\triangleright\,\begin{array}{|c||c|}
 & C\\
\hline A & a\rightarrow f(a)\\
B & b\rightarrow g(b)
\end{array}$
\end_inset


\begin_inset VSpace 20baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
9.
 Recursive call
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

def f(x) = { ...
 f(y) ...
 }
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $f(x)\triangleq...~\overline{f}(y)~...$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
fully parametric!code constructions
\end_layout

\end_inset

The nine code constructions of fully parametric programs.
\begin_inset CommandInset label
LatexCommand label
name "tab:nine-pure-code-constructions"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The practical uses of parametricity were showcased in 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Philip Wadler
\end_layout

\end_inset

P.
\begin_inset space ~
\end_inset

Wadler's paper
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://people.mpi-sws.org/~dreyer/tor/papers/wadler.pdf"
literal "false"

\end_inset


\family default
 and some further explanations in the blog posts 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://reasonablypolymorphic.com/blog/theorems-for-free/"

\end_inset


\family default
 and 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://bartoszmilewski.com/2014/09/22/"

\end_inset


\family default

\begin_inset Newline newline
\end_inset

The title of the paper (
\begin_inset Quotes eld
\end_inset

Theorems for free
\begin_inset Quotes erd
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
theorems for free
\end_layout

\end_inset

) is misleading.
 As we will see, the theorems are obtained only at the cost of restricting
 all code to the nine FP code constructions, which excludes most of the
 code in today's real-world applications.
\end_layout

\end_inset

 based on results derived by J.
\begin_inset space ~
\end_inset

Reynolds.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
John Reynolds
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://people.mpi-sws.org/~dreyer/tor/papers/reynolds.pdf"
literal "false"

\end_inset


\family default
.
 This book does not use those results.
 
\end_layout

\end_inset

 The Reynolds-Wadler approach first replaces functions of type 
\begin_inset Formula $A\rightarrow B$
\end_inset

 by many-to-many relations between values of types 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 Then the parametricity theorem shows that a certain law holds for relations.
 Since we are usually interested in deriving laws as equations rather than
 relations, the last step replaces all relations by functions.
\end_layout

\begin_layout Standard
To use the relational approach to parametricity, one needs to learn the
 techniques for working with relations, which will be unfamiliar to most
 programmers.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Beginner-level tutorials on relations and relational parametricity are rare.
 One is in a paper by 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Ronald Backhouse
\end_layout

\end_inset

R.
\begin_inset space ~
\end_inset

Backhouse, see 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://www.researchgate.net/publication/262348393_On_a_Relation_on_Functions"
literal "false"

\end_inset


\end_layout

\end_inset

 Only a few parametricity properties can be proved without using relations.
 However, a practicing programmer who only uses the 
\emph on
formulations
\emph default
 of the resulting laws will not need to learn any proofs.
 Adapting the parametricity theorem to the needs of FP practitioners, this
 Appendix will begin by summarizing the naturality laws and other properties
 of fully parametric code.
 Then Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Parametricity-theorem-for-relations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 will prove the parametricity theorem in the relational approach.
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Commutativity-laws-for-type-constructors"
plural "false"
caps "false"
noprefix "false"

\end_inset

 proves that fully parametric type constructors obey commutativity laws.
 Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Naturality-laws-for-fully-parametric-functions"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows, without using relations, that fully parametric functions satisfy
 dinaturality laws (a generalization of naturality laws to arbitrary type
 signatures).
 An important consequence, proved in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Uniqueness-of-functor-and-contrafunctor"
plural "false"
caps "false"
noprefix "false"

\end_inset

, is that the code implementing the functor and contrafunctor typeclasses
 is unique.
 Finally, Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Parametricity-theorem-for-relations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 explains the relational approach to parametricity and proves the relational
 parametricity theorem.
 
\end_layout

\begin_layout Plain Layout
Additional literature:
\end_layout

\begin_layout Plain Layout
[1]: Girard, J.-Y.; Scedrov, A.
 & Scott, P.
 J.
 Normal Forms and Cut-Free Proofs as Natural Transformations.
 Logic From Computer Science, Mathematical Science Research Institute Publicatio
ns 21, Springer-Verlag, 1992, 217-241.
 http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.811
\end_layout

\begin_layout Plain Layout
[2]: Bainbridge, E.
 S.; Freyd, P.
 J.; Scedrov, A.
 & Scott, P.
 J.
 Functorial polymorphism.
 Theoretical computer science, Elsevier, 1990, 70, 35-64.
 https://core.ac.uk/display/82270459
\end_layout

\begin_layout Plain Layout
[3]: De Lataillade, J.
 Dinatural Terms in System F.
 Logic in Computer Science, 24th Annual IEEE Symposium, 267-276, 2009.
 https://www.irif.fr/~delatail/dinat.pdf
\end_layout

\begin_layout Plain Layout
[4]: Pistone, P.
 On completeness and parametricity in the realizability semantics of System
 F.
 https://arxiv.org/abs/1802.05143
\end_layout

\begin_layout Plain Layout
[5]: https://libres.uncg.edu/ir/asu/f/Johann_Patricia_2014_A_Relationally_Parametr
ic_Model_Of_Dependent_Type_Theory..pdf
\end_layout

\begin_layout Plain Layout
See discussion here: https://cstheory.stackexchange.com/questions/42256/is-case-an
alysis-on-normal-forms-of-lambda-terms-sufficient-to-prove-parametrici
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Parametricity properties only hold for fully parametric programs.
\begin_inset Index idx
status open

\begin_layout Plain Layout
fully parametric!program
\end_layout

\end_inset

 This restriction prohibits, for instance, any use of 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
GADT
\end_layout

\end_inset

GADTs (
\begin_inset Quotes eld
\end_inset

unfunctors
\begin_inset Quotes erd
\end_inset

),
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
unfunctor
\end_layout

\end_inset

 subtyping,
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
subtyping
\end_layout

\end_inset

 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

null
\end_layout

\end_inset

 values, mutable values, multithreading, exceptions, run-time JVM reflection,
 or calling any external libraries that are not known to be fully parametric.
 Code that uses those features of Scala will not be covered by the parametricity
 theorem proved in this Appendix and may fail naturality laws.
 
\end_layout

\begin_layout Standard
An example of such code is the following function:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def headOptBad[A]: List[A] => Option[A] = {
\end_layout

\begin_layout Plain Layout

  case Nil                   => None
\end_layout

\begin_layout Plain Layout

  case (head: Int) :: tail   => Some((head + 100).asInstanceOf[A])
\end_layout

\begin_layout Plain Layout

  case head :: tail          => Some(head)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

This code has no side effects, is purely functional and referentially
\begin_inset Index idx
status open

\begin_layout Plain Layout
referential transparency
\end_layout

\end_inset

 transparent.
 But it is clear that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

headOptBad[A]
\end_layout

\end_inset

 does not work in the same way for all type parameters 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

.
 When 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 is set to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Int
\end_layout

\end_inset

, the behavior is different than for all other types.
 This leads to a failure of the naturality law:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

scala> headOptBad[String](  List(1, 2, 3).map(x => s"value = $x")  )
\end_layout

\begin_layout Plain Layout

res0: Option[String] = Some(value = 1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> headOptBad[Int]( List(1, 2, 3) ).map(x => s"value = $x")
\end_layout

\begin_layout Plain Layout

res1: Option[String] = Some(value = 101)
\end_layout

\end_inset

So, full parametricity is a stronger restriction on code than referential
 transparency.
\end_layout

\begin_layout Standard
Here is an example of fully parametric code that uses all nine constructions:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def fmap[A, B](f: A => B): List[(A, A)] => List[(B, B)] = {      // 3
\end_layout

\begin_layout Plain Layout

   case Nil            => Nil
\end_layout

\begin_layout Plain Layout

//   8   1                1,7 
\end_layout

\begin_layout Plain Layout

   case head :: tail   => (f (head._1), f (head._2)) :: fmap(f)(tail)
\end_layout

\begin_layout Plain Layout

//   8       6             2 4     6  5 2 4     6    7   9
\end_layout

\begin_layout Plain Layout

}  // This code uses each of the nine fully parametric constructions.
\end_layout

\end_inset

For instance, the expression 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

head :: tail
\end_layout

\end_inset

 is a tuple pattern that extracts the two parts of a tuple (construction
 6).
 The recursive call 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap(f)(tail)
\end_layout

\end_inset

 corresponds to construction 9.
\end_layout

\begin_layout Section
Practical use of parametricity properties
\end_layout

\begin_layout Subsection
Naturality and dinaturality laws
\begin_inset CommandInset label
LatexCommand label
name "sec:Naturality-laws-for-fully-parametric-functions"

\end_inset

 
\end_layout

\begin_layout Standard
Parametricity properties apply to fully parametric expressions (most often,
 functions) with at least one type parameter.
 Examples of such functions are the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

map
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

filter
\end_layout

\end_inset

, and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fold
\end_layout

\end_inset

 methods for the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Option
\end_layout

\end_inset

 functor (denoted by 
\begin_inset Formula $\text{Opt}^{A}\triangleq\bbnum 1+A$
\end_inset

), with the following type signatures:
\begin_inset Formula 
\begin{align*}
 & \text{fmap}_{\text{Opt}}^{A,B}:\left(A\rightarrow B\right)\rightarrow\text{Opt}^{A}\rightarrow\text{Opt}^{B}\quad,\\
 & \text{filt}_{\text{Opt}}^{A}:\left(A\rightarrow\bbnum 2\right)\rightarrow\text{Opt}^{A}\rightarrow\text{Opt}^{A}\quad,\\
 & \text{fold}_{\text{Opt}}^{A,B}:B\times\left(A\times B\rightarrow B\right)\rightarrow\text{Opt}^{A}\rightarrow B\quad.
\end{align*}

\end_inset

These methods satisfy appropriate naturality laws — one law per type parameter.
 
\end_layout

\begin_layout Standard
When a function's type signature is that of a 
\emph on
natural transformation
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
natural transformation
\end_layout

\end_inset

 between functors or between contrafunctors, the naturality laws have the
 form derived in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Naturality-laws-and-natural-transformations"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 If 
\begin_inset Formula $p:\forall A.\,G^{A}\rightarrow H^{A}$
\end_inset

 where 
\begin_inset Formula $G^{\bullet}$
\end_inset

 and 
\begin_inset Formula $H^{\bullet}$
\end_inset

 are functors then 
\begin_inset Formula $p$
\end_inset

 obeys the naturality law:
\begin_inset Formula 
\begin{equation}
\text{for all }A,B,f^{:A\rightarrow B}\quad:\quad p^{A}\bef f^{\uparrow H}=f^{\uparrow G}\bef p^{B}\quad.\label{eq:naturality-law-for-functors}
\end{equation}

\end_inset

If 
\begin_inset Formula $p:\forall A.\,G^{A}\rightarrow H^{A}$
\end_inset

 where 
\begin_inset Formula $G^{\bullet}$
\end_inset

 and 
\begin_inset Formula $H^{\bullet}$
\end_inset

 are contrafunctors then 
\begin_inset Formula $p$
\end_inset

 obeys the naturality law:
\begin_inset Formula 
\begin{equation}
\text{for all }A,B,f^{:A\rightarrow B}\quad:\quad f^{\downarrow G}\bef p^{A}=p^{B}\bef f^{\downarrow H}\quad.\label{eq:naturality-law-for-contrafunctors}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
For example, if we fix the type parameter 
\begin_inset Formula $A$
\end_inset

 in the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 method, we obtain a type signature of the form 
\begin_inset Formula $F^{B}\rightarrow G^{B}$
\end_inset

 where 
\begin_inset Formula $F^{\bullet}$
\end_inset

 and 
\begin_inset Formula $G^{\bullet}$
\end_inset

 are functors:
\begin_inset Formula 
\[
\text{fmap}_{\text{Opt}}^{A,B}:F^{B}\rightarrow G^{B}\quad,\quad\quad F^{B}\triangleq A\rightarrow B\quad,\quad\quad G^{B}\triangleq\text{Opt}^{A}\rightarrow\text{Opt}^{B}\quad.
\]

\end_inset

The corresponding naturality law is:
\begin_inset Formula 
\[
\text{fmap}_{\text{Opt}}\bef f^{\uparrow G}=f^{\uparrow F}\bef\text{fmap}_{\text{Opt}}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
Fixing the type parameter 
\begin_inset Formula $B$
\end_inset

 in 
\begin_inset Formula $\text{fold}_{\text{Opt}}^{A,B}\,$
\end_inset

 produces a type signature of the form:
\begin_inset Formula 
\[
\text{fold}_{\text{Opt}}^{A}:H^{A}\rightarrow K^{A}\quad,\quad\quad H^{A}\triangleq B\times\left(A\times B\rightarrow B\right)\quad,\quad\quad K^{A}\triangleq\text{Opt}^{A}\rightarrow B\quad,
\]

\end_inset

where 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

 are contrafunctors.
 The corresponding naturality law is:
\begin_inset Formula 
\[
f^{\downarrow H}\bef\text{fold}_{\text{Opt}}=\text{fold}_{\text{Opt}}\bef f^{\downarrow K}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
However, fixing the type parameter 
\begin_inset Formula $A$
\end_inset

 in 
\begin_inset Formula $\text{fold}_{\text{Opt}}^{A,B}$
\end_inset

 gives a type signature that is 
\emph on
not
\emph default
 of the form 
\begin_inset Formula $\forall B.\,P^{B}\rightarrow Q^{B}$
\end_inset

 (with any functors or contrafunctors 
\begin_inset Formula $P$
\end_inset

, 
\begin_inset Formula $Q$
\end_inset

) because 
\begin_inset Formula $B$
\end_inset

 is used in too many places.
 In general, it is not obvious how to write naturality laws for transformations
 with such type signatures.
 
\end_layout

\begin_layout Standard
To make progress, note that each occurrence of a type parameter in a type
 signature must be either in a covariant or in a contravariant position.
 So, any fully parametric type signature may be written in the form 
\begin_inset Formula $\forall A.\,P^{A,A}$
\end_inset

 using some 
\emph on
profunctor
\emph default
 
\begin_inset Formula $P^{X,Y}$
\end_inset

 (contravariant in 
\begin_inset Formula $X$
\end_inset

 and covariant in 
\begin_inset Formula $Y$
\end_inset

).
 For instance, we can write in this way the type signature of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fold
\end_layout

\end_inset

 with the parameter 
\begin_inset Formula $A$
\end_inset

 fixed:
\begin_inset Formula 
\[
\text{fold}_{\text{Opt}}^{A,B}:P^{B,B}\quad,\quad\quad\text{where}\quad P^{X,Y}\triangleq X\times(A\times Y\rightarrow X)\rightarrow\text{Opt}^{A}\rightarrow Y\quad.
\]

\end_inset

The profunctor 
\begin_inset Formula $P^{X,Y}$
\end_inset

 is complicated but the form of the type signature (
\begin_inset Formula $P^{B,B}$
\end_inset

) is simpler.
\end_layout

\begin_layout Standard
Given a fully parametric expression 
\begin_inset Formula $p$
\end_inset

 with the type signature 
\begin_inset Formula $p:\forall A.\,P^{A,A}$
\end_inset

, where 
\begin_inset Formula $P^{X,Y}$
\end_inset

 is some profunctor, one can write the 
\series bold
wedge law
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
wedge law!of profunctors
\end_layout

\end_inset

 of 
\begin_inset Formula $p$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 9
placement l
overhang 0in
width "26col%"
status open

\begin_layout Plain Layout
\begin_inset VSpace -130baselineskip%
\end_inset


\begin_inset Preview

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{2.0pc}\xyScaleX{3.0pc}\forall Z.\,P^{Z,Z}\ar[d]\sp(0.4){\text{set }Z=A}\ar[r]\sp(0.55){\text{set }Z=B} & P^{B,B}\ar[d]\sp(0.37){f^{\downarrow P^{\bullet,B}}}\\
P^{A,A}\ar[r]\sp(0.55){f^{\uparrow P^{A,\bullet}}} & P^{A,B}
}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace -40baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset VSpace -80baselineskip%
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\text{for all }A,B,f^{:A\rightarrow B}\quad:\quad p^{A}\triangleright f^{\uparrow P^{A,\bullet}}=p^{B}\triangleright f^{\downarrow P^{\bullet,B}}\quad.\label{eq:wedge-law-for-profunctors}
\end{equation}

\end_inset


\begin_inset VSpace -80baselineskip%
\end_inset


\end_layout

\begin_layout Standard
\noindent
The diagram is read by starting from a value 
\begin_inset Formula $p$
\end_inset

 of type 
\begin_inset Formula $\forall Z.\,P^{Z,Z}$
\end_inset

.
 We set 
\begin_inset Formula $Z=A$
\end_inset

 and 
\begin_inset Formula $Z=B$
\end_inset

 in 
\begin_inset Formula $p$
\end_inset

 and obtain two values, 
\begin_inset Formula $p^{A}$
\end_inset

 and 
\begin_inset Formula $p^{B}$
\end_inset

, of types 
\begin_inset Formula $P^{A,A}$
\end_inset

 and 
\begin_inset Formula $P^{B,B}$
\end_inset

 respectively.
 The values 
\begin_inset Formula $p^{A}$
\end_inset

 and 
\begin_inset Formula $p^{B}$
\end_inset

 must then satisfy Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\end_layout

\begin_layout Standard
We will prove later in this Appendix that the wedge law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is a consequence of the parametricity theorem.
 In turn, the naturality laws
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-functors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-contrafunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) are consequences of the wedge law, as will be shown in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-naturality-laws-from-wedge-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

 below.
\end_layout

\begin_layout Standard
The wedge law is not easy to use in practice because the profunctors 
\begin_inset Formula $P$
\end_inset

 are often complicated (as the example of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fold
\end_layout

\end_inset

 shows).
 When we need to derive naturality laws for 
\emph on
function types
\emph default
, it helps to specialize the wedge law to the case 
\begin_inset Formula $P^{A,A}=G^{A,A}\rightarrow H^{A,A}$
\end_inset

, where 
\begin_inset Formula $G^{X,Y}$
\end_inset

 and 
\begin_inset Formula $H^{X,Y}$
\end_inset

 are some profunctors.
 The result (also derived in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-naturality-laws-from-wedge-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is the 
\series bold
dinaturality law
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
dinaturality law
\end_layout

\end_inset

:
\begin_inset Formula 
\begin{equation}
\text{for all }A,B,f^{:A\rightarrow B}\quad:\quad f^{\downarrow G^{\bullet,A}}\bef p^{A}\bef f^{\uparrow H^{A,\bullet}}=f^{\uparrow G^{B,\bullet}}\bef p^{B}\bef f^{\downarrow H^{\bullet,B}}\quad.\label{eq:dinaturality-law-for-profunctors}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement l
overhang 0in
width "38col%"
status open

\begin_layout Plain Layout
\begin_inset VSpace -225baselineskip%
\end_inset


\begin_inset Preview

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{1.5pc}\xyScaleX{2.0pc} & G^{A,A}\ar[r]\sb(0.5){p^{A}} & H^{A,A}\ar[rd]\sb(0.4){f^{\uparrow H^{A,\bullet}}}\\
G^{B,A}\negthickspace\negthickspace\negthickspace\ar[rd]\sp(0.55){\;\;f^{\uparrow G^{B,\bullet}}}\ar[ru]\sb(0.6){f^{\downarrow G^{\bullet,A}}} &  &  & \negthickspace\negthickspace\negthickspace H^{A,B}\\
 & G^{B,B}\ar[r]\sp(0.5){p^{B}} & H^{B,B}\ar[ru]\sp(0.45){f^{\downarrow H^{\bullet,B}}}
}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace -170baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The diagram at left illustrates the dinaturality law as an equation between
 functions of type 
\begin_inset Formula $G^{B,A}\rightarrow H^{A,B}$
\end_inset

.
 To build up intuition for that law, notice that Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) combines the laws
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-functors"
plural "false"
caps "false"
noprefix "false"

\end_inset

)–(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-contrafunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) in the way required for all types to match.
 On the other hand, the laws
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-functors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-contrafunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) will follow from Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) when 
\begin_inset Formula $G^{A,A}$
\end_inset

 and 
\begin_inset Formula $H^{A,A}$
\end_inset

 are both functors or both contrafunctors with respect to 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Standard
Functions 
\begin_inset Formula $p:\forall A.\,G^{A,A}\rightarrow H^{A,A}$
\end_inset

 satisfying Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) are called 
\series bold
dinatural transformations
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
dinatural transformation
\end_layout

\end_inset

.
 The property of dinaturality is weaker than naturality.

\emph on
 
\emph default
A 
\emph on
natural
\emph default
 transformation between profunctors 
\begin_inset Formula $G$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

 would be a function 
\begin_inset Formula $t$
\end_inset

 with type signature 
\begin_inset Formula $\forall(A,B).\,G^{A,B}\rightarrow H^{A,B}$
\end_inset

 defined for arbitrary (not necessarily equal) type parameters 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

.
 If we are given a transformation 
\begin_inset Formula $p^{A}:G^{A,A}\rightarrow H^{A,A}$
\end_inset

 then, as a rule, it will be impossible to extend the code of 
\begin_inset Formula $p^{A}$
\end_inset

 to some 
\begin_inset Formula $t^{A,B}:G^{A,B}\rightarrow H^{A,B}$
\end_inset

 that works with arbitrary type parameters 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Standard
With the formulas
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-functors"
plural "false"
caps "false"
noprefix "false"

\end_inset

)–(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

), we can write naturality laws more quickly, starting from any given type
 signature of the form 
\begin_inset Formula $\forall A.\,P^{A,A}$
\end_inset

.
 The following examples show how we may derive naturality laws by specializing
 the general law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) to certain profunctors 
\begin_inset Formula $G$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Example 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Example-derive-naturality-of-filter-from-dinaturality"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-derive-naturality-of-filter-from-dinaturality"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (naturality law of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

filter
\end_layout

\end_inset

)
\begin_inset Index idx
status open

\begin_layout Plain Layout
solved examples
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To derive the naturality law of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

filter
\end_layout

\end_inset

, express 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

filter
\end_layout

\end_inset

's type signature through profunctors 
\begin_inset Formula $G$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

 as:
\begin_inset Formula 
\[
\text{filt}_{F}^{A}:G^{A,A}\rightarrow H^{A,A}\quad,\quad\quad G^{X,Y}\triangleq(X\rightarrow\bbnum 2)\quad,\quad\quad H^{X,Y}\triangleq F^{X}\rightarrow F^{Y}\quad,
\]

\end_inset

and then write the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\begin_inset Formula 
\begin{equation}
f^{\downarrow G^{\bullet,A}}\bef\text{filt}_{F}^{A}\bef f^{\uparrow H^{A,\bullet}}\overset{?}{=}f^{\uparrow G^{B,\bullet}}\bef\text{filt}_{F}^{B}\bef f^{\downarrow H^{\bullet,B}}\quad.\label{eq:filter-law-via-dinatural-transformation-derivation1}
\end{equation}

\end_inset

It remains to substitute the code for the liftings using the specific types
 of 
\begin_inset Formula $H$
\end_inset

 and 
\begin_inset Formula $G$
\end_inset

:
\begin_inset Formula 
\begin{align*}
(f^{:A\rightarrow B})^{\downarrow G^{\bullet,A}}=p^{:B\rightarrow\bbnum 2}\rightarrow f\bef p\quad, & \quad\quad f^{\uparrow G^{B,\bullet}}=\text{id}\quad,\\
(f^{:A\rightarrow B})^{\downarrow H^{\bullet,B}}=q^{:F^{B}\rightarrow F^{B}}\rightarrow f^{\uparrow F}\bef q\quad, & \quad\quad f^{\uparrow H^{A,\bullet}}=q^{:F^{A}\rightarrow F^{A}}\rightarrow q\bef f^{\uparrow F}\quad.
\end{align*}

\end_inset

Then we rewrite Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:filter-law-via-dinatural-transformation-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) as:
\begin_inset Formula 
\[
(p\rightarrow f\bef p)\bef\text{filt}_{F}\bef(q\rightarrow q\bef f^{\uparrow F})\overset{?}{=}\text{id}\bef\text{filt}_{F}\bef(q\rightarrow f^{\uparrow F}\bef q)\quad.
\]

\end_inset

To simplify the form of the naturality law, apply both sides to an arbitrary
 
\begin_inset Formula $p^{:P^{B,A}}=p^{:B\rightarrow\bbnum 2}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & p\triangleright(p\rightarrow f\bef p)\bef\text{filt}_{F}\bef(q\rightarrow q\bef f^{\uparrow F})\\
\triangleright\text{-notation}:\quad & \quad=\gunderline{p\triangleright(p}\rightarrow f\bef p)\triangleright\text{filt}_{F}\triangleright(q\rightarrow q\bef f^{\uparrow F})\\
\text{apply functions}:\quad & \quad=\gunderline{(f\bef p)\triangleright\text{filt}_{F}}\triangleright(q\rightarrow q\bef f^{\uparrow F})=\gunderline{\text{filt}_{F}(f\bef p)\triangleright(q}\rightarrow q\bef f^{\uparrow F})=\text{filt}_{F}(f\bef p)\bef f^{\uparrow F}\quad,\\
\text{right-hand side}:\quad & p\triangleright\gunderline{\text{id}\bef}\text{filt}_{F}\bef(q\rightarrow f^{\uparrow F}\bef q)=p\triangleright\text{filt}_{F}\triangleright(q\rightarrow f^{\uparrow F}\bef q)\\
 & \quad=\gunderline{\text{filt}_{F}(p)\triangleright(q}\rightarrow f^{\uparrow F}\bef q)=f^{\uparrow F}\bef\text{filt}_{F}(p)\quad.
\end{align*}

\end_inset

We obtained the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-of-filter"
plural "false"
caps "false"
noprefix "false"

\end_inset

) of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

filter
\end_layout

\end_inset

:
\begin_inset Formula 
\[
\text{filt}_{F}(f\bef p)\bef f^{\uparrow F}=f^{\uparrow F}\bef\text{filt}_{F}(p)\quad.
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Example 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Example-derive-naturality-of-fold-from-dinaturality"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-derive-naturality-of-fold-from-dinaturality"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (naturality law of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fold
\end_layout

\end_inset

)
\end_layout

\begin_layout Standard
To derive the naturality law of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fold
\end_layout

\end_inset

 with respect to the type parameter 
\begin_inset Formula $B$
\end_inset

, we write the type signature of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fold
\end_layout

\end_inset

 as 
\begin_inset Formula $G^{B,B}\rightarrow H^{B,B}$
\end_inset

 with some profunctors 
\begin_inset Formula $G$
\end_inset

, 
\begin_inset Formula $H$
\end_inset

:
\begin_inset Formula 
\[
\text{fold}_{F}^{A,B}:G^{B,B}\rightarrow H^{B,B}\quad\quad\text{where}\quad G^{X,Y}\triangleq Y\times(A\times X\rightarrow Y)\quad\text{ and }\quad H^{X,Y}\triangleq F^{A}\rightarrow Y\quad.
\]

\end_inset

Since the type parameter 
\begin_inset Formula $A$
\end_inset

 is fixed, let us write the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) with an arbitrary function 
\begin_inset Formula $f^{:B\rightarrow C}$
\end_inset

:
\begin_inset Formula 
\begin{equation}
(f^{:B\rightarrow C})^{\downarrow G^{\bullet,B}}\bef\text{fold}_{F}^{B}\bef f^{\uparrow H^{B,\bullet}}\overset{!}{=}f^{\uparrow G^{C,\bullet}}\bef\text{fold}_{F}^{C}\bef f^{\downarrow H^{\bullet,C}}\quad.\label{eq:fold-naturality-from-profunctor-derivation2}
\end{equation}

\end_inset

The lifting code required for the profunctors 
\begin_inset Formula $G^{X,Y}\triangleq Y\times\left(A\times X\rightarrow Y\right)$
\end_inset

 and 
\begin_inset Formula $H^{X,Y}\triangleq F^{A}\rightarrow Y$
\end_inset

 is:
\begin_inset Formula 
\begin{align*}
(f^{:B\rightarrow C})^{\downarrow G^{\bullet,B}}=\text{id}^{B}\boxtimes(h^{:A\times C\rightarrow B}\rightarrow a^{:A}\times b^{:B}\rightarrow h(a\times f(b)))\quad, & \quad\quad f^{\uparrow G^{C,\bullet}}=f\boxtimes(h^{:A\times C\rightarrow B}\rightarrow h\bef f)\quad,\\
(f^{:B\rightarrow C})^{\downarrow H^{\bullet,C}}=\text{id}\quad, & \quad\quad f^{\uparrow H^{B,\bullet}}=q^{:F^{A}\rightarrow B}\rightarrow q\bef f\quad.
\end{align*}

\end_inset

Substituting this code into the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:fold-naturality-from-profunctor-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and applying to an arbitrary 
\begin_inset Formula $p^{:G^{C,B}}=z^{:B}\times h^{:A\times C\rightarrow B}$
\end_inset

, we get:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & (z\times h)\triangleright\gunderline{(f^{:B\rightarrow C})^{\downarrow G^{\bullet,B}}}\bef\text{fold}_{F}\bef\gunderline{f^{\uparrow H^{B,\bullet}}}\\
\text{definitions of liftings}:\quad & \quad=(z\times h)\triangleright(\text{id}\boxtimes(h\rightarrow a\times b\rightarrow h(a\times f(b))))\gunderline{\bef}\text{fold}_{F}\gunderline{\bef}(q\rightarrow q\bef f)\\
\triangleright\text{-notation}:\quad & \quad=(z\times h)\triangleright(\text{id}\boxtimes(h\rightarrow a\times b\rightarrow h(a\times f(b))))\triangleright\text{fold}_{F}\triangleright(q\rightarrow q\bef f)\\
\text{apply functions}:\quad & \quad=\text{fold}_{F}(z\times(a\times b\rightarrow h(a\times f(b))))\bef f\quad,\\
\text{right-hand side}:\quad & (z\times h)\triangleright\gunderline{f^{\uparrow G^{C,\bullet}}}\bef\text{fold}_{F}\bef\gunderline{f^{\downarrow H^{\bullet,C}}}=(z\times h)\triangleright(f\boxtimes(h^{:A\times C\rightarrow B}\rightarrow h\bef f))\bef\text{fold}_{F}\bef\text{id}\\
\text{apply functions}:\quad & \quad=\text{fold}_{F}(f(z)\times(h\bef f))\quad.
\end{align*}

\end_inset

We obtain the following law of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fold
\end_layout

\end_inset

:
\begin_inset Formula 
\[
\text{fold}_{F}(f(z)\times(h\bef f))=\text{fold}_{F}(z\times(a\times b\rightarrow h(a\times f(b))))\bef f\quad.
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-naturality-laws-from-wedge-law"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-naturality-laws-from-wedge-law"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The laws
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-functors"
plural "false"
caps "false"
noprefix "false"

\end_inset

)–
\begin_inset Note Note
status open

\begin_layout Plain Layout
(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-contrafunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and the dinaturality law
\begin_inset space ~
\end_inset


\end_layout

\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) are special cases of the wedge law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
We assume that the wedge law holds for any values 
\begin_inset Formula $p$
\end_inset

 of type 
\begin_inset Formula $\forall A.\,P^{A,A}$
\end_inset

.
\end_layout

\begin_layout Standard
To prove Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-functors"
plural "false"
caps "false"
noprefix "false"

\end_inset

), we define 
\begin_inset Formula $P^{X,Y}\triangleq G^{X}\rightarrow H^{Y}$
\end_inset

.
 The two liftings of a function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 to 
\begin_inset Formula $P$
\end_inset

 are:
\begin_inset Formula 
\[
f^{\uparrow P^{A,\bullet}}=p^{:G^{A}\rightarrow H^{A}}\rightarrow p\bef f^{\uparrow H}\quad,\quad\quad f^{\downarrow P^{\bullet,B}}=p^{:G^{B}\rightarrow H^{B}}\rightarrow f^{\uparrow G}\bef p\quad.
\]

\end_inset

So, the wedge law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) gives:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & p^{A}\triangleright f^{\uparrow P^{A,\bullet}}=p^{A}\bef f^{\uparrow H}\quad,\\
\text{right-hand side}:\quad & p^{B}\triangleright f^{\downarrow P^{\bullet,B}}=f^{\uparrow G}\bef p^{B}\quad.
\end{align*}

\end_inset

We obtain 
\begin_inset Formula $p^{A}\bef f^{\uparrow H}=f^{\uparrow G}\bef p^{B}$
\end_inset

, which is the same as Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-functors"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
To prove Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-contrafunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

), we define 
\begin_inset Formula $P^{X,Y}\triangleq G^{Y}\rightarrow H^{X}$
\end_inset

.
 The two liftings of a function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 to 
\begin_inset Formula $P$
\end_inset

 are:
\begin_inset Formula 
\[
f^{\uparrow P^{A,\bullet}}=p^{:G^{A}\rightarrow H^{A}}\rightarrow f^{\downarrow G}\bef p\quad,\quad\quad f^{\downarrow P^{\bullet,B}}=p^{:G^{B}\rightarrow H^{B}}\rightarrow p\bef f^{\downarrow H}\quad.
\]

\end_inset

So, the wedge law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) gives:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & p^{A}\triangleright f^{\uparrow P^{A,\bullet}}=f^{\downarrow G}\bef p^{A}\quad,\\
\text{right-hand side}:\quad & p^{B}\triangleright f^{\downarrow P^{\bullet,B}}=p^{B}\bef f^{\downarrow H}\quad.
\end{align*}

\end_inset

We obtain 
\begin_inset Formula $f^{\downarrow G}\bef p^{A}=p^{B}\bef f^{\downarrow H}$
\end_inset

, which is the same as Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-contrafunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
To prove Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

), we define 
\begin_inset Formula $P^{X,Y}\triangleq G^{Y,X}\rightarrow H^{X,Y}$
\end_inset

.
 Note that we need to swap 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $Y$
\end_inset

 in 
\begin_inset Formula $G^{Y,X}$
\end_inset

 in order to conform to the required variance of 
\begin_inset Formula $P^{X,Y}$
\end_inset

 (contravariant in 
\begin_inset Formula $X$
\end_inset

 and covariant in 
\begin_inset Formula $Y$
\end_inset

).
 
\end_layout

\begin_layout Standard
The two liftings of a function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 to 
\begin_inset Formula $P$
\end_inset

 are expressed as:
\begin_inset Formula 
\[
f^{\uparrow P^{A,\bullet}}=p^{:G^{A,A}\rightarrow H^{A,A}}\rightarrow f^{\downarrow G^{\bullet,A}}\bef p\bef f^{\uparrow H^{A,\bullet}}\quad,\quad\quad f^{\downarrow P^{\bullet,B}}=p^{:G^{B,B}\rightarrow H^{B,B}}\rightarrow f^{\uparrow G^{B,\bullet}}\bef p\bef f^{\downarrow H^{\bullet,B}}\quad.
\]

\end_inset

So, the wedge law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) gives:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & p^{A}\triangleright f^{\uparrow P^{A,\bullet}}=f^{\downarrow G^{\bullet,A}}\bef p^{A}\bef f^{\uparrow H^{A,\bullet}}\quad,\\
\text{right-hand side}:\quad & p^{B}\triangleright f^{\downarrow P^{\bullet,B}}=f^{\uparrow G^{B,\bullet}}\bef p^{B}\bef f^{\downarrow H^{\bullet,B}}\quad.
\end{align*}

\end_inset

We obtain 
\begin_inset Formula $f^{\downarrow G^{\bullet,A}}\bef p^{A}\bef f^{\uparrow H^{A,\bullet}}=f^{\uparrow G^{B,\bullet}}\bef p^{B}\bef f^{\downarrow H^{\bullet,B}}$
\end_inset

, which is the same as Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Subsection
Uniqueness of functor and contrafunctor liftings
\begin_inset CommandInset label
LatexCommand label
name "sec:Uniqueness-of-functor-and-contrafunctor"

\end_inset

 
\end_layout

\begin_layout Standard
All the laws shown here need to use function liftings such as 
\begin_inset Formula $f^{\uparrow G}$
\end_inset

 or 
\begin_inset Formula $f^{\uparrow P^{A,\bullet}}$
\end_inset

.
 How are these liftings defined? Sections
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:f-Functor-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:f-Contrafunctor-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

 derived lawful and fully parametric implementations of the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

cmap
\end_layout

\end_inset

 methods for all functors and contrafunctors as long as they are built up
 from the six type constructions.
 The naturality laws obtained from the parametricity theorem must use precisely
 those 
\begin_inset Quotes eld
\end_inset

standard
\begin_inset Quotes erd
\end_inset

 implementations of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

cmap
\end_layout

\end_inset

 because the proof of the parametricity theorem significantly depends on
 the code of those implementations.
\end_layout

\begin_layout Standard
The structure of a given fully parametric type constructor 
\begin_inset Formula $F^{A}$
\end_inset

 dictates a unique implementation of a lifting 
\begin_inset Formula $f^{\uparrow P}$
\end_inset

 or 
\begin_inset Formula $f^{\downarrow P}$
\end_inset

.
 Let us summarize these implementations for the six type constructions:
\end_layout

\begin_layout Paragraph
Constant type
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{A}\triangleq Z$
\end_inset

 where 
\begin_inset Formula $Z$
\end_inset

 is a fixed type then 
\begin_inset Formula $f^{\uparrow F}=\text{id}^{:Z\rightarrow Z}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Type parameter
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{A}\triangleq A$
\end_inset

 then 
\begin_inset Formula $f^{\uparrow F}=f$
\end_inset

.
 If 
\begin_inset Formula $F^{A}\triangleq G^{H^{A}}$
\end_inset

 then 
\begin_inset Formula $f^{\uparrow F}=(f^{\uparrow H})^{\uparrow G}$
\end_inset

 if both 
\begin_inset Formula $G$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

 are functors and 
\begin_inset Formula $f^{\uparrow F}=(f^{\downarrow H})^{\downarrow G}$
\end_inset

 if both 
\begin_inset Formula $G$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

 are contrafunctors.
\end_layout

\begin_layout Paragraph
Products
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{A}\triangleq G^{A}\times H^{A}$
\end_inset

 then 
\begin_inset Formula $f^{\uparrow F}=f^{\uparrow G}\boxtimes f^{\uparrow H}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Co-products
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{A}\triangleq G^{A}+H^{A}$
\end_inset

 then 
\begin_inset Formula $f^{\uparrow F}=f^{\uparrow G}\boxplus f^{\uparrow H}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Function types
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{A}\triangleq G^{A}\rightarrow H^{A}$
\end_inset

 then 
\begin_inset Formula $f^{\uparrow F}=p^{:G^{A}\rightarrow H^{A}}\rightarrow f^{\downarrow G}\bef p\bef f^{\uparrow H}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Recursive type
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{A}\triangleq S^{A,F^{A}}$
\end_inset

 then 
\begin_inset Formula $f^{\uparrow F}=f^{\uparrow S^{\bullet,F^{A}}}\bef\big(\overline{f^{\uparrow F}}\big)^{\uparrow S^{B,\bullet}}$
\end_inset

.
 Here 
\begin_inset Formula $\overline{f^{\uparrow F}}$
\end_inset

 is a recursive call to 
\begin_inset Formula $f^{\uparrow F}$
\end_inset

.
\end_layout

\begin_layout Standard
In addition, we will need a seventh type construction: the universally quantifie
d
\begin_inset Index idx
status open

\begin_layout Plain Layout
types!universally quantified
\end_layout

\end_inset

 type.
\end_layout

\begin_layout Paragraph
Quantified type
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{A}\triangleq\forall X.\,P^{X,A}$
\end_inset

 where 
\begin_inset Formula $P^{X,A}$
\end_inset

 is covariant in 
\begin_inset Formula $A$
\end_inset

 then: 
\begin_inset Formula 
\[
f^{\uparrow F}=\forall Y.\,p^{:\forall X.\,P^{X,A}}\rightarrow p^{Y}\triangleright f^{\uparrow P^{Y,\bullet}}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
It turns out that there no other lawful implementations of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 for these type constructions:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-functor-is-unique"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-functor-is-unique"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
There is only one implementation of a given functor 
\begin_inset Formula $F$
\end_inset

's 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 method that satisfies the identity, composition, and naturality laws.
 In particular, fully parametric lawful implementations of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 are unique.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:f-Functor-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

 derived lawful implementations of the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 method for all functors 
\begin_inset Formula $F$
\end_inset

 built up via the six type constructions.
 Throughout this book, this standard lifting code is denoted by 
\begin_inset Formula $\text{fmap}_{F}(f)$
\end_inset

 or by 
\begin_inset Formula $f^{\uparrow F}$
\end_inset

.
 Now suppose that there exists 
\emph on
another
\emph default
 lawful implementation of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 for 
\begin_inset Formula $F$
\end_inset

, denoted by 
\begin_inset Formula $\text{fmap}_{F}^{\prime}(f)$
\end_inset

:
\begin_inset Formula 
\[
\text{fmap}_{F}^{\prime}:\left(A\rightarrow B\right)\rightarrow F^{A}\rightarrow F^{B}\quad,\quad\quad\text{fmap}_{F}^{\prime}(f^{:A\rightarrow B})=\text{???}^{:F^{A}\rightarrow F^{B}}\quad.
\]

\end_inset

We will now show that 
\begin_inset Formula $\text{fmap}_{F}^{\prime}=\text{fmap}_{F}$
\end_inset

.
 Let us fix the type parameter 
\begin_inset Formula $A$
\end_inset

 and apply the naturality law to 
\begin_inset Formula $\text{fmap}_{F}^{\prime}$
\end_inset

 with respect to 
\begin_inset Formula $B$
\end_inset

.
 The resulting law involves an arbitrary 
\begin_inset Formula $g^{:B\rightarrow C}$
\end_inset

:
\begin_inset Formula 
\[
\text{fmap}_{F}^{\prime}(f^{:A\rightarrow B}\bef g^{:B\rightarrow C})\overset{!}{=}\text{fmap}_{F}^{\prime}(f)\bef g^{\uparrow F}\quad.
\]

\end_inset

By definition of naturality laws, the lifting 
\begin_inset Formula $g^{\uparrow F}$
\end_inset

 must use the 
\begin_inset Quotes eld
\end_inset

standard
\begin_inset Quotes erd
\end_inset

 lifting code 
\begin_inset Formula $g^{\uparrow F}\triangleq\text{fmap}_{F}(g)$
\end_inset

.
 By assumption, 
\begin_inset Formula $\text{fmap}_{F}^{\prime}$
\end_inset

 obeys the composition law, so we may write:
\begin_inset Formula 
\[
\text{fmap}_{F}^{\prime}(f\bef g)=\text{fmap}_{F}^{\prime}(f)\bef\text{fmap}_{F}^{\prime}(g)\overset{!}{=}\text{fmap}_{F}^{\prime}(f)\bef g^{\uparrow F}\quad.
\]

\end_inset

Since 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 is arbitrary, we can choose 
\begin_inset Formula $A=B$
\end_inset

 and 
\begin_inset Formula $f=\text{id}^{:B\rightarrow B}$
\end_inset

 to obtain:
\begin_inset Formula 
\[
\text{fmap}_{F}^{\prime}(\text{id})\bef\text{fmap}_{F}^{\prime}(g)\overset{!}{=}\text{fmap}_{F}^{\prime}(\text{id})\bef g^{\uparrow F}\quad.
\]

\end_inset

The identity law for 
\begin_inset Formula $\text{fmap}_{F}^{\prime}$
\end_inset

 gives 
\begin_inset Formula $\text{fmap}_{F}^{\prime}(\text{id})=\text{id}$
\end_inset

, so we can simplify the last equation to:
\begin_inset Formula 
\[
\text{fmap}_{F}^{\prime}(g)\overset{!}{=}g^{\uparrow F}=\text{fmap}_{F}(g)\quad.
\]

\end_inset

This must hold for arbitrary 
\begin_inset Formula $g^{:B\rightarrow C}$
\end_inset

, which proves that 
\begin_inset Formula $\text{fmap}_{F}^{\prime}=\text{fmap}_{F}$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-contrafunctor-is-unique"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-contrafunctor-is-unique"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Any contrafunctor 
\begin_inset Formula $H$
\end_inset

 has a unique implementation of a lawful 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

cmap
\end_layout

\end_inset

 method.
 
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
We use similar arguments as in the proof of Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-functor-is-unique"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 For any lawful alternative implementation 
\begin_inset Formula $\text{cmap}_{H}^{\prime}$
\end_inset

, the naturality law is:
\begin_inset Formula 
\[
\text{cmap}_{H}^{\prime}(f^{:A\rightarrow B}\bef g^{:B\rightarrow C})\overset{!}{=}(g^{:B\rightarrow C})^{\downarrow H}\bef\text{cmap}_{H}^{\prime}(f)\quad.
\]

\end_inset

By assumption, the identity and composition law hold for 
\begin_inset Formula $\text{cmap}_{H}^{\prime}$
\end_inset

.
 Setting 
\begin_inset Formula $f=\text{id}^{:B\rightarrow B}$
\end_inset

, we get:
\begin_inset Formula 
\[
\text{cmap}_{H}^{\prime}(\text{id}\bef g)=\text{cmap}_{H}^{\prime}(g)\overset{!}{=}g^{\downarrow H}\bef\text{cmap}_{H}^{\prime}(\text{id})=g^{\downarrow H}\quad.
\]

\end_inset

This must hold for arbitrary 
\begin_inset Formula $g^{:B\rightarrow C}$
\end_inset

, which shows that 
\begin_inset Formula $\text{cmap}_{H}^{\prime}(g)=g^{\downarrow H}=\text{cmap}_{H}(g)$
\end_inset

 as required.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
In this section, we proved that lawful implementations of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

cmap
\end_layout

\end_inset

 are unique when they are fully parametric.
 However, this does not yet prove that any implementation of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

cmap
\end_layout

\end_inset

 satisfying only the functor laws must also be fully parametric (Problem
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Problem-unique-functor-liftings"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Section
Commutativity laws for bifunctors and profunctors
\begin_inset CommandInset label
LatexCommand label
name "sec:Commutativity-laws-for-type-constructors"

\end_inset


\end_layout

\begin_layout Standard
A special property that holds as a consequence of parametricity is the bifunctor
 commutativity law
\begin_inset Index idx
status open

\begin_layout Plain Layout
commutativity law!of bifunctors
\end_layout

\end_inset


\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:f-fmap-fmap-bifunctor-commutativity"
plural "false"
caps "false"
noprefix "false"

\end_inset

) introduced in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Bifunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 If a type constructor 
\begin_inset Formula $P^{A,B}$
\end_inset

 is a functor with respect to 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 separately then the liftings with respect to the two type parameters will
 commute:
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement l
overhang 0in
width "28col%"
status open

\begin_layout Plain Layout
\begin_inset VSpace -190baselineskip%
\end_inset


\begin_inset Preview

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{2.5pc}\xyScaleX{3.0pc}P^{A,B}\ar[r]\sp(0.5){f^{\uparrow P^{\bullet,B}}}\ar[d]\sp(0.45){g^{\uparrow P^{A,\bullet}}} & P^{C,B}\ar[d]\sb(0.45){g^{\uparrow P^{C,\bullet}}}\\
P^{A,D}\ar[r]\sp(0.5){f^{\uparrow P^{\bullet,D}}} & P^{C,D}
}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace -100baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset VSpace -50baselineskip%
\end_inset


\begin_inset Formula 
\[
\text{for all }A,B,C,D,f^{:A\rightarrow C},g^{:B\rightarrow D}\quad:\quad f^{\uparrow P^{\bullet,B}}\bef g^{\uparrow P^{C,\bullet}}=g^{\uparrow P^{A,\bullet}}\bef f^{\uparrow P^{\bullet,D}}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
Similar properties hold for type constructors with any number of type parameters
 that are either covariant or contravariant with respect to each of those
 type parameters.
\end_layout

\begin_layout Standard
We will now prove that the commutativity law holds for any fully parametric
 bifunctors and profunctors.
 The proof proceeds by induction on the type structure of a given type construct
or.
\begin_inset Foot
status open

\begin_layout Plain Layout
In the blog post 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://byorgey.wordpress.com/2018/03/30/"

\end_inset


\family default
, Brent Yorgey
\begin_inset Index idx
status open

\begin_layout Plain Layout
Brent Yorgey
\end_layout

\end_inset

 gave a proof of the commutativity law for bifunctors based on the Reynolds-Wadl
er relational parametricity theorem.
 
\end_layout

\end_inset

 It turns out that the proof also requires the commutativity laws for type
 constructors with 
\emph on
contravariant
\emph default
 type parameters.
 All those proofs are completely analogous, so we will first prove the commutati
vity law for profunctors, which are type constructors with one contravariant
 and one covariant type parameter.
 The profunctor commutativity law will be used below in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-wedge-law-from-parametricity"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Proof of the profunctor commutativity law
\begin_inset CommandInset label
LatexCommand label
name "subsec:Proof-of-the-profunctor-commutativity-law"

\end_inset


\end_layout

\begin_layout Standard
Given an arbitrary type constructor 
\begin_inset Formula $P^{A,B}$
\end_inset

 contravariant with respect to 
\begin_inset Formula $A$
\end_inset

 and covariant with respect to 
\begin_inset Formula $B$
\end_inset

, we formulate the profunctor 
\series bold
commutativity law
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
commutativity law!of profunctors
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
profunctor!commutativity law
\end_layout

\end_inset

 by analogy with the bifunctor law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:f-fmap-fmap-bifunctor-commutativity"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\begin_inset Formula 
\begin{align}
\text{commutativity law of }P:\quad & \text{cmap}_{P^{\bullet,B}}(f^{:A\rightarrow C})\bef\text{fmap}_{P^{A,\bullet}}(g^{:B\rightarrow D})=\text{fmap}_{P^{C,\bullet}}(g)\bef\text{cmap}_{P^{\bullet,D}}(f)\quad,\nonumber \\
\text{in a shorter notation}:\quad & f^{\downarrow P^{\bullet,B}}\bef g^{\uparrow P^{A,\bullet}}=g^{\uparrow P^{C,\bullet}}\bef f^{\downarrow P^{\bullet,D}}\quad.\label{eq:profunctor-commutativity-law}
\end{align}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement i
overhang 0in
width "37col%"
status open

\begin_layout Plain Layout
\begin_inset VSpace -170baselineskip%
\end_inset


\begin_inset Preview

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{2.5pc}\xyScaleX{6.0pc}P^{C,B}\ar[r]\sp(0.55){\text{cmap}_{P^{\bullet,B}}(f^{:A\rightarrow C})~~~}\ar[d]\sb(0.45){\text{fmap}_{P^{C,\bullet}}(g)} & P^{A,B}\ar[d]\sb(0.45){\text{fmap}_{P^{A,\bullet}}(g^{:B\rightarrow D})}\\
P^{C,D}\ar[r]\sb(0.45){~~~~\text{cmap}_{P^{\bullet,D}}(f)} & P^{A,D}
}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace -170baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
We will now prove that Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:profunctor-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) holds for any 
\series bold
fully parametric profunctor
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
fully parametric!profunctor
\end_layout

\end_inset

 
\begin_inset Formula $P^{A,B}$
\end_inset

, i.e., a profunctor built via the six type constructions from Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:six-pure-type-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 We will assume that all liftings such as 
\begin_inset Formula $f^{\downarrow P^{\bullet,B}}$
\end_inset

 or 
\begin_inset Formula $g^{\uparrow P^{A,\bullet}}$
\end_inset

 are implemented as shown in Chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Functors,-contrafunctors,-and"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for functors and contrafunctors.
 (Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Uniqueness-of-functor-and-contrafunctor"
plural "false"
caps "false"
noprefix "false"

\end_inset

 showed that the code from Chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Functors,-contrafunctors,-and"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is the only possible lawful and fully parametric implementation of the
 liftings.)
\end_layout

\begin_layout Standard
The proof goes by induction on the type structure of 
\begin_inset Formula $P^{A,B}$
\end_inset

.
 The base case contains the first two constructions (the unit type and the
 type parameter), which gives two possibilities: 
\begin_inset Formula $P^{A,B}\triangleq\bbnum 1$
\end_inset

 (constant profunctor) and 
\begin_inset Formula $P^{A,B}\triangleq B$
\end_inset

 (identity profunctor).
 The other possibility of using a type parameter, 
\begin_inset Formula $P^{A,B}\triangleq A$
\end_inset

, does not give a profunctor since 
\begin_inset Formula $P^{A,B}$
\end_inset

 must be contravariant in 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Standard
The commutativity law holds for 
\begin_inset Formula $P^{A,B}\triangleq\bbnum 1$
\end_inset

 because all liftings are identity functions: 
\begin_inset Formula $\text{cmap}_{P^{\bullet,B}}(f)=\text{id}$
\end_inset

 and 
\begin_inset Formula $\text{fmap}_{P^{A,\bullet}}(g)=\text{id}$
\end_inset

.
 For the same reason, the law will also hold for constant profunctors 
\begin_inset Formula $P^{A,B}\triangleq Z$
\end_inset

 where 
\begin_inset Formula $Z$
\end_inset

 is a fixed type (or a type parameter other than 
\begin_inset Formula $A$
\end_inset

 or 
\begin_inset Formula $B$
\end_inset

).
\end_layout

\begin_layout Standard
For the profunctor 
\begin_inset Formula $P^{A,B}\triangleq B$
\end_inset

, the law holds because 
\begin_inset Formula $\text{cmap}_{P^{\bullet,B}}(f)=\text{id}$
\end_inset

.
 So, the base case is proved.
\end_layout

\begin_layout Standard
The inductive step looks at the outer construction in the type expression
 of 
\begin_inset Formula $P^{A,B}$
\end_inset

, which must be one of product, co-product, function, or recursion.
 These constructions create larger type expressions out of smaller ones;
 for example, 
\begin_inset Formula $P^{A,B}\triangleq\left(A\rightarrow B\right)\times B$
\end_inset

 uses the product construction with sub-expressions 
\begin_inset Formula $A\rightarrow B$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

, which can be viewed as profunctors 
\begin_inset Formula $R^{A,B}\triangleq A\rightarrow B$
\end_inset

 and 
\begin_inset Formula $S^{A,B}\triangleq B$
\end_inset

.
 The inductive assumption is that the commutativity law is already proved
 for all sub-expression types (such as 
\begin_inset Formula $R^{A,B}$
\end_inset

 or 
\begin_inset Formula $S^{A,B}$
\end_inset

).
 We will then need to prove the law for the entire type expression 
\begin_inset Formula $P^{A,B}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Product type
\end_layout

\begin_layout Standard
If the outer level of 
\begin_inset Formula $P^{A,B}$
\end_inset

 is a product, we must have 
\begin_inset Formula $P^{A,B}=R^{A,B}\times S^{A,B}$
\end_inset

 where 
\begin_inset Formula $R^{A,B}$
\end_inset

 and 
\begin_inset Formula $S^{A,B}$
\end_inset

 are some profunctors.
 The code for liftings follows from Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:functor-Statement-functor-product"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and Exercise
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:functor-Exercise-functor-laws"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\begin_inset Formula 
\[
f^{\downarrow P^{\bullet,B}}\triangleq f^{\downarrow R^{\bullet,B}}\boxtimes f^{\downarrow S^{\bullet,B}}\quad,\quad\quad g^{\uparrow P^{A,\bullet}}\triangleq g^{\uparrow R^{A,\bullet}}\boxtimes g^{\uparrow S^{A,\bullet}}\quad.
\]

\end_inset

By inductive assumption, 
\begin_inset Formula $R$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 already satisfy the commutativity law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:profunctor-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 So, we compute:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }g^{\uparrow P^{C,\bullet}}\bef f^{\downarrow P^{\bullet,D}}:\quad & \gunderline{f^{\downarrow P^{\bullet,B}}}\bef\gunderline{g^{\uparrow P^{A,\bullet}}}=\big(f^{\downarrow R^{\bullet,B}}\boxtimes f^{\downarrow S^{\bullet,B}}\big)\bef\big(g^{\uparrow R^{A,\bullet}}\boxtimes g^{\uparrow S^{A,\bullet}}\big)\\
\text{composition law~(\ref{eq:pair-product-composition-law})}:\quad & =\big(\gunderline{f^{\downarrow R^{\bullet,B}}\bef g^{\uparrow R^{A,\bullet}}}\big)\boxtimes\big(\gunderline{f^{\downarrow S^{\bullet,B}}\bef g^{\uparrow S^{A,\bullet}}}\big)\\
\text{inductive assumption}:\quad & =\big(g^{\uparrow R^{C,\bullet}}\bef f^{\downarrow R^{\bullet,D}}\big)\boxtimes\big(g^{\uparrow S^{C,\bullet}}\bef f^{\downarrow S^{\bullet,D}}\big)\\
\text{composition law~(\ref{eq:pair-product-composition-law})}:\quad & =\big(\gunderline{g^{\uparrow R^{C,\bullet}}\boxtimes g^{\uparrow S^{C,\bullet}}}\big)\bef\big(\gunderline{f^{\downarrow R^{\bullet,D}}\boxtimes f^{\downarrow S^{\bullet,D}}}\big)=g^{\uparrow P^{C,\bullet}}\bef f^{\downarrow P^{\bullet,D}}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Paragraph
Co-product type
\end_layout

\begin_layout Standard
In this case, we must have 
\begin_inset Formula $P^{A,B}=R^{A,B}+S^{A,B}$
\end_inset

 where 
\begin_inset Formula $R^{A,B}$
\end_inset

 and 
\begin_inset Formula $S^{A,B}$
\end_inset

 are some profunctors.
 The code for liftings follows from Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:functor-Statement-functor-coproduct"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and Exercise
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:functor-Exercise-functor-laws"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\begin_inset Formula 
\[
f^{\downarrow P^{\bullet,B}}\triangleq f^{\downarrow R^{\bullet,B}}\boxplus f^{\downarrow S^{\bullet,B}}=\,\begin{array}{||cc|}
f^{\downarrow R^{\bullet,B}} & \bbnum 0\\
\bbnum 0 & f^{\downarrow S^{\bullet,B}}
\end{array}\quad,\quad\quad g^{\uparrow P^{A,\bullet}}\triangleq g^{\uparrow R^{A,\bullet}}\boxplus g^{\uparrow S^{A,\bullet}}=\,\begin{array}{||cc|}
g^{\uparrow R^{A,\bullet}} & \bbnum 0\\
\bbnum 0 & g^{\uparrow S^{A,\bullet}}
\end{array}\quad.
\]

\end_inset

By inductive assumption, 
\begin_inset Formula $R$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 already satisfy the commutativity law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:profunctor-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 So, we compute:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }g^{\uparrow P^{C,\bullet}}\bef f^{\downarrow P^{\bullet,D}}:\quad & f^{\downarrow P^{\bullet,B}}\bef g^{\uparrow P^{A,\bullet}}=\,\begin{array}{||cc|}
f^{\downarrow R^{\bullet,B}} & \bbnum 0\\
\bbnum 0 & f^{\downarrow S^{\bullet,B}}
\end{array}\,\bef\,\begin{array}{||cc|}
g^{\uparrow R^{A,\bullet}} & \bbnum 0\\
\bbnum 0 & g^{\uparrow S^{A,\bullet}}
\end{array}\\
\text{matrix composition}:\quad & =\,\begin{array}{||cc|}
\gunderline{f^{\downarrow R^{\bullet,B}}\bef g^{\uparrow R^{A,\bullet}}} & \bbnum 0\\
\bbnum 0 & \gunderline{f^{\downarrow S^{\bullet,B}}\bef g^{\uparrow S^{A,\bullet}}}
\end{array}\\
\text{inductive assumption}:\quad & =\,\,\begin{array}{||cc|}
g^{\uparrow R^{C,\bullet}}\bef f^{\downarrow R^{\bullet,D}} & \bbnum 0\\
\bbnum 0 & g^{\uparrow S^{C,\bullet}}\bef f^{\downarrow S^{\bullet,D}}
\end{array}\quad.
\end{align*}

\end_inset

The right-hand side of the law, 
\begin_inset Formula $g^{\uparrow P^{C,\bullet}}\bef f^{\downarrow P^{\bullet,D}}$
\end_inset

, can be rewritten as:
\begin_inset Formula 
\begin{align*}
 & g^{\uparrow P^{C,\bullet}}\bef f^{\downarrow P^{\bullet,D}}=\,\begin{array}{||cc|}
g^{\uparrow R^{C,\bullet}} & \bbnum 0\\
\bbnum 0 & g^{\uparrow S^{C,\bullet}}
\end{array}\,\bef\,\begin{array}{||cc|}
f^{\downarrow R^{\bullet,D}} & \bbnum 0\\
\bbnum 0 & f^{\downarrow S^{\bullet,D}}
\end{array}\\
\text{matrix composition}:\quad & =\,\begin{array}{||cc|}
g^{\uparrow R^{C,\bullet}}\bef f^{\downarrow R^{\bullet,D}} & \bbnum 0\\
\bbnum 0 & g^{\uparrow S^{C,\bullet}}\bef f^{\downarrow S^{\bullet,D}}
\end{array}\quad.
\end{align*}

\end_inset

This coincides with the left-hand side of the law.
\end_layout

\begin_layout Paragraph
Function type
\end_layout

\begin_layout Standard
The type expression 
\begin_inset Formula $P^{A,B}\triangleq R^{B,A}\rightarrow S^{A,B}$
\end_inset

 (note the swapped type parameters in 
\begin_inset Formula $R^{B,A}$
\end_inset

) is contravariant in 
\begin_inset Formula $A$
\end_inset

 and covariant in 
\begin_inset Formula $B$
\end_inset

 when 
\begin_inset Formula $R^{A,B}$
\end_inset

 and 
\begin_inset Formula $S^{A,B}$
\end_inset

 are profunctors.
 The lifting code follows from Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:functor-Statement-functor-exponential"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and Exercise
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:functor-Exercise-contrafunctor-exponential"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\begin_inset Formula 
\[
(f^{:A\rightarrow C})^{\downarrow P^{\bullet,B}}\triangleq p^{:P^{C,B}}\rightarrow f^{\uparrow R^{B,\bullet}}\bef p\bef f^{\downarrow S^{\bullet,B}}\quad,\quad\quad(g^{:B\rightarrow D})^{\uparrow P^{A,\bullet}}\triangleq p^{:P^{A,B}}\rightarrow g^{\downarrow R^{\bullet,A}}\bef p\bef g^{\uparrow S^{A,\bullet}}\quad.
\]

\end_inset

By the inductive assumptions, 
\begin_inset Formula $R$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 obey the commutativity law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:profunctor-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Omitting types, we write:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & f^{\downarrow P}\bef g^{\uparrow P}=\big(p\rightarrow f^{\uparrow R}\bef p\bef f^{\downarrow S}\big)\bef\big(p\rightarrow g^{\downarrow R}\bef p\bef g^{\uparrow S}\big)\\
\text{compute composition}:\quad & =p\rightarrow\gunderline{g^{\downarrow R}\bef f^{\uparrow R}}\bef p\bef\gunderline{f^{\downarrow S}\bef g^{\uparrow S}}\\
\text{inductive assumption}:\quad & =p\rightarrow f^{\uparrow R}\bef g^{\downarrow R}\bef p\bef g^{\uparrow S}\bef f^{\downarrow S}\quad.
\end{align*}

\end_inset

The right-hand side of the law is then transformed to the same expression:
\begin_inset Formula 
\begin{align*}
 & g^{\uparrow P}\bef f^{\downarrow P}=\big(p\rightarrow g^{\downarrow R}\bef p\bef g^{\uparrow S}\big)\bef\big(p\rightarrow f^{\uparrow R}\bef p\bef f^{\downarrow S}\big)\\
\text{compute composition}:\quad & =p\rightarrow f^{\uparrow R}\bef g^{\downarrow R}\bef p\bef g^{\uparrow S}\bef f^{\downarrow S}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Paragraph
Recursive type
\end_layout

\begin_layout Standard
A recursive profunctor 
\begin_inset Formula $P$
\end_inset

 is defined using a type equation of the form:
\begin_inset Formula 
\[
P^{A,B}\triangleq S^{A,B,P^{A,B}}\quad,
\]

\end_inset

where 
\begin_inset Formula $S^{A,B,R}$
\end_inset

 must be contravariant in 
\begin_inset Formula $A$
\end_inset

 but covariant in 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $R$
\end_inset

.
 The liftings are defined by:
\begin_inset Formula 
\[
(f^{:A\rightarrow C})^{\downarrow P^{\bullet,B}}\triangleq f^{\downarrow S^{\bullet,B,P^{C,B}}}\bef\big(f^{\overline{\downarrow P^{\bullet,B}}}\big)^{\uparrow S^{A,B,\bullet}}\quad,\quad\quad(g^{:B\rightarrow D})^{\uparrow P^{A,\bullet}}\triangleq g^{\uparrow S^{A,\bullet,P^{A,B}}}\bef\big(g^{\overline{\uparrow P^{A,\bullet}}}\big)^{\uparrow S^{A,D,\bullet}}\quad.
\]

\end_inset

There are two inductive assumptions.
 First, the recursively used lifting to 
\begin_inset Formula $P^{A,B}$
\end_inset

 already satisfies the commutativity law.
 Second, the profunctor 
\begin_inset Formula $S^{A,B,R}$
\end_inset

 satisfies the commutativity law with respect to 
\emph on
any
\emph default
 two parameters (we will prove that law for covariant type parameters in
 Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Proofs-of-commutativity-for-bifunctor"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Both sides of the commutativity law are functions of type 
\begin_inset Formula $P^{C,B}\rightarrow P^{A,D}$
\end_inset

 or equivalently (if we expand the type recursion) of type 
\begin_inset Formula $S^{C,B,P^{C,B}}\rightarrow S^{A,D,P^{A,D}}$
\end_inset

.
 To avoid mistakes, we write out the type parameters in this computation:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }g^{\uparrow P^{C,\bullet}}\bef f^{\downarrow P^{\bullet,D}}:\quad & f^{\downarrow P^{\bullet,B}}\bef g^{\uparrow P^{A,\bullet}}=f^{\downarrow S^{\bullet,B,P^{C,B}}}\bef\gunderline{\big(f^{\overline{\downarrow P^{\bullet,B}}}\big)^{\uparrow S^{A,B,\bullet}}\bef g^{\uparrow S^{A,\bullet,P^{A,B}}}}\bef\big(g^{\overline{\uparrow P^{A,\bullet}}}\big)^{\uparrow S^{A,D,\bullet}}\\
^{B,R}\text{-commutativity of }S^{A,B,R}:\quad & =\gunderline{f^{\downarrow S^{\bullet,B,P^{C,B}}}\bef g^{\uparrow S^{A,\bullet,P^{C,B}}}}\bef\big(f^{\overline{\downarrow P^{\bullet,B}}}\big)^{\uparrow S^{A,D,\bullet}}\bef\big(g^{\overline{\uparrow P^{A,\bullet}}}\big)^{\uparrow S^{A,D,\bullet}}\\
^{A,B}\text{-commutativity of }S^{A,B,R}:\quad & =g^{\uparrow S^{C,\bullet,P^{C,B}}}\bef f^{\downarrow S^{\bullet,D,P^{C,B}}}\bef\big(\gunderline{f^{\overline{\downarrow P^{\bullet,B}}}\bef g^{\overline{\uparrow P^{A,\bullet}}}}\big)^{\uparrow S^{A,D,\bullet}}\\
\text{inductive assumption}:\quad & =g^{\uparrow S^{C,\bullet,P^{C,B}}}\bef f^{\downarrow S^{\bullet,D,P^{C,B}}}\bef\big(g^{\overline{\uparrow P^{C,\bullet}}}\bef f^{\overline{\downarrow P^{\bullet,D}}}\gunderline{\big)^{\uparrow S^{A,D,\bullet}}}\\
\text{composition under }^{\uparrow S^{A,D,\bullet}}:\quad & =g^{\uparrow S^{C,\bullet,P^{C,B}}}\bef\gunderline{f^{\downarrow S^{\bullet,D,P^{C,B}}}\bef\big(g^{\overline{\uparrow P^{C,\bullet}}}\big)^{\uparrow S^{A,D,\bullet}}}\bef\big(f^{\overline{\downarrow P^{\bullet,D}}}\big)^{\uparrow S^{A,D,\bullet}}\\
^{A,R}\text{-commutativity of }S^{A,B,R}:\quad & =g^{\uparrow S^{C,\bullet,P^{C,B}}}\bef\big(g^{\overline{\uparrow P^{C,\bullet}}}\big)^{\uparrow S^{C,D,\bullet}}\bef f^{\downarrow S^{\bullet,D,P^{C,D}}}\bef\big(f^{\overline{\downarrow P^{\bullet,D}}}\big)^{\uparrow S^{A,D,\bullet}}\\
\text{definitions of liftings}:\quad & =g^{\uparrow P^{C,\bullet}}\bef f^{\downarrow P^{\bullet,D}}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
This concludes the proof of the profunctor commutativity law.
\end_layout

\begin_layout Subsection
Commutativity laws for bifunctors and bi-contrafunctors
\begin_inset CommandInset label
LatexCommand label
name "subsec:Proofs-of-commutativity-for-bifunctor"

\end_inset


\end_layout

\begin_layout Standard
A bi-contrafunctor 
\begin_inset Formula $P^{A,B}$
\end_inset

 is a type constructor contravariant with respect to both 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 The commutativity law for bi-contrafunctors is formulated as:
\begin_inset Formula 
\begin{align}
\text{commutativity law of }P:\quad & \text{cmap}_{P^{\bullet,D}}(f^{:A\rightarrow C})\bef\text{cmap}_{P^{A,\bullet}}(g^{:B\rightarrow D})=\text{cmap}_{P^{C,\bullet}}(g)\bef\text{cmap}_{P^{\bullet,B}}(f)\quad.\nonumber \\
\text{shorter notation}:\quad & f^{\downarrow P^{\bullet,D}}\bef g^{\downarrow P^{A,\bullet}}=g^{\downarrow P^{C,\bullet}}\bef f^{\downarrow P^{\bullet,B}}\quad.\label{eq:bi-contrafunctor-commutativity-law}
\end{align}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement l
overhang 0in
width "43col%"
status open

\begin_layout Plain Layout
\begin_inset VSpace -170baselineskip%
\end_inset


\begin_inset Preview

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{2.5pc}\xyScaleX{6.0pc}P^{C,D}\ar[r]\sp(0.55){\text{cmap}_{P^{\bullet,D}}(f^{:A\rightarrow C})~~~}\ar[d]\sb(0.45){\text{cmap}_{P^{C,\bullet}}(g^{:B\rightarrow D})} & P^{A,D}\ar[d]\sb(0.45){\text{cmap}_{P^{A,\bullet}}(g)}\\
P^{C,B}\ar[r]\sb(0.45){~~~~\text{cmap}_{P^{\bullet,B}}(f^{:A\rightarrow C})} & P^{A,B}
}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace -170baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Any bifunctor or bi-contrafunctor whose type expression is built up using
 the six type constructions (Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:six-pure-type-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

) will satisfy its commutativity law.
 To prove that, we need to repeat the same calculations as for profunctors
 in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Proof-of-the-profunctor-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

 except for changing 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

cmap
\end_layout

\end_inset

 into 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

fmap
\end_layout

\end_inset

 or back when needed.
 We only need to check that the proof will still work after such changes.
 Looking over the proof in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Proof-of-the-profunctor-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we find that we never used the functor or contrafunctor 
\emph on
composition law
\emph default
 for 
\begin_inset Formula $P$
\end_inset

.
 The only usage of the composition law was with respect to the type parameter
 
\begin_inset Formula $R$
\end_inset

 in the structure functor 
\begin_inset Formula $S^{A,B,R}$
\end_inset

 of the recursive type construction.
 However, in all cases 
\begin_inset Formula $S^{A,B,R}$
\end_inset

 needs to be 
\emph on
covariant
\emph default
 in 
\begin_inset Formula $R$
\end_inset

 because that is required by the recursive type equation.
 So, we are assured that the same proof with minor changes will work for
 bifunctors and bi-contrafunctors.
\end_layout

\begin_layout Standard
The same techniques and proofs apply to type constructors with more than
 two type parameters.
\begin_inset Note Note
status collapsed

\begin_layout Subsection
Properties of dinatural transformations 
\end_layout

\begin_layout Plain Layout
Now we will show that dinatural transformations can be obtained by substituting
 the type parameters of a natural transformation by some profunctors.
 Two versions of this property are proved next.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-dinatural-substitute-functor-in-natural"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-dinatural-substitute-functor-in-natural"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
Suppose 
\begin_inset Formula $u^{A}:G^{A}\rightarrow H^{A}$
\end_inset

 is a natural transformation, and suppose 
\begin_inset Formula $P^{X,Y}$
\end_inset

 is some fully parametric profunctor.
 Define the transformation:
\begin_inset Formula 
\[
t^{A}:G^{P^{A,A}}\rightarrow H^{P^{A,A}}\quad,\quad\quad t^{A}\triangleq u^{P^{A,A}}\quad,
\]

\end_inset

by using the unmodified code of the function 
\begin_inset Formula $u^{A}$
\end_inset

 with a substituted type parameter, 
\begin_inset Formula $P^{A,A}$
\end_inset

 instead of 
\begin_inset Formula $A$
\end_inset

.
 Then 
\begin_inset Formula $t$
\end_inset

 is a dinatural transformation between profunctors 
\begin_inset Formula $G^{P^{A,A}}$
\end_inset

 and 
\begin_inset Formula $H^{P^{A,A}}$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
By assumption, the naturality law of 
\begin_inset Formula $u$
\end_inset

 holds for any 
\begin_inset Formula $k^{:A\rightarrow B}$
\end_inset

:
\begin_inset Formula 
\[
k^{\uparrow G}\bef u^{B}=u^{A}\bef k^{\uparrow H}\quad.
\]

\end_inset

The naturality law of 
\begin_inset Formula $t$
\end_inset

 is an equality of functions of type 
\begin_inset Formula $G^{P^{B,A}}\rightarrow H^{P^{A,B}}$
\end_inset

 for an arbitrary 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

:
\begin_inset Formula 
\[
\big(f^{\downarrow P^{\bullet,A}}\big)^{\uparrow G}\bef t^{A}\bef\big(f^{\uparrow P^{\bullet,A}}\big)^{\uparrow H}\overset{?}{=}\big(f^{\uparrow P^{B,\bullet}}\big)^{\uparrow G}\bef t^{B}\bef\big(f^{\downarrow P^{\bullet,B}}\big)^{\uparrow H}\quad.
\]

\end_inset

Begin the calculation with the left-hand side of that law:
\begin_inset Formula 
\begin{align*}
\text{use }t^{A}=u^{P^{A,A}}:\quad & \big(f^{\downarrow P^{\bullet,A}}\big)^{\uparrow G}\bef\underline{t^{A}}\bef\big(f^{\uparrow P^{A,\bullet}}\big)^{\uparrow H}=\gunderline{\big(f^{\downarrow P^{\bullet,A}}\big)^{\uparrow G}\bef u^{P^{A,A}}}\bef\big(f^{\uparrow P^{A,\bullet}}\big)^{\uparrow H}\\
\text{naturality of }u:\quad & =u^{P^{B,A}}\bef\gunderline{\big(f^{\downarrow P^{\bullet,A}}\big)^{\uparrow H}\bef\big(f^{\uparrow P^{A,\bullet}}\big)^{\uparrow H}}=u^{P^{B,A}}\bef\big(f^{\downarrow P^{\bullet,A}}\bef f^{\uparrow P^{A,\bullet}}\big)^{\uparrow H}\quad.
\end{align*}

\end_inset

Now write the right-hand side:
\begin_inset Formula 
\begin{align*}
\text{use }t^{B}=u^{P^{B,B}}:\quad & \big(f^{\uparrow P^{B,\bullet}}\big)^{\uparrow G}\bef\gunderline{t^{B}}\bef\big(f^{\downarrow P^{\bullet,B}}\big)^{\uparrow H}=\gunderline{\big(f^{\uparrow P^{B,\bullet}}\big)^{\uparrow G}\bef u^{P^{B,B}}}\bef\big(f^{\downarrow P^{\bullet,B}}\big)^{\uparrow H}\\
\text{naturality of }u:\quad & =u^{P^{B,A}}\bef\gunderline{\big(f^{\uparrow P^{B,\bullet}}\big)^{\uparrow H}\bef\big(f^{\downarrow P^{\bullet,B}}\big)^{\uparrow H}}=u^{P^{B,A}}\bef\big(f^{\uparrow P^{B,\bullet}}\bef f^{\downarrow P^{\bullet,B}}\big)^{\uparrow H}\quad.
\end{align*}

\end_inset

The difference between the left-hand side and the right-hand side is now
 only in the order of applying lifted functions 
\begin_inset Formula $f$
\end_inset

.
 By the profunctor commutativity law of 
\begin_inset Formula $P$
\end_inset

, we have:
\begin_inset Formula 
\[
f^{\downarrow P^{\bullet,A}}\bef f^{\uparrow P^{A,\bullet}}=f^{\uparrow P^{B,\bullet}}\bef f^{\downarrow P^{\bullet,B}}\quad.
\]

\end_inset


\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Plain Layout
The following more general version of the same property will be also useful.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-dinatural-substitute-profunctor-in-natural"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-dinatural-substitute-profunctor-in-natural"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
Suppose 
\begin_inset Formula $G^{X,Y}$
\end_inset

 and 
\begin_inset Formula $H^{X,Y}$
\end_inset

 are some bifunctors, 
\begin_inset Formula $P^{X,Y}$
\end_inset

 and 
\begin_inset Formula $Q^{X,Y}$
\end_inset

 are some profunctors, all fully parametric, and 
\begin_inset Formula $u^{A,B}:G^{A,B}\rightarrow H^{A,B}$
\end_inset

 is a natural transformation separately in the type parameters 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 Define the transformation: 
\begin_inset Formula 
\[
t^{A}:G^{P^{A,A},Q^{A,A}}\rightarrow H^{P^{A,A},Q^{A,A}}\quad,\quad\quad t\triangleq u^{P^{A,A,},Q^{A,A}}\quad,
\]

\end_inset

by using the unmodified code of 
\begin_inset Formula $u^{A,B}$
\end_inset

 with substituted type parameters, 
\begin_inset Formula $P^{A,A}$
\end_inset

 and 
\begin_inset Formula $Q^{A,A}$
\end_inset

 instead of 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 Then 
\begin_inset Formula $t$
\end_inset

 is a dinatural transformation between profunctors 
\begin_inset Formula $G^{P^{A,A},Q^{A,A}}$
\end_inset

 and 
\begin_inset Formula $H^{P^{A,A},Q^{A,A}}$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
The assumed naturality law of 
\begin_inset Formula $u$
\end_inset

 holds separately with respect to both type parameters:
\begin_inset Formula 
\[
f^{\uparrow G^{\bullet,B}}\bef u^{B,B}=u^{A,B}\bef f^{\uparrow H^{\bullet,B}}\quad,\quad\quad f^{\uparrow G^{A,\bullet}}\bef u^{A,B}=u^{A,A}\bef f^{\uparrow H^{A,\bullet}}\quad.
\]

\end_inset

 The naturality law of 
\begin_inset Formula $t$
\end_inset

 is written, after substituting 
\begin_inset Formula $t=u$
\end_inset

, as:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & (f^{\downarrow P})^{\uparrow G^{\bullet,Q^{B,A}}}\bef(f^{\downarrow Q})^{\uparrow G^{P^{A,A},\bullet}}\bef u^{P^{A,A},Q^{A,A}}\bef(f^{\uparrow P})^{\uparrow H^{\bullet,Q^{A,A}}}\bef(f^{\uparrow Q})^{\uparrow H^{P^{A,B},\bullet}}\\
\text{right-hand side}:\quad & \quad\overset{?}{=}(f^{\uparrow P})^{\uparrow G^{\bullet,Q^{B,A}}}\bef(f^{\uparrow Q})^{\uparrow G^{P^{B,B},\bullet}}\bef u^{P^{B,B},Q^{B,B}}\bef(f^{\downarrow P})^{\uparrow H^{\bullet,Q^{B,B}}}\bef(f^{\downarrow Q})^{\uparrow H^{P^{A,B},\bullet}}\quad.
\end{align*}

\end_inset

The naturality law of 
\begin_inset Formula $u$
\end_inset

 allows us to move all 
\begin_inset Formula $G$
\end_inset

-lifted functions to the right of 
\begin_inset Formula $u$
\end_inset

, where they become 
\begin_inset Formula $H$
\end_inset

-lifted.
 The law becomes:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & u^{P^{B,A},Q^{B,A}}\bef(f^{\downarrow P})^{\uparrow H^{\bullet,Q^{B,A}}}\bef(f^{\downarrow Q})^{\uparrow H^{P^{A,A},\bullet}}\bef(f^{\uparrow P})^{\uparrow H^{\bullet,Q^{A,A}}}\bef(f^{\uparrow Q})^{\uparrow H^{P^{A,B},\bullet}}\\
\text{right-hand side}:\quad & \quad\overset{?}{=}u^{P^{B,A},Q^{B,A}}\bef(f^{\uparrow P})^{\uparrow H^{\bullet,Q^{B,A}}}\bef(f^{\uparrow Q})^{\uparrow H^{P^{B,B},\bullet}}\bef(f^{\downarrow P})^{\uparrow H^{\bullet,Q^{B,B}}}\bef(f^{\downarrow Q})^{\uparrow H^{P^{A,B},\bullet}}\quad.
\end{align*}

\end_inset

The remaining difference between the two sides is only in the application
 order of lifted functions 
\begin_inset Formula $f$
\end_inset

.
 All those liftings commute due to the profunctor and bifunctor commutativity
 laws.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Plain Layout
We have seen in Exercise
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-reasoning-1-4-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 that pair products and pair co-products of natural transformations are
 again natural.
 The same holds for dinatural and strongly dinatural transformations:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-pair-product-coproduct-dinatural"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pair-product-coproduct-dinatural"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
Given two dinatural transformations 
\begin_inset Formula $u^{:P^{A,A}\rightarrow R^{A,A}}$
\end_inset

 and 
\begin_inset Formula $v^{:Q^{A,A}\rightarrow S^{A,A}}$
\end_inset

:
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 The pair product 
\begin_inset Formula $t\triangleq u\boxtimes v$
\end_inset

 (of type 
\begin_inset Formula $P^{A,A}\times Q^{A,A}\rightarrow R^{A,A}\times S^{A,A}$
\end_inset

) is dinatural.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 The pair co-product
\begin_inset Index idx
status open

\begin_layout Plain Layout
pair co-product of functions
\end_layout

\end_inset

 
\begin_inset Formula $t\triangleq u\boxplus v$
\end_inset

 (of type 
\begin_inset Formula $P^{A,A}+Q^{A,A}\rightarrow R^{A,A}+S^{A,A}$
\end_inset

) is dinatural.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 The naturality law of 
\begin_inset Formula $t\triangleq u\boxtimes v$
\end_inset

 says that, for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

:
\begin_inset Formula 
\[
(f^{\downarrow P}\boxtimes f^{\downarrow Q})\bef(u\boxtimes v)\bef(f^{\uparrow R}\boxtimes f^{\uparrow S})\overset{?}{=}(f^{\uparrow P}\boxtimes f^{\uparrow Q})\bef(u\boxtimes v)\bef(f^{\downarrow R}\boxtimes f^{\downarrow S})\quad.
\]

\end_inset

Compute the function compositions with the definition of the pair product
 (
\begin_inset Formula $\boxtimes$
\end_inset

):
\begin_inset Formula 
\[
\big(f^{\downarrow P}\bef u\bef f^{\uparrow R}\big)\boxtimes\big(f^{\downarrow Q}\bef v\bef f^{\uparrow S}\big)\overset{?}{=}\big(f^{\uparrow P}\bef u\bef f^{\downarrow R}\big)\boxtimes\big(f^{\uparrow Q}\bef v\bef f^{\downarrow S}\big)\quad.
\]

\end_inset

The last equation holds due to the dinaturality laws of 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 The naturality law of 
\begin_inset Formula $t\triangleq u\boxplus v$
\end_inset

 says that, for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \begin{array}{|c||cc|}
 & P^{A,A} & Q^{A,A}\\
\hline P^{B,A} & f^{\downarrow P} & \bbnum 0\\
Q^{B,A} & \bbnum 0 & f^{\downarrow Q}
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & R^{A,A} & S^{A,A}\\
\hline P^{A,A} & u & \bbnum 0\\
Q^{A,A} & \bbnum 0 & v
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & R^{A,B} & S^{A,B}\\
\hline R^{A,A} & f^{\uparrow R} & \bbnum 0\\
S^{A,A} & \bbnum 0 & f^{\uparrow S}
\end{array}\\
 & \overset{?}{=}\,\begin{array}{|c||cc|}
 & P^{B,B} & Q^{B,B}\\
\hline P^{B,A} & f^{\uparrow P} & \bbnum 0\\
Q^{B,A} & \bbnum 0 & f^{\uparrow Q}
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & R^{B,B} & S^{B,B}\\
\hline P^{B,B} & u & \bbnum 0\\
Q^{B,B} & \bbnum 0 & v
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & R^{A,B} & S^{A,B}\\
\hline R^{B,B} & f^{\downarrow R} & \bbnum 0\\
S^{B,B} & \bbnum 0 & f^{\downarrow S}
\end{array}\quad.
\end{align*}

\end_inset

Compute the matrix compositions to rewrite this equation as:
\begin_inset Formula 
\[
\begin{array}{|c||cc|}
 & R^{A,B} & S^{A,B}\\
\hline P^{B,A} & f^{\downarrow P}\bef u\bef f^{\uparrow R} & \bbnum 0\\
Q^{B,A} & \bbnum 0 & f^{\downarrow Q}\bef v\bef f^{\uparrow S}
\end{array}\,\overset{?}{=}\,\begin{array}{|c||cc|}
 & R^{A,B} & S^{A,B}\\
\hline P^{B,A} & f^{\uparrow P}\bef u\bef f^{\downarrow R} & \bbnum 0\\
Q^{B,A} & \bbnum 0 & f^{\uparrow Q}\bef v\bef f^{\downarrow S}
\end{array}\quad.
\]

\end_inset

The last equation holds due to the dinaturality laws of 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-dinatural-product-of-functions"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-dinatural-product-of-functions"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 If both 
\begin_inset Formula $u:P^{A,A}\rightarrow Q^{A,A}$
\end_inset

 and 
\begin_inset Formula $v:P^{A,A}\rightarrow R^{A,A}$
\end_inset

 are dinatural then:
\begin_inset Formula 
\[
t:P^{A,A}\rightarrow Q^{A,A}\times R^{A,A}\quad,\quad\quad t\triangleq p^{:P^{A,A}}\rightarrow u(p)\times v(p)
\]

\end_inset

is also dinatural.
 
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 If both 
\begin_inset Formula $u:P^{A,A}\rightarrow R^{A,A}$
\end_inset

 and 
\begin_inset Formula $v:Q^{A,A}\rightarrow R^{A,A}$
\end_inset

 are dinatural then:
\begin_inset Formula 
\[
t:P^{A,A}+Q^{A,A}\rightarrow R^{A,A}\quad,\quad\quad t\triangleq\,\begin{array}{|c||c|}
 & R^{A,A}\\
\hline P^{A,A} & u\\
Q^{A,A} & v
\end{array}
\]

\end_inset

is also dinatural.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 The dinaturality law of 
\begin_inset Formula $t$
\end_inset

 is written as:
\begin_inset Formula 
\[
f^{\uparrow P}\bef t\bef(f^{\downarrow Q}\boxtimes f^{\downarrow R})\overset{?}{=}f^{\downarrow P}\bef t\bef(f^{\uparrow Q}\boxtimes f^{\uparrow R})\quad.
\]

\end_inset

Substituting the definition 
\begin_inset Formula $t\triangleq p\rightarrow u(p)\times v(p)$
\end_inset

, we rewrite that law as:
\begin_inset Formula 
\[
\big(p\rightarrow(p\triangleright f^{\uparrow P}\triangleright u)\times(p\triangleright f^{\uparrow P}\triangleright v)\big)\bef(f^{\downarrow Q}\boxtimes f^{\downarrow R})\overset{?}{=}\big(p\rightarrow(p\triangleright f^{\downarrow P}\triangleright u)\times(p\triangleright f^{\downarrow P}\triangleright v)\big)\big)\bef(f^{\uparrow Q}\boxtimes f^{\uparrow R})\quad.
\]

\end_inset

Expand the composition with the pair product:
\begin_inset Formula 
\[
p\rightarrow(p\triangleright f^{\uparrow P}\bef u\bef f^{\downarrow Q})\times(p\triangleright f^{\uparrow P}\bef v\bef f^{\downarrow R})\overset{?}{=}p\rightarrow(p\triangleright f^{\downarrow P}\bef u\bef f^{\uparrow Q})\times(p\triangleright f^{\downarrow P}\bef v\bef f^{\uparrow R})\quad.
\]

\end_inset

The last equation holds due to the dinaturality laws of 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 The naturality law of 
\begin_inset Formula $t$
\end_inset

 is written as:
\begin_inset Formula 
\[
\begin{array}{|c||cc|}
 & P^{A,A} & Q^{A,A}\\
\hline P^{B,A} & f^{\downarrow P} & \bbnum 0\\
Q^{B,A} & \bbnum 0 & f^{\downarrow Q}
\end{array}\,\bef\,\begin{array}{|c||c|}
 & R^{A,A}\\
\hline P^{A,A} & u\\
Q^{A,A} & v
\end{array}\,\bef f^{\uparrow R}\overset{?}{=}\,\begin{array}{|c||cc|}
 & P^{B,B} & Q^{B,B}\\
\hline P^{B,A} & f^{\uparrow P} & \bbnum 0\\
Q^{B,A} & \bbnum 0 & f^{\uparrow Q}
\end{array}\,\bef\,\begin{array}{|c||c|}
 & R^{B,B}\\
\hline P^{B,B} & u\\
Q^{B,B} & v
\end{array}\,\bef f^{\downarrow R}\quad.
\]

\end_inset

Compute the matrix compositions:
\begin_inset Formula 
\[
\begin{array}{|c||c|}
 & R^{A,B}\\
\hline P^{B,A} & f^{\downarrow P}\bef u\bef f^{\uparrow R}\\
Q^{B,A} & f^{\downarrow Q}\bef v\bef f^{\uparrow R}
\end{array}\,\overset{?}{=}\,\begin{array}{|c||c|}
 & P^{B,B}\\
\hline P^{B,A} & f^{\uparrow P}\bef u\bef f^{\downarrow R}\\
Q^{B,A} & f^{\uparrow Q}\bef v\bef f^{\downarrow R}
\end{array}\quad.
\]

\end_inset

The last equation holds due to the dinaturality laws of 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Relational formulation of parametricity
\begin_inset CommandInset label
LatexCommand label
name "sec:Parametricity-theorem-for-relations"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Relations-between-types"

\end_inset


\end_layout

\begin_layout Standard
Naturality laws are formulated using arbitrary functions 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 between arbitrary types 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 Typically, a naturality law is an equation that involves the function 
\begin_inset Formula $f$
\end_inset

 lifted to some functors.
 For instance, 
\begin_inset Formula $f^{\uparrow G}\bef t=t\bef f^{\uparrow H}$
\end_inset

 is the naturality law of a natural transformation 
\begin_inset Formula $t:\forall A.\,G^{A}\rightarrow H^{A}$
\end_inset

, where 
\begin_inset Formula $G$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

 are some functors.
\end_layout

\begin_layout Standard
To prove that naturality laws hold for any fully parametric transformation
 
\begin_inset Formula $t$
\end_inset

, we need to use induction in the structure of the code of 
\begin_inset Formula $t$
\end_inset

.
 The proof will decompose 
\begin_inset Formula $t$
\end_inset

 into smaller sub-expressions for which the naturality law should hold by
 the inductive assumption.
 Some of those sub-expressions will have types that are no longer of the
 form 
\begin_inset Formula $\forall A.\,G^{A}\rightarrow H^{A}$
\end_inset

.
 So, we need to generalize naturality laws to type signatures of the form
 
\begin_inset Formula $\forall A.\,P^{A,A}$
\end_inset

, where 
\begin_inset Formula $P^{X,Y}$
\end_inset

 is an exponential-polynomial profunctor (contravariant in 
\begin_inset Formula $X$
\end_inset

 and covariant in 
\begin_inset Formula $Y$
\end_inset

).
 
\end_layout

\begin_layout Standard
It is not possible to lift an arbitrary function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 to a function of type 
\begin_inset Formula $P^{A,A}\rightarrow P^{B,B}$
\end_inset

; for that, we would need also a function of type 
\begin_inset Formula $B\rightarrow A$
\end_inset

.
 To solve this problem, the Reynolds-Wadler approach replaces functions
 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 by arbitrary many-to-many relations (denoted by 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

) between values of types 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 It turns out that any relation 
\begin_inset Formula $r$
\end_inset

 of type 
\begin_inset Formula $A\leftrightarrow B$
\end_inset

 can be lifted to a relation (denoted by 
\begin_inset Formula $r^{\updownarrow P}$
\end_inset

) of type 
\begin_inset Formula $P^{A,A}\leftrightarrow P^{B,B}$
\end_inset

.
 The lifting operation can be defined for any exponential-polynomial profunctor
 
\begin_inset Formula $P^{\bullet,\bullet}$
\end_inset

.
 Using this technique, we will prove the 
\begin_inset Quotes eld
\end_inset

relational parametricity theorem
\begin_inset Quotes erd
\end_inset

: any fully parametric code expression (not necessarily a function) of type
 
\begin_inset Formula $\forall A.\,P^{A,A}$
\end_inset

 satisfies a specially formulated relational naturality law.
 That law will then allow us to derive the wedge law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Subsection
Relations between values of different types
\end_layout

\begin_layout Standard
Programmers are familiar with relations as tables in relational databases.
 The simplest relation is a table with two columns having values of some
 fixed types, say 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

INT
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

FLOAT
\end_layout

\end_inset

.
 As an example, consider a table called 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

R
\end_layout

\end_inset

 containing this data:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $R=$
\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

SAMPLE_COUNT: INT
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

MEAN_VALUE: FLOAT
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
150
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0.92
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
150
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0.95
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
180
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0.95
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
180
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1.02
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
200
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0.95
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Each row of the table 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

R
\end_layout

\end_inset

 has a value of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

INT
\end_layout

\end_inset

 and a value of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

FLOAT
\end_layout

\end_inset

 (we disallow 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

NULL
\end_layout

\end_inset

 values here).
 The existence of a row 
\begin_inset Formula $\left(180,0.95\right)$
\end_inset

 means that the values 
\begin_inset Formula $180$
\end_inset

 and 
\begin_inset Formula $0.95$
\end_inset

 are 
\begin_inset Quotes eld
\end_inset

in the relation
\begin_inset Quotes erd
\end_inset

 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

R
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Two values 
\begin_inset Formula $a^{:\text{Int}}$
\end_inset

 and 
\begin_inset Formula $b^{:\text{Float}}$
\end_inset

 are in the relation 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

R
\end_layout

\end_inset

 only if there exists a row 
\begin_inset Formula $\left(a,b\right)$
\end_inset

 in the table 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

R
\end_layout

\end_inset

.
 All other pairs of values 
\begin_inset Formula $\left(a,b\right)$
\end_inset

 are 
\emph on
not
\emph default
 in the relation 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

R
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Note that the table 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

R
\end_layout

\end_inset

 contains several values in the first column that correspond to the same
 value in the second column, and vice versa.
 So, the relation 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

R
\end_layout

\end_inset

 is many-to-many and cannot be represented by a function of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Int => Float
\end_layout

\end_inset

 or of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Float => Int
\end_layout

\end_inset

.
 Instead, we must view the relation 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

R
\end_layout

\end_inset

 as a subset of the set of 
\emph on
all
\emph default
 possible pairs 
\begin_inset Formula $(a^{:\text{Int}},b^{:\text{Float}})$
\end_inset

.
 The table 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

R
\end_layout

\end_inset

 lists the pairs in that subset.
\end_layout

\begin_layout Standard
Instead of listing the pairs, we may describe a relation by implementing
 a function telling us whether two given values are in the relation.
 The Scala type signature for such a function could be:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def inRelationR(a: Int, b: Float): Boolean
\end_layout

\end_inset

In the short code notation, this function is written as 
\begin_inset Formula $r:\text{Int}\times\text{Float}\rightarrow\bbnum 2$
\end_inset

.
 The function call 
\begin_inset Formula $r(a\times b)$
\end_inset

 returns 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

true
\end_layout

\end_inset

 when the two given values 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 are in the relation 
\begin_inset Formula $r$
\end_inset

.
\end_layout

\begin_layout Standard
For proving the parametricity theorem, we will need relations between values
 of arbitrary types.
 Replacing 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Int
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Float
\end_layout

\end_inset

 by type parameters 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

, we get the following definition:
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-relation-between-A-B"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relation-between-A-B"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
A 
\series bold
relation
\series default
 of
\begin_inset Index idx
status open

\begin_layout Plain Layout
parametricity theorem!relation between values
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
relations between values!see 
\begin_inset Quotes eld
\end_inset

value relation
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
value relation
\end_layout

\end_inset

 type 
\begin_inset Formula $A\leftrightarrow B$
\end_inset

 is a function 
\begin_inset Formula $r:A\times B\rightarrow\bbnum 2$
\end_inset

.
 The type notation 
\begin_inset Formula $A\leftrightarrow B$
\end_inset

 indicates that relations are more general than functions of types 
\begin_inset Formula $A\rightarrow B$
\end_inset

 or 
\begin_inset Formula $B\rightarrow A$
\end_inset

.
 If values 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 are in a relation 
\begin_inset Formula $r$
\end_inset

, we write 
\begin_inset Formula $(x,y)\in r$
\end_inset

 or with full type annotations: 
\begin_inset Formula $(x^{:A},y^{:B})\in r^{:A\leftrightarrow B}$
\end_inset

.
 The condition 
\begin_inset Formula $(x,y)\in r$
\end_inset

 is equivalent to writing 
\begin_inset Formula $r(x,y)=\text{true}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Defined in this sense, relations hold between values of given types.
 Certain values 
\begin_inset Formula $x^{:A}$
\end_inset

 and 
\begin_inset Formula $y^{:B}$
\end_inset

 will be in a given relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

, while other values of the same types will not be in the relation 
\begin_inset Formula $r$
\end_inset

.
 This should not be confused with 
\begin_inset Index idx
status open

\begin_layout Plain Layout
type relation
\end_layout

\end_inset


\emph on
type relations
\emph default
 described in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Typeclasses-type-relations"
plural "false"
caps "false"
noprefix "false"

\end_inset

, where certain 
\emph on
types
\emph default
 will be in a given type relation while other types will not be in that
 relation.
 Since we will not be using any type relations in this Appendix, we will
 write simply 
\begin_inset Quotes eld
\end_inset

relations between types 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset


\begin_inset Quotes erd
\end_inset

 rather than 
\begin_inset Quotes eld
\end_inset

relations between 
\emph on
values of
\emph default
 types 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset


\begin_inset Quotes erd
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
A simple example of a relation is the 
\series bold
identity relation
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
identity relation
\end_layout

\end_inset

, denoted by 
\begin_inset Formula $\text{id}^{:A\leftrightarrow A}$
\end_inset

.
 The identity relation holds only when two values of type 
\begin_inset Formula $A$
\end_inset

 are equal:
\begin_inset Formula 
\[
(x^{:A},y^{:A})\in\text{id}^{:A\leftrightarrow A}\quad\text{ means }\quad x=y\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
To use the parametricity theorem in practice, we will need to convert functions
 into relations.
 The relation of type 
\begin_inset Formula $A\leftrightarrow B$
\end_inset

 obtained from a function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 is denoted by 
\begin_inset Formula $\left<f\right>$
\end_inset

 and is defined as:
\begin_inset Formula 
\[
(a^{:A},b^{:B})\in\left<f\right>\text{ means }b=f(a)\quad\text{or equivalently}:\quad a\triangleright f=b\quad.
\]

\end_inset

Functions 
\begin_inset Formula $f$
\end_inset

 of type 
\begin_inset Formula $A\rightarrow B$
\end_inset

 are converted to many-to-one relations 
\begin_inset Formula $\left<f\right>$
\end_inset

 between types 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

: one or more values of type 
\begin_inset Formula $A$
\end_inset

 are related to a single value of type 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Standard
A function 
\begin_inset Formula $g$
\end_inset

 of type 
\begin_inset Formula $B\rightarrow A$
\end_inset

 can be also converted to a relation of type 
\begin_inset Formula $A\leftrightarrow B$
\end_inset

.
 However, 
\begin_inset Formula $\left<g\right>$
\end_inset

 will have type 
\begin_inset Formula $B\leftrightarrow A$
\end_inset

 in our notation.
 We note that the relation types 
\begin_inset Formula $A\leftrightarrow B$
\end_inset

 and 
\begin_inset Formula $B\leftrightarrow A$
\end_inset

 are equivalent (isomorphic as types) because we can swap 
\begin_inset Formula $x^{:A}$
\end_inset

 and 
\begin_inset Formula $y^{:B}$
\end_inset

 in the condition 
\begin_inset Formula $(x,y)\in r^{:A\leftrightarrow B}$
\end_inset

 and obtain the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
reverse relation
\end_layout

\end_inset


\series bold
reverse relation
\series default
 of type 
\begin_inset Formula $B\leftrightarrow A$
\end_inset

, denoted 
\begin_inset Formula $\text{rev}\left(r\right)$
\end_inset

, such that 
\begin_inset Formula $(y,x)\in\text{rev}\left(r\right)$
\end_inset

.
 So, we will write 
\begin_inset Formula $\text{rev}\left<g\right>$
\end_inset

 if we need to convert a function 
\begin_inset Formula $g^{:B\rightarrow A}$
\end_inset

 into a relation of type 
\begin_inset Formula $A\leftrightarrow B$
\end_inset

.
\end_layout

\begin_layout Standard
The operation 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

rev
\end_layout

\end_inset

 it is its own inverse, and so it is an isomorphism between 
\begin_inset Formula $A\leftrightarrow B$
\end_inset

 and 
\begin_inset Formula $B\leftrightarrow A$
\end_inset

: 
\begin_inset Formula 
\[
\text{rev}\left(\text{rev}\left(r\right)\right)=r\quad.
\]

\end_inset

To prove this, substitute the definition of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

rev
\end_layout

\end_inset

 twice:
\begin_inset Formula 
\[
(x^{:A},y^{:B})\in\text{rev}\,\big(\text{rev}\,(r)\big)\quad\text{is the same as}:\quad(y,x)\in\text{rev}\,(r)\quad\text{and is the same as}:\quad(x,y)\in r\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
Here is an example of a relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 that is 
\emph on
not
\emph default
 equivalent to a function:
\begin_inset Formula 
\[
(x^{:A},y^{:B})\in r\text{ means }p(x)=q(y)\text{ where }p^{:A\rightarrow C}\text{ and }q^{:B\rightarrow C}\text{ are some given functions}\quad.
\]

\end_inset

We call this a 
\series bold
pullback relation
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
pullback relation|textit
\end_layout

\end_inset

 and denote it by 
\begin_inset Formula $\text{pull}\,(p,q)$
\end_inset

.
 For some choices of 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

, there will be many different values 
\begin_inset Formula $x_{1}$
\end_inset

, 
\begin_inset Formula $x_{2}$
\end_inset

, 
\begin_inset Formula $y_{1}$
\end_inset

, 
\begin_inset Formula $y_{2}$
\end_inset

, ..., such that 
\begin_inset Formula $p(x_{1})=p(x_{2})=q(y_{1})=q(y_{2})=...$
\end_inset

 Then the pullback relation will be many-to-many and will not be equivalent
 to 
\begin_inset Formula $\left<f\right>$
\end_inset

 or to 
\begin_inset Formula $\text{rev}\left<f\right>$
\end_inset

 for any function 
\begin_inset Formula $f$
\end_inset

.
 
\end_layout

\begin_layout Standard
In the derivations below, we will often use relations of type 
\begin_inset Formula $P^{A,A}\leftrightarrow P^{B,B}$
\end_inset

, where 
\begin_inset Formula $P^{X,Y}$
\end_inset

 is a profunctor (contravariant in 
\begin_inset Formula $X$
\end_inset

 and covariant in 
\begin_inset Formula $Y$
\end_inset

).
 For any function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, there is a special pullback relation of type 
\begin_inset Formula $P^{A,A}\leftrightarrow P^{B,B}$
\end_inset

: 
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-wedge-relation"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-wedge-relation"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Given a profunctor
\begin_inset Index idx
status open

\begin_layout Plain Layout
profunctor!wedge relation
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
wedge relation|textit
\end_layout

\end_inset

 
\begin_inset Formula $P^{X,Y}$
\end_inset

 and a function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, two values 
\begin_inset Formula $x^{:P^{A,A}}$
\end_inset

 and 
\begin_inset Formula $y^{:P^{B,B}}$
\end_inset

 are 
\series bold
in a
\series default
 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-
\series bold
wedge relation
\series default
 if 
\begin_inset Formula $x\triangleright f^{\uparrow P^{A,\bullet}}=y\triangleright f^{\downarrow P^{\bullet,B}}$
\end_inset

.
 This condition can be written more concisely as 
\begin_inset Formula $(x,y)\in\text{pull}\,(f^{\uparrow P},f^{\downarrow P})$
\end_inset

.
\end_layout

\begin_layout Standard
The wedge relation comes up often in applications of the relational parametricit
y theorem.
 The 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation generalizes the wedge law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) to two arbitrary values 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

.
 The wedge law of an expression 
\begin_inset Formula $p:\forall A.\,P^{A,A}$
\end_inset

 is equivalent to the requirement that 
\begin_inset Formula $p^{A}$
\end_inset

 and 
\begin_inset Formula $p^{B}$
\end_inset

 are in the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation for all 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 and for all types 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

.
 
\end_layout

\begin_layout Subsection
Relational product, co-product, and pair mapper.
 Relational lifting
\end_layout

\begin_layout Standard
Lifting of relations to type constructors is necessary in order to formulate
 naturality laws via relations.
 To see why, consider ordinary naturality laws involving functions, such
 as Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-for-functors"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 These laws are formulated using an arbitrary function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 lifted to some functors or contrafunctors.
 Lifting a function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 to a functor 
\begin_inset Formula $G$
\end_inset

 yields a function 
\begin_inset Formula $f^{\uparrow G}$
\end_inset

 of type 
\begin_inset Formula $G^{A}\rightarrow G^{B}$
\end_inset

.
 Lifting 
\begin_inset Formula $f$
\end_inset

 to a contrafunctor 
\begin_inset Formula $H$
\end_inset

 yields a function 
\begin_inset Formula $f^{\downarrow H}:H^{B}\rightarrow H^{A}$
\end_inset

.
 As a first step towards writing naturality laws in terms of relations,
 we need to define a lifting of an arbitrary relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 to any type constructor 
\begin_inset Formula $G^{\bullet}$
\end_inset

.
 The lifted relation will have type 
\begin_inset Formula $G^{A}\leftrightarrow G^{B}$
\end_inset

 and will be denoted by 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

.
\end_layout

\begin_layout Standard
As motivation, let us reformulate some known naturality laws in terms of
 relations.
 Consider a natural transformation 
\begin_inset Formula $t:\forall A.\,G^{A}\rightarrow H^{A}$
\end_inset

 with its naturality law 
\begin_inset Formula $f^{\uparrow G}\bef t=t\bef f^{\uparrow H}$
\end_inset

.
 To obtain a relational formulation of that law, we first apply both sides
 to an arbitrary value 
\begin_inset Formula $p^{:G^{A}}$
\end_inset

:
\begin_inset Formula 
\[
p\triangleright f^{\uparrow G}\triangleright t^{B}=p\triangleright t^{A}\triangleright f^{\uparrow H}\quad,\quad\quad\text{or equivalently}:\quad t^{B}(p\triangleright f^{\uparrow G})=t^{A}(p)\triangleright f^{\uparrow H}\quad,
\]

\end_inset

and define for brevity the value 
\begin_inset Formula $q^{:G^{B}}\triangleq p\triangleright f^{\uparrow G}$
\end_inset

.
 This definition of 
\begin_inset Formula $q$
\end_inset

 is equivalent to the condition 
\begin_inset Formula $(p,q)\in\langle f^{\uparrow G}\rangle$
\end_inset

.
 Now we can rewrite the naturality law of 
\begin_inset Formula $t$
\end_inset

 as a statement about relations: 
\begin_inset Formula 
\begin{equation}
\text{for any }f^{:A\rightarrow B},p^{:G^{A}},q^{:G^{B}}\quad:\quad\quad\text{when}\quad(p,q)\in\langle f^{\uparrow G}\rangle\quad\quad\text{then}\quad(t^{A}(p),t^{B}(q))\in\langle f^{\uparrow H}\rangle\quad.\label{eq:naturality-law-of-t-derivation1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
We will define a concise notation for conditions of this form because they
 are found often when working with relations.
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-pair-mapper-of-relations"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-pair-mapper-of-relations"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
pair mapper of relations
\end_layout

\end_inset

The 
\series bold
pair mapper of relations
\series default
 
\begin_inset Formula $r^{:A\leftrightarrow C}$
\end_inset

 and 
\begin_inset Formula $s^{:B\leftrightarrow D}$
\end_inset

 is a relation 
\begin_inset Formula $r\varogreaterthan s$
\end_inset

 defined by:
\begin_inset Formula 
\begin{align*}
 & \big(r^{:A\leftrightarrow C}\varogreaterthan s^{:B\leftrightarrow D}\big):\left(A\rightarrow B\right)\leftrightarrow\left(C\rightarrow D\right)\quad,\\
 & (f^{:A\rightarrow B},g^{:C\rightarrow D})\in r\varogreaterthan s\quad\text{means}\quad\quad\forall x^{:A},y^{:C}\quad:\quad\text{if }(x,y)\in r\quad\text{then}\quad(f(x),g(y))\in s\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement i
overhang 0in
width "20col%"
status open

\begin_layout Plain Layout
\begin_inset VSpace -280baselineskip%
\end_inset


\begin_inset Preview

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{1.8pc}\xyScaleX{2.2pc}A\ar@{<->}[d]\sp(0.5){r}\ar[rr]\sp(0.5){f} & \ar@{<->}[d(0.9)]\sp(0.55){r\varogreaterthan s} & B\ar@{<->}[d]\sp(0.5){s}\\
C\ar[rr]\sb(0.5){g} &  & D
}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace -250baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The operation 
\begin_inset Formula $\ogreaterthan$
\end_inset

 associates to the right, so that 
\begin_inset Formula $r\ogreaterthan s\ogreaterthan t\triangleq r\ogreaterthan\left(s\ogreaterthan t\right)$
\end_inset

.
 The type diagram at left illustrates the pair mapper construction.
 To read the diagram, we need to start with two arbitrary values, 
\begin_inset Formula $x^{:A}$
\end_inset

 at the top left and 
\begin_inset Formula $y^{:C}$
\end_inset

 at the bottom left.
 Given two relations 
\begin_inset Formula $r^{:A\leftrightarrow C}$
\end_inset

 and 
\begin_inset Formula $s^{:B\leftrightarrow D}$
\end_inset

, we define a new relation 
\begin_inset Formula $r\ogreaterthan s$
\end_inset

 between functions of types 
\begin_inset Formula $A\rightarrow B$
\end_inset

 and 
\begin_inset Formula $C\rightarrow D$
\end_inset

.
 Two functions 
\begin_inset Formula $\left(f,g\right)$
\end_inset

 are in the relation 
\begin_inset Formula $r\varogreaterthan s$
\end_inset

 if the diagram commutes, which means that 
\begin_inset Formula $(f(x),g(y))\in s$
\end_inset

 for any 
\begin_inset Formula $(x,y)\in r$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
Using Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-pair-mapper-of-relations"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we can rewrite the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-of-t-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) as:
\begin_inset Formula 
\[
\text{for all }f^{:A\rightarrow B}\quad:\quad(t^{A},t^{B})\in\langle f^{\uparrow G}\rangle\ogreaterthan\langle f^{\uparrow H}\rangle\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
It appears reasonable to expect that the relation 
\begin_inset Formula $\left<f\right>$
\end_inset

 lifted to 
\begin_inset Formula $G$
\end_inset

 is the same relation as 
\begin_inset Formula $\langle f^{\uparrow G}\rangle$
\end_inset

:
\begin_inset Formula 
\[
\left<f\right>^{\updownarrow G}=\langle f^{\uparrow G}\rangle\quad.
\]

\end_inset

With this property (proved below in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-function-relation-covariant-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

), we rewrite Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-of-t-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) as:
\begin_inset Formula 
\[
\text{for all }f^{:A\rightarrow B}:\quad(t^{A},t^{B})\in\left<f\right>^{\updownarrow G}\ogreaterthan\left<f\right>^{\updownarrow H}\quad.
\]

\end_inset

We now replace 
\begin_inset Formula $\left<f\right>$
\end_inset

 by an arbitrary relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 and obtain the
\begin_inset Index idx
status open

\begin_layout Plain Layout
naturality law!in terms of relations
\end_layout

\end_inset

 
\series bold
relational naturality law
\series default
:
\begin_inset Formula 
\begin{equation}
\text{for any relation }r^{:A\leftrightarrow B}:\quad(t^{A},t^{B})\in r^{\updownarrow G}\ogreaterthan r^{\updownarrow H}\quad.\label{eq:naturality-law-of-t-derivation2}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Note the similarity of the relation 
\begin_inset Formula $r^{\updownarrow G}\ogreaterthan r^{\updownarrow H}$
\end_inset

 and the type 
\begin_inset Formula $G^{A}\rightarrow H^{A}$
\end_inset

 of 
\begin_inset Formula $t$
\end_inset

.
 Denote the type signature of 
\begin_inset Formula $t$
\end_inset

 by 
\begin_inset Formula $P^{A}\triangleq G^{A}\rightarrow H^{A}$
\end_inset

.
 If we 
\emph on
define
\emph default
 the lifting 
\begin_inset Formula $r^{\updownarrow P}$
\end_inset

 as 
\begin_inset Formula $r^{\updownarrow G}\ogreaterthan r^{\updownarrow H}$
\end_inset

, the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-of-t-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) will be written as:
\begin_inset Formula 
\begin{equation}
\text{for any relation }r^{:A\leftrightarrow B}:\quad(t^{A},t^{B})\in r^{\updownarrow P}\quad.\label{eq:naturality-law-of-t-derivation3}
\end{equation}

\end_inset

The generalization of the naturality law from functions to relations now
 has a concise form: The components 
\begin_inset Formula $t^{A}$
\end_inset

 and 
\begin_inset Formula $t^{B}$
\end_inset

 of a natural transformation 
\begin_inset Formula $t$
\end_inset

 belong to 
\emph on
any
\emph default
 relation 
\begin_inset Formula $r$
\end_inset

 lifted to 
\begin_inset Formula $t$
\end_inset

's type signature (the type constructor 
\begin_inset Formula $P^{\bullet}$
\end_inset

).
 This prepares us for the formulation of the parametricity theorem below.
 At the same time, this motivates using the pair mapper operation (
\begin_inset Formula $\ogreaterthan$
\end_inset

) to define the lifting a relation to a function type constructor such as
 
\begin_inset Formula $G^{A}\rightarrow H^{A}$
\end_inset

.
\end_layout

\begin_layout Standard
What about lifting a relation to product (
\begin_inset Formula $G^{A}\times H^{A}$
\end_inset

) or co-product (
\begin_inset Formula $G^{A}+H^{A}$
\end_inset

) type constructors? Recall that lifting a function to 
\begin_inset Formula $G^{A}\times H^{A}$
\end_inset

 involves the pair product of functions
\begin_inset Index idx
status open

\begin_layout Plain Layout
pair product of functions
\end_layout

\end_inset

 (
\begin_inset Formula $\boxtimes$
\end_inset

):
\begin_inset Formula 
\[
\big(f^{:A\rightarrow C}\boxtimes g^{:B\rightarrow D}\big):A\times B\rightarrow C\times D\quad,\quad\quad f\boxtimes g\triangleq a\times b\rightarrow f(a)\times g(b)\quad.
\]

\end_inset

Namely, the lifting of a function 
\begin_inset Formula $k^{:A\rightarrow B}$
\end_inset

 to 
\begin_inset Formula $G^{A}\times H^{A}$
\end_inset

 is defined by 
\begin_inset Formula $k^{\uparrow(G\times H)}\triangleq k^{\uparrow G}\boxtimes k^{\uparrow H}$
\end_inset

.
 
\end_layout

\begin_layout Standard
The pair co-product of functions
\begin_inset Index idx
status open

\begin_layout Plain Layout
pair co-product of functions
\end_layout

\end_inset

 is defined by Exercise
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-reasoning-1-4-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

(b):
\begin_inset Formula 
\begin{align*}
 & \big(f^{:A\rightarrow C}\boxplus g^{:B\rightarrow D}\big):A+B\rightarrow C+D\quad,\\
 & (f\boxplus g)(a^{:A}+\bbnum 0^{:B})\triangleq f(a)+\bbnum 0^{:D}\quad,\quad\quad(f\boxplus g)(\bbnum 0+b^{:B})\triangleq\bbnum 0^{:C}+g(b)\quad,\\
 & (k^{:A\rightarrow B})^{\uparrow(G+H)}\triangleq k^{\uparrow G}\boxplus k^{\uparrow H}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Let us now define the analogous constructions for relations.
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-pair-product-of-relations"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-pair-product-of-relations"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Given two relations 
\begin_inset Formula $r^{:A\leftrightarrow C}$
\end_inset

 and 
\begin_inset Formula $s^{:B\leftrightarrow D}$
\end_inset

, the 
\series bold
pair product
\series default
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
pair product of relations
\end_layout

\end_inset

 
\begin_inset Formula $r\boxtimes s$
\end_inset

 is a relation between values of the product types 
\begin_inset Formula $A\times B$
\end_inset

 and 
\begin_inset Formula $C\times D$
\end_inset

:
\begin_inset Formula 
\[
\big(r^{:A\leftrightarrow C}\boxtimes s^{:B\leftrightarrow D}\big):A\times B\leftrightarrow C\times D\quad,\quad\quad(a\times b,c\times d)\in r\boxtimes s\quad\text{when}\quad(a,c)\in r\text{ and }(b,d)\in s\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
The second construction is the pair co-product of relations
\begin_inset Index idx
status open

\begin_layout Plain Layout
pair co-product of relations
\end_layout

\end_inset

, which creates a relation between co-products of types.
 The definition resembles that of the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
pair co-product of functions
\end_layout

\end_inset

pair co-product of functions:
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-pair-co-product-of-relations"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-pair-co-product-of-relations"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The 
\series bold
pair co-product
\series default
 of relations 
\begin_inset Formula $r^{:A\leftrightarrow C}$
\end_inset

 and 
\begin_inset Formula $s^{:B\leftrightarrow D}$
\end_inset

 is a relation 
\begin_inset Formula $r\boxplus s$
\end_inset

 defined by:
\begin_inset Formula 
\begin{align*}
 & \big(r^{:A\leftrightarrow C}\boxplus s^{:B\leftrightarrow D}\big):A+B\leftrightarrow C+D\quad,\\
 & \text{either}\quad\quad(a^{:A}+\bbnum 0^{:B},c^{:C}+\bbnum 0^{:D})\in r\boxplus s\quad\text{when}\quad(a,c)\in r\quad,\\
 & \text{or}\quad\quad(\bbnum 0^{:A}+b^{:B},\bbnum 0^{:C}+d^{:D})\in r\boxplus s\quad\text{when}\quad(b,d)\in s\quad.
\end{align*}

\end_inset

Any other combinations of values (such as 
\begin_inset Formula $a+\bbnum 0$
\end_inset

 and 
\begin_inset Formula $\bbnum 0+d$
\end_inset

) are not in the relation 
\begin_inset Formula $r\boxplus s$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
The following example illustrates some properties of the relational operations
 
\begin_inset Formula $\boxtimes$
\end_inset

, 
\begin_inset Formula $\boxplus$
\end_inset

, and 
\begin_inset Formula $\ogreaterthan$
\end_inset

 when applied to relations obtained from functions.
\end_layout

\begin_layout Subsubsection
Example 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Example-pair-product-pair-mapper-relation"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-pair-product-pair-mapper-relation"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
solved examples
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For arbitrary given functions 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 and 
\begin_inset Formula $g^{:C\rightarrow D}$
\end_inset

, prove that:
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 
\begin_inset Formula $\left<f\right>\boxtimes\left<g\right>=\left<f\boxtimes g\right>$
\end_inset

, both relations having type 
\begin_inset Formula $A\times C\leftrightarrow B\times D$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 
\begin_inset Formula $\left<f\right>\boxplus\left<g\right>=\left<f\boxplus g\right>$
\end_inset

, both relations having type 
\begin_inset Formula $A+C\leftrightarrow B+D$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 
\begin_inset Formula $\left<f\right>\ogreaterthan\text{id}^{:C\leftrightarrow C}=\text{rev}\,\langle l^{:B\rightarrow C}\rightarrow f\bef l\rangle$
\end_inset

, both relations having type 
\begin_inset Formula $\left(A\rightarrow C\right)\leftrightarrow\left(B\rightarrow C\right)$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 
\begin_inset Formula $\text{id}^{:A\leftrightarrow A}\ogreaterthan\left<g\right>=\langle k^{:A\rightarrow C}\rightarrow k\bef g\rangle$
\end_inset

, both relations having type 
\begin_inset Formula $\left(A\rightarrow C\right)\leftrightarrow\left(A\rightarrow D\right)$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(e)
\series default
 
\begin_inset Formula $\left<f\right>\ogreaterthan\left<g\right>=\text{pull}\,(k^{:A\rightarrow C}\rightarrow k\bef g,\;l^{:B\rightarrow C}\rightarrow f\bef l)$
\end_inset

, both relations having type 
\begin_inset Formula $\left(A\rightarrow C\right)\leftrightarrow\left(B\rightarrow D\right)$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(f)
\series default
 
\begin_inset Formula $\big(\text{rev}\left<f\right>\big)\ogreaterthan\left<g\right>=\langle l^{:B\rightarrow C}\rightarrow f\bef l\bef g\rangle$
\end_inset

, both relations having type 
\begin_inset Formula $\left(B\rightarrow C\right)\leftrightarrow\left(A\rightarrow D\right)$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Solution
\end_layout

\begin_layout Standard
We will apply various relations to arbitrary values 
\begin_inset Formula $a^{:A}$
\end_inset

, 
\begin_inset Formula $b^{:B}$
\end_inset

, 
\begin_inset Formula $c^{:C}$
\end_inset

, 
\begin_inset Formula $d^{:D}$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 The following conditions are equivalent:
\begin_inset Formula 
\begin{align*}
 & (a\times c,b\times d)\in\left<f\right>\boxtimes\left<g\right>\quad\text{means}\quad(a,b)\in\left<f\right>\quad\text{and}\quad(c,d)\in\left<g\right>\quad\text{or}:\quad f(a)=b\text{ and }g(c)=b\quad,\\
 & (a\times c,b\times d)\in\left<f\boxtimes g\right>\quad\text{means}\quad(a\times c)\triangleright(f\boxtimes g)=b\times d\quad\text{or}:\quad f(a)\times g(c)=b\times d\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 The following conditions are equivalent:
\begin_inset Formula 
\begin{align*}
 & (a+\bbnum 0,b+\bbnum 0)\in\left<f\right>\boxplus\left<g\right>\quad\text{means}\quad(a,b)\in\left<f\right>\quad\text{or equivalently}:\quad a\triangleright f=b\quad,\\
 & (a+\bbnum 0,b+\bbnum 0)\in\left<f\boxplus g\right>\quad\text{means}\quad(a+\bbnum 0)\triangleright(f\boxplus g)=b+\bbnum 0\quad\text{or equivalently}:\quad a\triangleright f=b\quad.
\end{align*}

\end_inset

Similarly we can show that the conditions 
\begin_inset Formula $(\bbnum 0+c,\bbnum 0+d)\in\left<f\right>\boxplus\left<g\right>$
\end_inset

 and 
\begin_inset Formula $(\bbnum 0+c,\bbnum 0+d)\in\left<f\boxplus g\right>$
\end_inset

 are equivalent.
 Values from different parts of the disjunctions, such as 
\begin_inset Formula $(a+\bbnum 0,\bbnum 0+d)$
\end_inset

, are not in the relation 
\begin_inset Formula $\left<f\right>\boxplus\left<g\right>$
\end_inset

 by definition of 
\begin_inset Formula $\boxplus$
\end_inset

.
 They are also not in the relation 
\begin_inset Formula $\left<f\boxplus g\right>$
\end_inset

 since the function 
\begin_inset Formula $f\boxplus g$
\end_inset

 preserves the left and right parts of the disjunctions.
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 Two functions 
\begin_inset Formula $k^{:A\rightarrow C}$
\end_inset

 and 
\begin_inset Formula $l^{:B\rightarrow C}$
\end_inset

 are in the relation 
\begin_inset Formula $\left<f\right>\ogreaterthan\text{id}^{:C\leftrightarrow C}$
\end_inset

 if:
\begin_inset Formula 
\[
\text{for all }a^{:A},b^{:B}\quad:\quad\text{when}\quad(a,b)\in\left<f\right>\quad\text{then}\quad(k(a),l(b))\in\text{id}^{:C\leftrightarrow C}\quad.
\]

\end_inset

Simplifying the last condition, we get:
\begin_inset Formula 
\[
\text{for all }a^{:A}\quad:\quad k(a)=l(f(a))\quad,\quad\text{or equivalently}:\quad k=f\bef l\quad.
\]

\end_inset

So, the relation between 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $l$
\end_inset

 may be expressed as 
\begin_inset Formula $k=\psi(l)$
\end_inset

 where the function 
\begin_inset Formula $\psi$
\end_inset

 is defined as:
\begin_inset Formula 
\[
\psi:\left(B\rightarrow C\right)\rightarrow A\rightarrow C\quad,\quad\quad\psi\triangleq l^{:B\rightarrow C}\rightarrow f\bef l\quad.
\]

\end_inset

This relation is denoted by 
\begin_inset Formula $\text{rev}\left<\psi\right>$
\end_inset

.
 It follows that 
\begin_inset Formula $\left<f\right>\ogreaterthan\text{id}^{:C\leftrightarrow C}=\text{rev}\left<\psi\right>=\text{rev}\langle l^{:B\rightarrow C}\rightarrow f\bef l\rangle$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 Two functions 
\begin_inset Formula $k^{:A\rightarrow C}$
\end_inset

 and 
\begin_inset Formula $l^{:A\rightarrow D}$
\end_inset

 are in the relation 
\begin_inset Formula $\text{id}^{:A\leftrightarrow A}\ogreaterthan\left<g\right>$
\end_inset

 if:
\begin_inset Formula 
\[
\text{for all }x^{:A},y^{:A}\quad:\quad\text{when}\quad(x,y)\in\text{id}^{:A\leftrightarrow A}\quad\text{then}\quad(k(x),l(y))\in\left<g\right>\quad.
\]

\end_inset

Simplifying the last condition, we get:
\begin_inset Formula 
\[
\text{for all }x^{:A}\quad:\quad g(k(x))=l(x)\quad,\quad\text{or equivalently}:\quad l=k\bef g\quad.
\]

\end_inset

So, the relation between 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $l$
\end_inset

 may be expressed as 
\begin_inset Formula $\phi(k)=l$
\end_inset

 where:
\begin_inset Formula 
\[
\phi:\left(A\rightarrow C\right)\rightarrow A\rightarrow D\quad,\quad\phi\triangleq k^{:A\rightarrow C}\rightarrow k\bef g\quad.
\]

\end_inset

This relation is denoted by 
\begin_inset Formula $\left<\phi\right>$
\end_inset

.
 It follows that we may write 
\begin_inset Formula $\text{id}^{:A\leftrightarrow A}\ogreaterthan\left<g\right>=\left<\phi\right>=\langle k^{:A\rightarrow C}\rightarrow k\bef g\rangle$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(e)
\series default
 Two functions 
\begin_inset Formula $k^{:A\rightarrow C}$
\end_inset

 and 
\begin_inset Formula $l^{:B\rightarrow D}$
\end_inset

 are in the relation 
\begin_inset Formula $\left<f\right>\ogreaterthan\left<g\right>$
\end_inset

 if:
\begin_inset Formula 
\[
\text{for all }a^{:A},b^{:B}\quad:\quad\text{when}\quad(a,b)\in\left<f\right>\quad\text{then}\quad(k(a),l(b))\in\left<g\right>\quad.
\]

\end_inset

Simplifying the last condition, we get:
\begin_inset Formula 
\[
\text{for all }a^{:A}\quad:\quad g(k(a))=l(f(a))\quad,\quad\text{or equivalently}:\quad f\bef l=k\bef g\quad.
\]

\end_inset

So, the relation between 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $l$
\end_inset

 may be expressed as 
\begin_inset Formula $\phi(k)=\psi(l)$
\end_inset

 where: 
\begin_inset Formula 
\[
\phi:\left(A\rightarrow C\right)\rightarrow A\rightarrow D\quad,\quad\phi\triangleq k^{:A\rightarrow C}\rightarrow k\bef g\quad,\quad\psi:\left(B\rightarrow D\right)\rightarrow A\rightarrow D\quad,\quad\psi\triangleq l^{:B\rightarrow C}\rightarrow f\bef l\quad.
\]

\end_inset

 This is a pullback relation that we denote by 
\begin_inset Formula $\text{pull}\,(\phi,\psi)=\text{pull}\,\big(k^{:A\rightarrow C}\rightarrow k\bef g,\;l^{:B\rightarrow C}\rightarrow f\bef l\big)$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(f)
\series default
 Two functions 
\begin_inset Formula $k^{:B\rightarrow C}$
\end_inset

 and 
\begin_inset Formula $l^{:A\rightarrow D}$
\end_inset

 are in the relation 
\begin_inset Formula $\text{rev}\left<f\right>\ogreaterthan\left<g\right>$
\end_inset

 if:
\begin_inset Formula 
\[
\text{for all }x^{:B},y^{:A}\quad:\quad\text{when}\quad(x,y)\in\text{rev}\left<f\right>\quad\text{then}\quad(k(x),l(y))\in\left<g\right>\quad.
\]

\end_inset

Simplifying the last condition, we get:
\begin_inset Formula 
\[
\text{for all }y^{:A}\quad:\quad g(k(f(y)))=l(y)\quad,\quad\text{or equivalently}:\quad f\bef k\bef g=l\quad.
\]

\end_inset

So, the relation between 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $l$
\end_inset

 may be expressed as 
\begin_inset Formula $\phi(k)=l$
\end_inset

 where: 
\begin_inset Formula 
\[
\phi:\left(B\rightarrow C\right)\rightarrow A\rightarrow D\quad,\quad\phi\triangleq k^{:B\rightarrow C}\rightarrow f\bef k\bef g\quad.
\]

\end_inset

 This relation is denoted by 
\begin_inset Formula $\left<\phi\right>$
\end_inset

.
 We get 
\begin_inset Formula $\text{rev}\left<f\right>\ogreaterthan\left<g\right>=\left<\phi\right>=\langle k^{:B\rightarrow C}\rightarrow f\bef k\bef g\rangle$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
We now turn to the question of how to define the lifting 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

 to an arbitrary type constructor 
\begin_inset Formula $G^{\bullet}$
\end_inset

.
 It turns out that we will actually need to define a 
\emph on
simultaneous
\emph default
 lifting of several relations to a type constructor with several type parameters.
 For clarity, we postpone that definition and begin by lifting a single
 relation.
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-relational-lifting"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (relational lifting)
\end_layout

\begin_layout Standard
Given a relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 and a type constructor 
\begin_inset Formula $G^{\bullet}$
\end_inset

, the relational lifting of 
\begin_inset Formula $r$
\end_inset

 to 
\begin_inset Formula $G$
\end_inset

, denoted by 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

, is a new relation of type 
\begin_inset Formula $G^{A}\leftrightarrow G^{B}$
\end_inset

.
 The relation 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

 is defined by induction on the structure of 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Standard
Below, the type constructors 
\begin_inset Formula $K^{A}$
\end_inset

, 
\begin_inset Formula $L^{A}$
\end_inset

, 
\begin_inset Formula $H^{X,A}$
\end_inset

, and 
\begin_inset Formula $S^{A,R}$
\end_inset

 are not assumed to be covariant or contravariant.
 They can be any exponential-polynomial, fully parametric type constructors.
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 If 
\begin_inset Formula $G^{A}\triangleq Z$
\end_inset

 with a fixed type 
\begin_inset Formula $Z$
\end_inset

, we define 
\begin_inset Formula $r^{\updownarrow G}\triangleq\text{id}^{:Z\leftrightarrow Z}$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 If 
\begin_inset Formula $G=\text{Id}$
\end_inset

 (that is, 
\begin_inset Formula $G^{A}\triangleq A$
\end_inset

), we define 
\begin_inset Formula $r^{\updownarrow\text{Id}}\triangleq r$
\end_inset

.
 
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 If 
\begin_inset Formula $G^{A}\triangleq K^{A}\times L^{A}$
\end_inset

 then we define 
\begin_inset Formula $r^{\updownarrow G}\triangleq r^{\updownarrow K}\boxtimes r^{\updownarrow L}$
\end_inset

.
 The inductive assumption is that the relational liftings 
\begin_inset Formula $r^{\updownarrow K}$
\end_inset

 and 
\begin_inset Formula $r^{\updownarrow L}$
\end_inset

 are already defined.
\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 If 
\begin_inset Formula $G^{A}\triangleq K^{A}+L^{A}$
\end_inset

 then we define 
\begin_inset Formula $r^{\updownarrow G}\triangleq r^{\updownarrow K}\boxplus r^{\updownarrow L}$
\end_inset

 with the same inductive assumptions.
\end_layout

\begin_layout Standard

\series bold
(e)
\series default
 If 
\begin_inset Formula $G^{A}\triangleq K^{A}\rightarrow L^{A}$
\end_inset

 then we define 
\begin_inset Formula $r^{\updownarrow G}\triangleq r^{\updownarrow K}\ogreaterthan r^{\updownarrow L}$
\end_inset

 with the same inductive assumptions.
\end_layout

\begin_layout Standard

\series bold
(f)
\series default
 If 
\begin_inset Formula $G^{A}\triangleq S^{A,G^{A}}$
\end_inset

 is defined recursively via a recursion scheme 
\begin_inset Formula $S^{\bullet,\bullet}$
\end_inset

, we define 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

 by:
\begin_inset Formula 
\[
r^{\updownarrow G}\triangleq\big(r,\overline{r^{\uparrow G}}\big)^{\updownarrow S}\quad.
\]

\end_inset

Here the notation 
\begin_inset Formula $(r,s)^{\updownarrow S}$
\end_inset

 means the simultaneous lifting of the two relations 
\begin_inset Formula $r$
\end_inset

, 
\begin_inset Formula $s$
\end_inset

 to the type constructor 
\begin_inset Formula $S^{\bullet,\bullet}$
\end_inset

 (see Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-simultaneous-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 below).
 Also note that we use 
\begin_inset Formula $\overline{r^{\updownarrow G}}$
\end_inset

 recursively within the definition of 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

.
 This is allowed since we understand 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

 to be a function (of type 
\begin_inset Formula $G^{A}\times G^{B}\rightarrow\bbnum 2$
\end_inset

, see Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relation-between-A-B"
plural "false"
caps "false"
noprefix "false"

\end_inset

), and it is permitted to define functions recursively.
 The inductive assumption is that simultaneous liftings to 
\begin_inset Formula $S^{\bullet,\bullet}$
\end_inset

 are already defined.
\end_layout

\begin_layout Standard

\series bold
(g)
\series default
 If 
\begin_inset Formula $G^{A}\triangleq\forall X.\,H^{X,A}$
\end_inset

, we define 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

 of type 
\begin_inset Formula $(\forall X.\,H^{X,A})\leftrightarrow(\forall Y.\,H^{Y,B})$
\end_inset

 by:
\begin_inset Formula 
\[
(p^{:\forall X.\,H^{X,A}},q^{:\forall X.\,H^{X,B}})\in r^{\updownarrow\forall X.\,H^{X,\bullet}}\quad\text{means}\quad\forall(X,Y).\,\forall s^{X\leftrightarrow Y}.\,(p^{X},q^{Y})\in(s,r)^{\updownarrow H}\quad.
\]

\end_inset

Here 
\begin_inset Formula $(s,r)^{\updownarrow H}$
\end_inset

 denotes the simultaneous lifting of 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $r$
\end_inset

 to 
\begin_inset Formula $H$
\end_inset

 (see Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-simultaneous-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 below).
 A shorter way of writing the formula above is by formulating a relation
 between 
\begin_inset Formula $p^{X}$
\end_inset

 and 
\begin_inset Formula $q^{Y}$
\end_inset

 directly:
\begin_inset Formula 
\begin{equation}
\forall(X,Y):\quad\big(r^{\updownarrow\forall Z.\,H^{Z,\bullet}}\big)^{X,Y}\triangleq\forall s^{:X\leftrightarrow Y}.\,(s,r)^{\updownarrow H}\quad.\label{eq:relational-lifting-quantified-types-short}
\end{equation}

\end_inset

The inductive assumption is that simultaneous liftings to 
\begin_inset Formula $H$
\end_inset

 are already defined.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
We can see that Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 translates the type structure of 
\begin_inset Formula $G^{A}$
\end_inset

 into an analogous relational structure.
 Constant types (
\begin_inset Formula $Z$
\end_inset

) are replaced by the corresponding identity relations (
\begin_inset Formula $\text{id}^{:Z\leftrightarrow Z}$
\end_inset

).
 Each occurrence of 
\begin_inset Formula $A$
\end_inset

 in 
\begin_inset Formula $G^{A}$
\end_inset

 is replaced by an occurrence of the relation 
\begin_inset Formula $r$
\end_inset

 being lifted.
 Product types, co-product types, and function types are replaced by the
 relational operations 
\begin_inset Formula $\boxtimes$
\end_inset

, 
\begin_inset Formula $\boxplus$
\end_inset

, and 
\begin_inset Formula $\ogreaterthan$
\end_inset

.
 Recursive usage of types are replaced by the recursive usage of the lifted
 relations.
 Universally quantified types (
\begin_inset Formula $\forall X$
\end_inset

) are replaced by universally quantified new relations between new types.
 
\end_layout

\begin_layout Standard
So, an expression for a relational lifting 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

 can be written immediately by looking at the structure of 
\begin_inset Formula $G$
\end_inset

.
 For instance, lifting a relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 to a type constructor 
\begin_inset Formula $G^{A}\triangleq\forall X.\,\left(A\rightarrow X\right)\times\left(X\rightarrow A+Z\right)$
\end_inset

 is expressed as:
\begin_inset Formula 
\[
\big(r^{\updownarrow G}\big)^{X,Y}=\forall s^{:X\leftrightarrow Y}.\,(r\ogreaterthan s)\boxtimes\big(s\ogreaterthan(r\boxplus\text{id}^{:Z\leftrightarrow Z})\big)\quad.
\]

\end_inset

 We will illustrate this technique further in Example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 below.
\end_layout

\begin_layout Standard
To get more intuition, let us consider relations 
\begin_inset Formula $r$
\end_inset

 obtained from functions 
\begin_inset Formula $f$
\end_inset

 as 
\begin_inset Formula $r=\left<f\right>$
\end_inset

.
 In that case, one can sometimes (but not always) express the lifted relation
 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 through ordinary function liftings 
\begin_inset Formula $f^{\uparrow P}$
\end_inset

 and 
\begin_inset Formula $f^{\downarrow P}$
\end_inset

 via the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge condition.
\end_layout

\begin_layout Subsubsection
Example 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Example-relational-lifting"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solved examples
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 gives rise to a relation 
\begin_inset Formula $\left<f\right>$
\end_inset

 of type 
\begin_inset Formula $A\leftrightarrow B$
\end_inset

.
 Use Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 to compute the lifting 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 for the following type constructors 
\begin_inset Formula $P^{\bullet}$
\end_inset

:
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 
\begin_inset Formula $P^{A}\triangleq A+A\times A\quad$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 
\begin_inset Formula $P^{A}\triangleq(R\rightarrow A)\times(A\rightarrow S)$
\end_inset

 where 
\begin_inset Formula $R$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 are fixed types.
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 
\begin_inset Formula $P^{A}\triangleq A\rightarrow A\quad$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 
\begin_inset Formula $P^{A}\triangleq A\rightarrow\left(A\rightarrow R\right)\rightarrow R$
\end_inset

 where 
\begin_inset Formula $R$
\end_inset

 is a fixed type.
\end_layout

\begin_layout Standard

\series bold
(e)
\series default
 
\begin_inset Formula $P^{A}\triangleq\left(A\rightarrow A\right)\rightarrow A\quad$
\end_inset

.
\end_layout

\begin_layout Standard
In each case 
\series bold
(a)
\series default
–
\series bold
(e)
\series default
, express 
\begin_inset Formula $P^{A}\triangleq N^{A,A}$
\end_inset

 where 
\begin_inset Formula $N^{X,Y}$
\end_inset

 is a suitable profunctor and compare the condition 
\begin_inset Formula $(p_{1},p_{2})\in\left<f\right>^{\updownarrow P}$
\end_inset

 with the 
\begin_inset Formula $\left(N,f\right)$
\end_inset

-wedge relation (
\begin_inset Formula $p_{1}\triangleright f^{\uparrow N}=p_{2}\triangleright f^{\downarrow N}$
\end_inset

).
 
\end_layout

\begin_layout Subparagraph
Solution
\end_layout

\begin_layout Standard
In all cases, the lifted relation 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 has type 
\begin_inset Formula $P^{A}\leftrightarrow P^{B}$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 At the top level, 
\begin_inset Formula $P^{A}$
\end_inset

 is a disjunction: 
\begin_inset Formula $P^{A}=\text{Id}^{A}+H^{A}$
\end_inset

 where 
\begin_inset Formula $H^{A}\triangleq A\times A=\text{Id}^{A}\times\text{Id}^{A}$
\end_inset

.
 The lifting to the identity functor is given by 
\begin_inset Formula $r^{\updownarrow\text{Id}}\triangleq r$
\end_inset

 according to Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(b).
 So, the lifting 
\begin_inset Formula $r^{\updownarrow P}$
\end_inset

 can be written as:
\begin_inset Formula 
\[
r^{\updownarrow P}=r^{\updownarrow\text{Id}}\boxplus r^{\updownarrow H}=r^{\updownarrow\text{Id}}\boxplus\big(r^{\updownarrow\text{Id}}\boxtimes r^{\updownarrow\text{Id}}\big)=r\boxplus\big(r\boxtimes r\big)\quad.
\]

\end_inset

We see that the relational formula 
\begin_inset Formula $r^{\updownarrow P}=r\boxplus\big(r\boxtimes r\big)$
\end_inset

 repeats the type structure 
\begin_inset Formula $P^{A}=A+A\times A$
\end_inset

.
\end_layout

\begin_layout Standard
Setting now 
\begin_inset Formula $r=\left<f\right>$
\end_inset

, we find:
\begin_inset Formula 
\[
\left<f\right>^{\updownarrow P}=\left<f\right>\boxplus\left<f\right>^{\updownarrow H}=\left<f\right>\boxplus\big(\left<f\right>\boxtimes\left<f\right>\big)\quad.
\]

\end_inset

Use Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(d) to express the condition for some values 
\begin_inset Formula $(x^{:P^{A}},y^{:P^{B}})$
\end_inset

 to be in the relation 
\begin_inset Formula $\left<f\right>\boxplus\left<f\right>^{\updownarrow H}$
\end_inset

:
\begin_inset Formula 
\[
(x,y)\in\left<f\right>^{\updownarrow P}\text{ if }x=x_{1}+\bbnum 0,\,y=y_{1}+\bbnum 0,\,(x_{1},y_{1})\in\left<f\right>\text{ or }x=\bbnum 0+x_{2},\,y=\bbnum 0+y_{2},\,(x_{2},y_{2})\in\left<f\right>^{\updownarrow H}\quad.
\]

\end_inset

The condition 
\begin_inset Formula $(x_{1},y_{1})\in\left<f\right>$
\end_inset

 means 
\begin_inset Formula $f(x_{1})=y_{1}$
\end_inset

.
 Finally, Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c) gives:
\begin_inset Formula 
\[
(a_{1}^{:A}\times a_{2}^{:A},b_{1}^{:B}\times b_{2}^{:B})\in\left<f\right>\boxtimes\left<f\right>\text{ if }(a_{1},b_{1})\in\left<f\right>\text{ and }(a_{2},b_{2})\in\left<f\right>\quad.
\]

\end_inset

The last condition is simplified to:
\begin_inset Formula 
\[
(a_{1}^{:A}\times a_{2}^{:A},b_{1}^{:B}\times b_{2}^{:B})\in\left<f\right>^{\updownarrow H}\text{ if }f(a_{1})=b_{1}\text{ and }f(a_{2})=b_{2}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
Putting the pieces together, we obtain the following definition of the relation
 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

:
\begin_inset Formula 
\[
(x^{:P^{A}},y^{:P^{B}})\in\left<f\right>^{\updownarrow P}\text{ if }x=x_{1}+\bbnum 0\text{ and }y=f(x_{1})+\bbnum 0,\text{ or }x=\bbnum 0+a_{1}\times a_{2}\text{ and }y=\bbnum 0+f(a_{1})\times f(a_{2})\quad.
\]

\end_inset

We note that this condition is equivalent to applying 
\begin_inset Formula $f^{\uparrow P}$
\end_inset

:
\begin_inset Formula 
\[
(x^{:P^{A}},y^{:P^{B}})\in\left<f\right>^{\updownarrow P}\text{ if }x\triangleright f^{\uparrow P}=y\quad,\quad\text{ or more concisely}:\quad\left<f\right>^{\updownarrow P}=\langle f^{\uparrow P}\rangle\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
We will prove below (Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-function-relation-covariant-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) that this property holds for all functors 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Standard
With 
\begin_inset Formula $N^{X,Y}\triangleq P^{Y}$
\end_inset

, the 
\begin_inset Formula $\left(N,f\right)$
\end_inset

-wedge relation is equivalent to the equation 
\begin_inset Formula $x\triangleright f^{\uparrow P}=y$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 At the top level, 
\begin_inset Formula $P^{A}$
\end_inset

 is a product: 
\begin_inset Formula $P^{A}=G^{A}\times H^{A}$
\end_inset

 where 
\begin_inset Formula $G^{A}\triangleq R\rightarrow A$
\end_inset

 and 
\begin_inset Formula $H^{A}\triangleq A\rightarrow S$
\end_inset

.
 By Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c), we get 
\begin_inset Formula $r^{\updownarrow P}=r^{\updownarrow G}\boxtimes r^{\updownarrow H}$
\end_inset

.
 To compute 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

, we note that 
\begin_inset Formula $G$
\end_inset

 is an exponential functor construction, 
\begin_inset Formula $G^{A}=K^{A}\rightarrow\text{Id}^{A}$
\end_inset

, that uses a constant functor 
\begin_inset Formula $K^{A}\triangleq R$
\end_inset

.
 Lifting to a constant functor gives 
\begin_inset Formula $r^{\updownarrow K}=\text{id}^{:R\leftrightarrow R}$
\end_inset

 according to Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a).
 So, we find:
\begin_inset Formula 
\[
r^{\updownarrow G}=\text{id}^{:R\leftrightarrow R}\ogreaterthan r^{\updownarrow\text{Id}}=\text{id}^{:R\leftrightarrow R}\ogreaterthan r\quad.
\]

\end_inset

We treat 
\begin_inset Formula $r^{\updownarrow H}$
\end_inset

 similarly and obtain 
\begin_inset Formula $r^{\updownarrow H}=r\ogreaterthan\text{id}^{:S\leftrightarrow S}$
\end_inset

.
 Put the pieces together:
\begin_inset Formula 
\[
r^{\updownarrow P}=r^{\updownarrow G}\boxtimes r^{\updownarrow H}=(\text{id}^{:R\leftrightarrow R}\ogreaterthan r)\boxtimes(r\ogreaterthan\text{id}^{:S\leftrightarrow S})\quad.
\]

\end_inset

We see that 
\begin_inset Formula $r^{\updownarrow P}$
\end_inset

 repeats the type structure of 
\begin_inset Formula $P^{A}=(R\rightarrow A)\times(A\rightarrow S)$
\end_inset

.
 The occurrences of 
\begin_inset Formula $A$
\end_inset

 in 
\begin_inset Formula $P^{A}$
\end_inset

 are replaced by 
\begin_inset Formula $r$
\end_inset

, while constant types (
\begin_inset Formula $R$
\end_inset

, 
\begin_inset Formula $S$
\end_inset

) are replaced by the corresponding identity relations (
\begin_inset Formula $\text{id}^{:R\leftrightarrow R}$
\end_inset

 and 
\begin_inset Formula $\text{id}^{:S\leftrightarrow S}$
\end_inset

).
 We will see a similar pattern in the remaining parts of this example.
\end_layout

\begin_layout Standard
We now set 
\begin_inset Formula $r=\left<f\right>$
\end_inset

 and transform 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 to a more specific formula for a relation of type 
\begin_inset Formula $P^{A}\leftrightarrow P^{B}$
\end_inset

 where 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

 are arbitrary types.
 For arbitrary values 
\begin_inset Formula $g_{1}^{:R\rightarrow A}$
\end_inset

, 
\begin_inset Formula $g_{2}^{:R\rightarrow B}$
\end_inset

, 
\begin_inset Formula $h_{1}^{:A\rightarrow S}$
\end_inset

, 
\begin_inset Formula $h_{2}^{:B\rightarrow S}$
\end_inset

, we write:
\begin_inset Formula 
\[
(g_{1}\times h_{1},g_{2}\times h_{2})\in\left<f\right>^{\updownarrow P}\text{ means }(g_{1},g_{2})\in\text{id}^{:R\leftrightarrow R}\ogreaterthan\left<f\right>\text{ and }(h_{1},h_{2})\in\left<f\right>\ogreaterthan\text{id}^{:S\leftrightarrow S}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
The condition 
\begin_inset Formula $(g_{1},g_{2})\in\text{id}\ogreaterthan\left<f\right>$
\end_inset

 is rewritten using Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(e):
\begin_inset Formula 
\[
(g_{1}^{:R\rightarrow A},g_{2}^{:R\rightarrow B})\in\text{id}\ogreaterthan\left<f\right>\text{ means if }(r_{1}^{:R},r_{2}^{:R})\in\text{id}^{:R\leftrightarrow R}\text{ then }(g_{1}(r_{1}),g_{2}(r_{2}))\in\left<f\right>\quad.
\]

\end_inset

The identity relation between 
\begin_inset Formula $r_{1}$
\end_inset

 and 
\begin_inset Formula $r_{2}$
\end_inset

 holds only if 
\begin_inset Formula $r_{1}=r_{2}$
\end_inset

.
 We find:
\begin_inset Formula 
\[
(g_{1}^{:R\rightarrow A},g_{2}^{:R\rightarrow B})\in\text{id}^{:R\leftrightarrow R}\ogreaterthan\left<f\right>\text{ means }\forall r^{:R}.\,f(g_{1}(r))=g_{2}(r)\quad\text{or equivalently}:\quad g_{1}\bef f=g_{2}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
The condition 
\begin_inset Formula $(h_{1},h_{2})\in\left<f\right>^{\updownarrow H}$
\end_inset

 is rewritten using the same definitions:
\begin_inset Formula 
\[
(h_{1}^{:A\rightarrow S},h_{2}^{:B\rightarrow S})\in\left<f\right>\ogreaterthan\text{id}^{:S\leftrightarrow S}\text{ means if }(a^{:A},b^{:B})\in\left<f\right>\text{ then }(h_{1}(a),h_{2}(b))\in\text{id}\quad.
\]

\end_inset

We simplify this to:
\begin_inset Formula 
\[
(h_{1}^{:A\rightarrow S},h_{2}^{:B\rightarrow S})\in\left<f\right>\ogreaterthan\text{id}^{:S\leftrightarrow S}\text{ means }h_{1}(a)=h_{2}(f(a))\quad\text{or equivalently}:\quad h_{1}=f\bef h_{2}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
Finally, the lifted relation 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 is expressed as:
\begin_inset Formula 
\[
(g_{1}\times h_{1},g_{2}\times h_{2})\in\left<f\right>^{\updownarrow P}\text{ if }g_{1}\bef f=g_{2}\text{ and }h_{1}=f\bef h_{2}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
Defining the profunctor 
\begin_inset Formula $N^{X,Y}\triangleq\left(R\rightarrow Y\right)\times\left(X\rightarrow S\right)$
\end_inset

, we find that 
\begin_inset Formula $g_{1}\times h_{1}$
\end_inset

 has type 
\begin_inset Formula $N^{A,A}$
\end_inset

 and 
\begin_inset Formula $g_{2}\times h_{2}$
\end_inset

 has type 
\begin_inset Formula $N^{B,B}$
\end_inset

.
 Then the condition 
\begin_inset Formula $(g_{1}\times h_{1},g_{2}\times h_{2})\in\left<f\right>^{\updownarrow P}$
\end_inset

 is 
\emph on
equivalent
\emph default
 to the 
\begin_inset Formula $\left(N,f\right)$
\end_inset

-wedge relation:
\begin_inset Formula 
\[
(g_{1}\times h_{1})\triangleright f^{\uparrow N^{A,\bullet}}=(g_{2}\times h_{2})\triangleright f^{\downarrow N^{\bullet,B}}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 Using Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(b) and (e), we get:
\begin_inset Formula 
\begin{align*}
 & r^{\updownarrow P}=r^{\updownarrow\text{Id}}\ogreaterthan r^{\updownarrow\text{Id}}=r\ogreaterthan r\quad,\quad\quad\text{so}\quad\left<f\right>^{\updownarrow P}=\left<f\right>\ogreaterthan\left<f\right>\quad;\\
 & (p_{1}^{:A\rightarrow A},p_{2}^{:B\rightarrow B})\in\left<f\right>^{\updownarrow P}\quad\text{ means }\quad\text{if }(a^{:A},b^{:B})\in\left<f\right>\text{ then }(p_{1}(a),p_{2}(b))\in\left<f\right>\quad.
\end{align*}

\end_inset

The condition can be rewritten as a single equation:
\begin_inset Formula 
\[
(p_{1}^{:A\rightarrow A},p_{2}^{:B\rightarrow B})\in\left<f\right>^{\updownarrow P}\quad\text{ means }\quad f(p_{1}(a))=p_{2}(f(a))\quad\text{or equivalently}:\quad p_{1}\bef f=f\bef p_{2}\quad.
\]

\end_inset

This is the same as the 
\begin_inset Formula $\left(N,f\right)$
\end_inset

-wedge relation (
\begin_inset Formula $p_{1}\triangleright f^{\uparrow N}=p_{2}\triangleright f^{\downarrow N}$
\end_inset

) with the profunctor 
\begin_inset Formula $N^{X,Y}\triangleq X\rightarrow Y$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 Since 
\begin_inset Formula $P^{A}=\text{Id}^{A}\rightarrow Q^{A}$
\end_inset

 is a function type (with 
\begin_inset Formula $Q^{A}\triangleq\left(A\rightarrow R\right)\rightarrow R$
\end_inset

), we use Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(e): 
\begin_inset Formula 
\[
r^{\updownarrow P}=r^{\updownarrow\text{Id}}\ogreaterthan r^{\updownarrow Q}=r\ogreaterthan(r\ogreaterthan\text{id}^{:R\leftrightarrow R})\ogreaterthan\text{id}^{:R\leftrightarrow R}\quad.
\]

\end_inset

Let us now substitute 
\begin_inset Formula $r=\left<f\right>$
\end_inset

 and simplify the conditions:
\begin_inset Formula 
\[
(p_{1}^{:P^{A}},p_{2}^{:P^{B}})\in\left<f\right>\ogreaterthan\left<f\right>^{\updownarrow Q}\quad\text{ means }\quad\text{if }(a^{:A},b^{:B})\in\left<f\right>\text{ then }(p_{1}(a),p_{2}(b))\in\left<f\right>^{\updownarrow Q}\quad.
\]

\end_inset

The definition of 
\begin_inset Formula $\left<f\right>^{\updownarrow Q}$
\end_inset

 is obtained if we define 
\begin_inset Formula $K^{A}\triangleq A\rightarrow R$
\end_inset

:
\begin_inset Formula 
\[
(q_{1}^{:Q^{A}},q_{2}^{:Q^{B}})\in\left<f\right>^{\updownarrow Q}\quad\text{ means }\quad\text{if }(k_{1}^{:A\rightarrow R},k_{2}^{:B\rightarrow R})\in\left<f\right>^{\updownarrow K}\text{ then }(q_{1}(k_{1}),q_{2}(k_{2}))\in\text{id}\quad.
\]

\end_inset

Expanding the definition of 
\begin_inset Formula $\left<f\right>^{\updownarrow K}$
\end_inset

 as we did in part 
\series bold
(b)
\series default
 of this example, we get:
\begin_inset Formula 
\[
(q_{1},q_{2})\in\left<f\right>^{\updownarrow Q}\quad\text{ means }\quad\text{if }b=f(a)\text{ and }k_{1}(a)=k_{2}(b)\text{ then }q_{1}(k_{1})=q_{2}(k_{2})\quad.
\]

\end_inset

This simplifies to 
\begin_inset Formula $k_{1}(a)=k_{2}(f(a))$
\end_inset

, or 
\begin_inset Formula $k_{1}=f\bef k_{2}$
\end_inset

.
 So, we finally express 
\begin_inset Formula $\left<f\right>^{\updownarrow Q}$
\end_inset

 and 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 as:
\begin_inset Formula 
\begin{align*}
 & (q_{1}^{:Q^{A}},q_{2}^{:Q^{B}})\in\left<f\right>^{\updownarrow Q}\quad\text{ means }\quad(k\rightarrow f\bef k)\bef q_{1}=q_{2}\quad,\\
 & (p_{1}^{:P^{A}},p_{2}^{:P^{B}})\in\left<f\right>^{\updownarrow P}\quad\text{ means }\quad a\rightarrow\big((k\rightarrow f\bef k)\bef p_{1}(a)\big)=f\bef p_{2}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Defining 
\begin_inset Formula $N^{X,Y}\triangleq X\rightarrow\left(Y\rightarrow R\right)\rightarrow R$
\end_inset

, we find that the last formula is equivalent to the 
\begin_inset Formula $\left(N,f\right)$
\end_inset

-wedge relation for 
\begin_inset Formula $p_{1}$
\end_inset

 and 
\begin_inset Formula $p_{2}$
\end_inset

:
\begin_inset Formula 
\[
p_{1}\triangleright f^{\uparrow N}=p_{1}\bef(q\rightarrow(k\rightarrow f\bef k)\bef q)\quad,\quad\quad p_{2}\triangleright f^{\downarrow N}=f\bef p_{2}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard

\series bold
(e)
\series default
 We may write 
\begin_inset Formula $P^{A}=Q^{A}\rightarrow\text{Id}^{A}$
\end_inset

 with 
\begin_inset Formula $Q^{A}\triangleq A\rightarrow A$
\end_inset

 and use Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(e):
\begin_inset Formula 
\begin{align*}
 & r^{\updownarrow P}=r^{\updownarrow Q}\ogreaterthan r^{\updownarrow\text{Id}}=(r\ogreaterthan r)\ogreaterthan r\quad,\quad\quad\left<f\right>^{\updownarrow P}=(\left<f\right>\ogreaterthan\left<f\right>)\ogreaterthan\left<f\right>\quad,\\
 & (p_{1}^{:P^{A}},p_{2}^{:P^{B}})\in(\left<f\right>\ogreaterthan\left<f\right>)\ogreaterthan\left<f\right>\quad\text{means}\quad\text{if }(q_{1}^{:A\rightarrow A},q_{2}^{:B\rightarrow B})\in\left<f\right>\ogreaterthan\left<f\right>\text{ then }(p_{1}(q_{1}),p_{2}(q_{2}))\in\left<f\right>\quad.\\
 & (q_{1}^{:A\rightarrow A},q_{2}^{:B\rightarrow B})\in\left<f\right>\ogreaterthan\left<f\right>\quad\text{means}\quad\text{if }(a^{:A},b^{:B})\in\left<f\right>\text{ then }(q_{1}(a),q_{2}(b))\in\left<f\right>\quad.
\end{align*}

\end_inset

Simplifying these conditions, we get:
\begin_inset Formula 
\begin{align}
 & (q_{1},q_{2})\in\left<f\right>^{\updownarrow Q}\quad\text{ means }\quad q_{1}\bef f=f\bef q_{2}\quad,\nonumber \\
 & (p_{1}^{:P^{A}},p_{2}^{:P^{B}})\in\left<f\right>^{\updownarrow P}\quad\text{ means }\quad\text{if }q_{1}\bef f=f\bef q_{2}\text{ then }f(p_{1}(q_{1}))=p_{2}(q_{2})\quad.\label{eq:relational-lifting-example-e-derivation1}
\end{align}

\end_inset

The condition for 
\begin_inset Formula $(p_{1},p_{2})\in\left<f\right>^{\updownarrow P}$
\end_inset

 
\emph on
cannot
\emph default
 be written as a single equation involving 
\begin_inset Formula $p_{1}$
\end_inset

 and 
\begin_inset Formula $p_{2}$
\end_inset

 because we cannot express 
\begin_inset Formula $q_{1}$
\end_inset

 through 
\begin_inset Formula $q_{2}$
\end_inset

 or 
\begin_inset Formula $q_{2}$
\end_inset

 through 
\begin_inset Formula $q_{1}$
\end_inset

.
 The relation between 
\begin_inset Formula $q_{1}$
\end_inset

 and 
\begin_inset Formula $q_{2}$
\end_inset

 is many-to-many and is not equivalent to a function.
\end_layout

\begin_layout Standard
Let us define 
\begin_inset Formula $N^{X,Y}\triangleq\left(Y\rightarrow X\right)\rightarrow Y$
\end_inset

 and write the 
\begin_inset Formula $\left(N,f\right)$
\end_inset

-wedge relation for 
\begin_inset Formula $p_{1}^{:N^{A,A}}$
\end_inset

 and 
\begin_inset Formula $p_{2}^{:N^{B,B}}$
\end_inset

:
\begin_inset Formula 
\begin{equation}
k^{:B\rightarrow A}\triangleright(p_{1}\triangleright f^{\uparrow N})=k\triangleright(p_{2}\triangleright f^{\downarrow N})\quad\text{or equivalently}:\quad f(p_{1}(f\bef k))=p_{2}(k\bef f)\quad.\label{eq:N-f-wedge-relation-example-derivation1}
\end{equation}

\end_inset

We notice that if we set 
\begin_inset Formula $q_{1}\triangleq f\bef k$
\end_inset

 and 
\begin_inset Formula $q_{2}\triangleq k\bef f$
\end_inset

 then the precondition 
\begin_inset Formula $q_{1}\bef f=f\bef q_{2}$
\end_inset

 in Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-lifting-example-e-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) will be satisfied, and it will follow that 
\begin_inset Formula $f(p_{1}(q_{1}))=p_{2}(q_{2})$
\end_inset

.
 So, the 
\begin_inset Formula $\left(N,f\right)$
\end_inset

-wedge relation is a 
\emph on
consequence
\emph default
 of the relation 
\begin_inset Formula $(p_{1},p_{2})\in\left<f\right>^{\updownarrow P}$
\end_inset

.
 However, if we are given some functions 
\begin_inset Formula $f$
\end_inset

, 
\begin_inset Formula $q_{1}$
\end_inset

, and 
\begin_inset Formula $q_{2}$
\end_inset

 such that the precondition 
\begin_inset Formula $q_{1}\bef f=f\bef q_{2}$
\end_inset

 holds, it does not follow that there exists a function 
\begin_inset Formula $k$
\end_inset

 such that 
\begin_inset Formula $q_{1}=f\bef k$
\end_inset

 and 
\begin_inset Formula $q_{2}=k\bef f$
\end_inset

.
 A simple counterexample is found when 
\begin_inset Formula $f$
\end_inset

 is a constant function that ignores its argument and always returns a fixed
 value:
\begin_inset Formula 
\[
f^{:A\rightarrow B}\triangleq\_^{:A}\rightarrow b_{0}\quad,\quad\quad\text{where }b_{0}\text{ is a fixed value of type }B\quad.
\]

\end_inset

Then the precondition 
\begin_inset Formula $q_{1}\bef f=f\bef q_{2}$
\end_inset

 is reduced to the condition 
\begin_inset Formula $q_{2}(b_{0})=b_{0}$
\end_inset

 with 
\emph on
no
\emph default
 restrictions on 
\begin_inset Formula $q_{1}$
\end_inset

.
 But if 
\begin_inset Formula $q_{1}^{:A\rightarrow A}$
\end_inset

 were expressed as 
\begin_inset Formula $q_{1}=f\bef k$
\end_inset

 with some 
\begin_inset Formula $k^{:B\rightarrow A}$
\end_inset

, we would have 
\begin_inset Formula $q_{1}=\_\rightarrow k(b_{0})$
\end_inset

.
 So, functions 
\begin_inset Formula $q_{1}$
\end_inset

 expressed as 
\begin_inset Formula $f\bef k$
\end_inset

 are constant functions that ignore their argument.
 This is a stronger restriction than 
\begin_inset Formula $q_{1}\bef f=f\bef q_{2}$
\end_inset

 because more pairs 
\begin_inset Formula $\left(q_{1},q_{2}\right)$
\end_inset

 satisfy 
\begin_inset Formula $q_{1}\bef f=f\bef q_{2}$
\end_inset

.
 Accordingly, the 
\begin_inset Formula $\left(N,f\right)$
\end_inset

-wedge relation
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:N-f-wedge-relation-example-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) constrains the functions 
\begin_inset Formula $\left(p_{1},p_{2}\right)$
\end_inset

 weaker and is satisfied by more pairs 
\begin_inset Formula $\left(p_{1},p_{2}\right)$
\end_inset

 than the relation 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

.
 So, the 
\begin_inset Formula $\left(N,f\right)$
\end_inset

-wedge relation is
\emph on
 weaker
\emph default
 than the relation 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
Below we will prove (Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-wedge-law-from-parametricity"
plural "false"
caps "false"
noprefix "false"

\end_inset

) that the 
\begin_inset Formula $\left(N,f\right)$
\end_inset

-wedge relation is always a consequence of the corresponding lifted relation
 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

.
 Example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows that the 
\begin_inset Formula $\left(N,f\right)$
\end_inset

-wedge relation is equivalent to 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 only when the type structure of 
\begin_inset Formula $P$
\end_inset

 is sufficiently simple.
\end_layout

\begin_layout Subsection
Properties of relational lifting.
 Simultaneous lifting
\end_layout

\begin_layout Standard
Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 requires some additional work to be fully usable.
 This section proves the properties of relational lifting that will be needed
 later in this Appendix.
\end_layout

\begin_layout Standard
We begin by pointing out an ambiguity in applying Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(g) to 
\begin_inset Formula $G^{A}\triangleq\forall X.\,H^{X,A}$
\end_inset

 when 
\begin_inset Formula $H^{X,A}$
\end_inset

 does 
\emph on
not
\emph default
 actually depend on the type parameter 
\begin_inset Formula $A$
\end_inset

; that is, when 
\begin_inset Formula $H^{X,A}=K^{X}$
\end_inset

 with some 
\begin_inset Formula $K^{\bullet}$
\end_inset

.
 In that case, the type constructor 
\begin_inset Formula $G$
\end_inset

 is a constant functor: 
\begin_inset Formula $G^{A}=Z\triangleq\forall X.\,K^{X}$
\end_inset

.
 We may lift a relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 to 
\begin_inset Formula $G^{A}\triangleq Z$
\end_inset

 using Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a) and obtain 
\begin_inset Formula $r^{\updownarrow G}=\text{id}^{:Z\leftrightarrow Z}$
\end_inset

.
 To show that Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is consistent, we need to prove that Definitions
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a) and
\begin_inset space ~
\end_inset

(g) define the same lifted relation 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

.
 This will be shown in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-parametricity-gives-identity-relation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 below by using the relational naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-simplified"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 That law is the result of the relational parametricity theorem (Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Relational-parametricity-theorem"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 So, the relational parametricity theorem turns out to be a necessary requiremen
t for the consistency of Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-parametricity-gives-identity-relation"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-parametricity-gives-identity-relation"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
For a quantified type 
\begin_inset Formula $Z\triangleq\forall X.\ H^{X}$
\end_inset

, the relation 
\begin_inset Formula $\text{id}^{:Z\leftrightarrow Z}$
\end_inset

 has two equivalent forms:
\begin_inset Formula 
\[
(p^{:\forall X.\,H^{X}},q^{:\forall Y.\,H^{Y}})\in\text{id}\quad\text{ is equivalent to}:\quad\forall(X,Y).\,\forall s^{:X\leftrightarrow Y}.\,(p^{X},q^{Y})\in s^{\updownarrow H}\quad.
\]

\end_inset

Here we assume that 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

 are implemented via fully parametric code.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
We need to prove the equivalence in both directions.
\end_layout

\begin_layout Standard
If some 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

 satisfy 
\begin_inset Formula $(p^{X},q^{Y})\in s^{\updownarrow H}$
\end_inset

 where we may choose 
\begin_inset Formula $s$
\end_inset

 arbitrarily, let us choose 
\begin_inset Formula $s$
\end_inset

 to be the identity relation and force 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $Y$
\end_inset

 to be the same type:
\begin_inset Formula 
\[
(x^{:X},y^{:Y})\in s\text{ only when }X=Y\text{ and }x=y\quad.
\]

\end_inset

Lifting an identity relation will produce an identity relation (Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-lifting-identity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

), so:
\begin_inset Formula 
\[
\forall(X,Y).\,(p^{X},q^{Y})\in s^{\updownarrow H}\text{ with }s^{\updownarrow H}=\text{id}\quad\text{ means }\quad X=Y\text{ and }p^{X}=q^{X}\quad.
\]

\end_inset

This is the same as the identity relation between 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

.
\end_layout

\begin_layout Standard
It remains to show that 
\begin_inset Formula $(p^{X},q^{Y})\in s^{\updownarrow H}$
\end_inset

 when 
\begin_inset Formula $p=q$
\end_inset

.
 In other words, 
\begin_inset Formula $(p^{X},p^{Y})\in s^{\updownarrow H}$
\end_inset

 for any 
\begin_inset Formula $s^{:X\leftrightarrow Y}$
\end_inset

.
 Since 
\begin_inset Formula $p$
\end_inset

 is fully parametric, it obeys the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-simplified"
plural "false"
caps "false"
noprefix "false"

\end_inset

), which we will prove below without using this statement.
 We set 
\begin_inset Formula $Q^{X}\triangleq H^{X}$
\end_inset

, 
\begin_inset Formula $r\triangleq s$
\end_inset

, and 
\begin_inset Formula $t\triangleq p$
\end_inset

 in the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-simplified"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and obtain:
\begin_inset Formula 
\[
\forall(X,Y).\,\forall s^{:X\leftrightarrow Y}.\,(p^{X},p^{Y})\in s^{\updownarrow H}\quad.
\]

\end_inset


\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
Another construction required for Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is a simultaneous lifting of two relations to a type constructor with two
 type parameters.
 To gain intuition, consider a bifunctor 
\begin_inset Formula $S^{\bullet,\bullet}$
\end_inset

 and two functions 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 and 
\begin_inset Formula $g^{:X\rightarrow Y}$
\end_inset

.
 We can lift 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

 simultaneously with respect to the two parameters of 
\begin_inset Formula $S^{\bullet,\bullet}$
\end_inset

 using the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

bimap
\end_layout

\end_inset

 method of the bifunctor 
\begin_inset Formula $S$
\end_inset

.
 The result is a function of type 
\begin_inset Formula $S^{A,X}\rightarrow S^{B,Y}$
\end_inset

:
\begin_inset Formula 
\[
\text{bimap}_{S}(f)(g):S^{A,X}\rightarrow S^{B,Y}\quad,\quad\text{bimap}_{S}(f)(g)=f^{\uparrow S^{\bullet,X}}\bef g^{\uparrow S^{B,\bullet}}=g^{\uparrow S^{A,\bullet}}\bef f^{\uparrow S^{\bullet,Y}}\quad.
\]

\end_inset

The resulting function is independent of the order of liftings due to the
 bifunctor commutativity law
\begin_inset Index idx
status open

\begin_layout Plain Layout
commutativity law!of bifunctors
\end_layout

\end_inset

 (Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Commutativity-laws-for-type-constructors"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 However, it turns out that the analog of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

bimap
\end_layout

\end_inset

 for relations is an operation that 
\emph on
cannot
\emph default
 be expressed via separate liftings with respect to each type parameter.
 For this reason, we need to define the simultaneous relational lifting
 as a special new operation.
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-simultaneous-relational-lifting"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-simultaneous-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (simultaneous relational lifting)
\end_layout

\begin_layout Standard
Given any fully parametric type constructor with two type parameters (
\begin_inset Formula $G^{\bullet,\bullet}$
\end_inset

), we lift two relations 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 and 
\begin_inset Formula $s^{:X\leftrightarrow Y}$
\end_inset

 simultaneously to 
\begin_inset Formula $G$
\end_inset

.
 This creates a new relation of type 
\begin_inset Formula $G^{A,X}\leftrightarrow G^{B,Y}$
\end_inset

, denoted by 
\begin_inset Formula $(r,s)^{\updownarrow G}$
\end_inset

 and defined by induction on the structure of 
\begin_inset Formula $G$
\end_inset

:
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 If 
\begin_inset Formula $G^{A,X}\triangleq Z$
\end_inset

 with a fixed type 
\begin_inset Formula $Z$
\end_inset

, we define 
\begin_inset Formula $(r,s)^{\updownarrow G}\triangleq\text{id}^{:Z\leftrightarrow Z}$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 If 
\begin_inset Formula $G^{A,X}=A$
\end_inset

, we define 
\begin_inset Formula $(r,s)^{\updownarrow G}\triangleq r$
\end_inset

.
 If 
\begin_inset Formula $G^{A,X}=X$
\end_inset

, we define 
\begin_inset Formula $(r,s)^{\updownarrow G}\triangleq s$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 If 
\begin_inset Formula $K^{\bullet,\bullet}$
\end_inset

 and 
\begin_inset Formula $L^{\bullet,\bullet}$
\end_inset

 are any fully parametric type constructors, we define: 
\begin_inset Formula 
\begin{align*}
\text{for}\quad G^{A,X}\triangleq K^{A,X}\times L^{A,X}\quad:\quad & (r,s)^{\updownarrow G}\triangleq(r,s)^{\updownarrow K}\boxtimes(r,s)^{\updownarrow L}\quad;\\
\text{for}\quad G^{A,X}\triangleq K^{A,X}+L^{A,X}\quad:\quad & (r,s)^{\updownarrow G}\triangleq(r,s)^{\updownarrow K}\boxplus(r,s)^{\updownarrow L}\quad;\\
\text{for}\quad G^{A,X}\triangleq K^{A,X}\rightarrow L^{A,X}\quad:\quad & (r,s)^{\updownarrow G}\triangleq(r,s)^{\updownarrow K}\ogreaterthan(r,s)^{\updownarrow L}\quad.
\end{align*}

\end_inset

The last relation is between functions of types 
\begin_inset Formula $K^{A,X}\rightarrow L^{A,X}$
\end_inset

 and 
\begin_inset Formula $K^{B,Y}\rightarrow L^{B,Y}$
\end_inset

.
 
\end_layout

\begin_layout Standard
The inductive assumption is that simultaneous liftings to 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

 are already defined.
\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 If 
\begin_inset Formula $G^{A,X}\triangleq S^{A,X,G^{A,X}}$
\end_inset

 is defined recursively via a recursion scheme 
\begin_inset Formula $S^{\bullet,\bullet,\bullet}$
\end_inset

, we define:
\begin_inset Formula 
\[
(r,s)^{\updownarrow G}\triangleq\big(r,s,\overline{(r,s)^{\updownarrow G}}\big)^{\updownarrow S}\quad.
\]

\end_inset

Here we use 
\begin_inset Formula $\overline{(r,s)^{\updownarrow G}}$
\end_inset

 recursively within the definition of 
\begin_inset Formula $(r,s)^{\updownarrow G}$
\end_inset

.
 This is allowed since we understand 
\begin_inset Formula $(r,s)^{\updownarrow G}$
\end_inset

 to be a function, and it is permitted to define functions recursively.
 The inductive assumption is that simultaneous liftings of any 
\emph on
three
\emph default
 relations to 
\begin_inset Formula $S^{\bullet,\bullet,\bullet}$
\end_inset

 are already defined.
 
\end_layout

\begin_layout Standard

\series bold
(e)
\series default
 If 
\begin_inset Formula $G^{A,X}\triangleq\forall Z.\,H^{Z,A,X}$
\end_inset

, we define 
\begin_inset Formula $(r,s)^{\updownarrow G}$
\end_inset

 of type 
\begin_inset Formula $(\forall U.\,H^{U,A,X})\leftrightarrow(\forall V.\,H^{V,B,Y})$
\end_inset

 by:
\begin_inset Formula 
\[
(p^{:\forall U.\,H^{U,A,X}},q^{:\forall V.\,H^{V,B,Y}})\in(r,s)^{\updownarrow\forall Z.\,H^{Z,\bullet,\bullet}}\quad\text{means}\quad\forall(U,V).\,\forall w^{U\leftrightarrow V}.\,(p^{U},q^{V})\in(w,r,s)^{\updownarrow H^{\bullet,\bullet,\bullet}}\quad.
\]

\end_inset

A shorter way of writing this definition is by formulating a relation between
 
\begin_inset Formula $p^{U}$
\end_inset

 and 
\begin_inset Formula $q^{V}$
\end_inset

 directly:
\begin_inset Formula 
\begin{equation}
\forall(U,V):\quad\big((r,s)^{\updownarrow\forall Z.\,H^{Z,\bullet,\bullet}}\big)^{U,V}\triangleq\forall w^{:U\leftrightarrow V}.\,(w,r,s)^{\updownarrow H^{\bullet,\bullet,\bullet}}\quad.\label{eq:relational-lifting-quantified-types-short-1}
\end{equation}

\end_inset

The inductive assumption is that simultaneous liftings to 
\begin_inset Formula $H^{\bullet,\bullet,\bullet}$
\end_inset

 are already defined.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
Parts (d) and (e) of Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-simultaneous-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 use a simultaneous lifting of 
\emph on
three
\emph default
 relations.
 Comparing Definitions
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-simultaneous-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we see that a similar inductive definition can be given for simultaneous
 liftings of 
\begin_inset Formula $n$
\end_inset

 relations (with 
\begin_inset Formula $n=1,2,...$
\end_inset

) to a type constructor with 
\begin_inset Formula $n$
\end_inset

 type parameters.
 We omit the details.
 This book will only need simultaneous liftings of two relations.
\end_layout

\begin_layout Standard
When working with dinaturality laws (Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Naturality-laws-for-fully-parametric-functions"
plural "false"
caps "false"
noprefix "false"

\end_inset

), we used profunctors 
\begin_inset Formula $P^{X,Y}$
\end_inset

 whose type parameters are set to the same type (e.g., 
\begin_inset Formula $G^{A}\triangleq P^{A,A}$
\end_inset

).
 In that case, there is an ambiguity in lifting a relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 to 
\begin_inset Formula $G$
\end_inset

: First, Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 defines 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

 as a relation of type 
\begin_inset Formula $G^{A}\leftrightarrow G^{B}$
\end_inset

, which is the same type as 
\begin_inset Formula $P^{A,A}\leftrightarrow P^{B,B}$
\end_inset

.
 Second, we may lift the pair of two relations 
\begin_inset Formula $\left(r,r\right)$
\end_inset

 simultaneously to 
\begin_inset Formula $P^{\bullet,\bullet}$
\end_inset

 according to Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-simultaneous-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and obtain another relation 
\begin_inset Formula $\left(r,r\right)^{\updownarrow P}$
\end_inset

 of the same type 
\begin_inset Formula $P^{A,A}\leftrightarrow P^{B,B}$
\end_inset

.
 The following statement shows that the relations 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

 and 
\begin_inset Formula $(r,r)^{\updownarrow P}$
\end_inset

 are equivalent.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-relational-lifting-consistency-PAA"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-lifting-consistency-PAA"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Given any fully parametric type constructor 
\begin_inset Formula $P^{X,Y}$
\end_inset

, define 
\begin_inset Formula $G^{A}\triangleq P^{A,A}$
\end_inset

.
 For any relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

, the liftings 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

 and 
\begin_inset Formula $\left(r,r\right)^{\updownarrow P}$
\end_inset

 will produce the same relation of type 
\begin_inset Formula $P^{A,A}\leftrightarrow P^{B,B}$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
We need to enumerate all cases of Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-simultaneous-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for the type constructor 
\begin_inset Formula $P^{\bullet,\bullet}$
\end_inset

 and the corresponding cases of Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for 
\begin_inset Formula $G^{\bullet}$
\end_inset

.
 In each case, we will show that 
\begin_inset Formula $(r,r)^{\updownarrow H}=r^{\updownarrow G}$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $P^{A,X}\triangleq Z$
\end_inset

 with a fixed type 
\begin_inset Formula $Z$
\end_inset

, we have also 
\begin_inset Formula $G^{A}=Z$
\end_inset

.
 Then 
\begin_inset Formula $(r,r)^{\updownarrow P}=\text{id}^{:Z\leftrightarrow Z}$
\end_inset

 and 
\begin_inset Formula $r^{\updownarrow G}=\text{id}^{:Z\leftrightarrow Z}$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $P^{A,X}\triangleq A$
\end_inset

 or 
\begin_inset Formula $P^{A,X}=X$
\end_inset

, we have 
\begin_inset Formula $G^{A}=A$
\end_inset

.
 In both cases 
\begin_inset Formula $(r,r)^{\updownarrow H}\triangleq r$
\end_inset

 and 
\begin_inset Formula $r^{\updownarrow G}=r$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $P^{\bullet,\bullet}\triangleq K^{\bullet,\bullet}\times L^{\bullet,\bullet}$
\end_inset

 then we have 
\begin_inset Formula $G^{A}=K^{A,A}\times L^{A,A}$
\end_inset

.
 Denote 
\begin_inset Formula $M^{A}\triangleq K^{A,A}$
\end_inset

 and 
\begin_inset Formula $N^{A}\triangleq L^{A,A}$
\end_inset

, so that 
\begin_inset Formula $G^{A}=M^{A}\times N^{A}$
\end_inset

.
 The inductive assumptions are 
\begin_inset Formula $(r,r)^{\updownarrow K}=r^{\updownarrow M}$
\end_inset

 and 
\begin_inset Formula $(r,r)^{\updownarrow L}=r^{\updownarrow N}$
\end_inset

.
 We find:
\begin_inset Formula 
\[
(r,r)^{\updownarrow P}=(r,r)^{\updownarrow K}\boxtimes(r,r)^{\updownarrow L}=r^{\updownarrow M}\boxtimes r^{\updownarrow N}=r^{\updownarrow(M\times N)}=r^{\updownarrow G}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $P^{\bullet,\bullet}\triangleq K^{\bullet,\bullet}+L^{\bullet,\bullet}$
\end_inset

 with 
\begin_inset Formula $G^{A}=M^{A}+N^{A}$
\end_inset

 and the same inductive assumptions, we get: 
\begin_inset Formula 
\[
(r,r)^{\updownarrow P}=(r,r)^{\updownarrow K}\boxplus(r,r)^{\updownarrow L}=r^{\updownarrow M}\boxplus r^{\updownarrow N}=r^{\updownarrow(M+N)}=r^{\updownarrow G}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $P^{\bullet,\bullet}\triangleq K^{\bullet,\bullet}\rightarrow L^{\bullet,\bullet}$
\end_inset

 with 
\begin_inset Formula $G^{A}=M^{A}\rightarrow N^{A}$
\end_inset

 and the same inductive assumptions, we find: 
\begin_inset Formula 
\[
(r,r)^{\updownarrow P}=(r,r)^{\updownarrow K}\ogreaterthan(r,r)^{\updownarrow L}=r^{\updownarrow M}\ogreaterthan r^{\updownarrow N}=r^{\updownarrow(M^{\bullet}\rightarrow N^{\bullet})}=r^{\updownarrow G}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $P^{A,X}\triangleq S^{A,X,P^{A,X}}$
\end_inset

 with a recursion scheme 
\begin_inset Formula $S^{\bullet,\bullet,\bullet}$
\end_inset

, the type constructor 
\begin_inset Formula $G^{\bullet}$
\end_inset

 is defined by: 
\begin_inset Formula 
\[
G^{A}\triangleq P^{A,A}=S^{A,A,P^{A,A}}=S^{A,A,G^{A}}\quad.
\]

\end_inset

Denote 
\begin_inset Formula $Q^{A,X}\triangleq S^{A,A,X}$
\end_inset

 and obtain 
\begin_inset Formula $G^{A}=Q^{A,G^{A}}$
\end_inset

.
 So, the lifting to 
\begin_inset Formula $G$
\end_inset

 is given by 
\begin_inset Formula $r^{\updownarrow G}=\big(r,\overline{r^{\updownarrow G}}\big)^{\updownarrow Q}$
\end_inset

.
 Now write the definition of lifting to 
\begin_inset Formula $P$
\end_inset

 and simplify:
\begin_inset Formula 
\begin{align*}
 & (r,r)^{\updownarrow P}=\big(r,r,\overline{(r,r)^{\updownarrow P}}\big)^{\updownarrow S}\\
\text{inductive assumption }\overline{(r,r)^{\updownarrow P}}=\overline{r^{\updownarrow G}}:\quad & =\big(r,r,\overline{r^{\updownarrow G}}\big)^{\updownarrow S}\\
\text{inductive assumption }\big(r,\overline{r^{\updownarrow G}}\big)^{\updownarrow Q}=\big(r,r,\overline{r^{\updownarrow G}}\big)^{\updownarrow S}:\quad & =\big(r,\overline{r^{\updownarrow G}}\big)^{\updownarrow Q}\\
\text{definition of lifting to }G:\quad & =r^{\updownarrow G}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $P^{A,X}\triangleq\forall Z.\,S^{Z,A,X}$
\end_inset

, the type constructor 
\begin_inset Formula $G^{\bullet}$
\end_inset

 is 
\begin_inset Formula $G^{A}=\forall Z.\,S^{Z,A,A}$
\end_inset

.
 Denote 
\begin_inset Formula $Q^{Z,A}\triangleq S^{Z,A,A}$
\end_inset

 and obtain 
\begin_inset Formula $G^{A}=\forall Z.\,Q^{Z,A}$
\end_inset

.
 The lifting 
\begin_inset Formula $(r,r)^{\updownarrow P}$
\end_inset

 is a relation of type 
\begin_inset Formula $\forall U.\,S^{U,A,A}\leftrightarrow\forall V.\,S^{V,A,A}$
\end_inset

 written as:
\begin_inset Formula 
\begin{align*}
 & \forall(U,V):\quad\big((r,r)^{\updownarrow\forall Z.\,S^{Z,\bullet,\bullet}}\big)^{U,V}=\forall w^{:U\leftrightarrow V}.\,(w,r,r)^{\updownarrow S^{\bullet,\bullet,\bullet}}\\
\text{inductive assumption about lifting to }S:\quad & =\forall w^{:U\leftrightarrow V}.\,(w,r)^{\updownarrow Q}\\
\text{definition of lifting to }G:\quad & =\big(r^{\updownarrow G}\big)^{U,V}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subsection
Relational parametricity theorem
\begin_inset CommandInset label
LatexCommand label
name "subsec:Relational-parametricity-theorem"

\end_inset


\end_layout

\begin_layout Standard
Our goal is to prove that any fully parametric function 
\begin_inset Formula $t:\forall A.\,P^{A}\rightarrow Q^{A}$
\end_inset

 obeys the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-of-t-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\begin_inset Formula 
\[
\forall A,B.\,\forall r^{:A\leftrightarrow B}.\,(t^{A},t^{B})\in r^{\updownarrow P}\ogreaterthan r^{\updownarrow Q}\quad.
\]

\end_inset

The proof will need to go by induction on the structure of the code of the
 function 
\begin_inset Formula $t$
\end_inset

, which is built from smaller sub-expressions using the nine code constructions
 of Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:nine-pure-code-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The inductive assumption is that all sub-expressions already satisfy the
 relational naturality law.
 An immediate difficulty with this approach is that the sub-expressions
 of 
\begin_inset Formula $t$
\end_inset

 may not have the type signature of a function and may also contain free
 variables.
 To illustrate, write the code of 
\begin_inset Formula $t$
\end_inset

 as 
\begin_inset Formula $t=z^{:P^{A}}\rightarrow\text{expr}(z)$
\end_inset

, or in Scala:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def t[A] = { z: P[A] => expr(z) }
\end_layout

\end_inset

where 
\begin_inset Quotes eld
\end_inset


\begin_inset listings
inline true
status open

\begin_layout Plain Layout

expr(z)
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 is the function's body.
 That function body 
\emph on
itself
\emph default
 does not necessarily have a type signature of the form 
\begin_inset Formula $K^{A}\rightarrow L^{A}$
\end_inset

.
 Also, 
\begin_inset Quotes eld
\end_inset


\begin_inset listings
inline true
status open

\begin_layout Plain Layout

expr(z)
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 may contain 
\begin_inset Formula $z$
\end_inset

 as a free variable defined outside the scope of 
\begin_inset Quotes eld
\end_inset


\begin_inset listings
inline true
status open

\begin_layout Plain Layout

expr(z)
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, and the type of 
\begin_inset Formula $z$
\end_inset

 may depend on the type parameter 
\begin_inset Formula $A$
\end_inset

.
 So, we cannot directly apply the relational naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-of-t-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) to the subexpressions, which prevents us from using induction.
 The relational naturality law needs to be reformulated to describe function
 
\emph on
bodies
\emph default
, i.e., arbitrary expressions that may contain externally defined variables.
 A suitable formulation of the relational naturality law is given in the
 next definition and will be the goal of Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-main-relational-parametricity-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-relational-naturality-law"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (relational naturality law)
\end_layout

\begin_layout Standard
Consider any expression 
\begin_inset Formula $t:\forall A.\,Q^{A}$
\end_inset

 containing a single free variable
\begin_inset Index idx
status open

\begin_layout Plain Layout
free variable
\end_layout

\end_inset

 
\begin_inset Formula $x^{:P^{A}}$
\end_inset

, where 
\begin_inset Formula $P^{\bullet}$
\end_inset

 and 
\begin_inset Formula $Q^{\bullet}$
\end_inset

 are any type constructors.
 Define the 
\series bold
binding function
\series default
 
\begin_inset Formula $t^{\prime}:\forall A.\,P^{A}\rightarrow Q^{A}$
\end_inset

 such that 
\begin_inset Formula $t=\tilde{t}(x)$
\end_inset

 and 
\begin_inset Formula $\tilde{t}$
\end_inset

 has no free variables.
 (The binding function describes how the expression 
\begin_inset Formula $t$
\end_inset

 depends on its free variable 
\begin_inset Formula $x$
\end_inset

.) Then the 
\series bold
relational naturality law
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
naturality law!in terms of relations
\end_layout

\end_inset

 of 
\begin_inset Formula $t$
\end_inset

 is written as:
\begin_inset Formula 
\begin{equation}
\forall(A,B).\,\forall r^{:A\leftrightarrow B}.\,(\tilde{t}^{A},\tilde{t}^{B})\in r^{\updownarrow P}\ogreaterthan r^{\updownarrow Q}\quad.\label{eq:relational-naturality-law-1}
\end{equation}

\end_inset

If 
\begin_inset Formula $t$
\end_inset

 contains several free variables (
\begin_inset Formula $x_{1}^{:P_{1}^{A}}$
\end_inset

, 
\begin_inset Formula $x_{2}^{:P_{2}^{A}}$
\end_inset

, etc.), we define the binding function 
\begin_inset Formula $\tilde{t}$
\end_inset

 as a curried function of all the free variables.
 For example, with 
\emph on
two
\emph default
 free variables we will have 
\begin_inset Formula $t=\tilde{t}(x_{1})(x_{2})$
\end_inset

, so that 
\begin_inset Formula $\tilde{t}^{A}$
\end_inset

 will have type 
\begin_inset Formula $P_{1}^{A}\rightarrow P_{2}^{A}\rightarrow Q^{A}$
\end_inset

.
 Then the relational naturality law is written as:
\begin_inset Formula 
\begin{equation}
\forall(A,B).\,\forall r^{:A\leftrightarrow B}.\,(\tilde{t}^{A},\tilde{t}^{B})\in r^{\updownarrow P_{1}}\ogreaterthan r^{\updownarrow P_{2}}\ogreaterthan r^{\updownarrow Q}\quad.\label{eq:relational-naturality-law-two-free-vars}
\end{equation}

\end_inset

The generalization to any number of free variables is straightforward.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $t$
\end_inset

 contains no free variables, we may still write 
\begin_inset Formula $t$
\end_inset

 as 
\begin_inset Formula $\tilde{t}(x)$
\end_inset

 where 
\begin_inset Formula $\tilde{t}$
\end_inset

 does not depend on 
\begin_inset Formula $x$
\end_inset

, setting 
\begin_inset Formula $P^{A}\triangleq\bbnum 1$
\end_inset

 for simplicity.
 In that case, Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is simplified to:
\begin_inset Formula 
\begin{align}
 & \forall(A,B).\,\forall r^{:A\leftrightarrow B}.\,\forall x_{1}^{:\bbnum 1},x_{2}^{:\bbnum 1}.\,\quad\text{if }x_{1}=x_{2}\text{ then }(\tilde{t}^{A}(x_{1}),\tilde{t}^{B}(x_{2}))\in r^{\updownarrow Q}\quad,\nonumber \\
\text{or equivalently}:\quad & \forall(A,B).\,\forall r^{:A\leftrightarrow B}.\,(t^{A},t^{B})\in r^{\updownarrow Q}\quad.\label{eq:relational-naturality-law-simplified}
\end{align}

\end_inset

Even in that case, to save time, we will keep using Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and writing 
\begin_inset Formula $t=\tilde{t}(x)$
\end_inset

.
\end_layout

\begin_layout Standard
When an expression contains more than one free variable, we can gather all
 the free variables into a tuple.
 This creates an equivalent expression with just one free variable:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement--relational-naturality-tuple-1"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement--relational-naturality-tuple-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 
\end_layout

\begin_layout Standard
The relational naturality law for an expression 
\begin_inset Formula $t:\forall A.\,Q^{A}$
\end_inset

 containing two free variables 
\begin_inset Formula $z_{1}^{:K^{A}}$
\end_inset

 and 
\begin_inset Formula $z_{2}^{:L^{A}}$
\end_inset

 and the binding function 
\begin_inset Formula $\tilde{t}(z_{1})(z_{2})=t$
\end_inset

 is equivalent to the relational naturality law for the expression 
\begin_inset Formula $u$
\end_inset

 with 
\emph on
one
\emph default
 free variable 
\begin_inset Formula $h$
\end_inset

 defined as:
\begin_inset Formula 
\[
h^{:K^{A}\times L^{A}}\triangleq z_{1}\times z_{2}\quad,\quad\quad u\triangleq\tilde{u}(h)\triangleq\tilde{t}(h\triangleright\pi_{1})(h\triangleright\pi_{2})\quad.
\]

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
The relational naturality laws for 
\begin_inset Formula $t$
\end_inset

 and 
\begin_inset Formula $u$
\end_inset

 say that, for all types 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, and relations 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

:
\begin_inset Formula 
\[
(\tilde{t}^{A},\tilde{t}^{B})\in r^{\updownarrow K}\ogreaterthan r^{\updownarrow L}\ogreaterthan r^{\updownarrow Q}\quad,\quad\quad(\tilde{u}^{A},\tilde{u}^{B})\in r^{\updownarrow(K\times L)}\ogreaterthan r^{\updownarrow Q}\quad.
\]

\end_inset

We need to show that these two relations are equivalent given the definition
 of 
\begin_inset Formula $\tilde{u}$
\end_inset

 via 
\begin_inset Formula $\tilde{t}$
\end_inset

.
 This is similar to the equivalence of curried and uncurried function types:
 
\begin_inset Formula $A\rightarrow(B\rightarrow C)\cong A\times B\rightarrow C$
\end_inset

.
 We write out the definition of the pair mapper operation (
\begin_inset Formula $\ogreaterthan$
\end_inset

) and obtain: 
\begin_inset Formula 
\begin{align*}
(\tilde{t}^{A},\tilde{t}^{B})\in r^{\updownarrow K}\ogreaterthan r^{\updownarrow L}\ogreaterthan r^{\updownarrow Q}\quad\text{means}\quad: & \quad\forall x_{1}^{:K^{A}},x_{2}^{:L^{A}},y_{1}^{:K^{B}},y_{2}^{:L^{B}}:\,\text{ if }(x_{1},y_{1})\in r^{\updownarrow K}\text{ and }(x_{2},y_{2})\in r^{\updownarrow L}\\
 & \quad\quad\text{ then }(\tilde{t}(x_{1})(x_{2}),\tilde{t}(y_{1})(y_{2}))\in r^{\updownarrow Q}\quad;\\
(\tilde{u}^{A},\tilde{u}^{B})\in r^{\updownarrow(K\times L)}\ogreaterthan r^{\updownarrow Q}\quad\text{means}\quad: & \quad\forall h^{:K^{A}\times L^{A}},w^{:K^{B}\times L^{B}}:\,\text{ if }(h,w)\in r^{\updownarrow(K\times L)}\\
 & \quad\quad\text{ then }(\tilde{u}(h),\tilde{u}(w))\in r^{\updownarrow Q}\quad.
\end{align*}

\end_inset

By Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c) we have 
\begin_inset Formula $r^{\updownarrow(K\times L)}=r^{\updownarrow K}\boxtimes r^{\updownarrow L}$
\end_inset

, and so we may write: 
\begin_inset Formula 
\[
(h,w)\in r^{\updownarrow(K\times L)}\quad\text{ if }\quad h=x_{1}\times x_{2}\quad,\quad w=y_{1}\times y_{2}\quad,\quad(x_{1},x_{2})\in r^{\updownarrow K}\quad,\quad\text{ and }\quad(y_{1},y_{2})\in r^{\updownarrow L}\quad.
\]

\end_inset

When 
\begin_inset Formula $h=x_{1}\times x_{2}$
\end_inset

 and 
\begin_inset Formula $w=y_{1}\times y_{2}$
\end_inset

, we will have 
\begin_inset Formula $\tilde{u}(h)=\tilde{t}(x_{1},x_{2})$
\end_inset

 and 
\begin_inset Formula $\tilde{u}(w)=\tilde{t}(y_{1},y_{2})$
\end_inset

.
 It follows that the relational naturality laws for 
\begin_inset Formula $t$
\end_inset

 and 
\begin_inset Formula $u$
\end_inset

 are equivalent.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
Due to Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement--relational-naturality-tuple-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we are allowed to assume that the expression 
\begin_inset Formula $t$
\end_inset

 always has a 
\emph on
single
\emph default
 free variable.
 This simplifies the formulation of the main theorem:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-main-relational-parametricity-1"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-main-relational-parametricity-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (relational parametricity theorem)
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $H$
\end_inset

 and 
\begin_inset Formula $Q$
\end_inset

 be any fully parametric type constructors.
 Any fully parametric expression 
\begin_inset Formula $t:\forall A.\,Q^{A}$
\end_inset

 of the form 
\begin_inset Formula $t=\forall A.\,\tilde{t}^{A}(h)$
\end_inset

 containing a single free variable 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

 satisfies the relational naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Subparagraph
Proof 
\end_layout

\begin_layout Standard
By assumption, 
\begin_inset Formula $t$
\end_inset

 is built up from the nine constructions of Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:nine-pure-code-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 So, one of these nine constructions is at the top level in the syntax tree
 of 
\begin_inset Formula $t$
\end_inset

.
 For each of those constructions, we will prove that 
\begin_inset Formula $t$
\end_inset

 satisfies Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) as long as all its sub-expressions do.
 Throughout the proof, all relational naturality laws will involve an arbitrary
 relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 between arbitrary types 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

.
 For brevity, we will not write the quantifiers 
\begin_inset Formula $\forall A,B,r^{:A\leftrightarrow B}$
\end_inset

 in front of all formulas.
\end_layout

\begin_layout Standard
To shorten the proof further, we note that in every inductive case the expressio
n 
\begin_inset Formula $t$
\end_inset

 and all its sub-expressions will contain the same free variable 
\begin_inset Formula $h$
\end_inset

.
 So, all relational naturality laws will follow the pattern 
\begin_inset Quotes eld
\end_inset

for all 
\begin_inset Formula $h_{1}^{:H^{A}}$
\end_inset

 and 
\begin_inset Formula $h_{2}^{:H^{B}}$
\end_inset

 satisfying the relation 
\begin_inset Formula $(h_{1},h_{2})\in r^{\updownarrow H}$
\end_inset

, some other values are in some other relation
\begin_inset Quotes erd
\end_inset

.
 Let us choose arbitrary but fixed values 
\begin_inset Formula $h_{1}^{:H^{A}}$
\end_inset

 and 
\begin_inset Formula $h_{2}^{:H^{B}}$
\end_inset

 satisfying 
\begin_inset Formula $(h_{1},h_{2})\in r^{\updownarrow H}$
\end_inset

, denote 
\begin_inset Formula $t_{1}\triangleq\tilde{t}^{A}(h_{1})$
\end_inset

 and 
\begin_inset Formula $t_{2}\triangleq\tilde{t}^{B}(h_{2})$
\end_inset

, and simplify the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) to:
\begin_inset Formula 
\begin{equation}
(t_{1},t_{2})\in r^{\updownarrow Q}\quad\text{where}\quad t_{1}\triangleq\tilde{t}^{A}(h_{1})\text{ and }t_{2}\triangleq\tilde{t}^{B}(h_{2})\quad.\label{eq:relational-naturality-law-with-fixed-h}
\end{equation}

\end_inset

We will now prove this form of the law.
 Inductive assumptions will always begin with 
\begin_inset Quotes eld
\end_inset

for all 
\begin_inset Formula $h_{1}$
\end_inset

 and 
\begin_inset Formula $h_{2}$
\end_inset

 ...
\begin_inset Quotes erd
\end_inset

, so we are allowed to substitute the fixed values 
\begin_inset Formula $h_{1}$
\end_inset

, 
\begin_inset Formula $h_{2}$
\end_inset

 into each of the inductive assumptions and write those assumptions also
 in the form of Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-with-fixed-h"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Paragraph
Use unit value
\end_layout

\begin_layout Standard
In this case, 
\begin_inset Formula $t\triangleq1$
\end_inset

 and has the unit type (
\begin_inset Formula $Q^{A}\triangleq\bbnum 1$
\end_inset

).
 Since 
\begin_inset Formula $t$
\end_inset

 contains no free variables, the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-with-fixed-h"
plural "false"
caps "false"
noprefix "false"

\end_inset

) becomes:
\begin_inset Formula 
\[
(1,1)\in r^{\updownarrow Q}\quad.
\]

\end_inset

This holds because by Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a) we have 
\begin_inset Formula $r^{\updownarrow Q}=\text{id}$
\end_inset

 regardless of 
\begin_inset Formula $r$
\end_inset

.
\end_layout

\begin_layout Standard
The same proof applies for 
\begin_inset Formula $t\triangleq c$
\end_inset

 where 
\begin_inset Formula $c^{:C}$
\end_inset

 is a fixed value of a fixed type 
\begin_inset Formula $C$
\end_inset

.
\end_layout

\begin_layout Paragraph
Use argument
\end_layout

\begin_layout Standard
In this case, 
\begin_inset Formula $t\triangleq h$
\end_inset

 where 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

 is the free variable (say, the argument of the function whose body is 
\begin_inset Formula $t$
\end_inset

).
 So, we must have 
\begin_inset Formula $Q=H$
\end_inset

 and 
\begin_inset Formula $\tilde{t}=\forall A.\,\text{id}^{:H^{A}\rightarrow H^{A}}$
\end_inset

.
 The law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-with-fixed-h"
plural "false"
caps "false"
noprefix "false"

\end_inset

) then becomes:
\begin_inset Formula 
\begin{align*}
 & (t_{1},t_{2})\in r^{\updownarrow H}\quad\text{where}\quad t_{1}\triangleq h_{1}\text{ and }t_{2}\triangleq h_{2}\quad,\\
\text{or equivalently}:\quad & (h_{1},h_{2})\in r^{\updownarrow H}\quad.
\end{align*}

\end_inset

The last condition holds trivially, since 
\begin_inset Formula $(h_{1},h_{2})\in r^{\updownarrow H}$
\end_inset

 is already assumed.
\end_layout

\begin_layout Paragraph
Create function
\end_layout

\begin_layout Standard
In this case, 
\begin_inset Formula $t\triangleq\forall A.\,p^{:P^{A}}\rightarrow\tilde{g}^{A}(h)(p)$
\end_inset

 where the sub-expression 
\begin_inset Formula $\tilde{g}^{A}(h)(p):G^{A}$
\end_inset

 contains two free variables (
\begin_inset Formula $h^{:H^{A}}$
\end_inset

 and 
\begin_inset Formula $p^{:P^{A}}$
\end_inset

).
 Because 
\begin_inset Formula $\tilde{g}(h)(p)$
\end_inset

 is defined with curried arguments, the binding function 
\begin_inset Formula $\tilde{t}$
\end_inset

 satisfies:
\begin_inset Formula 
\[
\tilde{t}(h)=t=p\rightarrow\tilde{g}(h)(p)=\tilde{g}(h)\quad,\quad\quad\text{or equivalently}:\quad\tilde{t}=\tilde{g}.
\]

\end_inset

The type of 
\begin_inset Formula $\tilde{g}$
\end_inset

 is 
\begin_inset Formula $H^{A}\rightarrow Q^{A}$
\end_inset

, where we set 
\begin_inset Formula $Q^{A}\triangleq P^{A}\rightarrow G^{A}$
\end_inset

.
 Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(e) gives 
\begin_inset Formula $r^{\updownarrow Q}=r^{\updownarrow P}\ogreaterthan r^{\updownarrow G}$
\end_inset

.
 So, the inductive assumption for 
\begin_inset Formula $g$
\end_inset

 may be written as:
\begin_inset Formula 
\[
(g_{1},g_{2})\in r^{\updownarrow P}\ogreaterthan r^{\updownarrow G}\quad\text{where}\quad g_{1}\triangleq\tilde{g}^{A}(h_{1})=t_{1}\text{ and }g_{2}\triangleq\tilde{g}^{B}(h_{2})=t_{2}\quad.
\]

\end_inset

This is equivalent to:
\begin_inset Formula 
\[
(t_{1},t_{2})\in r^{\updownarrow P}\ogreaterthan r^{\updownarrow G}=r^{\updownarrow Q}\quad,
\]

\end_inset

which is the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-with-fixed-h"
plural "false"
caps "false"
noprefix "false"

\end_inset

) we needed to prove.
\end_layout

\begin_layout Paragraph
Use function
\end_layout

\begin_layout Standard
In this case, 
\begin_inset Formula $t=\tilde{t}(h)\triangleq k(p)$
\end_inset

 where 
\begin_inset Formula $k^{:\forall A.\,P^{A}\rightarrow Q^{A}}$
\end_inset

 and 
\begin_inset Formula $p^{:\forall A.\,P^{A}}$
\end_inset

 are some sub-expressions.
 Both 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $p$
\end_inset

 may contain 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

 as a free variable: 
\begin_inset Formula $k\triangleq\tilde{k}(h)$
\end_inset

 and 
\begin_inset Formula $p\triangleq\tilde{p}(h)$
\end_inset

.
 Denote for brevity 
\begin_inset Formula $K^{A}\triangleq P^{A}\rightarrow Q^{A}$
\end_inset

.
 The inductive assumptions say that the laws
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-with-fixed-h"
plural "false"
caps "false"
noprefix "false"

\end_inset

) already hold for both 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $p$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{for }k:\quad & (k_{1},k_{2})\in r^{\updownarrow K}=r^{\updownarrow P}\ogreaterthan r^{\updownarrow Q}\quad\quad\text{where}\quad k_{1}\triangleq\tilde{k}^{A}(h_{1})\text{ and }k_{2}\triangleq\tilde{k}^{B}(h_{2})\quad,\\
\text{for }p:\quad & (p_{1},p_{2})\in r^{\updownarrow P}\quad\quad\text{where}\quad p_{1}\triangleq\tilde{p}^{A}(h_{1})\text{ and }p_{2}\triangleq\tilde{p}^{B}(h_{2})\quad.
\end{align*}

\end_inset

We need to show that:
\begin_inset Formula 
\[
(t_{1},t_{2})\in r^{\updownarrow Q}\quad\quad\text{where}\quad t_{1}\triangleq\tilde{t}^{A}(h_{1})=k_{1}(p_{1})\text{ and }t_{2}\triangleq\tilde{t}^{B}(h_{2})=k_{2}(p_{2})\quad.
\]

\end_inset

By definition of 
\begin_inset Formula $\ogreaterthan$
\end_inset

, the inductive assumption 
\begin_inset Formula $(k_{1},k_{2})\in r^{\updownarrow P}\ogreaterthan r^{\updownarrow Q}$
\end_inset

 means:
\begin_inset Formula 
\[
(k_{1}(p_{1}),k_{2}(p_{2}))\in r^{\updownarrow Q}\quad\text{whenever}\quad(p_{1},p_{2})\in r^{\updownarrow P}\quad.
\]

\end_inset

Since 
\begin_inset Formula $(p_{1},p_{2})\in r^{\updownarrow P}$
\end_inset

 already holds by the other inductive assumption, we obtain 
\begin_inset Formula $(t_{1},t_{2})\in r^{\updownarrow Q}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Create tuple
\end_layout

\begin_layout Standard
In this case, 
\begin_inset Formula $t=\tilde{t}(h)\triangleq k^{:K^{A}}\times l^{:L^{A}}$
\end_inset

, where the sub-expressions 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $l$
\end_inset

 contain the free variable 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

 via 
\begin_inset Formula $k\triangleq\tilde{k}(h)$
\end_inset

 and 
\begin_inset Formula $l\triangleq\tilde{l}(h)$
\end_inset

.
 We have 
\begin_inset Formula $Q^{A}\triangleq K^{A}\times L^{A}$
\end_inset

, so we use Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c) for the lifting 
\begin_inset Formula $r^{\updownarrow Q}$
\end_inset

 to get 
\begin_inset Formula $r^{\updownarrow Q}=r^{\updownarrow K}\boxtimes r^{\updownarrow L}$
\end_inset

.
 We need to prove that:
\begin_inset Formula 
\begin{align*}
 & (t_{1},t_{2})\in r^{\updownarrow Q}\quad\text{or equivalently}:\quad(k_{1}\times l_{1},k_{2}\times l_{2})\in r^{\updownarrow K}\boxtimes r^{\updownarrow L}\quad,\\
 & \quad\text{where}\quad t_{1}\triangleq k_{1}\times l_{1}\triangleq\tilde{k}^{A}(h_{1})\times\tilde{l}^{A}(h_{1})\quad,\quad\quad t_{2}\triangleq k_{2}\times l_{2}\triangleq\tilde{k}^{A}(h_{2})\times\tilde{l}^{A}(h_{2})\quad.
\end{align*}

\end_inset

The inductive assumptions are that the relational naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-with-fixed-h"
plural "false"
caps "false"
noprefix "false"

\end_inset

) holds for 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $l$
\end_inset

:
\begin_inset Formula 
\[
(k_{1},k_{2})\in r^{\updownarrow K}\quad,\quad\quad(l_{1},l_{2})\in r^{\updownarrow L}\quad.
\]

\end_inset

By definition of 
\begin_inset Formula $\boxtimes$
\end_inset

 for relations, we obtain the required property: 
\begin_inset Formula $(k_{1}\times l_{1},k_{2}\times l_{2})\in r^{\updownarrow K}\boxtimes r^{\updownarrow L}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Use tuple
\end_layout

\begin_layout Standard
It is sufficient to consider the case 
\begin_inset Formula $t\triangleq\pi_{1}(g)$
\end_inset

 where 
\begin_inset Formula $g^{:\forall A.\,Q^{A}\times L^{A}}$
\end_inset

 is a sub-expression that contains the free variable 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

.
 The proof for 
\begin_inset Formula $t=\pi_{2}(g)$
\end_inset

 is analogous.
 
\end_layout

\begin_layout Standard
We need to prove that 
\begin_inset Formula $t$
\end_inset

 satisfies the relational naturality law if 
\begin_inset Formula $g$
\end_inset

 does.
 Define 
\begin_inset Formula $g=\tilde{g}(h)$
\end_inset

 and:
\begin_inset Formula 
\[
g_{1}\triangleq\tilde{g}^{A}(h_{1})\quad,\quad\quad g_{2}\triangleq\tilde{g}^{B}(h_{2})\quad,\quad\quad t_{1}\triangleq\pi_{1}(g_{1})\quad,\quad\quad t_{2}\triangleq\pi_{1}(g_{2})\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
The relational naturality law of 
\begin_inset Formula $g$
\end_inset

, which holds by the inductive assumption, is:
\begin_inset Formula 
\[
(g_{1},g_{2})\in r^{\updownarrow(Q\times L)}\quad.
\]

\end_inset

By Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c) for the lifting 
\begin_inset Formula $r^{\updownarrow(Q\times L)}$
\end_inset

, we have:
\begin_inset Formula 
\[
(g_{1},g_{2})\in r^{\updownarrow(Q\times L)}\quad\text{ means }\quad(\pi_{1}(g_{1}),\pi_{1}(g_{2}))\in r^{\updownarrow Q}\text{ and }(\pi_{2}(g_{1}),\pi_{2}(g_{2}))\in r^{\updownarrow L}\quad.
\]

\end_inset

The condition 
\begin_inset Formula $(\pi_{1}(g_{1}),\pi_{1}(g_{2}))\in r^{\updownarrow Q}$
\end_inset

 is the same as the relational naturality law of 
\begin_inset Formula $t$
\end_inset

.
\end_layout

\begin_layout Paragraph
Create disjunction
\end_layout

\begin_layout Standard
We consider the case 
\begin_inset Formula $t\triangleq g+\bbnum 0$
\end_inset

 where 
\begin_inset Formula $Q^{A}\triangleq K^{A}+L^{A}$
\end_inset

 and 
\begin_inset Formula $g^{:\forall A.\,K^{A}}$
\end_inset

 is a sub-expression that contains the free variable 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

 via 
\begin_inset Formula $g\triangleq\tilde{g}(h)$
\end_inset

.
 Define for convenience: 
\begin_inset Formula 
\[
g_{1}\triangleq\tilde{g}^{A}(h_{1})\quad,\quad\quad g_{2}\triangleq\tilde{g}^{B}(h_{2})\quad,\quad\quad t_{1}=g_{1}+\bbnum 0\quad,\quad\quad t_{2}=g_{2}+\bbnum 0\quad.
\]

\end_inset

The inductive assumption is that 
\begin_inset Formula $g(h)$
\end_inset

 satisfies its relational naturality law, which is 
\begin_inset Formula $(g_{1},g_{2})\in r^{\updownarrow K}$
\end_inset

.
 By Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(d) for the lifting 
\begin_inset Formula $r^{\updownarrow(K+L)}$
\end_inset

, we have:
\begin_inset Formula 
\[
(t_{1},t_{2})=(g_{1}+\bbnum 0,g_{2}+\bbnum 0)\in r^{\updownarrow(K+L)}=r^{\updownarrow K}\boxplus r^{\updownarrow L}\text{ when }(g_{1},g_{2})\in r^{\updownarrow K}\quad.
\]

\end_inset

So, the relational naturality law of 
\begin_inset Formula $t$
\end_inset

 holds.
 The proof for 
\begin_inset Formula $t\triangleq\bbnum 0+g$
\end_inset

 is analogous.
\end_layout

\begin_layout Paragraph
Use disjunction
\end_layout

\begin_layout Standard
In this case, 
\begin_inset Formula $t\triangleq\forall A.\,\,\begin{array}{|c||c|}
 & G^{A}\\
\hline K^{A} & p\\
L^{A} & q
\end{array}\,\,$
\end_inset

 is a pattern-matching function of type 
\begin_inset Formula $\forall A.\,Q^{A}$
\end_inset

 with 
\begin_inset Formula $Q^{A}\triangleq K^{A}+L^{A}\rightarrow G^{A}$
\end_inset

.
 The sub-expressions 
\begin_inset Formula $p^{:\forall A.\,K^{A}\rightarrow G^{A}}$
\end_inset

 and 
\begin_inset Formula $q^{:\forall A.\,L^{A}\rightarrow G^{A}}$
\end_inset

 contain the free variable 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

.
 We define:
\begin_inset Formula 
\[
p\triangleq\tilde{p}(h)\quad,\quad p_{1}\triangleq\tilde{p}^{A}(h_{1})\quad,\quad p_{2}\triangleq\tilde{p}^{B}(h_{2})\quad,\quad\quad q\triangleq\tilde{q}(h)\quad,\quad q_{1}\triangleq\tilde{q}^{A}(h_{1})\quad,\quad q_{2}\triangleq\tilde{q}^{B}(h_{2})\quad.
\]

\end_inset

Then we have:
\begin_inset Formula 
\[
t_{1}=\,\begin{array}{|c||c|}
 & G^{A}\\
\hline K^{A} & p_{1}\\
L^{A} & q_{1}
\end{array}\quad,\quad\quad t_{2}=\,\begin{array}{|c||c|}
 & G^{B}\\
\hline K^{B} & p_{2}\\
L^{B} & q_{2}
\end{array}\quad.
\]

\end_inset

By the inductive assumption, the relational naturality law already holds
 for 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \text{if }(k_{1}^{:K^{A}},k_{2}^{:K^{B}})\in r^{\updownarrow K}\text{ then }\big(p_{1}(k_{1}),p_{2}(k_{2})\big)\in r^{\updownarrow G}\quad,\\
 & \text{if }(l_{1}^{:L^{A}},l_{2}^{:L^{B}})\in r^{\updownarrow L}\text{ then }\big(q_{1}(l_{1}),q_{2}(l_{2})\big)\in r^{\updownarrow G}\quad.
\end{align*}

\end_inset

To derive the specific form of the law for 
\begin_inset Formula $t$
\end_inset

, we use Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(e) for the lifting 
\begin_inset Formula $r^{\updownarrow Q}$
\end_inset

:
\begin_inset Formula 
\[
\text{if }(x_{1}^{:K^{A}+L^{A}},x_{2}^{:K^{B}+L^{B}})\in r^{\updownarrow(K+L)}\text{ then }\big(t_{1}(x_{1}),t_{2}(x_{2})\big)\in r^{\updownarrow G}\quad.
\]

\end_inset

By Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(d), the values 
\begin_inset Formula $x_{1}$
\end_inset

 and 
\begin_inset Formula $x_{2}$
\end_inset

 are in relation 
\begin_inset Formula $r^{\updownarrow(K+L)}$
\end_inset

 only if both 
\begin_inset Formula $x_{1}$
\end_inset

 and 
\begin_inset Formula $x_{2}$
\end_inset

 are in the same part of the disjunction (
\begin_inset Formula $K^{\bullet}+L^{\bullet}$
\end_inset

).
 We consider separately the case when they are in the left part or in the
 right part.
\end_layout

\begin_layout Standard
If both 
\begin_inset Formula $x_{1}$
\end_inset

 and 
\begin_inset Formula $x_{2}$
\end_inset

 in the left part, we can write 
\begin_inset Formula $x_{1}=k_{1}^{:K^{A}}+\bbnum 0$
\end_inset

 and 
\begin_inset Formula $x_{2}=k_{2}^{:K^{B}}+\bbnum 0$
\end_inset

 with some 
\begin_inset Formula $k_{1}$
\end_inset

 and 
\begin_inset Formula $k_{2}$
\end_inset

.
 Then the condition 
\begin_inset Formula $(x_{1},x_{2})\in r^{\updownarrow(K+L)}$
\end_inset

 is equivalent to 
\begin_inset Formula $(k_{1},k_{2})\in r^{\updownarrow K}$
\end_inset

, while the values 
\begin_inset Formula $t_{1}(x_{1})$
\end_inset

 and 
\begin_inset Formula $t_{2}(x_{2})$
\end_inset

 are expressed as:
\begin_inset Formula 
\[
t_{1}(x_{1})=(k_{1}+\bbnum 0)\triangleright\,\begin{array}{|c||c|}
 & G^{A}\\
\hline K^{A} & p_{1}\\
L^{A} & q_{1}
\end{array}\,=p_{1}(k_{1})\quad,\quad\quad t_{2}(x_{2})=(k_{2}+\bbnum 0)\triangleright\,\begin{array}{|c||c|}
 & G^{B}\\
\hline K^{B} & p_{2}\\
L^{B} & q_{2}
\end{array}\,=p_{2}(k_{2})\quad.
\]

\end_inset

So, the conclusion of the relational naturality law of 
\begin_inset Formula $t$
\end_inset

 holds due to the relational law of 
\begin_inset Formula $p$
\end_inset

:
\begin_inset Formula 
\[
\big(t_{1}(x_{1}),t_{2}(x_{2})\big)=\big(p_{1}(k_{1}),p_{2}(k_{2})\big)\in r^{\updownarrow G}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
A similar argument proves the law for the case when both 
\begin_inset Formula $x_{1}$
\end_inset

 and 
\begin_inset Formula $x_{2}$
\end_inset

 in the right part.
 We write 
\begin_inset Formula $x_{1}=\bbnum 0+l_{1}^{:L^{A}}$
\end_inset

 and 
\begin_inset Formula $x_{2}=\bbnum 0+l_{2}^{:L^{B}}$
\end_inset

 and reduce the relational naturality law of 
\begin_inset Formula $t$
\end_inset

 to that of 
\begin_inset Formula $q$
\end_inset

.
\end_layout

\begin_layout Paragraph
Recursive call
\end_layout

\begin_layout Standard
In this case, 
\begin_inset Formula $t\triangleq g$
\end_inset

 where 
\begin_inset Formula $g$
\end_inset

 is a recursive call to a function (defined outside that expression).
 When proving a law of a recursively defined function, we may assume that
 the law holds for recursive calls to that function.
 So, the inductive assumption says that 
\begin_inset Formula $g$
\end_inset

 is some expression for which the relational naturality law already holds.
 It then holds for 
\begin_inset Formula $t$
\end_inset

 since 
\begin_inset Formula $t=g$
\end_inset

.
\end_layout

\begin_layout Standard
This completes the proof of the relational parametricity theorem.
 
\begin_inset Formula $\square$
\end_inset

 
\end_layout

\begin_layout Standard
The relational formulation of parametricity is powerful but hard to use
 for deriving laws as equations rather than as relations.
 To convert the relational parametricity law such as Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-simplified"
plural "false"
caps "false"
noprefix "false"

\end_inset

) into an equation with functions, we first choose the relation 
\begin_inset Formula $r$
\end_inset

 as 
\begin_inset Formula $r\triangleq\left<f\right>$
\end_inset

 with a suitable function 
\begin_inset Formula $f$
\end_inset

.
 Then we need to express the lifted relation 
\begin_inset Formula $r^{\updownarrow Q}$
\end_inset

 via an equation and derive the corresponding equation for 
\begin_inset Formula $t$
\end_inset

.
 However, Example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(e) shows that for sufficiently complicated type constructors 
\begin_inset Formula $Q$
\end_inset

 the lifted relation 
\begin_inset Formula $\left<f\right>^{\updownarrow Q}$
\end_inset

 will 
\emph on
not
\emph default
 be expressible as an equation.
 
\end_layout

\begin_layout Standard
Nevertheless, this problem does not arise for most type signatures found
 in practice, and the relational naturality law can be reduced to the dinaturali
ty law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) via the wedge law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 In a few cases, a more powerful property called the 
\begin_inset Quotes eld
\end_inset

strong
\begin_inset Quotes erd
\end_inset

 dinaturality law is required.
 In this book, strong dinaturality is only used to prove Statements
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:relational-property-for-foldFn"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-Church-encoding-recursive-type-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

, and
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strong-dinaturality-property-of-fix"
plural "false"
caps "false"
noprefix "false"

\end_inset

, while in all other places the wedge law is sufficient.
 The following sections will prove that the wedge law and the strong dinaturalit
y law are consequences of the relational parametricity theorem.
\end_layout

\begin_layout Subsection
Deriving the wedge law from relational parametricity
\end_layout

\begin_layout Standard
This section derives the wedge law from the relational naturality law of
 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap
\end_layout

\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
The proof is based on the blog post by B.
\begin_inset space ~
\end_inset

Milewski
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Bartosz Milewski
\end_layout

\end_inset

 (
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://bartoszmilewski.com/2017/04/11/"
literal "false"

\end_inset


\family default
).
 Another derivation of the dinaturality law from the relational parametricity
 theorem was given by J.
\begin_inset space ~
\end_inset

Voigtl
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\begin_inset Quotes erd
\end_inset

a
\end_layout

\end_inset

nder
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Janis@Janis Voigtl
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\begin_inset Quotes erd
\end_inset

a
\end_layout

\end_inset

nder
\end_layout

\end_inset

 in the paper 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://arxiv.org/pdf/1908.07776.pdf"
literal "false"

\end_inset


\family default
.
 A proof of the dinaturality law based on obtaining the syntactic normal
 form of dinatural transformations (and 
\emph on
without
\emph default
 using relational parametricity) was shown by J.
\begin_inset space ~
\end_inset

de Lataillade
\begin_inset Index idx
status open

\begin_layout Plain Layout
Joachim de Lataillade
\end_layout

\end_inset

 in the paper 
\begin_inset Quotes eld
\end_inset

Dinatural terms in System 
\begin_inset Formula $F$
\end_inset


\begin_inset Quotes erd
\end_inset

: see 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://www.irif.fr/~delatail/dinat.pdf"

\end_inset


\end_layout

\end_inset

 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In later sections of this Appendix, we will develop a more illuminating
 but longer proof of the wedge law, using the composition of relations and
 further properties of the relational lifting.
 ???Not sure this is possible.
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-wedge-law-from-parametricity"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-wedge-law-from-parametricity"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 For any fully parametric profunctor 
\begin_inset Formula $P^{X,Y}$
\end_inset

, define 
\begin_inset Formula $T^{A}\triangleq P^{A,A}$
\end_inset

.
 Then:
\begin_inset Formula 
\[
\text{for all }X,Y,f^{:X\rightarrow Y},x^{:P^{X,X}},y^{:P^{Y,Y}}\quad:\quad\text{if}\quad(x,y)\in\left<f\right>^{\updownarrow T}\quad\text{then}\quad x\triangleright f^{\uparrow P^{X,\bullet}}=y\triangleright f^{\downarrow P^{\bullet,Y}}\quad.
\]

\end_inset

In other words, the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation is a consequence of the lifted relation 
\begin_inset Formula $\left<f\right>$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 Any fully parametric value 
\begin_inset Formula $t$
\end_inset

 of type 
\begin_inset Formula $\forall A.\,P^{A,A}$
\end_inset

 satisfies the wedge law
\begin_inset Index idx
status open

\begin_layout Plain Layout
wedge law!of profunctors
\end_layout

\end_inset


\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\begin_inset Formula 
\[
\text{for all }X,Y,f^{:X\rightarrow Y}\quad:\quad t^{X}\triangleright f^{\uparrow P^{X,\bullet}}=t^{Y}\triangleright f^{\downarrow P^{\bullet,Y}}\quad.
\]

\end_inset

In other words, 
\begin_inset Formula $t^{X}$
\end_inset

 and 
\begin_inset Formula $t^{Y}$
\end_inset

 are always in the 
\begin_inset Formula $(P,f)$
\end_inset

-wedge relation
\begin_inset Index idx
status open

\begin_layout Plain Layout
wedge relation
\end_layout

\end_inset

 for any function 
\begin_inset Formula $f^{:X\rightarrow Y}$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 All profunctors 
\begin_inset Formula $P$
\end_inset

 have a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap
\end_layout

\end_inset

 method with the type signature:
\begin_inset Formula 
\[
\text{xmap}_{P}:\forall A,B,C,D.\,\left(B\rightarrow A\right)\rightarrow\left(C\rightarrow D\right)\rightarrow P^{A,C}\rightarrow P^{B,D}\quad.
\]

\end_inset

Since 
\begin_inset Formula $P^{X,Y}$
\end_inset

 is a fully parametric profunctor, its 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap
\end_layout

\end_inset

 satisfies the commutativity law (Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Proof-of-the-profunctor-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\begin_inset Formula 
\[
\text{xmap}_{P}(f^{:B\rightarrow A})(g^{:C\rightarrow D})=f^{\downarrow P^{\bullet,C}}\bef g^{\uparrow P^{A,\bullet}}=g^{\uparrow P^{B,\bullet}}\bef f^{\downarrow P^{\bullet,D}}\quad.
\]

\end_inset

Then the property we need to prove can be written in terms of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap
\end_layout

\end_inset

 as:
\begin_inset Formula 
\begin{equation}
\text{if}\quad(x,y)\in\left<f\right>^{\updownarrow T}\quad\text{then}\quad\text{xmap}_{P}(\text{id})(f)(x)=\text{xmap}_{P}(f)(\text{id})(y)\quad.\label{eq:wedge-law-from-parametricity-derivation1}
\end{equation}

\end_inset

Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-main-relational-parametricity-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap
\end_layout

\end_inset

 also satisfies a relational naturality law.
 Since 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap
\end_layout

\end_inset

 has four type parameters (
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

, 
\begin_inset Formula $D$
\end_inset

), its relational naturality law involves 8 arbitrary types (denote them
 by 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

, 
\begin_inset Formula $D$
\end_inset

, 
\begin_inset Formula $A^{\prime}$
\end_inset

, 
\begin_inset Formula $B^{\prime}$
\end_inset

, 
\begin_inset Formula $C^{\prime}$
\end_inset

, 
\begin_inset Formula $D^{\prime}$
\end_inset

) and 4 arbitrary relations (denote them by 
\begin_inset Formula $a^{:A\leftrightarrow A^{\prime}}$
\end_inset

, 
\begin_inset Formula $b^{:B\leftrightarrow B^{\prime}}$
\end_inset

, 
\begin_inset Formula $c^{:C\leftrightarrow C^{\prime}}$
\end_inset

, and 
\begin_inset Formula $d^{:D\leftrightarrow D^{\prime}}$
\end_inset

).
 With these notations, we write the relational naturality law of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap
\end_layout

\end_inset

 as:
\begin_inset Formula 
\begin{equation}
\forall(a,b,c,d)\quad:\quad(\text{xmap}_{P}^{A,B,C,D},\text{xmap}_{P}^{A^{\prime},B^{\prime},C^{\prime},D^{\prime}})\in(b\ogreaterthan a)\ogreaterthan(c\ogreaterthan d)\ogreaterthan(a,c)^{\updownarrow P}\ogreaterthan(b,d)^{\updownarrow P}\quad,\label{eq:relational-naturality-law-of-xmap}
\end{equation}

\end_inset

where 
\begin_inset Formula $(a,c)^{\updownarrow P}$
\end_inset

 and 
\begin_inset Formula $(b,d)^{\updownarrow P}$
\end_inset

 are simultaneous liftings to the profunctor 
\begin_inset Formula $P$
\end_inset

 (see Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-simultaneous-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Writing out the definition of the pair mapper (
\begin_inset Formula $\ogreaterthan$
\end_inset

), we express this law as:
\begin_inset Formula 
\begin{align}
 & \forall\big(a^{:A\leftrightarrow A^{\prime}},b^{:B\leftrightarrow B^{\prime}},c^{:C\leftrightarrow C^{\prime}},d^{:D\leftrightarrow D^{\prime}},g^{:B\rightarrow A},h^{:B^{\prime}\rightarrow A^{\prime}},k^{:C\rightarrow D},l^{:C^{\prime}\rightarrow D^{\prime}},x^{:P^{A,C}},y^{:P^{A^{\prime},C^{\prime}}}\big)\quad:\nonumber \\
 & \quad\text{if}\quad\quad(g,h)\in b\ogreaterthan a\quad,\quad(k,l)\in c\ogreaterthan d\quad,\quad\text{and}\quad(x,y)\in(a,c)^{\updownarrow P}\quad,\nonumber \\
 & \quad\text{then}\quad\quad\big(\text{xmap}_{P}(g)(k)(x),\,\text{xmap}_{P}(h)(l)(y)\big)\in(b,d)^{\updownarrow P}\quad.\label{eq:xmap-relational-law-derivation2}
\end{align}

\end_inset

The naturality law of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap
\end_layout

\end_inset

 now has the form of a condition that holds for arbitrary choices of 8 types,
 4 relations, and 4 functions, in addition to the values 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

.
 The plan of the proof is to substitute certain carefully chosen functions
 and relations into Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:xmap-relational-law-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) in order to derive Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-from-parametricity-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\end_layout

\begin_layout Standard
We note that Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-from-parametricity-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) says that two 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap(...)
\end_layout

\end_inset

 values must be equal (both values having type 
\begin_inset Formula $P^{X,Y}$
\end_inset

).
 This can be obtained from Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:xmap-relational-law-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) only if the relation 
\begin_inset Formula $(b,d)^{\updownarrow P}$
\end_inset

 is an identity relation of type 
\begin_inset Formula $P^{X,Y}\leftrightarrow P^{X,Y}$
\end_inset

.
 We will prove in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-lifting-identity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

 below that a simultaneous lifting of two identity relations gives again
 an identity relation.
 This suggests choosing 
\begin_inset Formula $b=\text{id}$
\end_inset

 and 
\begin_inset Formula $d=\text{id}$
\end_inset

, which also requires us to set the types as 
\begin_inset Formula $B=B^{\prime}=X$
\end_inset

 and 
\begin_inset Formula $D=D^{\prime}=Y$
\end_inset

.
\end_layout

\begin_layout Standard
The relations 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $c$
\end_inset

 need to be chosen such that the precondition 
\begin_inset Formula $(x,y)\in(a,c)^{\updownarrow P}$
\end_inset

 in Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:xmap-relational-law-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) reproduces the precondition 
\begin_inset Formula $(x,y)\in\left<f\right>^{\updownarrow T}$
\end_inset

 in Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-from-parametricity-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-lifting-consistency-PAA"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows that 
\begin_inset Formula $r^{\updownarrow T}=(r,r)^{\updownarrow P}$
\end_inset

 for any relation 
\begin_inset Formula $r$
\end_inset

.
 In particular, 
\begin_inset Formula $\left<f\right>^{\updownarrow T}=(\left<f\right>,\left<f\right>)^{\updownarrow P}$
\end_inset

.
 So, we need to set 
\begin_inset Formula $a=c=\left<f\right>$
\end_inset

 and the corresponding types 
\begin_inset Formula $A=C=X$
\end_inset

 and 
\begin_inset Formula $A^{\prime}=C^{\prime}=Y$
\end_inset

.
\end_layout

\begin_layout Standard
The functions 
\begin_inset Formula $g$
\end_inset

, 
\begin_inset Formula $h$
\end_inset

, 
\begin_inset Formula $k$
\end_inset

, and 
\begin_inset Formula $l$
\end_inset

 in Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:xmap-relational-law-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) are chosen such that:
\begin_inset Formula 
\[
\text{xmap}_{P}(g)(k)(x)=\text{xmap}_{P}(\text{id})(f)(x)\quad,\quad\quad\text{xmap}_{P}(h)(l)(x)=\text{xmap}_{P}(f)(\text{id})(x)\quad.
\]

\end_inset

This implies 
\begin_inset Formula $g=\text{id}$
\end_inset

, 
\begin_inset Formula $h=k=f$
\end_inset

, and 
\begin_inset Formula $l=\text{id}$
\end_inset

.
 With these choices, the preconditions 
\begin_inset Formula $(g,h)\in b\ogreaterthan a$
\end_inset

 and 
\begin_inset Formula $(k,l)\in c\ogreaterthan d$
\end_inset

 will automatically hold in Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:xmap-relational-law-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 So, the conclusion of Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:xmap-relational-law-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) also holds, which proves Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-from-parametricity-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 The relational parametricity theorem (Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-main-relational-parametricity-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) gives 
\begin_inset Formula $(t^{X},t^{Y})\in c^{\updownarrow T}$
\end_inset

 for any relation 
\begin_inset Formula $c^{:X\leftrightarrow Y}$
\end_inset

.
 We can now choose 
\begin_inset Formula $c\triangleq\left<f\right>$
\end_inset

 and use the result of part 
\series bold
(a)
\series default
 where we set 
\begin_inset Formula $x\triangleq t^{X}$
\end_inset

 and 
\begin_inset Formula $y\triangleq t^{Y}$
\end_inset

.
 Then we obtain 
\begin_inset Formula $t^{X}\triangleright f^{\uparrow P^{X,\bullet}}=t^{Y}\triangleright f^{\downarrow P^{\bullet,Y}}$
\end_inset

, which is the wedge law of 
\begin_inset Formula $t$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
While proving Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-wedge-law-from-parametricity"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we used the 
\series bold
identity laws
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
identity laws!of relational lifting
\end_layout

\end_inset

 of the relational lifting:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-relational-lifting-identity-law"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-lifting-identity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 An identity relation can be removed from a simultaneous lifting.
 For instance, given any type constructor 
\begin_inset Formula $H^{\bullet,\bullet}$
\end_inset

, a fixed type 
\begin_inset Formula $T$
\end_inset

, and any relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

, we have: 
\begin_inset Formula 
\[
(r,\text{id}^{:T\leftrightarrow T})^{\updownarrow H}=r^{\updownarrow G}\quad,\quad\quad\text{where we defined}:\quad G^{A}\triangleq H^{A,T}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 Lifting one or more identity relations produces again an identity relation:
 
\begin_inset Formula 
\[
\text{for any }G^{\bullet},H^{\bullet,\bullet},\text{etc}.:\quad(\text{id}^{:A\leftrightarrow A})^{\updownarrow G}=\text{id}^{:G^{A}\leftrightarrow G^{A}}\quad,\quad\quad(\text{id}^{:A\leftrightarrow A},\text{id}^{:X\leftrightarrow X})^{\updownarrow H}=\text{id}^{:H^{A,X}\leftrightarrow H^{A,X}}\quad,\quad\text{etc}.
\]

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 Enumerate all cases of Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-simultaneous-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for 
\begin_inset Formula $H^{\bullet,\bullet}$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $H^{A,X}\triangleq Z$
\end_inset

 with a fixed type 
\begin_inset Formula $Z$
\end_inset

, we have also 
\begin_inset Formula $G^{A}=Z$
\end_inset

.
 Then 
\begin_inset Formula $(r,s)^{\updownarrow H}\triangleq\text{id}^{:Z\leftrightarrow Z}$
\end_inset

 and 
\begin_inset Formula $r^{\updownarrow G}=\text{id}^{:Z\leftrightarrow Z}$
\end_inset

 for any relations 
\begin_inset Formula $r$
\end_inset

, 
\begin_inset Formula $s$
\end_inset

.
 So, 
\begin_inset Formula $(r,\text{id})^{\updownarrow H}=r^{\updownarrow G}$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $H^{A,X}\triangleq A$
\end_inset

, we have 
\begin_inset Formula $G^{A}=A$
\end_inset

.
 Then 
\begin_inset Formula $(r,s)^{\updownarrow H}\triangleq r$
\end_inset

 and 
\begin_inset Formula $r^{\updownarrow G}=r$
\end_inset

 for any relation 
\begin_inset Formula $r$
\end_inset

, so we obtain 
\begin_inset Formula $(r,\text{id})^{\updownarrow H}=r^{\updownarrow G}$
\end_inset

.
\end_layout

\begin_layout Standard
The next three similar cases use the inductive assumptions 
\begin_inset Formula $(r,\text{id})^{\updownarrow K}=r^{\updownarrow K^{\bullet,T}}$
\end_inset

 and 
\begin_inset Formula $(r,\text{id})^{\updownarrow L}=r^{\updownarrow L^{\bullet,T}}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{if }H^{A,X}\triangleq K^{A,X}\times L^{A,X}:\quad & (r,\text{id})^{\updownarrow H}=(r,\text{id})^{\updownarrow K}\boxtimes(r,\text{id})^{\updownarrow L}=r^{\updownarrow K^{\bullet,T}}\boxtimes r^{\updownarrow L^{\bullet,T}}=r^{\updownarrow(K^{\bullet,T}\times L^{\bullet,T})}=r^{\updownarrow G}\quad;\\
\text{if }H^{A,X}\triangleq K^{A,X}+L^{A,X}:\quad & (r,\text{id})^{\updownarrow H}=(r,\text{id})^{\updownarrow K}\boxplus(r,\text{id})^{\updownarrow L}=r^{\updownarrow K^{\bullet,T}}\boxplus r^{\updownarrow L^{\bullet,T}}=r^{\updownarrow(K^{\bullet,T}+L^{\bullet,T})}=r^{\updownarrow G}\quad;\\
\text{if }H^{A,X}\triangleq K^{A,X}\rightarrow L^{A,X}:\quad & (r,\text{id})^{\updownarrow H}=(r,\text{id})^{\updownarrow K}\ogreaterthan(r,\text{id})^{\updownarrow L}=r^{\updownarrow K^{\bullet,T}}\ogreaterthan r^{\updownarrow L^{\bullet,T}}=r^{\updownarrow(K^{\bullet,T}\rightarrow L^{\bullet,T})}=r^{\updownarrow G}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
If 
\begin_inset Formula $H^{\bullet,\bullet}\triangleq K^{\bullet,\bullet}\times L^{\bullet,\bullet}$
\end_inset

 then the inductive assumptions are 
\begin_inset Formula $(r,\text{id})^{\updownarrow K}=r^{\updownarrow K^{\bullet,T}}$
\end_inset

 and 
\begin_inset Formula $(r,\text{id})^{\updownarrow L}=r^{\updownarrow L^{\bullet,T}}$
\end_inset

, so:
\begin_inset Formula 
\[
(r,\text{id})^{\updownarrow H}=(r,\text{id})^{\updownarrow K}\boxtimes(r,\text{id})^{\updownarrow L}=r^{\updownarrow K^{\bullet,T}}\boxtimes r^{\updownarrow L^{\bullet,T}}=r^{\updownarrow(K^{\bullet,T}\times L^{\bullet,T})}=r^{\updownarrow G}\quad.
\]

\end_inset


\end_layout

\begin_layout Plain Layout
If 
\begin_inset Formula $H^{\bullet,\bullet}\triangleq K^{\bullet,\bullet}+L^{\bullet,\bullet}$
\end_inset

 with the same inductive assumptions, we find: 
\begin_inset Formula 
\[
(r,\text{id})^{\updownarrow H}=(r,\text{id})^{\updownarrow K}\boxplus(r,\text{id})^{\updownarrow L}=r^{\updownarrow K^{\bullet,T}}\boxplus r^{\updownarrow L^{\bullet,T}}=r^{\updownarrow(K^{\bullet,T}+L^{\bullet,T})}=r^{\updownarrow G}\quad.
\]

\end_inset


\end_layout

\begin_layout Plain Layout
If 
\begin_inset Formula $H^{\bullet,\bullet}\triangleq K^{\bullet,\bullet}\rightarrow L^{\bullet,\bullet}$
\end_inset

 with the same inductive assumptions, we find: 
\begin_inset Formula 
\[
(r,\text{id})^{\updownarrow H}=(r,\text{id})^{\updownarrow K}\ogreaterthan(r,\text{id})^{\updownarrow L}=r^{\updownarrow K^{\bullet,T}}\ogreaterthan r^{\updownarrow L^{\bullet,T}}=r^{\updownarrow(K^{\bullet,T}\rightarrow L^{\bullet,T})}=r^{\updownarrow G}\quad.
\]

\end_inset


\end_layout

\end_inset

If 
\begin_inset Formula $H^{A,X}\triangleq S^{A,X,H^{A,X}}$
\end_inset

 with a recursion scheme 
\begin_inset Formula $S^{\bullet,\bullet,\bullet}$
\end_inset

, the type constructor 
\begin_inset Formula $G^{\bullet}$
\end_inset

 is defined by: 
\begin_inset Formula 
\[
G^{A}\triangleq H^{A,T}=S^{A,T,H^{A,T}}=S^{A,T,G^{A}}\quad.
\]

\end_inset

So, the lifting to 
\begin_inset Formula $G$
\end_inset

 is given by 
\begin_inset Formula $r^{\updownarrow G}=\big(r,\overline{r^{\updownarrow G}}\big)^{\updownarrow S^{\bullet,T,\bullet}}$
\end_inset

.
 Write the definition of lifting to 
\begin_inset Formula $H$
\end_inset

 and simplify:
\begin_inset Formula 
\begin{align*}
 & (r,\text{id})^{\updownarrow H}=\big(r,\text{id},\overline{(r,\text{id})^{\updownarrow H}}\big)^{\updownarrow S}\\
\text{inductive assumption }\overline{(r,\text{id})^{\updownarrow H}}=\overline{r^{\updownarrow G}}:\quad & =\big(r,\gunderline{\text{id}},\overline{r^{\updownarrow G}}\big)^{\updownarrow S}\\
\text{inductive assumption about lifting id to }S^{\bullet,\bullet,\bullet}:\quad & =\big(r,\overline{r^{\updownarrow G}}\big)^{\updownarrow S^{\bullet,T,\bullet}}\\
\text{definition of lifting to }G:\quad & =r^{\updownarrow G}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $H^{A,X}\triangleq\forall Z.\,S^{Z,A,X}$
\end_inset

, the type constructor 
\begin_inset Formula $G^{\bullet}$
\end_inset

 is 
\begin_inset Formula $G^{A}=\forall Z.\,S^{Z,A,T}$
\end_inset

.
 The lifting 
\begin_inset Formula $(r,\text{id})^{\updownarrow H}$
\end_inset

 is a relation of type 
\begin_inset Formula $\forall U.\,S^{U,A,X}\leftrightarrow\forall V.\,S^{V,A,X}$
\end_inset

 written as:
\begin_inset Formula 
\begin{align*}
 & \forall(U,V):\quad\big((r,\text{id})^{\updownarrow\forall Z.\,S^{Z,\bullet,\bullet}}\big)^{U,V}=\forall w^{:U\leftrightarrow V}.\,(w,r,\gunderline{\text{id}})^{\updownarrow S^{\bullet,\bullet,\bullet}}\\
\text{omitting id from lifting to }S:\quad & =\forall w^{:U\leftrightarrow V}.\,(w,r)^{\updownarrow S^{\bullet,\bullet,T}}\\
\text{definition of lifting to }G:\quad & =(r^{\updownarrow G})^{U,V}\quad.
\end{align*}

\end_inset

Here we used the inductive assumption that identity relations may be omitted
 from liftings to 
\begin_inset Formula $S^{\bullet,\bullet,\bullet}$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 Enumerate all cases of Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for 
\begin_inset Formula $G^{\bullet}$
\end_inset

 or Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-simultaneous-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for 
\begin_inset Formula $H^{\bullet,\bullet}$
\end_inset

.
 The proofs are similar, so we will only prove that 
\begin_inset Formula $(\text{id},\text{id})^{\updownarrow H}=\text{id}$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $H^{A,X}\triangleq Z$
\end_inset

 with a fixed type 
\begin_inset Formula $Z$
\end_inset

, we have 
\begin_inset Formula $(r,s)^{\updownarrow H}\triangleq\text{id}^{:Z\leftrightarrow Z}$
\end_inset

 for any relations 
\begin_inset Formula $r$
\end_inset

, 
\begin_inset Formula $s$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $H^{A,X}\triangleq A$
\end_inset

, we have 
\begin_inset Formula $(r,s)^{\updownarrow H}\triangleq r$
\end_inset

 for any relation 
\begin_inset Formula $r$
\end_inset

, so we obtain 
\begin_inset Formula $(\text{id},\text{id})^{\updownarrow H}=\text{id}$
\end_inset

.
 Similarly if 
\begin_inset Formula $H^{A,X}\triangleq X$
\end_inset

 then we obtain 
\begin_inset Formula $(\text{id},\text{id})^{\updownarrow H}=\text{id}$
\end_inset

.
\end_layout

\begin_layout Standard
The next three similar cases use the inductive assumptions 
\begin_inset Formula $(\text{id},\text{id})^{\updownarrow K}=\text{id}$
\end_inset

 and 
\begin_inset Formula $(\text{id},\text{id})^{\updownarrow L}=\text{id}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{if }H^{\bullet,\bullet}\triangleq K^{\bullet,\bullet}\times L^{\bullet,\bullet}:\quad & (\text{id},\text{id})^{\updownarrow H}=(\text{id},\text{id})^{\updownarrow K}\boxtimes(\text{id},\text{id})^{\updownarrow L}=\text{id}\boxtimes\text{id}\quad;\\
\text{if }H^{\bullet,\bullet}\triangleq K^{\bullet,\bullet}+L^{\bullet,\bullet}:\quad & (\text{id},\text{id})^{\updownarrow H}=(\text{id},\text{id})^{\updownarrow K}\boxplus(\text{id},\text{id})^{\updownarrow L}=\text{id}\boxplus\text{id}\quad;\\
\text{if }H^{\bullet,\bullet}\triangleq K^{\bullet,\bullet}\rightarrow L^{\bullet,\bullet}:\quad & (\text{id},\text{id})^{\updownarrow H}=(\text{id},\text{id})^{\updownarrow K}\ogreaterthan(\text{id},\text{id})^{\updownarrow L}=\text{id}\ogreaterthan\text{id}\quad.
\end{align*}

\end_inset

It follows from Example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-pair-product-pair-mapper-relation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 with 
\begin_inset Formula $f=\text{id}$
\end_inset

 and 
\begin_inset Formula $g=\text{id}$
\end_inset

 that 
\begin_inset Formula 
\[
\text{id}\boxtimes\text{id}=\text{id}\quad,\quad\quad\text{id}\boxplus\text{id}=\text{id}\quad,\quad\quad\text{and}\quad\quad\text{id}\ogreaterthan\text{id}=\text{id}\quad.
\]

\end_inset

So, in all three cases we obtain: 
\begin_inset Formula $(\text{id},\text{id})^{\updownarrow H}=\text{id}$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $H^{A,X}\triangleq S^{A,X,H^{A,X}}$
\end_inset

 with a recursion scheme 
\begin_inset Formula $S^{\bullet,\bullet,\bullet}$
\end_inset

, we have:
\begin_inset Formula 
\[
(\text{id},\text{id})^{\updownarrow H}=\big(\text{id},\text{id},\overline{(\text{id},\text{id})^{\updownarrow H}}\big)^{\updownarrow S}=(\text{id},\text{id},\text{id})^{\updownarrow S}\quad,
\]

\end_inset

because by the inductive assumption the identity law holds for the recursive
 call: 
\begin_inset Formula $\overline{(\text{id},\text{id})^{\updownarrow H}}=\text{id}$
\end_inset

.
 Another inductive assumption is that the identity law holds for the liftings
 to 
\begin_inset Formula $S^{\bullet,\bullet,\bullet}$
\end_inset

.
 So, we get: 
\begin_inset Formula 
\[
(\text{id},\text{id})^{\updownarrow H}=(\text{id},\text{id},\text{id})^{\updownarrow S}=\text{id}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $H^{A,X}\triangleq\forall Z.\,S^{Z,A,X}$
\end_inset

, the lifting 
\begin_inset Formula $(\text{id},\text{id})^{\updownarrow H}$
\end_inset

 is a relation of type 
\begin_inset Formula $\forall U.\,S^{U,A,X}\leftrightarrow\forall V.\,S^{V,A,X}$
\end_inset

 written as:
\begin_inset Formula 
\[
\forall(U,V):\quad\big((\text{id},\text{id})^{\updownarrow\forall Z.\,S^{Z,\bullet,\bullet}}\big)^{U,V}=\forall w^{:U\leftrightarrow V}.\,(w,\text{id},\text{id})^{\updownarrow H^{\bullet,\bullet,\bullet}}\quad.
\]

\end_inset

As we showed in part 
\series bold
(a)
\series default
, any identity relation may be omitted from the lifting:
\begin_inset Formula 
\[
\forall w^{:U\leftrightarrow V}.\,(w,\gunderline{\text{id}^{:A\leftrightarrow A}},\gunderline{\text{id}^{:X\leftrightarrow X}})^{\updownarrow H^{\bullet,\bullet,\bullet}}=\forall w^{:U\leftrightarrow V}.\,w^{\updownarrow H^{\bullet,A,X}}\quad.
\]

\end_inset

By Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-parametricity-gives-identity-relation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 used for 
\begin_inset Formula $H^{\bullet,A,X}$
\end_inset

 as a type constructor with one type parameter, the relation 
\begin_inset Formula $\forall w.\,w^{\updownarrow H^{\bullet,A,X}}$
\end_inset

 is the identity relation for the type 
\begin_inset Formula $\forall Z.\,H^{Z,A,X}$
\end_inset

.
 We find that 
\begin_inset Formula $(\text{id},\text{id})^{\updownarrow\forall Z.\,S^{Z,\bullet,\bullet}}=\text{id}$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
commutativity law does not hold!
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Instead of the simultaneous lifting of two relations 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 and 
\begin_inset Formula $s^{:X\leftrightarrow Y}$
\end_inset

 to a type constructor 
\begin_inset Formula $P^{\bullet,\bullet}$
\end_inset

, we can first lift 
\begin_inset Formula $r$
\end_inset

 to 
\begin_inset Formula $r^{\updownarrow P^{\bullet,X}}:P^{A,X}\leftrightarrow P^{B,X}$
\end_inset

 and lift 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $s^{\updownarrow P^{B,\bullet}}:P^{B,X}\leftrightarrow P^{B,Y}$
\end_inset

.
 Then the two lifted relations are composed and yield a relation 
\begin_inset Formula $r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}$
\end_inset

 of type 
\begin_inset Formula $P^{A,X}\leftrightarrow P^{B,Y}$
\end_inset

.
 However, the lifting may be performed in the reverse order: first lift
 
\begin_inset Formula $s^{\updownarrow P^{A,\bullet}}:P^{A,X}\leftrightarrow P^{A,Y}$
\end_inset

 and 
\begin_inset Formula $r^{\updownarrow P^{\bullet,Y}}:P^{A,Y}\leftrightarrow P^{B,Y}$
\end_inset

 and then compose 
\begin_inset Formula $s^{\updownarrow P^{A,\bullet}}\circ r^{\updownarrow P^{\bullet,Y}}$
\end_inset

.
 The results of these compositions are not always the same and not always
 equivalent to the simultaneous lifting.
 This is unlike the commutativity laws for bifunctors, proved in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Commutativity-laws-for-type-constructors"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-lifting-relation-commutativity-law"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-relation-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
For 
\begin_inset Index idx
status open

\begin_layout Plain Layout
commutativity law!of relational lifting
\end_layout

\end_inset

 any fully parametric type constructor 
\begin_inset Formula $P^{A,X}$
\end_inset

, the lifting of two given relations 
\end_layout

\begin_layout Plain Layout
\begin_inset Wrap figure
lines 0
placement l
overhang 0in
width "28col%"
status open

\begin_layout Plain Layout
\begin_inset VSpace -210baselineskip%
\end_inset


\begin_inset Preview

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{2.4pc}\xyScaleX{3.6pc}P^{A,X}\ar@{<->}[d]\sb(0.45){r^{\updownarrow P^{\bullet,X}}}\ar@{<->}[r]\sp(0.55){s^{\updownarrow P^{A,\bullet}}}\ar@{<->}[rd]\sp(0.5){t} & P^{A,Y}\ar@{<->}[d]\sp(0.45){r^{\updownarrow P^{\bullet,Y}}}\\
P^{B,X}\ar@{<->}[r]\sp(0.5){s^{\updownarrow P^{B,\bullet}}} & P^{B,Y}
}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace -160baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\begin_inset Formula $r:A\leftrightarrow B$
\end_inset

 and 
\begin_inset Formula $s:X\leftrightarrow Y$
\end_inset

 to 
\begin_inset Formula $P^{\bullet,\bullet}$
\end_inset

 yields (this is wrong!) the same relation 
\begin_inset Formula $t$
\end_inset

 of type 
\begin_inset Formula $P^{A,X}\leftrightarrow P^{B,Y}$
\end_inset

 independently of the order of lifting and composition:
\begin_inset Formula 
\begin{align*}
\text{relational commutativity law}:\quad & t=r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}=s^{\updownarrow P^{A,\bullet}}\circ r^{\updownarrow P^{\bullet,Y}}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
We go through all cases in Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for 
\begin_inset Formula $P^{\bullet,\bullet}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Base cases
\end_layout

\begin_layout Plain Layout
These are 
\begin_inset Formula $P^{A,X}\triangleq Z$
\end_inset

 (a fixed type), 
\begin_inset Formula $P^{A,X}\triangleq A$
\end_inset

, and 
\begin_inset Formula $P^{A,X}\triangleq X$
\end_inset

.
 To cover all these cases at once, we will prove that 
\begin_inset Formula $P$
\end_inset

 satisfies the relational commutativity law if 
\begin_inset Formula $P^{A,X}$
\end_inset

 is independent of one of its type parameters:
\begin_inset Formula 
\begin{align*}
\text{if }P^{A,X}=G^{A}:\quad & r^{\updownarrow P^{\bullet,X}}=r^{\updownarrow P^{\bullet,Y}}\quad,\quad s^{\updownarrow P^{A,\bullet}}=s^{\updownarrow P^{B,\bullet}}=\text{id}\quad,\quad\text{ so }\quad r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}=s^{\updownarrow P^{A,\bullet}}\circ r^{\updownarrow P^{\bullet,Y}}\quad;\\
\text{if }P^{A,X}=H^{X}:\quad & r^{\updownarrow P^{\bullet,X}}=r^{\updownarrow P^{\bullet,Y}}=\text{id}\quad,\quad s^{\updownarrow P^{A,\bullet}}=s^{\updownarrow P^{B,\bullet}}\quad,\quad\text{ so }\quad r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}=s^{\updownarrow P^{A,\bullet}}\circ r^{\updownarrow P^{\bullet,Y}}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Paragraph
Products
\end_layout

\begin_layout Plain Layout
Here 
\begin_inset Formula $P^{A,X}\triangleq Q^{A,X}\times R^{A,X}$
\end_inset

.
 To verify the commutativity law for 
\begin_inset Formula $P$
\end_inset

, use Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-composition-distributive-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a):
\begin_inset Formula 
\begin{align*}
 & r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}=\big(r^{\updownarrow Q^{\bullet,X}}\boxtimes r^{\updownarrow R^{\bullet,X}}\big)\circ\big(s^{\updownarrow Q^{B,\bullet}}\boxtimes s^{\updownarrow R^{B,\bullet}}\big)=\big(r^{\updownarrow Q^{\bullet,X}}\circ s^{\updownarrow Q^{B,\bullet}}\big)\boxtimes\big(r^{\updownarrow R^{\bullet,X}}\circ s^{\updownarrow R^{B,\bullet}}\big)\quad,\\
 & s^{\updownarrow P^{A,\bullet}}\circ r^{\updownarrow P^{\bullet,Y}}=\big(s^{\updownarrow Q^{A,\bullet}}\boxtimes s^{\updownarrow R^{A,\bullet}}\big)\circ\big(r^{\updownarrow Q^{\bullet,Y}}\boxtimes r^{\updownarrow R^{\bullet,Y}}\big)=\big(s^{\updownarrow Q^{A,\bullet}}\circ r^{\updownarrow Q^{\bullet,Y}}\big)\boxtimes\big(s^{\updownarrow R^{A,\bullet}}\circ r^{\updownarrow R^{\bullet,Y}}\big)\quad.
\end{align*}

\end_inset

The remaining differences vanish due to the inductive assumptions (the law
 holds for 
\begin_inset Formula $Q$
\end_inset

 and 
\begin_inset Formula $R$
\end_inset

).
\end_layout

\begin_layout Paragraph
Co-products
\end_layout

\begin_layout Plain Layout
Here 
\begin_inset Formula $P^{A,X}\triangleq Q^{A,X}+R^{A,X}$
\end_inset

.
 The proof is similar to the proof for product types except we need to replace
 the pair product (
\begin_inset Formula $\boxtimes$
\end_inset

) with 
\begin_inset Formula $\boxplus$
\end_inset

 and use Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-composition-distributive-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

(b).
\end_layout

\begin_layout Paragraph
Function types
\end_layout

\begin_layout Plain Layout
We have 
\begin_inset Formula $P^{A,X}\triangleq Q^{A,X}\rightarrow R^{A,X}$
\end_inset

.
 By the inductive assumptions, the commutativity law already holds for 
\begin_inset Formula $Q$
\end_inset

 and 
\begin_inset Formula $R$
\end_inset

.
 To verify the law for 
\begin_inset Formula $P$
\end_inset

, we need to write the conditions for some 
\begin_inset Formula $p_{1}^{:P^{A,X}}$
\end_inset

 and 
\begin_inset Formula $p_{2}^{:P^{B,Y}}$
\end_inset

 to be in the relations 
\begin_inset Formula $r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}$
\end_inset

 and 
\begin_inset Formula $s^{\updownarrow P^{A,\bullet}}\circ r^{\updownarrow P^{\bullet,Y}}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & (p_{1},p_{2})\in r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}\text{ means }\exists p_{3}^{:P^{B,X}}\text{ such that }(p_{1},p_{3})\in r^{\updownarrow P^{\bullet,X}}\text{ and }(p_{3},p_{2})\in s^{\updownarrow P^{B,\bullet}}\quad,\\
 & (p_{1},p_{2})\in s^{\updownarrow P^{A,\bullet}}\circ r^{\updownarrow P^{\bullet,Y}}\text{ means }\exists p_{4}^{:P^{A,Y}}\text{ such that }(p_{1},p_{4})\in s^{\updownarrow P^{A,\bullet}}\text{ and }(p_{4},p_{2})\in r^{\updownarrow P^{\bullet,Y}}\quad.
\end{align*}

\end_inset

 Since 
\begin_inset Formula $P$
\end_inset

 has a function type, we need to use Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(e), for instance:
\begin_inset Formula 
\begin{align*}
 & (a^{:P^{A,X}},b^{:P^{B,X}})\in r^{\updownarrow P^{\bullet,X}}\text{ means }\forall(q_{1}^{:Q^{A,X}},q_{2}^{:Q^{B,X}}):\text{ if }(q_{1},q_{2})\in r^{\updownarrow Q^{\bullet,X}}\text{ then }(a(q_{1}),b(q_{2}))\in r^{\updownarrow R^{\bullet,X}}\quad,\\
 & (b^{:P^{B,X}},c^{:P^{B,Y}})\in s^{\updownarrow P^{B,\bullet}}\text{ means }\forall(q_{2}^{:Q^{B,X}},q_{3}^{:Q^{B,Y}}):\text{ if }(q_{2},q_{3})\in s^{\updownarrow Q^{B,\bullet}}\text{ then }(b(q_{2}),c(q_{3}))\in s^{\updownarrow R^{B,\bullet}}\quad.
\end{align*}

\end_inset

So, we can rewrite the condition:
\begin_inset Formula 
\[
\exists p_{3}\text{ such that }(p_{1},p_{3})\in r^{\updownarrow P^{\bullet,X}}\text{ and }(p_{3},p_{2})\in s^{\updownarrow P^{B,\bullet}}
\]

\end_inset

by putting all quantified variables and all preconditions together:
\begin_inset Formula 
\begin{align}
(p_{1},p_{2})\in r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}\text{ means } & \exists p_{3}\text{ such that }\forall(q_{1},q_{2},q_{3}):\text{ if }(q_{1},q_{3})\in r^{\updownarrow Q^{\bullet,X}}\text{ and }(q_{3},q_{2})\in s^{\updownarrow Q^{B,\bullet}}\nonumber \\
 & \text{ then }(p_{1}(q_{1}),p_{3}(q_{3}))\in r^{\updownarrow R^{\bullet,X}}\text{ and }(p_{3}(q_{3}),p_{2}(q_{2}))\in s^{\updownarrow R^{B,\bullet}}\quad.\label{eq:p1p2-derivation1}
\end{align}

\end_inset

The second relation is rewritten similarly as:
\begin_inset Formula 
\begin{align*}
(p_{1},p_{2})\in s^{\updownarrow P^{A,\bullet}}\circ r^{\updownarrow P^{\bullet,Y}}\text{ means } & \exists p_{4}\text{ such that }\forall(q_{1},q_{2},q_{4}):\text{ if }(q_{1},q_{4})\in s^{\updownarrow Q^{A,\bullet}}\text{ and }(q_{4},q_{2})\in r^{\updownarrow Q^{\bullet,Y}}\\
 & \text{ then }(p_{1}(q_{1}),p_{4}(q_{4}))\in s^{\updownarrow Q^{A,\bullet}}\text{ and }(p_{4}(q_{4}),p_{2}(q_{2}))\in r^{\updownarrow R^{\bullet,Y}}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Plain Layout
We use these formulas to show that the two relations are equivalent.
 Asuming that 
\begin_inset Formula $(p_{1},p_{2})\in r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}$
\end_inset

 and given some values 
\begin_inset Formula $q_{1}$
\end_inset

, 
\begin_inset Formula $q_{2}$
\end_inset

, 
\begin_inset Formula $q_{4}$
\end_inset

 such that:
\begin_inset Formula 
\begin{equation}
(q_{1},q_{4})\in s^{\updownarrow Q^{A,\bullet}}\quad\text{ and }\quad(q_{4},q_{2})\in r^{\updownarrow Q^{\bullet,Y}}\quad,\label{eq:p1p4-derivation1}
\end{equation}

\end_inset

we need to show that 
\begin_inset Formula $(p_{1}(q_{1}),p_{4}(q_{4}))\in s^{\updownarrow Q^{A,\bullet}}$
\end_inset

 and 
\begin_inset Formula $(p_{4}(q_{4}),p_{2}(q_{2}))\in r^{\updownarrow R^{\bullet,Y}}$
\end_inset

 where 
\begin_inset Formula $p_{4}$
\end_inset

 is a function of type 
\begin_inset Formula $Q^{A,Y}\rightarrow R^{A,Y}$
\end_inset

 that we need to find.
 We note that Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:p1p4-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) looks like the definition of relational composition: 
\begin_inset Formula $(q_{1},q_{2})\in s^{\updownarrow Q^{A,\bullet}}\circ r^{\updownarrow Q^{\bullet,Y}}$
\end_inset

.
 By the inductive assumption, relational liftings to 
\begin_inset Formula $Q$
\end_inset

 commute, which means that 
\begin_inset Formula $(q_{1},q_{2})\in r^{\updownarrow Q^{\bullet,X}}\circ s^{\updownarrow Q^{B,\bullet}}$
\end_inset

, or equivalently:
\begin_inset Formula 
\[
\exists q_{3}\text{ such that }(q_{1},q_{3})\in r^{\updownarrow Q^{\bullet,X}}\text{ and }(q_{3},q_{2})\in s^{\updownarrow Q^{B,\bullet}}\quad.
\]

\end_inset

This value 
\begin_inset Formula $q_{3}$
\end_inset

 may depend on 
\begin_inset Formula $q_{1}$
\end_inset

 and 
\begin_inset Formula $q_{2}$
\end_inset

.
 We can now use the values 
\begin_inset Formula $q_{1}$
\end_inset

, 
\begin_inset Formula $q_{2}$
\end_inset

, 
\begin_inset Formula $q_{3}$
\end_inset

 in Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:p1p2-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

), which gives us a value 
\begin_inset Formula $p_{3}(q_{3})$
\end_inset

 such that:
\begin_inset Formula 
\[
(p_{1}(q_{1}),p_{3}(q_{3}))\in r^{\updownarrow R^{\bullet,X}}\text{ and }(p_{3}(q_{3}),p_{2}(q_{2}))\in s^{\updownarrow R^{B,\bullet}}\quad.
\]

\end_inset

This means 
\begin_inset Formula $(p_{1}(q_{1}),p_{2}(q_{2}))\in r^{\updownarrow R^{\bullet,X}}\circ s^{\updownarrow R^{B,\bullet}}$
\end_inset

.
 Commuting the liftings to 
\begin_inset Formula $R$
\end_inset

, we obtain 
\begin_inset Formula $(p_{1}(q_{1}),p_{2}(q_{2}))\in s^{\updownarrow R^{A,\bullet}}\circ r^{\updownarrow R^{\bullet,Y}}$
\end_inset

, which we can write equivalently as:
\begin_inset Formula 
\[
\exists p_{5}\text{ such that }(p_{1}(q_{1}),p_{5})\in s^{\updownarrow R^{A,\bullet}}\text{ and }(p_{5},p_{2}(q_{2}))\in r^{\updownarrow R^{\bullet,Y}}\quad.
\]

\end_inset

Here 
\begin_inset Formula $p_{5}^{:R^{A,Y}}$
\end_inset

 is a value that may depend on 
\begin_inset Formula $p_{1}(q_{1})$
\end_inset

 and 
\begin_inset Formula $p_{2}(q_{2})$
\end_inset

.
\end_layout

\begin_layout Plain Layout
we rewrite the above conditions to:
\begin_inset Formula 
\[
\text{if }\exists q_{1},q_{2}\text{ such that }(q_{1},q_{2})\in r^{\updownarrow Q^{\bullet,X}}\circ s^{\updownarrow Q^{B,\bullet}}\text{ then }(p_{1}(q_{1}),p_{2}(q_{2}))\in r^{\updownarrow R^{\bullet,X}}\circ s^{\updownarrow R^{B,\bullet}}\quad.
\]

\end_inset

So, the left-hand side of the commutativity law applied to 
\begin_inset Formula $\left(p_{1},p_{2}\right)$
\end_inset

 becomes:
\begin_inset Formula 
\[
(p_{1},p_{2})\in r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}\text{ means if }(q_{1},q_{2})\in r^{\updownarrow Q^{\bullet,X}}\circ s^{\updownarrow Q^{B,\bullet}}\text{ then }(p_{1}(q_{1}),p_{2}(q_{2}))\in r^{\updownarrow R^{\bullet,X}}\circ s^{\updownarrow R^{B,\bullet}}\quad.
\]

\end_inset


\end_layout

\begin_layout Plain Layout
By a similar calculation, we apply the right-hand side of the commutativity
 law to 
\begin_inset Formula $\left(p_{1},p_{2}\right)$
\end_inset

 and get:
\begin_inset Formula 
\[
(p_{1},p_{2})\in s^{\updownarrow P^{A,\bullet}}\circ r^{\updownarrow P^{\bullet,Y}}\text{ means if }(q_{1},q_{2})\in s^{\updownarrow Q^{A,\bullet}}\circ r^{\updownarrow Q^{\bullet,Y}}\text{ then }(p_{1}(q_{1}),p_{2}(q_{2}))\in s^{\updownarrow R^{A,\bullet}}\circ r^{\updownarrow R^{\bullet,Y}}\quad.
\]

\end_inset

The remaining difference between the two sides vanishes due to the commutativity
 laws of 
\begin_inset Formula $Q$
\end_inset

 and 
\begin_inset Formula $R$
\end_inset

, which hold by the inductive assumptions.***Need to verify that the proof
 is correct.
\end_layout

\begin_layout Paragraph
Recursive types
\end_layout

\begin_layout Plain Layout
Here 
\begin_inset Formula $P$
\end_inset

 is defined by the recursive type equation 
\begin_inset Formula $P^{A,X}\triangleq S^{A,X,P^{A,X}}$
\end_inset

.
 The inductive assumptions say that the commutativity law holds for liftings
 to 
\begin_inset Formula $S^{A,X,R}$
\end_inset

 with respect to 
\emph on
any
\emph default
 pair of its type parameters.
 We use Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(f) to express liftings of relations to 
\begin_inset Formula $P$
\end_inset

:
\begin_inset Formula 
\[
r^{\updownarrow P^{\bullet,X}}=r^{\updownarrow S^{\bullet,X,P^{A,X}}}\circ\big(\overline{r^{\updownarrow P^{\bullet,X}}}\big)^{\updownarrow S^{B,X,\bullet}}\quad,\quad\quad s^{\updownarrow P^{B,\bullet}}=s^{\updownarrow S^{B,\bullet,P^{B,X}}}\circ\big(\overline{s^{\updownarrow P^{B,\bullet}}}\big)^{\updownarrow S^{B,Y,\bullet}}\quad.
\]

\end_inset

To verify the commutativity law for 
\begin_inset Formula $P$
\end_inset

, write its two sides separately:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}=r^{\updownarrow S^{\bullet,X,P^{A,X}}}\circ\big(\overline{r^{\updownarrow P^{\bullet,X}}}\big)^{\updownarrow S^{B,X,\bullet}}\circ s^{\updownarrow S^{B,\bullet,P^{B,X}}}\circ\big(\overline{s^{\updownarrow P^{B,\bullet}}}\big)^{\updownarrow S^{B,Y,\bullet}}\quad,\\
\text{right-hand side}:\quad & s^{\updownarrow P^{A,\bullet}}\circ r^{\updownarrow P^{\bullet,Y}}=s^{\updownarrow S^{A,\bullet,P^{A,X}}}\circ\big(\overline{s^{\updownarrow P^{A,\bullet}}}\big)^{\updownarrow S^{A,Y,\bullet}}\circ r^{\updownarrow S^{\bullet,Y,P^{A,Y}}}\circ\big(\overline{r^{\updownarrow P^{\bullet,Y}}}\big)^{\updownarrow S^{B,Y,\bullet}}\quad.
\end{align*}

\end_inset

All liftings are to 
\begin_inset Formula $S$
\end_inset

, so (by the inductive assumptions) the order of composition may be swapped
 when liftings are applied to different type parameters of 
\begin_inset Formula $S^{A,X,R}$
\end_inset

.
 We will now swap the order of compositions until the left-hand side becomes
 equal to the right-hand side.
 Begin by swapping the composition in the middle:
\begin_inset Formula 
\begin{align*}
\text{both sides have type }S^{B,X,P^{A,X}}\leftrightarrow S^{B,Y,P^{B,X}}:\quad & \big(\overline{r^{\updownarrow P^{\bullet,X}}}\big)^{\updownarrow S^{B,X,\bullet}}\circ s^{\updownarrow S^{B,\bullet,P^{B,X}}}=s^{\updownarrow S^{B,\bullet,P^{A,X}}}\circ\big(\overline{r^{\updownarrow P^{\bullet,X}}}\big)^{\updownarrow S^{B,Y,\bullet}}\quad.
\end{align*}

\end_inset

Then the left-hand side of the law becomes:
\begin_inset Formula 
\[
r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}=r^{\updownarrow S^{\bullet,X,P^{A,X}}}\circ s^{\updownarrow S^{B,\bullet,P^{A,X}}}\circ\big(\overline{r^{\updownarrow P^{\bullet,X}}}\big)^{\updownarrow S^{B,Y,\bullet}}\circ\big(\overline{s^{\updownarrow P^{B,\bullet}}}\big)^{\updownarrow S^{B,Y,\bullet}}\quad.
\]

\end_inset

Now we can swap the first composition:
\begin_inset Formula 
\begin{align*}
\text{both sides have type }S^{A,X,P^{A,X}}\leftrightarrow S^{B,Y,P^{A,X}}:\quad & r^{\updownarrow S^{\bullet,X,P^{A,X}}}\circ s^{\updownarrow S^{B,\bullet,P^{A,X}}}=s^{\updownarrow S^{A,\bullet,P^{A,X}}}\circ r^{\updownarrow S^{\bullet,Y,P^{A,X}}}\quad.
\end{align*}

\end_inset

Also, we use the composition law (Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-relation-laws"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and the inductive assumption to get:
\begin_inset Formula 
\begin{align*}
 & \big(\overline{r^{\updownarrow P^{\bullet,X}}}\big)^{\updownarrow S^{B,Y,\bullet}}\circ\big(\overline{s^{\updownarrow P^{B,\bullet}}}\big)^{\updownarrow S^{B,Y,\bullet}}=\big(\overline{r^{\updownarrow P^{\bullet,X}}}\circ\overline{s^{\updownarrow P^{B,\bullet}}}\big)^{\updownarrow S^{B,Y,\bullet}}=\big(\overline{s^{\updownarrow P^{A,\bullet}}}\circ\overline{r^{\updownarrow P^{\bullet,Y}}}\big)^{\updownarrow S^{B,Y,\bullet}}\\
 & =\big(\overline{s^{\updownarrow P^{A,\bullet}}}\big)^{\updownarrow S^{B,Y,\bullet}}\circ\big(\overline{r^{\updownarrow P^{\bullet,Y}}}\big)^{\updownarrow S^{B,Y,\bullet}}\quad.
\end{align*}

\end_inset

Then the left-hand side of the law becomes:
\begin_inset Formula 
\[
r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}=s^{\updownarrow S^{A,\bullet,P^{A,X}}}\circ r^{\updownarrow S^{\bullet,Y,P^{A,X}}}\circ\big(\overline{s^{\updownarrow P^{A,\bullet}}}\big)^{\updownarrow S^{B,Y,\bullet}}\circ\big(\overline{r^{\updownarrow P^{\bullet,Y}}}\big)^{\updownarrow S^{B,Y,\bullet}}\quad.
\]

\end_inset

Finally, we again swap the composition in the middle:
\begin_inset Formula 
\begin{align*}
\text{both sides have type }S^{A,Y,P^{A,X}}\leftrightarrow S^{B,Y,P^{A,Y}}:\quad & r^{\updownarrow S^{\bullet,Y,P^{A,X}}}\circ\big(\overline{s^{\updownarrow P^{A,\bullet}}}\big)^{\updownarrow S^{B,Y,\bullet}}=\big(\overline{s^{\updownarrow P^{A,\bullet}}}\big)^{\updownarrow S^{A,Y,\bullet}}\circ r^{\updownarrow S^{\bullet,Y,P^{A,Y}}}\quad.
\end{align*}

\end_inset

Then the left-hand side of the law becomes:
\begin_inset Formula 
\[
r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}=s^{\updownarrow S^{A,\bullet,P^{A,X}}}\circ\big(\overline{s^{\updownarrow P^{A,\bullet}}}\big)^{\updownarrow S^{A,Y,\bullet}}\circ r^{\updownarrow S^{\bullet,Y,P^{A,Y}}}\circ\big(\overline{r^{\updownarrow P^{\bullet,Y}}}\big)^{\updownarrow S^{B,Y,\bullet}}\quad.
\]

\end_inset

This is now equal to the right-hand side.
\end_layout

\begin_layout Paragraph
Quantified types
\end_layout

\begin_layout Plain Layout
Here 
\begin_inset Formula $P^{A,X}\triangleq\forall C.\,H^{C,A,X}$
\end_inset

.
 The inductive assumptions are that all values of type 
\begin_inset Formula $P^{A,X}$
\end_inset

 are implemented by fully parametric code and that 
\begin_inset Formula $H^{\bullet,\bullet,\bullet}$
\end_inset

 already satisfies the commutativity law with respect to any pair of its
 type parameters.
 We use Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-lifting-quantified-types-short"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and write:
\begin_inset Formula 
\[
\big(r^{\updownarrow P^{\bullet,X}}\big)^{C,D}=\forall u^{:C\leftrightarrow D}.\,u^{\updownarrow H^{\bullet,A,X}}\circ r^{\updownarrow H^{D,\bullet,X}}\quad,\quad\quad\big(s^{\updownarrow P^{B,\bullet}}\big)^{K,L}=\forall v^{:K\leftrightarrow L}.\,v^{\updownarrow H^{\bullet,B,X}}\circ s^{\updownarrow H^{L,B,\bullet}}\quad.
\]

\end_inset

To verify the commutativity law for 
\begin_inset Formula $P$
\end_inset

, write its two sides separately and apply to suitable types:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & \big(r^{\updownarrow P^{\bullet,X}}\circ s^{\updownarrow P^{B,\bullet}}\big)^{C,E}=\big(r^{\updownarrow P^{\bullet,X}}\big)^{C,D}\circ\big(s^{\updownarrow P^{B,\bullet}}\big)^{D,E}\\
 & \quad=\forall u^{:C\leftrightarrow D}.\,\forall v^{:D\leftrightarrow E}.\,u^{\updownarrow H^{\bullet,A,X}}\circ\gunderline{r^{\updownarrow H^{D,\bullet,X}}\circ v^{\updownarrow H^{\bullet,B,X}}\circ s^{\updownarrow H^{E,B,\bullet}}}\quad,\\
\text{right-hand side}:\quad & \big(s^{\updownarrow P^{A,\bullet}}\circ r^{\updownarrow P^{\bullet,Y}}\big)^{C,E}=\big(s^{\updownarrow P^{A,\bullet}}\big)^{C,D}\circ\big(r^{\updownarrow P^{\bullet,Y}}\big)^{D,E}\\
 & \quad=\gunderline{\forall v^{:C\leftrightarrow D}.\,\forall u^{:D\leftrightarrow E}}.\,v^{\updownarrow H^{\bullet,A,X}}\circ s^{\updownarrow H^{D,A,\bullet}}\circ u^{\updownarrow H^{\bullet,A,Y}}\circ r^{\updownarrow H^{E,\bullet,Y}}\\
 & \quad=\forall u^{:C\leftrightarrow D}.\,\forall v^{:D\leftrightarrow E}.\,u^{\updownarrow H^{\bullet,A,X}}\circ\gunderline{s^{\updownarrow H^{D,A,\bullet}}\circ v^{\updownarrow H^{\bullet,A,Y}}\circ r^{\updownarrow H^{E,\bullet,Y}}}\quad.
\end{align*}

\end_inset

In the last line, we exchanged the universally quantified relations 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

 for convenience.
 The remaining difference between the two sides is underlined above:
\begin_inset Formula 
\[
r^{\updownarrow H^{D,\bullet,X}}\circ v^{\updownarrow H^{\bullet,B,X}}\circ s^{\updownarrow H^{E,B,\bullet}}\overset{?}{=}s^{\updownarrow H^{D,A,\bullet}}\circ v^{\updownarrow H^{\bullet,A,Y}}\circ r^{\updownarrow H^{E,\bullet,Y}}\quad.
\]

\end_inset

We now use the commutativity law of 
\begin_inset Formula $H$
\end_inset

 (assumed by induction) and swap some of the relations so that 
\begin_inset Formula $s$
\end_inset

 is composed next to 
\begin_inset Formula $r$
\end_inset

 at the far left:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & r^{\updownarrow H^{D,\bullet,X}}\circ\gunderline{v^{\updownarrow H^{\bullet,B,X}}\circ s^{\updownarrow H^{E,B,\bullet}}}=\gunderline{r^{\updownarrow H^{D,\bullet,X}}\circ s^{\updownarrow H^{D,B,\bullet}}}\circ v^{\updownarrow H^{\bullet,B,Y}}\\
 & \quad=s^{\updownarrow H^{D,A,\bullet}}\circ r^{\updownarrow H^{D,\bullet,Y}}\circ v^{\updownarrow H^{\bullet,B,Y}}\quad,\\
\text{right-hand side}:\quad & s^{\updownarrow H^{D,A,\bullet}}\circ\gunderline{v^{\updownarrow H^{\bullet,A,Y}}\circ r^{\updownarrow H^{E,\bullet,Y}}}=s^{\updownarrow H^{D,A,\bullet}}\circ r^{\updownarrow H^{D,\bullet,Y}}\circ v^{\updownarrow H^{\bullet,B,Y}}\quad.
\end{align*}

\end_inset

The two sides are now equal.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Plain Layout
We note that the proof of the commutativity law (Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-relation-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) uses the composition law from Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-relation-laws"
plural "false"
caps "false"
noprefix "false"

\end_inset

, while the proof of that statement refers back to the commutativity law.
 However, this is not a circular argument because the proofs refer to each
 other only in the inductive assumptions.
 To avoid the appearance of circularity, one could prove Statements
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-relation-laws"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-relation-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

 together and perform inductive steps at the same time.
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-reversed-relational-lifting"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-reversed-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
For any relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 and any type constructor 
\begin_inset Formula $G^{\bullet}$
\end_inset

, we have:
\begin_inset Formula 
\[
\big(\text{rev}\left(r\right)\big)^{\updownarrow G}=\text{rev}\big(r^{\updownarrow G}\big)\quad.
\]

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
We need to enumerate all cases of Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for the type constructor 
\begin_inset Formula $G^{\bullet}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Constant type
\end_layout

\begin_layout Plain Layout
With 
\begin_inset Formula $G^{A}\triangleq Z$
\end_inset

 where 
\begin_inset Formula $Z$
\end_inset

 is a fixed type, we have:
\begin_inset Formula 
\[
\big(\text{rev}\left(r\right)\big)^{\updownarrow G}=\text{id}^{:Z\leftrightarrow Z}\quad\text{and}\quad\text{rev}\big(r^{\updownarrow G}\big)=\text{rev}\,(\text{id}^{:Z\leftrightarrow Z})=\text{id}^{:Z\leftrightarrow Z}\quad.
\]

\end_inset


\end_layout

\begin_layout Paragraph
Type parameter
\end_layout

\begin_layout Plain Layout
With 
\begin_inset Formula $G^{A}\triangleq A$
\end_inset

, we have:
\begin_inset Formula 
\[
\big(\text{rev}\left(r\right)\big)^{\updownarrow G}=\text{rev}\left(r\right)\quad\text{and}\quad\text{rev}\big(r^{\updownarrow G}\big)=\text{rev}\left(r\right)\quad.
\]

\end_inset


\end_layout

\begin_layout Paragraph
Products
\end_layout

\begin_layout Plain Layout
With 
\begin_inset Formula $G^{A}\triangleq K^{A}\times L^{A}$
\end_inset

 and assuming that Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-reversed-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 holds for 
\begin_inset Formula $K^{\bullet}$
\end_inset

 and 
\begin_inset Formula $L^{\bullet}$
\end_inset

, we write:
\begin_inset Formula 
\begin{align*}
 & \big(\text{rev}\left(r\right)\big)^{\updownarrow G}=\big(\text{rev}\left(r\right)\big)^{\updownarrow K}\boxtimes\big(\text{rev}\left(r\right)\big)^{\updownarrow L}=\text{rev}\,(r^{\updownarrow K})\boxtimes\text{rev}\,(r^{\updownarrow L})\quad,\\
 & \text{rev}\big(r^{\updownarrow G}\big)=\text{rev}\,(r^{\updownarrow K}\boxtimes r^{\updownarrow L})=\text{rev}\,(r^{\updownarrow K})\boxtimes\text{rev}\,(r^{\updownarrow L})\quad.
\end{align*}

\end_inset

In the last line, we used the distributive law from Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pair-product-distributive-law-rev"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a).
\end_layout

\begin_layout Paragraph
Co-products and function types
\end_layout

\begin_layout Plain Layout
The proofs are similar to that for products if we replace 
\begin_inset Formula $\boxtimes$
\end_inset

 by 
\begin_inset Formula $\boxplus$
\end_inset

 or by 
\begin_inset Formula $\ogreaterthan$
\end_inset

 everywhere and use the distributive laws from Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pair-product-distributive-law-rev"
plural "false"
caps "false"
noprefix "false"

\end_inset

(b) or (c) as appropriate.
\end_layout

\begin_layout Paragraph
Recursive types
\end_layout

\begin_layout Plain Layout
With 
\begin_inset Formula $G^{A}\triangleq S^{A,G^{A}}$
\end_inset

, we assume that Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-reversed-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 holds for 
\begin_inset Formula $S$
\end_inset

 with respect to each of its type parameters separately.
 Then we write: 
\begin_inset Formula 
\begin{align*}
 & \big(\text{rev}\left(r\right)\big)^{\updownarrow G}=\gunderline{\big(\text{rev}\left(r\right)\big)^{\updownarrow S^{\bullet,G^{B}}}}\circ\gunderline{\big(\overline{\big(\text{rev}\left(r\right)\big)^{\updownarrow G}}\big)^{\updownarrow S^{A,\bullet}}}\\
\text{inductive assumptions}:\quad & =\text{rev}\big(r^{\updownarrow S^{\bullet,G^{B}}}\big)\circ\text{rev}\big((\overline{r^{\updownarrow G}})^{\updownarrow S^{A,\bullet}}\big)\\
\text{use Statement~\ref{subsec:Statement-reverse-relation-properties}(c)}:\quad & =\text{rev}\big(r^{\updownarrow S^{\bullet,G^{B}}}\circ(\overline{r^{\updownarrow G}})^{\updownarrow S^{A,\bullet}}\big)=\text{rev}\big(r^{\updownarrow G}\big)\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Paragraph
Quantified types
\end_layout

\begin_layout Plain Layout
With 
\begin_inset Formula $G^{A}\triangleq\forall X.\,H^{X,A}$
\end_inset

, we assume that Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-reversed-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 holds for 
\begin_inset Formula $H$
\end_inset

 with respect to each of its type parameters separately.
 For any types 
\begin_inset Formula $X$
\end_inset

, 
\begin_inset Formula $Y$
\end_inset

, values 
\begin_inset Formula $p^{:G^{A}}$
\end_inset

, 
\begin_inset Formula $q^{:G^{B}}$
\end_inset

, and any relations 
\begin_inset Formula $s^{:X\leftrightarrow Y}$
\end_inset

 and 
\begin_inset Formula $t^{:Y\leftrightarrow X}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & (q,p)\in\big(\text{rev}\left(r\right)\big)^{\updownarrow G}\text{ means }(q^{Y},p^{X})\in t^{\updownarrow H^{\bullet,B}}\circ(\text{rev}\left(r\right))^{\updownarrow H^{X,\bullet}}\\
\text{inductive assumption}:\quad & =t^{\updownarrow H^{\bullet,B}}\circ\text{rev}\big(r^{\updownarrow H^{X,\bullet}}\big)\quad,\\
 & (q,p)\in\text{rev}\big(r^{\updownarrow G}\big)\text{ means }(q^{Y},p^{X})\in\text{rev}\big(s^{\updownarrow H^{\bullet,A}}\circ r^{\updownarrow H^{Y,\bullet}}\big)\\
\text{use Statement~\ref{subsec:Statement-lifting-relation-commutativity-law}}:\quad & =\text{rev}\big(r^{\updownarrow H^{X,\bullet}}\circ s^{\updownarrow H^{\bullet,B}}\big)\\
\text{use Statement~\ref{subsec:Statement-reverse-relation-properties}(c)}:\quad & =\text{rev}\big(s^{\updownarrow H^{\bullet,B}}\big)\circ\text{rev}\big(r^{\updownarrow H^{X,\bullet}}\big)\quad.
\end{align*}

\end_inset

The two relations become equal if we set 
\begin_inset Formula $t\triangleq\text{rev}\left(s\right)$
\end_inset

, which is allowed since 
\begin_inset Formula $t$
\end_inset

 and 
\begin_inset Formula $s$
\end_inset

 are arbitrary.
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-lifting-relation-laws"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-relation-laws"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
For any fully parametric type constructor 
\begin_inset Formula $G^{\bullet}$
\end_inset

, the relational lifting obeys:
\begin_inset Index idx
status open

\begin_layout Plain Layout
identity laws!of relational lifting
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
composition law!of relational lifting
\end_layout

\end_inset


\begin_inset Formula 
\begin{align*}
\text{the identity law}:\quad & (\text{id}^{:A\leftrightarrow A})^{\updownarrow G}=\text{id}^{:G^{A}\leftrightarrow G^{A}}\quad,\\
\text{the composition law}:\quad & \text{for any }r^{:A\leftrightarrow B}\text{ and }s^{:B\leftrightarrow C}\quad:\quad r^{\updownarrow G}\circ s^{\updownarrow G}=(r\circ s)^{\updownarrow G}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
We use induction in the structure of the type constructor 
\begin_inset Formula $G$
\end_inset

.
 The proof goes over each of the six fully parametric type constructions.
\end_layout

\begin_layout Paragraph
Constant type
\end_layout

\begin_layout Plain Layout
Here 
\begin_inset Formula $G^{A}\triangleq Z$
\end_inset

 with a fixed type 
\begin_inset Formula $Z$
\end_inset

.
 The lifting of any relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 to 
\begin_inset Formula $G$
\end_inset

 always produces an identity relation 
\begin_inset Formula $\text{id}^{:Z\leftrightarrow Z}$
\end_inset

 regardless of the types 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 The property 
\begin_inset Formula $\text{id}\circ\text{id}=\text{id}$
\end_inset

 was proved in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-identity-distributive-laws"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Paragraph
Type parameter
\end_layout

\begin_layout Plain Layout
Here 
\begin_inset Formula $G^{A}\triangleq A$
\end_inset

.
 So, for any relation 
\begin_inset Formula $r$
\end_inset

 we have 
\begin_inset Formula $r^{\updownarrow G}=r$
\end_inset

.
 Then the identity and composition laws are automatically satisfied.
\end_layout

\begin_layout Paragraph
Products
\end_layout

\begin_layout Plain Layout
Here we have 
\begin_inset Formula $G^{A}\triangleq K^{A}\times L^{A}$
\end_inset

.
 By the inductive assumptions, the identity and composition laws already
 hold for 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

.
 The lifting of a relation 
\begin_inset Formula $r$
\end_inset

 to 
\begin_inset Formula $G$
\end_inset

 is defined by 
\begin_inset Formula $r^{\updownarrow G}\triangleq r^{\updownarrow K}\boxtimes r^{\updownarrow L}$
\end_inset

.
 
\end_layout

\begin_layout Plain Layout
To verify the identity law, use the inductive assumptions, 
\begin_inset Formula $\text{id}^{\updownarrow K}=\text{id}$
\end_inset

 and 
\begin_inset Formula $\text{id}^{\updownarrow L}=\text{id}$
\end_inset

, as well as Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-identity-distributive-laws"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\begin_inset Formula 
\[
\text{id}^{\updownarrow G}=\text{id}^{\updownarrow K}\boxtimes\text{id}^{\updownarrow L}=\text{id}\boxtimes\text{id =}\text{\text{id}}\quad.
\]

\end_inset


\end_layout

\begin_layout Plain Layout
To verify the composition law, write its two sides separately and use Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-composition-distributive-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a):
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & r^{\updownarrow G}\circ s^{\updownarrow G}=(r^{\updownarrow K}\boxtimes r^{\updownarrow L})\circ(s^{\updownarrow K}\boxtimes s^{\updownarrow L})=(r^{\updownarrow K}\circ s^{\updownarrow K})\boxtimes(r^{\updownarrow L}\circ s^{\updownarrow L})\quad,\\
\text{right-hand side}:\quad & (r\circ s)^{\updownarrow G}=(r\circ s)^{\updownarrow K}\boxtimes(r\circ s)^{\updownarrow L}\quad.
\end{align*}

\end_inset

The remaining differences vanish due to the inductive assumptions:
\begin_inset Formula 
\[
r^{\updownarrow K}\circ s^{\updownarrow K}=(r\circ s)^{\updownarrow K}\quad,\quad\quad r^{\updownarrow K}\circ s^{\updownarrow L}=(r\circ s)^{\updownarrow L}\quad.
\]

\end_inset


\end_layout

\begin_layout Paragraph
Co-products
\end_layout

\begin_layout Plain Layout
Here we have 
\begin_inset Formula $G^{A}\triangleq K^{A}+L^{A}$
\end_inset

.
 The proof is similar to that for product types except we replace the operation
 
\begin_inset Formula $\boxtimes$
\end_inset

 by 
\begin_inset Formula $\boxplus$
\end_inset

 and use Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-composition-distributive-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

(b).
\end_layout

\begin_layout Paragraph
Function type
\end_layout

\begin_layout Plain Layout
Here, we have 
\begin_inset Formula $G^{A}\triangleq K^{A}\rightarrow L^{A}$
\end_inset

.
 By the inductive assumptions, the identity and composition laws already
 hold for 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

.
\end_layout

\begin_layout Plain Layout
To verify the identity law, we need to show that 
\begin_inset Formula $\text{id}^{\updownarrow G}=\text{id}$
\end_inset

.
 Write the definition of 
\begin_inset Formula $\text{id}^{\updownarrow G}$
\end_inset

:
\begin_inset Formula 
\[
(g_{1}^{:K^{A}\rightarrow L^{A}},g_{2}^{:K^{A}\rightarrow L^{A}})\in\text{id}^{\updownarrow G}\text{ means: if }(k_{1},k_{2})\in\text{id}^{\updownarrow K}\text{ then }(g_{1}(k_{1}),g_{2}(k_{2}))\in\text{id}^{\updownarrow L}\quad.
\]

\end_inset

By the inductive assumptions, 
\begin_inset Formula $\text{id}^{\updownarrow K}=\text{id}$
\end_inset

 and 
\begin_inset Formula $\text{id}^{\updownarrow L}=\text{id}$
\end_inset

, so the condition above becomes:
\begin_inset Formula 
\[
(g_{1}^{:K^{A}\rightarrow L^{A}},g_{2}^{:K^{A}\rightarrow L^{A}})\in\text{id}^{\updownarrow G}\text{ means if }k_{1}=k_{2}\text{ then }g_{1}(k_{1})=g_{2}(k_{2})\quad.
\]

\end_inset

The last condition is the definition of the equality 
\begin_inset Formula $g_{1}=g_{2}$
\end_inset

 (equal functions give equal results when applied to equal arguments).
 So, 
\begin_inset Formula $(g_{1},g_{2})\in\text{id}^{\updownarrow G}$
\end_inset

 holds when 
\begin_inset Formula $g_{1}=g_{2}$
\end_inset

, which is the same as 
\begin_inset Formula $(g_{1},g_{2})\in\text{id}$
\end_inset

.
\end_layout

\begin_layout Plain Layout
To verify the composition law, write the definitions of 
\begin_inset Formula $r^{\updownarrow G}\circ s^{\updownarrow G}$
\end_inset

 and 
\begin_inset Formula $(r\circ s)^{\updownarrow G}$
\end_inset

 for arbitrary values 
\begin_inset Formula $g_{1}^{:K^{A}\rightarrow L^{A}}$
\end_inset

 and 
\begin_inset Formula $g_{3}^{:K^{C}\rightarrow L^{C}}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & (g_{1},g_{3})\in r^{\updownarrow G}\circ s^{\updownarrow G}\text{ means }\exists g_{2}^{:K^{B}\rightarrow L^{B}}\text{ such that }(g_{1},g_{2})\in r^{\updownarrow G}\text{ and }(g_{2},g_{3})\in s^{\updownarrow G}\quad,\\
 & (g_{1},g_{3})\in(r\circ s)^{\updownarrow G}\text{ means }\forall(k_{1}^{:K^{A}},k_{3}^{:K^{C}})\,\text{ if }(k_{1},k_{3})\in(r\circ s)^{\updownarrow K}\text{ then }(g_{1}(k_{1}),g_{3}(k_{3}))\in(r\circ s)^{\updownarrow L}\quad.
\end{align*}

\end_inset

Using the definitions of 
\begin_inset Formula $r^{\updownarrow G}$
\end_inset

 and 
\begin_inset Formula $s^{\updownarrow G}$
\end_inset

, and the inductive assumptions for 
\begin_inset Formula $(r\circ s)^{\updownarrow K}$
\end_inset

 and 
\begin_inset Formula $(r\circ s)^{\updownarrow L}$
\end_inset

, we get:
\begin_inset Formula 
\begin{align*}
 & (g_{1},g_{2})\in r^{\updownarrow G}\text{ means }\forall(k_{1}^{:K^{A}},k_{2}^{:K^{B}}).\,\text{ if }(k_{1},k_{2})\in r^{\updownarrow K}\text{ then }(g_{1}(k_{1}),g_{2}(k_{2}))\in r^{\updownarrow L}\quad,\\
 & (g_{2},g_{3})\in s^{\updownarrow G}\text{ means }\forall(k_{2}^{:K^{B}},k_{3}^{:K^{C}}).\,\text{ if }(k_{2},k_{3})\in s^{\updownarrow K}\text{ then }(g_{2}(k_{2}),g_{3}(k_{3}))\in s^{\updownarrow L}\quad,\\
 & (k_{1},k_{3})\in(r\circ s)^{\updownarrow K}=r^{\updownarrow K}\circ s^{\updownarrow K}\text{ means }\exists k_{2}^{:K^{B}}\text{ such that }(k_{1},k_{2})\in r^{\updownarrow K}\text{ and }(k_{2},k_{3})\in s^{\updownarrow K}\quad,\\
 & (g_{1}(k_{1}),g_{3}(k_{3}))\in(r\circ s)^{\updownarrow L}=r^{\updownarrow L}\circ s^{\updownarrow L}\text{ means }\exists l_{2}^{:L^{B}}\text{ such that }(g_{1}(k_{1}),l_{2})\in r^{\updownarrow L}\text{ and }(l_{2},g_{3}(k_{3}))\in s^{\updownarrow L}\quad.
\end{align*}

\end_inset

Using these definitions, we write the left-hand side of the composition
 law as:
\begin_inset Formula 
\begin{align*}
 & (g_{1},g_{3})\in r^{\updownarrow G}\circ s^{\updownarrow G}\text{ means }\exists g_{2}\text{ such that }\forall(k_{1},k_{2},k_{3}).\,\text{ if }(k_{1},k_{2})\in r^{\updownarrow K}\text{ and }(k_{2},k_{3})\in s^{\updownarrow K}\\
 & \quad\quad\text{ then }(g_{1}(k_{1}),g_{2}(k_{2}))\in r^{\updownarrow L}\text{ and }(g_{2}(k_{2}),g_{3}(k_{3}))\in s^{\updownarrow L}\quad.
\end{align*}

\end_inset

The right-hand side of the composition law can be written as:
\begin_inset Formula 
\begin{align*}
 & (g_{1},g_{3})\in(r\circ s)^{\updownarrow G}\text{ means }\forall k_{1},k_{2},k_{3}.\,\text{ if }(k_{1},k_{2})\in r^{\updownarrow K}\text{ and }(k_{2},k_{3})\in s^{\updownarrow K}\\
 & \quad\quad\text{ then }\exists l_{2}\text{ such that }(g_{1}(k_{1}),l_{2})\in r^{\updownarrow L}\text{ and }(l_{2},g_{3}(k_{3}))\in s^{\updownarrow L}\quad.
\end{align*}

\end_inset

The two sides become equivalent if we define 
\begin_inset Formula $g_{2}$
\end_inset

 in the left-hand side and 
\begin_inset Formula $l_{2}$
\end_inset

 in the right-hand side to satisfy 
\begin_inset Formula $l_{2}=g_{2}(k_{2})$
\end_inset

.
 *** Is this correct? We again seem to exchange quantifiers without justificatio
n.
\end_layout

\begin_layout Paragraph
Recursive types
\end_layout

\begin_layout Plain Layout
Here 
\begin_inset Formula $G$
\end_inset

 is defined recursively by 
\begin_inset Formula $G^{A}\triangleq S^{A,G^{A}}$
\end_inset

.
 The inductive assumptions say that the identity and composition laws already
 hold for liftings to 
\begin_inset Formula $S^{A,R}$
\end_inset

 (with respect to both 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $R$
\end_inset

).
\end_layout

\begin_layout Plain Layout
To verify the identity law of 
\begin_inset Formula $G$
\end_inset

, write:
\begin_inset Formula 
\begin{align*}
 & \text{id}^{\updownarrow G}=\gunderline{\text{id}^{\updownarrow S^{\bullet,G^{A}}}}\circ\big(\overline{\gunderline{\text{id}^{\updownarrow G}}}\big)^{\updownarrow S^{B,\bullet}}\\
\text{inductive assumptions}:\quad & =\text{id}\circ\gunderline{\text{id}^{\updownarrow S^{B,\bullet}}}=\text{id}\circ\text{id}\\
\text{identity law of Statement~\ref{subsec:Statement-relational-identity-distributive-laws}}:\quad & =\text{id}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Plain Layout
To verify the composition law of 
\begin_inset Formula $G$
\end_inset

, write its two sides and use the inductive assumptions:
\begin_inset Formula 
\begin{align*}
 & r^{\updownarrow G}\circ s^{\updownarrow G}=r^{\updownarrow S^{\bullet,G^{A}}}\circ\big(\overline{r^{\updownarrow G}}\big)^{\updownarrow S^{B,\bullet}}\circ s^{\updownarrow S^{\bullet,G^{B}}}\circ\big(\overline{s^{\updownarrow G}}\big)^{\updownarrow S^{C,\bullet}}\quad,\\
 & (r\circ s)^{\updownarrow G}=\gunderline{(r\circ s)^{\updownarrow S^{\bullet,G^{A}}}}\circ\big(\overline{\gunderline{(r\circ s)^{\updownarrow G}}}\big)^{\updownarrow S^{C,\bullet}}\\
 & \quad=r^{\updownarrow S^{\bullet,G^{A}}}\circ s^{\updownarrow S^{\bullet,G^{A}}}\circ\gunderline{\big(\overline{r^{\updownarrow G}}\circ\overline{s^{\updownarrow G}}\big)^{\updownarrow S^{C,\bullet}}}=r^{\updownarrow S^{\bullet,G^{A}}}\circ s^{\updownarrow S^{\bullet,G^{A}}}\circ\big(\overline{r^{\updownarrow G}}\big)^{\updownarrow S^{C,\bullet}}\circ\big(\overline{s^{\updownarrow G}}\big)^{\updownarrow S^{C,\bullet}}\quad.
\end{align*}

\end_inset

The remaining difference between the two sides of the law is:
\begin_inset Formula 
\[
\big(\overline{r^{\updownarrow G}}\big)^{\updownarrow S^{B,\bullet}}\circ s^{\updownarrow S^{\bullet,G^{B}}}\overset{?}{=}s^{\updownarrow S^{\bullet,G^{A}}}\circ\big(\overline{r^{\updownarrow G}}\big)^{\updownarrow S^{C,\bullet}}\quad.
\]

\end_inset

This equation holds due to the commutativity law (Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-relation-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Paragraph
Quantified types
\end_layout

\begin_layout Plain Layout
Here 
\begin_inset Formula $G^{A}\triangleq\forall X.\,H^{X,A}$
\end_inset

.
 The inductive assumptions say that the identity and composition laws already
 hold for liftings to 
\begin_inset Formula $H^{\bullet,\bullet}$
\end_inset

.
 We will use Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-lifting-quantified-types-short"
plural "false"
caps "false"
noprefix "false"

\end_inset

) to express relational liftings to 
\begin_inset Formula $G$
\end_inset

.
 To verify the identity law for 
\begin_inset Formula $G$
\end_inset

:
\begin_inset Formula 
\[
\big(\text{id}^{\updownarrow G}\big)^{X,Y}=\forall s^{:X\leftrightarrow Y}.\,s^{\updownarrow H^{\bullet,A}}\circ\text{id}^{\updownarrow H^{Y,\bullet}}=\forall s^{:X\leftrightarrow Y}.\,s^{\updownarrow H^{\bullet,A}}\circ\text{id}=\forall s^{:X\leftrightarrow Y}.\,s^{\updownarrow H^{\bullet,A}}\quad.
\]

\end_inset

The last relation is equivalent to the identity relation 
\begin_inset Formula $\text{id}^{:G^{A}\leftrightarrow G^{A}}$
\end_inset

 by Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-parametricity-gives-identity-relation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Plain Layout
To verify the composition law for 
\begin_inset Formula $G$
\end_inset

, we again use Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-lifting-quantified-types-short"
plural "false"
caps "false"
noprefix "false"

\end_inset

) with suitable types:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & \big(r^{\updownarrow G}\circ s^{\updownarrow G}\big)^{X,Z}=\forall Y.\,\forall u^{:X\leftrightarrow Y}.\,\forall v^{:Y\leftrightarrow Z}.\,u^{\updownarrow H^{\bullet,A}}\circ\gunderline{r^{\updownarrow H^{Y,\bullet}}\circ v^{\updownarrow H^{\bullet,B}}}\circ s^{\updownarrow H^{Z,\bullet}}\\
\text{commutativity law}:\quad & \quad=\forall Y.\,\forall u^{:X\leftrightarrow Y}.\,\forall v^{:Y\leftrightarrow Z}.\,u^{\updownarrow H^{\bullet,A}}\circ v^{\updownarrow H^{\bullet,A}}\circ r^{\updownarrow H^{Z,\bullet}}\circ s^{\updownarrow H^{Z,\bullet}}\quad,\\
\text{right-hand side}:\quad & \big((r\circ s)^{\updownarrow G}\big)^{X,Z}=\forall w^{:X\leftrightarrow Z}.\,w^{\updownarrow H^{\bullet,A}}\circ\gunderline{(r\circ s)^{\uparrow H^{Z,\bullet}}}\\
\text{composition law}:\quad & \quad=\forall w^{:X\leftrightarrow Z}.\,w^{\updownarrow H^{\bullet,A}}\circ r^{\updownarrow H^{Z,\bullet}}\circ s^{\updownarrow H^{Z,\bullet}}\quad.
\end{align*}

\end_inset

The remaining difference between the sides may be written as:
\begin_inset Formula 
\[
\forall(X,Y,Z).\,\forall u^{:X\leftrightarrow Y}.\,\forall v^{:Y\leftrightarrow Z}.\,(u\circ v)^{\updownarrow H^{\bullet,A}}\circ t\overset{?}{=}\forall(X,Z).\,\forall w^{:X\leftrightarrow Z}.\,w^{\updownarrow H^{\bullet,A}}\circ t\quad,
\]

\end_inset

where 
\begin_inset Formula $t\triangleq r^{\updownarrow H^{Z,\bullet}}\circ s^{\updownarrow H^{Z,\bullet}}$
\end_inset

 is a relation of type 
\begin_inset Formula $H^{Z,A}\leftrightarrow H^{Z,C}$
\end_inset

.
 Note that 
\begin_inset Formula $t$
\end_inset

 does not depend 
\begin_inset Formula $u$
\end_inset

, 
\begin_inset Formula $v$
\end_inset

, or 
\begin_inset Formula $w$
\end_inset

, or on the types 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $Y$
\end_inset

, while the right-hand side above does not depend on the type 
\begin_inset Formula $Y$
\end_inset

.
 So, we will prove the equation above if we show that:
\begin_inset Formula 
\[
\forall Y.\ \forall u^{:X\leftrightarrow Y}.\,\forall v^{:Y\leftrightarrow Z}.\,u\circ v\overset{?}{=}\forall w^{:X\leftrightarrow Z}.\,w\quad,\quad\quad\text{or more concisely}:\quad\forall(Y,u,v).\,u\circ v\overset{?}{=}\forall w.\,w\quad.
\]

\end_inset

To prove that these relations are the same, we show isomorphism in both
 directions.
 If for some pair of values the relation 
\begin_inset Formula $\forall w.\,w$
\end_inset

 holds and we are given some 
\begin_inset Formula $Y$
\end_inset

, 
\begin_inset Formula $u$
\end_inset

, and 
\begin_inset Formula $v$
\end_inset

, the relation 
\begin_inset Formula $u\circ v$
\end_inset

 will hold because we may define 
\begin_inset Formula $w\triangleq u\circ v$
\end_inset

.
 If the relation 
\begin_inset Formula $\forall(Y,u,v).\,u\circ v$
\end_inset

 holds and we are given some 
\begin_inset Formula $w$
\end_inset

, the relation 
\begin_inset Formula $w$
\end_inset

 will hold because we may define 
\begin_inset Formula $Y=X$
\end_inset

, 
\begin_inset Formula $u=\text{id}$
\end_inset

, and 
\begin_inset Formula $v=w$
\end_inset

.
 
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-lifting-function-relation-covariant"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-function-relation-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
Lifting a function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 to a fully parametric functor or a contrafunctor 
\begin_inset Formula $G$
\end_inset

 corresponds to lifting the relation 
\begin_inset Formula $\left<f\right>$
\end_inset

 to 
\begin_inset Formula $G$
\end_inset

.
 In detail: 
\series bold
(a)
\series default
 
\begin_inset Formula $\left<f\right>^{\updownarrow G}=\langle f^{\uparrow G}\rangle$
\end_inset

 if 
\begin_inset Formula $G$
\end_inset

 is a functor.
 
\series bold
(b)
\series default
 
\begin_inset Formula $\left<f\right>^{\updownarrow G}=\text{rev}\langle f^{\downarrow G}\rangle$
\end_inset

 if 
\begin_inset Formula $G$
\end_inset

 is a contrafunctor.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 We proceed by induction on the structure of the functor 
\begin_inset Formula $G$
\end_inset

.
 In each case, we use the corresponding part of Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 to obtain 
\begin_inset Formula $\left<f\right>^{\updownarrow G}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Constant type
\end_layout

\begin_layout Plain Layout
For 
\begin_inset Formula $G^{A}\triangleq Z$
\end_inset

 where 
\begin_inset Formula $Z$
\end_inset

 is a fixed type, we have 
\begin_inset Formula $f^{\uparrow G}=\text{id}$
\end_inset

 and 
\begin_inset Formula $\left<f\right>^{\updownarrow G}=\text{id}^{:Z\leftrightarrow Z}$
\end_inset

.
 So, 
\begin_inset Formula $(x,y)\in\left<f\right>^{\updownarrow G}$
\end_inset

 when 
\begin_inset Formula $x=y$
\end_inset

, which is the same as 
\begin_inset Formula $x\triangleright f^{\uparrow G}=y$
\end_inset

.
\end_layout

\begin_layout Paragraph
Type parameter
\end_layout

\begin_layout Plain Layout
For 
\begin_inset Formula $G^{A}\triangleq A$
\end_inset

, we have 
\begin_inset Formula $f^{\uparrow G}=f$
\end_inset

 and 
\begin_inset Formula $\left<f\right>^{\updownarrow G}=\left<f\right>$
\end_inset

.
 So, the condition 
\begin_inset Formula $(x,y)\in\left<f\right>$
\end_inset

 is the same as 
\begin_inset Formula $x\triangleright f=y$
\end_inset

 and the same as 
\begin_inset Formula $x\triangleright f^{\uparrow G}=y$
\end_inset

.
\end_layout

\begin_layout Paragraph
Products
\end_layout

\begin_layout Plain Layout
Here we have 
\begin_inset Formula $G^{A}\triangleq K^{A}\times L^{A}$
\end_inset

 where 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

 are some functors.
 Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c) gives:
\begin_inset Formula 
\[
\left<f\right>^{\updownarrow G}=\left<f\right>^{\updownarrow K}\boxtimes\left<f\right>^{\updownarrow L}\quad.
\]

\end_inset

By the inductive assumption, 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

 already satisfy Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-function-relation-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a), so:
\begin_inset Formula 
\begin{equation}
\left<f\right>^{\updownarrow K}=\langle f^{\uparrow K}\rangle\quad\text{ and }\quad\left<f\right>^{\updownarrow L}=\langle f^{\uparrow L}\rangle\quad.\label{eq:inductive-assumption-k-l-function-lifting}
\end{equation}

\end_inset

We can now complete the derivation:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\langle f^{\uparrow G}\rangle:\quad & \left<f\right>^{\updownarrow G}=\left<f\right>^{\updownarrow K}\boxtimes\left<f\right>^{\updownarrow L}=\langle f^{\uparrow K}\rangle\boxtimes\langle f^{\uparrow L}\rangle\\
\text{distributive law in Statement~\ref{subsec:Statement-pair-product-distributive-law}(a)}:\quad & =\langle f^{\uparrow K}\boxtimes f^{\uparrow L}\rangle\\
\text{lifting formula from Eq.~(\ref{eq:def-of-functor-product-fmap})}:\quad & =\langle f^{\uparrow(K\times L)}\rangle=\langle f^{\uparrow G}\rangle\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Paragraph
Co-products
\end_layout

\begin_layout Plain Layout
Here we have 
\begin_inset Formula $G^{A}\triangleq K^{A}+L^{A}$
\end_inset

 where 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

 are some functors.
 We compute:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\langle f^{\uparrow G}\rangle:\quad & \left<f\right>^{\updownarrow G}=\left<f\right>^{\updownarrow K}\boxplus\left<f\right>^{\updownarrow L}\\
\text{inductive assumption in Eq.~(\ref{eq:inductive-assumption-k-l-function-lifting})}:\quad & =\langle f^{\uparrow K}\rangle\boxplus\langle f^{\uparrow L}\rangle\\
\text{distributive law in Statement~\ref{subsec:Statement-pair-product-distributive-law}(b)}:\quad & =\langle f^{\uparrow K}\boxplus f^{\uparrow L}\rangle=\bigg<\,\begin{array}{|c||cc|}
 & K^{B} & L^{B}\\
\hline K^{A} & f^{\uparrow K} & \bbnum 0\\
L^{A} & \bbnum 0 & f^{\uparrow L}
\end{array}\,\bigg>\\
\text{definition of lifting in Eq.~(\ref{eq:f-coproduct-functor-def-fmap})}:\quad & =\langle f^{\uparrow(K+L)}\rangle=\langle f^{\uparrow G}\rangle\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Paragraph
Function types
\end_layout

\begin_layout Plain Layout
Here we have 
\begin_inset Formula $G^{A}\triangleq K^{A}\rightarrow L^{A}$
\end_inset

 where 
\begin_inset Formula $K$
\end_inset

 is a contrafunctor and 
\begin_inset Formula $L$
\end_inset

 is a functor.
 By the inductive assumption, 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

 already satisfy Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-function-relation-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

, which means:
\begin_inset Formula 
\[
\left<f\right>^{\updownarrow K}=\text{rev}\langle f^{\downarrow K}\rangle\quad,\quad\left<f\right>^{\updownarrow L}=\langle f^{\uparrow L}\rangle\quad\quad.
\]

\end_inset

 Use Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(e) and rewrite the relation 
\begin_inset Formula $\left<f\right>^{\updownarrow G}$
\end_inset

 as:
\begin_inset Formula 
\begin{align*}
 & \left<f\right>^{\updownarrow G}=\left<f\right>^{\updownarrow K}\ogreaterthan\left<f\right>^{\updownarrow L}=\big(\text{rev}\langle f^{\downarrow K}\rangle\big)\ogreaterthan\langle f^{\uparrow L}\rangle\\
\text{Example~\ref{subsec:Example-pair-mapper-of-functions}(b)}:\quad & =\langle p^{:K^{A}\rightarrow L^{A}}\rightarrow f^{\downarrow K}\bef p\bef f^{\uparrow L}\rangle=\langle f^{\uparrow G}\rangle\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Paragraph
Recursive types
\end_layout

\begin_layout Plain Layout
For 
\begin_inset Formula $G^{A}\triangleq S^{A,G^{A}}$
\end_inset

 where 
\begin_inset Formula $S^{A,R}$
\end_inset

 is covariant in 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $R$
\end_inset

, the relation 
\begin_inset Formula $\left<f\right>^{\updownarrow G}$
\end_inset

 is defined by:
\begin_inset Formula 
\[
\left<f\right>^{\updownarrow G}=\left<f\right>^{\updownarrow S^{\bullet,G^{A}}}\circ\big(\overline{\left<f\right>^{\updownarrow G}}\big)^{\updownarrow S^{B,\bullet}}\quad.
\]

\end_inset

We need to prove that 
\begin_inset Formula $\left<f\right>^{\updownarrow G}\overset{?}{=}\langle f^{\uparrow G}\rangle$
\end_inset

.
 There are two inductive assumptions: that Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-function-relation-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

 already holds for the recursive call 
\begin_inset Formula $\overline{\left<f\right>^{\updownarrow G}}$
\end_inset

:
\begin_inset Formula 
\[
(p^{:G^{A}},q^{:G^{B}})\in\overline{\left<f\right>^{\updownarrow G}}\text{ means }p\triangleright f^{\uparrow G}=q\quad,\quad\text{ or equivalently}:\quad\overline{\left<f\right>^{\updownarrow G}}=\langle f^{\uparrow G}\rangle\quad,
\]

\end_inset

and that Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-function-relation-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

 already holds for 
\begin_inset Formula $S$
\end_inset

.
 Then the liftings 
\begin_inset Formula $\left<f\right>^{\updownarrow S^{\bullet,G^{A}}}$
\end_inset

 and 
\begin_inset Formula $\left<f^{\uparrow G}\right>^{\updownarrow S^{B,\bullet}}$
\end_inset

 satisfy:
\begin_inset Formula 
\[
\left<f\right>^{\updownarrow S^{\bullet,G^{A}}}=\langle f^{\uparrow S^{\bullet,G^{A}}}\rangle\quad,\quad\quad\langle f^{\uparrow G}\rangle^{\updownarrow S^{B,\bullet}}=\langle f^{\uparrow G\uparrow S^{B,\bullet}}\rangle\quad.
\]

\end_inset

To prove that 
\begin_inset Formula $\left<f\right>^{\updownarrow G}\overset{?}{=}\langle f^{\uparrow G}\rangle$
\end_inset

, write out the lifting 
\begin_inset Formula $f^{\uparrow G}$
\end_inset

 for a function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

,
\begin_inset Formula 
\[
f^{\uparrow G}=f^{\uparrow S^{\bullet,G^{A}}}\bef\big(\overline{f^{\uparrow G}}\big)^{\uparrow S^{B,\bullet}}\quad,
\]

\end_inset

and simplify 
\begin_inset Formula $\langle f^{\uparrow G}\rangle$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \left<f\right>^{\updownarrow G}\overset{?}{=}\langle f^{\uparrow G}\rangle=\big\langle f^{\uparrow S^{\bullet,G^{A}}}\bef\big(\overline{f^{\uparrow G}}\big)^{\uparrow S^{B,\bullet}}\big\rangle\\
\text{use Statement~\ref{subsec:Statement-function-composition-relation}}:\quad & =\big\langle f^{\uparrow S^{\bullet,G^{A}}}\big\rangle\circ\big\langle\big(\overline{f^{\uparrow G}}\big)^{\uparrow S^{B,\bullet}}\big\rangle\\
\text{use the inductive assumptions}:\quad & =\left<f\right>^{\updownarrow S^{\bullet,G^{A}}}\circ\langle\overline{f^{\uparrow G}}\rangle^{\updownarrow S^{B,\bullet}}=\left<f\right>^{\updownarrow S^{\bullet,G^{A}}}\circ\big(\overline{\left<f\right>^{\updownarrow G}}\big)^{\updownarrow S^{B,\bullet}}\quad.
\end{align*}

\end_inset

The last expression is equal to the definition of 
\begin_inset Formula $\left<f\right>^{\updownarrow G}$
\end_inset

, which is what we needed to show.
\end_layout

\begin_layout Paragraph
Quantified types
\end_layout

\begin_layout Plain Layout
For 
\begin_inset Formula $G^{A}\triangleq\forall X.\,H^{X,A}$
\end_inset

 where 
\begin_inset Formula $H^{X,A}$
\end_inset

 is covariant in 
\begin_inset Formula $A$
\end_inset

, Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 says that for any types 
\begin_inset Formula $X$
\end_inset

, 
\begin_inset Formula $Y$
\end_inset

, and relation 
\begin_inset Formula $s^{:X\leftrightarrow Y}$
\end_inset

:
\begin_inset Formula 
\[
(p^{:G^{A}},q^{:G^{B}})\in\left<f\right>^{\updownarrow G}\text{ means }(p^{X},q^{Y})\in s^{\updownarrow H^{\bullet,A}}\circ\left<f\right>^{\updownarrow H^{Y,\bullet}}\quad.
\]

\end_inset

We may swap the order of the composition due to the commutativity law (Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-relation-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\begin_inset Formula 
\[
(p^{:G^{A}},q^{:G^{B}})\in\left<f\right>^{\updownarrow G}\text{ means }(p^{X},q^{Y})\in\left<f\right>^{\updownarrow H^{X,\bullet}}\circ s^{\updownarrow H^{\bullet,B}}\quad.
\]

\end_inset

By the inductive assumption, 
\begin_inset Formula $H^{Y,\bullet}$
\end_inset

 already has the property we are proving for 
\begin_inset Formula $G^{\bullet}$
\end_inset

:
\begin_inset Formula 
\[
\left<f\right>^{\updownarrow H^{X,\bullet}}=\langle f^{\uparrow H^{X,\bullet}}\rangle\quad.
\]

\end_inset

So, we may rewrite the relation 
\begin_inset Formula $\left<f\right>^{\updownarrow G}$
\end_inset

 as: 
\begin_inset Formula 
\begin{align*}
 & (p^{:G^{A}},q^{:G^{B}})\in\left<f\right>^{\updownarrow G}\text{ means }(p^{X},q^{Y})\in\langle f^{\uparrow H^{X,\bullet}}\rangle\circ s^{\updownarrow H^{\bullet,B}}\quad.\\
\text{or alternatively}:\quad & (p,q)\in\left<f\right>^{\updownarrow G}\text{ means }\exists z^{:H^{X,B}}.\,(p^{X},z)\in\langle f^{\uparrow H^{X,\bullet}}\rangle\text{ and }(z,q^{Y})\in s^{\updownarrow H^{\bullet,B}}\quad.
\end{align*}

\end_inset

Since the relation 
\begin_inset Formula $\langle f^{\uparrow H^{X,\bullet}}\rangle$
\end_inset

 is a function, we may compute 
\begin_inset Formula $z$
\end_inset

 by applying that function:
\begin_inset Formula 
\begin{equation}
(p,q)\in\left<f\right>^{\updownarrow G}\text{ means that for all }X,Y,s^{:X\leftrightarrow Y}:\quad(p^{X}\triangleright f^{\uparrow H^{X,\bullet}},q^{Y})\in s^{\updownarrow H^{\bullet,B}}\quad.\label{eq:relational-universal-lifting-derivation1}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout
By Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-parametricity-gives-identity-relation"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the relation
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-universal-lifting-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is equivalent to an identity relation between 
\begin_inset Formula $p^{X}\triangleright f^{\uparrow H^{X,\bullet}}$
\end_inset

 and 
\begin_inset Formula $q^{Y}$
\end_inset

:
\begin_inset Formula 
\begin{equation}
(p,q)\in\left<f\right>^{\updownarrow G}\quad\text{ means }\quad\forall X.\,p^{X}\triangleright f^{\uparrow H^{X,\bullet}}=q^{X}\quad.\label{eq:relational-universal-lifting-derivation2}
\end{equation}

\end_inset

 Turning now to the right-hand side of the equation 
\begin_inset Formula $\left<f\right>^{\updownarrow G}\overset{?}{=}\langle f^{\uparrow G}\rangle$
\end_inset

 that we are proving, we look at the lifting of 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 to 
\begin_inset Formula $G$
\end_inset

, which produces the following function:
\begin_inset Formula 
\[
f^{\uparrow G}:(\forall Y.\,H^{Y,A})\rightarrow\forall X.\,H^{X,B}\quad,\quad\quad p^{:\forall X.\,H^{X,A}}\triangleright f^{\uparrow G}=\forall X.\,p^{X}\triangleright f^{\uparrow H^{X,\bullet}}\quad.
\]

\end_inset

So, the corresponding relation 
\begin_inset Formula $\langle f^{\uparrow G}\rangle$
\end_inset

 is expressed like this:
\begin_inset Formula 
\[
(p^{:G^{A}},q^{:G^{B}})\in\langle f^{\uparrow G}\rangle\text{ means }q=p\triangleright f^{\uparrow G}\quad\text{or equivalently}:\quad\forall X.\,q^{X}=p^{X}\triangleright f^{\uparrow H^{X,\bullet}}\quad.
\]

\end_inset

This is now the same as the relation
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-universal-lifting-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 We proceed by induction on the structure of the contrafunctor 
\begin_inset Formula $G$
\end_inset

.
 In each case, we use the corresponding part of Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 to obtain 
\begin_inset Formula $\left<f\right>^{\updownarrow G}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Constant type
\end_layout

\begin_layout Plain Layout
In part 
\series bold
(a)
\series default
, we already proved the case 
\begin_inset Formula $G^{A}\triangleq Z$
\end_inset

 (with a fixed type 
\begin_inset Formula $Z$
\end_inset

).
\end_layout

\begin_layout Paragraph
Type parameter
\end_layout

\begin_layout Plain Layout
Nothing to prove, since 
\begin_inset Formula $G^{A}\triangleq A$
\end_inset

 is not a contrafunctor.
\end_layout

\begin_layout Paragraph
Product and co-product types
\end_layout

\begin_layout Plain Layout
The proof is analogous to that in part 
\series bold
(a)
\series default
 except that the relations 
\begin_inset Formula $\left<f\right>^{\updownarrow K}$
\end_inset

 and 
\begin_inset Formula $\left<f\right>^{\updownarrow L}$
\end_inset

 are defined in the opposite direction (e.g., 
\begin_inset Formula $(k_{1},k_{2})\in\left<f\right>^{\downarrow K}$
\end_inset

 when 
\begin_inset Formula $k_{1}=k_{2}\triangleright f^{\downarrow K}$
\end_inset

).
\end_layout

\begin_layout Paragraph
Function types
\end_layout

\begin_layout Plain Layout
Here, we have 
\begin_inset Formula $G^{A}\triangleq K^{A}\rightarrow L^{A}$
\end_inset

 where 
\begin_inset Formula $K$
\end_inset

 is a functor and 
\begin_inset Formula $L$
\end_inset

 is a contrafunctor.
 For the function type, the relation 
\begin_inset Formula $\left<f\right>^{\updownarrow G}$
\end_inset

 is defined by 
\begin_inset Formula $\left<f\right>^{\updownarrow G}=\left<f\right>^{\updownarrow K}\ogreaterthan\left<f\right>^{\updownarrow L}$
\end_inset

.
 By the inductive assumption, 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

 already satisfy Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-function-relation-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\begin_inset Formula 
\[
\left<f\right>^{\updownarrow K}=\langle f^{\uparrow K}\rangle\quad,\quad\quad\left<f\right>^{\updownarrow L}=\text{rev}\langle f^{\downarrow L}\rangle\quad.
\]

\end_inset

Then we can rewrite 
\begin_inset Formula $\left<f\right>^{\updownarrow G}$
\end_inset

 as:
\begin_inset Formula 
\[
\left<f\right>^{\updownarrow G}=\left<f\right>^{\updownarrow K}\ogreaterthan\left<f\right>^{\updownarrow L}=\langle f^{\uparrow K}\rangle\ogreaterthan\text{rev}\langle f^{\downarrow L}\rangle\quad.
\]

\end_inset

Example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-pair-mapper-of-functions"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c) shows that the last relation is equivalent to:
\begin_inset Formula 
\[
(g_{1},g_{2})\in\left<f\right>^{\updownarrow G}\text{ means }(g_{1},g_{2})\in\langle g\rightarrow f^{\uparrow K}\bef g\bef f^{\downarrow L}\rangle\quad.
\]

\end_inset

 The last condition is the same as 
\begin_inset Formula $g_{1}=g_{2}\triangleright f^{\downarrow G}$
\end_inset

 by definition of 
\begin_inset Formula $f^{\downarrow G}$
\end_inset

.
 So, 
\begin_inset Formula $\left<f\right>^{\updownarrow G}=\text{rev}\langle f^{\downarrow G}\rangle$
\end_inset

.
\end_layout

\begin_layout Paragraph
Recursive types
\end_layout

\begin_layout Plain Layout
Here 
\begin_inset Formula $G$
\end_inset

 is defined recursively by 
\begin_inset Formula $G^{A}\triangleq S^{A,G^{A}}$
\end_inset

, where 
\begin_inset Formula $S^{A,R}$
\end_inset

 is a profunctor (contravariant in 
\begin_inset Formula $A$
\end_inset

 and covariant in 
\begin_inset Formula $R$
\end_inset

).
 We need to prove that 
\begin_inset Formula $\left<f\right>^{\updownarrow G}\overset{?}{=}\text{rev}\langle f^{\downarrow G}\rangle$
\end_inset

.
 The relation 
\begin_inset Formula $\left<f\right>^{\updownarrow G}$
\end_inset

 is defined by:
\begin_inset Formula 
\[
\left<f\right>^{\updownarrow G}=\left<f\right>^{\updownarrow S^{\bullet,G^{A}}}\circ\big(\overline{\left<f\right>^{\updownarrow G}}\big)^{\updownarrow S^{B,\bullet}}\quad.
\]

\end_inset

The inductive assumptions are that Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-function-relation-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

 already holds for the recursive call 
\begin_inset Formula $\overline{\left<f\right>^{\updownarrow G}}$
\end_inset

:
\begin_inset Formula 
\[
(p^{:G^{A}},q^{:G^{B}})\in\overline{\left<f\right>^{\updownarrow G}}\text{ means }p=q\triangleright f^{\downarrow G}\quad,\quad\text{ or equivalently}:\quad\overline{\left<f\right>^{\updownarrow G}}=\text{rev}\langle f^{\downarrow G}\rangle\quad,
\]

\end_inset

and that Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-function-relation-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

 already holds for 
\begin_inset Formula $S$
\end_inset

, so that the liftings 
\begin_inset Formula $\left<f\right>^{\updownarrow S^{\bullet,G^{A}}}$
\end_inset

 and 
\begin_inset Formula $\left<f^{\uparrow G}\right>^{\updownarrow S^{B,\bullet}}$
\end_inset

 satisfy:
\begin_inset Formula 
\[
\left<f\right>^{\updownarrow S^{\bullet,G^{A}}}=\text{rev}\langle f^{\downarrow S^{\bullet,G^{A}}}\rangle\quad,\quad\quad\langle f^{\downarrow G}\rangle^{\updownarrow S^{B,\bullet}}=\langle f^{\downarrow G\uparrow S^{B,\bullet}}\rangle\quad.
\]

\end_inset

To prove that 
\begin_inset Formula $\left<f\right>^{\updownarrow G}\overset{?}{=}\text{rev}\langle f^{\downarrow G}\rangle$
\end_inset

, write out the lifting 
\begin_inset Formula $f^{\downarrow G}$
\end_inset

 for a function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

,
\begin_inset Formula 
\[
f^{\downarrow G}=f^{\downarrow S^{\bullet,G^{A}}}\bef\big(\overline{f^{\downarrow G}}\big)^{\uparrow S^{B,\bullet}}\quad,
\]

\end_inset

and simplify 
\begin_inset Formula $\langle f^{\downarrow G}\rangle$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \left<f\right>^{\updownarrow G}\overset{?}{=}\text{rev}\langle f^{\uparrow G}\rangle=\text{rev}\big\langle f^{\downarrow S^{\bullet,G^{A}}}\bef\big(\overline{f^{\downarrow G}}\big)^{\uparrow S^{B,\bullet}}\big\rangle\\
\text{use Statement~\ref{subsec:Statement-function-composition-relation}}:\quad & =\text{rev}\big(\big\langle f^{\downarrow S^{\bullet,G^{A}}}\big\rangle\circ\big\langle(\overline{f^{\downarrow G}})^{\uparrow S^{B,\bullet}}\big\rangle\big)\\
\text{use Statement~\ref{subsec:Statement-reverse-relation-properties}}:\quad & =\big(\text{rev}\big\langle f^{\downarrow S^{\bullet,G^{A}}}\big\rangle\big)\circ\big(\text{rev}\big\langle(\overline{f^{\downarrow G}})^{\uparrow S^{B,\bullet}}\big\rangle\big)\\
\text{use the inductive assumptions}:\quad & =\left<f\right>^{\updownarrow S^{\bullet,G^{A}}}\circ\text{rev}\langle\overline{f^{\downarrow G}}\rangle^{\updownarrow S^{B,\bullet}}=\left<f\right>^{\updownarrow S^{\bullet,G^{A}}}\circ\big(\overline{\left<f\right>^{\updownarrow G}}\big)^{\updownarrow S^{B,\bullet}}\quad.
\end{align*}

\end_inset

The last expression is equal to the definition of 
\begin_inset Formula $\left<f\right>^{\updownarrow G}$
\end_inset

, which is what we needed to show.
\end_layout

\begin_layout Paragraph
Quantified types
\end_layout

\begin_layout Plain Layout
Here 
\begin_inset Formula $G^{A}=\forall X.\,H^{X,A}$
\end_inset

, where 
\begin_inset Formula $H^{X,A}$
\end_inset

 is contravariant in 
\begin_inset Formula $A$
\end_inset

.
 The inductive assumption is that Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-function-relation-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

 already holds for liftings to 
\begin_inset Formula $H^{\bullet,\bullet}$
\end_inset

.
 We use Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-lifting-quantified-types-short"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and write the left-hand side of the equation 
\begin_inset Formula $\left<f\right>^{\updownarrow G}\overset{?}{=}\text{rev}\langle f^{\downarrow G}\rangle$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & \big(\left<f\right>^{\updownarrow G}\big)^{X,Y}=\forall s^{:X\leftrightarrow Y}.\,s^{\updownarrow H^{\bullet,A}}\circ\gunderline{\left<f\right>^{\updownarrow H^{Y,\bullet}}}\\
\text{inductive assumption}:\quad & \quad=\forall s^{:X\leftrightarrow Y}.\,s^{\updownarrow H^{\bullet,A}}\circ\text{rev}\langle f^{\downarrow H^{Y,\bullet}}\rangle\quad.
\end{align*}

\end_inset

Writing out the last condition, we find:
\begin_inset Formula 
\begin{align*}
 & (p^{:H^{X,A}},q^{:H^{Y,B}})\in\big(\left<f\right>^{\updownarrow G}\big)^{X,Y}\text{ means }\forall s^{:X\leftrightarrow Y}.\,(p,q)\in s^{\updownarrow H^{\bullet,A}}\circ\text{rev}\langle f^{\downarrow H^{Y,\bullet}}\rangle\quad,\\
\text{or equivalently}:\quad & \forall s^{:X\leftrightarrow Y}.\,\exists t^{:H^{Y,A}}.\,(p,t)\in s^{\updownarrow H^{\bullet,A}}\text{ and }(t,q)\in\text{rev}\langle f^{\downarrow H^{Y,\bullet}}\rangle\quad.
\end{align*}

\end_inset

The condition 
\begin_inset Formula $(t,q)\in\text{rev}\langle f^{\downarrow H^{Y,\bullet}}\rangle$
\end_inset

 is equivalent to 
\begin_inset Formula $t=q\triangleright f^{\downarrow H^{Y,\bullet}}$
\end_inset

.
 So, the value 
\begin_inset Formula $t$
\end_inset

 always exists, and we can simplify the last relation above to:
\begin_inset Formula 
\[
(p^{X},q^{Y})\in\big(\left<f\right>^{\updownarrow G}\big)^{X,Y}\text{ means }\forall s^{:X\leftrightarrow Y}.\,(p,q\triangleright f^{\downarrow H^{Y,\bullet}})\in s^{\updownarrow H^{\bullet,A}}\quad.
\]

\end_inset

When two values 
\begin_inset Formula $p^{X}$
\end_inset

, 
\begin_inset Formula $q^{Y}$
\end_inset

 always belong to an arbitrary lifted relation 
\begin_inset Formula $s^{\updownarrow}$
\end_inset

, we may use Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-parametricity-gives-identity-relation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 to conclude that those values are equal for equal types 
\begin_inset Formula $X=Y$
\end_inset

:
\begin_inset Formula 
\[
\forall X.\,p^{X}=q^{X}\triangleright f^{\downarrow H^{X,\bullet}}\quad.
\]

\end_inset


\end_layout

\begin_layout Plain Layout
Turning now to the right-hand side, we find:
\begin_inset Formula 
\begin{align*}
 & (p^{:\forall X.\,H^{X,A}},q^{:\forall Y.\,X^{Y,B}})\in\text{rev}\langle f^{\downarrow G}\rangle\text{ means }p=q\triangleright f^{\downarrow G}\\
\text{or equivalently}:\quad & p^{X}=q^{X}\triangleright f^{\downarrow H^{X,\bullet}}\quad.
\end{align*}

\end_inset

This is now the same condition as the left-hand side.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Relations defined in a pullback form are in some ways similar to the relations
 of the form 
\begin_inset Formula $\left<f\right>$
\end_inset

:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-pullback-as-composition"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pullback-as-composition"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 The pullback relation
\begin_inset Index idx
status open

\begin_layout Plain Layout
pullback relation
\end_layout

\end_inset

 
\begin_inset Formula $\text{pull}\left(f,g\right)$
\end_inset

 is equivalent to 
\begin_inset Formula $\left<f\right>\circ\text{rev}\left<g\right>$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 The lifting of a pullback relation to a (covariant) functor 
\begin_inset Formula $F$
\end_inset

 is equivalent to a pullback relation with lifted functions:
\begin_inset Formula 
\[
\big(\text{pull}\left(f,g\right)\big)^{\updownarrow F}=\text{pull}\,(f^{\uparrow F},g^{\uparrow F})\quad.
\]

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 The pullback relation 
\begin_inset Formula $\text{pull}\left(f,g\right)$
\end_inset

 is defined, for any 
\begin_inset Formula $f^{:A\rightarrow C}$
\end_inset

 and 
\begin_inset Formula $g^{:B\rightarrow C}$
\end_inset

, by:
\begin_inset Formula 
\[
(a^{:A},b^{:B})\in\text{pull}\left(f,g\right)\text{ means }f(a)=g(b)\quad.
\]

\end_inset

The relation 
\begin_inset Formula $\left<f\right>\circ\text{rev}\left<g\right>$
\end_inset

 is defined by:
\begin_inset Formula 
\[
(a^{:A},b^{:B})\in\left<f\right>\circ\text{rev}\left<g\right>\text{ means }\exists c^{:C}.\,(a,c)\in\left<f\right>\text{ and }(c,b)\in\text{rev}\left<g\right>\quad.
\]

\end_inset

Note that 
\begin_inset Formula $(c,b)\in\text{rev}\left<g\right>$
\end_inset

 is the same as 
\begin_inset Formula $(b,c)\in\left<g\right>$
\end_inset

.
 By definition of 
\begin_inset Formula $\left<f\right>$
\end_inset

 and 
\begin_inset Formula $\left<g\right>$
\end_inset

, we then have:
\begin_inset Formula 
\[
(a^{:A},b^{:B})\in\left<f\right>\circ\text{rev}\left<g\right>\text{ means }\exists c^{:C}.\,c=f(a)\text{ and }c=g(b)\quad.
\]

\end_inset

The value 
\begin_inset Formula $c$
\end_inset

 exists since we can just define it by 
\begin_inset Formula $c\triangleq f(a)$
\end_inset

, and then we obtain the same pullback condition relating 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

, namely 
\begin_inset Formula $f(a)=g(b)$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 Using part 
\series bold
(a)
\series default
, we find:
\begin_inset Formula 
\begin{align*}
 & \big(\text{pull}\left(f,g\right)\big)^{\updownarrow F}=\big(\left<f\right>\circ\text{rev}\left<g\right>\big)^{\updownarrow F}\\
\text{composition law from Statement~\ref{subsec:Statement-lifting-relation-laws}}:\quad & =\left<f\right>^{\updownarrow F}\circ\big(\text{rev}\left<g\right>\big)^{\updownarrow F}\\
\text{Statement~\ref{subsec:Statement-lifting-function-relation-covariant}(a), (b)}:\quad & =\langle f^{\uparrow F}\rangle\circ\text{rev}\langle g^{\uparrow F}\rangle=\text{pull}\,(f^{\uparrow F},g^{\uparrow F})\quad.
\end{align*}

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Subsection
Relational parametricity theorem
\end_layout

\begin_layout Plain Layout
We would like to prove that any fully parametric function 
\begin_inset Formula $t:\forall A.\,P^{A}\rightarrow Q^{A}$
\end_inset

 obeys the relational naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:naturality-law-of-t-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\begin_inset Formula 
\[
\forall A,B.\,\forall r^{:A\leftrightarrow B}.\,(t^{A},t^{B})\in r^{\updownarrow P}\ogreaterthan r^{\updownarrow Q}\quad.
\]

\end_inset

The proof will need to go by induction on the structure of the code of the
 function 
\begin_inset Formula $t$
\end_inset

, which is built from smaller sub-expressions using the nine code constructions
 of Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:nine-pure-code-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The inductive assumption is that all sub-expressions already satisfy the
 relational naturality law.
 An immediate difficulty with this approach is that the sub-expressions
 of 
\begin_inset Formula $t$
\end_inset

 may not have the type signature of a function and may also contain free
 variables.
 To illustrate, write the code of 
\begin_inset Formula $t$
\end_inset

 as 
\begin_inset Formula $t=z^{:P^{A}}\rightarrow\text{expr}(z)$
\end_inset

, or in Scala:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def t[A] = { z: P[A] => expr(z) }
\end_layout

\end_inset

where 
\begin_inset Quotes eld
\end_inset


\begin_inset listings
inline true
status open

\begin_layout Plain Layout

expr(z)
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 is the function's body.
 That function body 
\emph on
itself
\emph default
 does not necessarily have a type signature of a function (i.e., it is not
 necessarily of the form 
\begin_inset Formula $K^{A}\rightarrow L^{A}$
\end_inset

).
 Also, 
\begin_inset Quotes eld
\end_inset


\begin_inset listings
inline true
status open

\begin_layout Plain Layout

expr(z)
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 may contain 
\begin_inset Formula $z$
\end_inset

 as a free variable defined outside the scope of 
\begin_inset Quotes eld
\end_inset


\begin_inset listings
inline true
status open

\begin_layout Plain Layout

expr(z)
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, and the type of 
\begin_inset Formula $z$
\end_inset

 may depend on the type parameter 
\begin_inset Formula $A$
\end_inset

.
 So, we need to reformulate the relational naturality law to describe function
 
\emph on
bodies
\emph default
, i.e., arbitrary expressions that may contain externally defined variables.
 A suitably generalized formulation of the relational naturality law is
 shown in the next definition and will be proved below in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-main-relational-parametricity"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-(relational-naturality"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-(relational-naturality"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (relational naturality law)
\end_layout

\begin_layout Plain Layout
For any type constructors 
\begin_inset Formula $P^{\bullet}$
\end_inset

 and 
\begin_inset Formula $Q^{\bullet}$
\end_inset

 and for any expression 
\begin_inset Formula $t:\forall A.\,Q^{A}$
\end_inset

 containing a single free variable 
\begin_inset Formula $z^{:P^{A}}$
\end_inset

, define the 
\series bold
binding function
\series default
 
\begin_inset Formula $\tilde{t}:\forall A.\,P^{A}\rightarrow Q^{A}$
\end_inset

 such that 
\begin_inset Formula $t=\tilde{t}(z)$
\end_inset

 and 
\begin_inset Formula $\tilde{t}$
\end_inset

 has no free variables.
 Then the relational naturality law
\begin_inset Index idx
status open

\begin_layout Plain Layout
naturality law!for relations
\end_layout

\end_inset

 is written as:
\begin_inset Formula 
\begin{equation}
\forall(A,B).\,\forall(r^{:A\leftrightarrow B},z_{1}^{:P^{A}},z_{2}^{:P^{B}}).\,\text{ if }(z_{1},z_{2})\in r^{\updownarrow P}\text{ then }(t^{A}(z_{1}),t^{B}(z_{2}))\in r^{\updownarrow Q}\quad.\label{eq:relational-naturality-law}
\end{equation}

\end_inset


\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Plain Layout
If 
\begin_inset Formula $t$
\end_inset

 contains no free variables, we may still write 
\begin_inset Formula $t$
\end_inset

 as 
\begin_inset Formula $t(z)$
\end_inset

 although it does not depend on 
\begin_inset Formula $z$
\end_inset

.
 In that case, the condition for 
\begin_inset Formula $z_{1}$
\end_inset

 and 
\begin_inset Formula $z_{2}$
\end_inset

 vanishes from Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

), and the law is simplified to:
\begin_inset Formula 
\[
\forall(A,B).\,\forall r^{:A\leftrightarrow B}.\,(t^{A},t^{B})\in r^{\updownarrow Q}\quad.
\]

\end_inset

Even in that case, to save time, we will set 
\begin_inset Formula $P^{A}\triangleq\bbnum 1$
\end_inset

 and keep using Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and writing 
\begin_inset Formula $t(z)$
\end_inset

.
\end_layout

\begin_layout Plain Layout
When an expression contains more than one free variable, we can gather all
 the free variables into a tuple.
 This creates an equivalent expression with just one free variable:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement--relational-naturality-tuple"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement--relational-naturality-tuple"
plural "false"
caps "false"
noprefix "false"

\end_inset

 
\end_layout

\begin_layout Plain Layout
The relational naturality law for an expression 
\begin_inset Formula $t(z_{1},z_{2})$
\end_inset

 containing 
\emph on
two
\emph default
 free variables 
\begin_inset Formula $z_{1}^{:K^{A}}$
\end_inset

 and 
\begin_inset Formula $z_{2}^{:L^{A}}$
\end_inset

 is equivalent to the relational naturality law for the expression 
\begin_inset Formula $u(h)$
\end_inset

 with 
\emph on
one
\emph default
 free variable 
\begin_inset Formula $h$
\end_inset

 defined as:
\begin_inset Formula 
\[
h^{:K^{A}\times L^{A}}\triangleq z_{1}\times z_{2}\quad,\quad\quad u(h)\triangleq t(h\triangleright\pi_{1},h\triangleright\pi_{2})\quad.
\]

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
The relational naturality laws for 
\begin_inset Formula $t$
\end_inset

 and 
\begin_inset Formula $u$
\end_inset

 say that, for all types 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \forall r^{:A\leftrightarrow B},x_{1}^{:K^{A}},x_{2}^{:L^{A}},y_{1}^{:K^{B}},y_{2}^{:L^{B}}:\,\text{ if }(x_{1},y_{1})\in r^{\updownarrow K}\text{ and }(x_{2},y_{2})\in r^{\updownarrow L}\text{ then }(t(x_{1},x_{2}),t(y_{1},y_{2}))\in r^{\updownarrow Q}\quad.\\
 & \forall r^{:A\leftrightarrow B},\,\forall h^{:K^{A}\times L^{A}},w^{:K^{B}\times L^{B}}:\,\text{ if }(h,w)\in r^{\updownarrow(K\times L)}\text{ then }(u(h),u(w))\in r^{\updownarrow Q}\quad.
\end{align*}

\end_inset

By Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c), the lifting 
\begin_inset Formula $r^{\updownarrow(K\times L)}$
\end_inset

 is defined via projections 
\begin_inset Formula $\pi_{1}$
\end_inset

, 
\begin_inset Formula $\pi_{2}$
\end_inset

: 
\begin_inset Formula 
\[
(h,w)\in r^{\updownarrow(K\times L)}\text{ if }(h\triangleright\pi_{1},w\triangleright\pi_{1})\in r^{\updownarrow K}\text{ and }(h\triangleright\pi_{2},w\triangleright\pi_{2})\in r^{\updownarrow L}\quad.
\]

\end_inset

Setting 
\begin_inset Formula $h=x_{1}\times x_{2}$
\end_inset

 and 
\begin_inset Formula $w=y_{1}\times y_{2}$
\end_inset

, we find that 
\begin_inset Formula $u(h)=t(x_{1},x_{2})$
\end_inset

 and 
\begin_inset Formula $u(w)=t(y_{1},y_{2})$
\end_inset

.
 It follows that the relational naturality laws for 
\begin_inset Formula $t$
\end_inset

 and 
\begin_inset Formula $u$
\end_inset

 are equivalent.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Plain Layout
Due to Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement--relational-naturality-tuple"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we are allowed to assume that the expression 
\begin_inset Formula $t$
\end_inset

 always has a 
\emph on
single
\emph default
 free variable.
 This simplifies the formulation of the relational parametricity theorem:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-main-relational-parametricity"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-main-relational-parametricity"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (relational parametricity)
\end_layout

\begin_layout Plain Layout
Any fully parametric expression 
\begin_inset Formula $t(h):\forall A.\,Q^{A}$
\end_inset

 containing a single free variable 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

 (where 
\begin_inset Formula $H$
\end_inset

 and 
\begin_inset Formula $Q$
\end_inset

 are fully parametric, exponential-polynomial type constructors) satisfies
 the relational naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Subparagraph
Proof 
\end_layout

\begin_layout Plain Layout
By assumption, 
\begin_inset Formula $t$
\end_inset

 is built up from the nine constructions of Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:nine-pure-code-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 So, the code of 
\begin_inset Formula $t$
\end_inset

 has one of these nine constructions as the top-level expression.
 For each of those constructions, we will prove that 
\begin_inset Formula $t$
\end_inset

 satisfies Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) as long as all its sub-expressions do.
 Throughout the proof, all relational naturality laws will involve an arbitrary
 relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 between arbitrary types 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Paragraph
Use unit value
\end_layout

\begin_layout Plain Layout
In this case, 
\begin_inset Formula $t\triangleq1$
\end_inset

 and has the unit type (
\begin_inset Formula $Q^{A}\triangleq\bbnum 1$
\end_inset

).
 Since 
\begin_inset Formula $t$
\end_inset

 contains no bound variables, the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) becomes simply
\begin_inset Formula 
\[
(1,1)\in r^{\updownarrow Q}\quad.
\]

\end_inset

By Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a), the relation 
\begin_inset Formula $r^{\updownarrow Q}$
\end_inset

 between values 
\begin_inset Formula $1$
\end_inset

 and 
\begin_inset Formula $1$
\end_inset

 holds for all 
\begin_inset Formula $r$
\end_inset

.
\end_layout

\begin_layout Plain Layout
The same proof applies for 
\begin_inset Formula $t\triangleq c$
\end_inset

 where 
\begin_inset Formula $c^{:C}$
\end_inset

 is a fixed value of a fixed type 
\begin_inset Formula $C$
\end_inset

.
\end_layout

\begin_layout Paragraph
Use argument
\end_layout

\begin_layout Plain Layout
In this case, 
\begin_inset Formula $t\triangleq h$
\end_inset

 where 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

 is a bound variable (say, the argument of the function whose body is 
\begin_inset Formula $t$
\end_inset

).
 So, we must have 
\begin_inset Formula $Q=H$
\end_inset

.
 The law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is then written as
\begin_inset Formula 
\[
\forall h_{1}^{:H^{A}},h_{2}^{:H^{B}}.\,\text{ if }(h_{1},h_{2})\in r^{\updownarrow H}\text{ then }(h_{1},h_{2})\in r^{\updownarrow H}\quad.
\]

\end_inset

This condition holds trivially.
\end_layout

\begin_layout Paragraph
Create function
\end_layout

\begin_layout Plain Layout
In this case, 
\begin_inset Formula $t(h)\triangleq p^{:P^{A}}\rightarrow g(h,p)$
\end_inset

 where the expression 
\begin_inset Formula $g^{:G^{A}}$
\end_inset

 contains a free variable 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

 in addition to the free variable 
\begin_inset Formula $p$
\end_inset

.
 By the inductive assumption, 
\begin_inset Formula $g$
\end_inset

 already satisfies the relational naturality law.
 We write that law with two free variables, according to Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement--relational-naturality-tuple"
plural "false"
caps "false"
noprefix "false"

\end_inset

), as:
\begin_inset Formula 
\[
\forall(p_{1}^{:P^{A}},p_{2}^{:P^{B}},h_{1}^{:H^{A}},h_{2}^{:H^{B}}).\,\text{ if }(p_{1},p_{2})\in r^{\updownarrow P}\text{ and }(h_{1},h_{2})\in r^{\updownarrow H}\text{ then }(g(h_{1},p_{1}),g(h_{2},p_{2}))\in r^{\updownarrow G}\quad.
\]

\end_inset

We need to show that the relational naturality law of 
\begin_inset Formula $t$
\end_inset

 holds.
 That law involves the lifting 
\begin_inset Formula $r^{\updownarrow Q}$
\end_inset

, where 
\begin_inset Formula $Q^{A}\triangleq P^{A}\rightarrow G^{A}$
\end_inset

 is the type of 
\begin_inset Formula $t$
\end_inset

.
 The lifting 
\begin_inset Formula $r^{\updownarrow Q}$
\end_inset

 is shown in Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(e):
\begin_inset Formula 
\[
(u^{:P^{A}\rightarrow G^{A}},v^{:P^{B}\rightarrow G^{B}})\in r^{\updownarrow Q}\text{ means: if }(p_{1}^{:P^{A}},p_{2}^{:P^{B}})\in r^{\updownarrow P}\text{ then }(u(p_{1}),v(p_{2}))\in r^{\updownarrow G}\quad.
\]

\end_inset

The law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) of 
\begin_inset Formula $t$
\end_inset

 is then rewritten as
\begin_inset Formula 
\[
\forall(h_{1}^{:H^{A}},h_{2}^{:H^{B}}).\,\text{ if }(h_{1},h_{2})\in r^{\updownarrow H}\text{ then if }(p_{1}^{:P^{A}},p_{2}^{:P^{B}})\in r^{\updownarrow P}\text{ then }(g(h_{1},p_{1}),g(h_{2},p_{2}))\in r^{\updownarrow G}\quad.
\]

\end_inset

This is equivalent to the inductive assumption for 
\begin_inset Formula $g$
\end_inset

, which proves the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Paragraph
Use function
\end_layout

\begin_layout Plain Layout
In this case, 
\begin_inset Formula $t(h)\triangleq g(p)$
\end_inset

 where 
\begin_inset Formula $g^{:P^{A}\rightarrow Q^{A}}$
\end_inset

 and 
\begin_inset Formula $p^{:P^{A}}$
\end_inset

 are the sub-expressions.
 Both 
\begin_inset Formula $g$
\end_inset

 and 
\begin_inset Formula $p$
\end_inset

 may contain 
\begin_inset Formula $h$
\end_inset

 as a bound variable, which we indicate more verbosely by writing 
\begin_inset Formula $g(h)$
\end_inset

 and 
\begin_inset Formula $p(h)$
\end_inset

.
 The inductive assumption is that the relational naturality law already
 holds for both 
\begin_inset Formula $g(h)$
\end_inset

 and 
\begin_inset Formula $p(h)$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ then if }(p_{1}^{:P^{A}},p_{2}^{:P^{B}})\in r^{\updownarrow P}\text{ then }(g(h_{1})(p_{1}),g(h_{2})(p_{2}))\in r^{\updownarrow Q}\quad,\\
 & \text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ then }(p_{1}(h_{1}),p_{2}(h_{2}))\in r^{\updownarrow P}\quad.
\end{align*}

\end_inset

Substituting the condition 
\begin_inset Formula $(p_{1}(h_{1}),p_{2}(h_{2}))\in r^{\updownarrow P}$
\end_inset

 into the first line, we get:
\begin_inset Formula 
\[
\text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ then }(g(h_{1})(p_{1}(h_{1})),g(h_{2})(p_{2}(h_{2})))=(t(h_{1}),t(h_{2}))\in r^{\updownarrow Q}\quad.
\]

\end_inset

This is exactly the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) of 
\begin_inset Formula $t$
\end_inset

 because 
\begin_inset Formula $t(h)=g(h)(p(h))$
\end_inset

.
\end_layout

\begin_layout Paragraph
Create tuple
\end_layout

\begin_layout Plain Layout
In this case, 
\begin_inset Formula $t(h)\triangleq k^{:K^{A}}\times l^{:L^{A}}$
\end_inset

, where the sub-expressions 
\begin_inset Formula $k(h)$
\end_inset

 and 
\begin_inset Formula $l(h)$
\end_inset

 contain the bound variable 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

.
 We have 
\begin_inset Formula $Q^{A}\triangleq K^{A}\times L^{A}$
\end_inset

, so we use Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c) for the lifting 
\begin_inset Formula $r^{\updownarrow Q}$
\end_inset

:
\begin_inset Formula 
\[
(q_{1}^{:Q^{A}},q_{2}^{:Q^{B}})\in r^{\updownarrow Q}\text{ means }(q_{1}\triangleright\pi_{1},q_{2}\triangleright\pi_{1})\in r^{\updownarrow K}\text{ and }(q_{1}\triangleright\pi_{2},q_{2}\triangleright\pi_{2})\in r^{\updownarrow L}\quad.
\]

\end_inset

The relational naturality laws of 
\begin_inset Formula $k(h)$
\end_inset

 and 
\begin_inset Formula $l(h)$
\end_inset

 are written as
\begin_inset Formula 
\begin{align*}
 & \text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ then }(k^{A}(h_{1}),k^{B}(h_{2}))\in r^{\updownarrow K}\quad,\\
 & \text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ then }(l^{A}(h_{1}),l^{B}(h_{2}))\in r^{\updownarrow L}\quad.
\end{align*}

\end_inset

It remains to define 
\begin_inset Formula $q_{1}\triangleq k^{A}(h_{1})\times l^{A}(h_{1})$
\end_inset

 and 
\begin_inset Formula $q_{2}\triangleq k^{B}(h_{2})\times l^{B}(h_{2})$
\end_inset

 to verify the law of 
\begin_inset Formula $t(h)$
\end_inset

:
\begin_inset Formula 
\[
\text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ then }(t^{A}(h_{1}),t^{B}(h_{2}))\in r^{\updownarrow Q}\quad.
\]

\end_inset


\end_layout

\begin_layout Paragraph
Use tuple
\end_layout

\begin_layout Plain Layout
In this case, 
\begin_inset Formula $t(h)\triangleq\pi_{1}(g)$
\end_inset

 where 
\begin_inset Formula $g^{:Q^{A}\times L^{A}}$
\end_inset

 is a sub-expression that contains the bound variable 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

.
 We need to prove that 
\begin_inset Formula $t(h)$
\end_inset

 satisfies the relational naturality law if 
\begin_inset Formula $g(h)$
\end_inset

 does.
\end_layout

\begin_layout Plain Layout
The relational naturality law of 
\begin_inset Formula $g(h)$
\end_inset

, which holds by the inductive assumption, is:
\begin_inset Formula 
\[
\text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ then }(g^{A}(h_{1}),g^{B}(h_{2}))\in r^{\updownarrow(Q\times L)}\quad.
\]

\end_inset

By Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c) for the lifting 
\begin_inset Formula $r^{\updownarrow(Q\times L)}$
\end_inset

, we have:
\begin_inset Formula 
\[
(g^{A}(h_{1}),g^{B}(h_{2}))\in r^{\updownarrow(Q\times L)}\text{ means }\big(g^{A}(h_{1})\triangleright\pi_{1},g^{B}(h_{2})\triangleright\pi_{1}\big)\in r^{\updownarrow Q}\text{ and }\big(g^{A}(h_{1})\triangleright\pi_{2},g^{B}(h_{2})\triangleright\pi_{2}\big)\in r^{\updownarrow L}\quad.
\]

\end_inset

Taking the condition 
\begin_inset Formula $(g^{A}(h_{1})\triangleright\pi_{1},g^{B}(h_{2})\triangleright\pi_{1})\in r^{\updownarrow Q}$
\end_inset

 and ignoring the similar condition that involves 
\begin_inset Formula $r^{\updownarrow L}$
\end_inset

, we get the relational naturality law of 
\begin_inset Formula $\pi_{1}(g)$
\end_inset

:
\begin_inset Formula 
\[
\text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ then }(g^{A}(h_{1})\triangleright\pi_{1},g^{B}(h_{2})\triangleright\pi_{1})\in r^{\updownarrow Q}\quad.
\]

\end_inset


\end_layout

\begin_layout Plain Layout
The proof for 
\begin_inset Formula $\pi_{2}(g)$
\end_inset

 is similar: we need to ignore the condition that involves 
\begin_inset Formula $r^{\updownarrow Q}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Create disjunction
\end_layout

\begin_layout Plain Layout
In this case, 
\begin_inset Formula $t(h)\triangleq g(h)+\bbnum 0$
\end_inset

 where 
\begin_inset Formula $Q^{A}\triangleq K^{A}+L^{A}$
\end_inset

 and 
\begin_inset Formula $g^{:K^{A}}$
\end_inset

 is a sub-expression that contains a bound variable 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

.
 The inductive assumption is that 
\begin_inset Formula $g(h)$
\end_inset

 satisfies its relational naturality law:
\begin_inset Formula 
\[
\text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ then }(g^{A}(h_{1}),g^{B}(h_{2}))\in r^{\updownarrow K}\quad.
\]

\end_inset

By Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(d) for the lifting 
\begin_inset Formula $r^{\updownarrow(K+L)}$
\end_inset

, we have:
\begin_inset Formula 
\[
(g^{A}(h_{1})+\bbnum 0,g^{B}(h_{2})+\bbnum 0)\in r^{\updownarrow(K+L)}\text{ means }(g^{A}(h_{1}),g^{B}(h_{2}))\in r^{\updownarrow K}\quad,
\]

\end_inset

because both values 
\begin_inset Formula $g(h_{1})+\bbnum 0$
\end_inset

 and 
\begin_inset Formula $g(h_{2})+\bbnum 0$
\end_inset

 belong to the same part of the disjunction.
 It follows that the relational naturality law of 
\begin_inset Formula $t(h)$
\end_inset

 holds:
\begin_inset Formula 
\[
\text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ then }(t^{A}(h_{1}),t^{B}(h_{2}))\in r^{\updownarrow(K+L)}\quad.
\]

\end_inset


\end_layout

\begin_layout Paragraph
Use disjunction
\end_layout

\begin_layout Plain Layout
In this case, 
\begin_inset Formula $t(h)\triangleq\,\begin{array}{|c||c|}
 & G^{A}\\
\hline K^{A} & p(h)\\
L^{A} & q(h)
\end{array}\,\,$
\end_inset

 is a pattern-matching function.
 We assume that 
\begin_inset Formula $Q^{A}\triangleq K^{A}+L^{A}\rightarrow G^{A}$
\end_inset

 and that the sub-expressions 
\begin_inset Formula $p^{:K^{A}\rightarrow G^{A}}$
\end_inset

 and 
\begin_inset Formula $q^{:L^{A}\rightarrow G^{A}}$
\end_inset

 contain the bound variable 
\begin_inset Formula $h^{:H^{A}}$
\end_inset

.
 By the inductive assumption, the relational naturality law already holds
 for 
\begin_inset Formula $p(h)$
\end_inset

 and 
\begin_inset Formula $q(h)$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ and }(k_{1}^{:K^{A}},k_{2}^{:K^{B}})\in r^{\updownarrow K}\text{ then }\big(p^{A}(h_{1})(k_{1}),p^{B}(h_{2})(k_{2})\big)\in r^{\updownarrow G}\quad,\\
 & \text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ and }(l_{1}^{:L^{A}},l_{2}^{:L^{B}})\in r^{\updownarrow L}\text{ then }\big(q^{A}(h_{1})(l_{1}),q^{B}(h_{2})(l_{2})\big)\in r^{\updownarrow G}\quad.
\end{align*}

\end_inset

To derive the specific form of the law for 
\begin_inset Formula $t(h)$
\end_inset

, we use Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(e) for the lifting 
\begin_inset Formula $r^{\updownarrow Q}$
\end_inset

:
\begin_inset Formula 
\[
\text{if }(h_{1}^{:H^{A}},h_{2}^{:H^{B}})\in r^{\updownarrow H}\text{ and }(x_{1}^{:K^{A}+L^{A}},x_{2}^{:K^{B}+L^{B}})\in r^{\updownarrow(K+L)}\text{ then }\big(t(h_{1})(x_{1}),t(h_{2})(x_{2})\big)\in r^{\updownarrow G}\quad.
\]

\end_inset

By Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(d), the values 
\begin_inset Formula $x_{1}$
\end_inset

 and 
\begin_inset Formula $x_{2}$
\end_inset

 are in relation 
\begin_inset Formula $r^{\updownarrow(K+L)}$
\end_inset

 only if both 
\begin_inset Formula $x_{1}$
\end_inset

 and 
\begin_inset Formula $x_{2}$
\end_inset

 are in the same part of the disjunction (
\begin_inset Formula $K+L$
\end_inset

).
 We consider separately the case when they are in the left part or in the
 right part.
\end_layout

\begin_layout Plain Layout
If both 
\begin_inset Formula $x_{1}$
\end_inset

 and 
\begin_inset Formula $x_{2}$
\end_inset

 in the left part, we can write 
\begin_inset Formula $x_{1}=k_{1}^{:K^{A}}+\bbnum 0$
\end_inset

 and 
\begin_inset Formula $x_{2}=k_{2}^{:K^{B}}+\bbnum 0$
\end_inset

 with some 
\begin_inset Formula $k_{1}$
\end_inset

 and 
\begin_inset Formula $k_{2}$
\end_inset

.
 Then the condition 
\begin_inset Formula $(x_{1},x_{2})\in r^{\updownarrow(K+L)}$
\end_inset

 is equivalent to 
\begin_inset Formula $(k_{1},k_{2})\in r^{\updownarrow K}$
\end_inset

, while the values 
\begin_inset Formula $t(h_{1})(x_{1})$
\end_inset

 and 
\begin_inset Formula $t(h_{2})(x_{2})$
\end_inset

 are expressed as
\begin_inset Formula 
\[
t(h_{1})(x_{1})=(k_{1}+\bbnum 0)\triangleright\,\begin{array}{|c||c|}
 & G^{A}\\
\hline K^{A} & p(h)\\
L^{A} & q(h)
\end{array}\,=p(h_{1})(k_{1})\quad,\quad\quad t(h_{2})(x_{2})=(k_{2}+\bbnum 0)\triangleright\,\begin{array}{|c||c|}
 & G^{A}\\
\hline K^{A} & p(h)\\
L^{A} & q(h)
\end{array}\,=p(h_{2})(k_{2})\quad.
\]

\end_inset

So, the conclusion of the relational naturality law of 
\begin_inset Formula $t(h)$
\end_inset

 becomes:
\begin_inset Formula 
\[
\big(t(h_{1})(x_{1}),t(h_{2})(x_{2})\big)=\big(p^{A}(h_{1})(k_{1}),p^{B}(h_{2})(k_{2})\big)\in r^{\updownarrow G}\quad.
\]

\end_inset

This conclusion holds due to the relational naturality law of 
\begin_inset Formula $p(h)$
\end_inset

.
\end_layout

\begin_layout Plain Layout
A similar argument proves the law for the case when both 
\begin_inset Formula $x_{1}$
\end_inset

 and 
\begin_inset Formula $x_{2}$
\end_inset

 in the right part.
 We write 
\begin_inset Formula $x_{1}=\bbnum 0+l_{1}^{:L^{A}}$
\end_inset

 and 
\begin_inset Formula $x_{2}=\bbnum 0+l_{2}^{:L^{B}}$
\end_inset

 and reduce the relational naturality law of 
\begin_inset Formula $t(h)$
\end_inset

 to that of 
\begin_inset Formula $q(h)$
\end_inset

, which holds by the inductive assumption.
\end_layout

\begin_layout Paragraph
Recursive call
\end_layout

\begin_layout Plain Layout
In this case, 
\begin_inset Formula $t\triangleq g$
\end_inset

 where 
\begin_inset Formula $g$
\end_inset

 is a recursive call to a function (possibly defined outside that expression).
 When proving a law of a recursively defined function, we may assume that
 the law holds for recursive calls to that function.
 So, the inductive assumption says that 
\begin_inset Formula $g$
\end_inset

 is some expression for which the relational naturality law already holds.
 It then holds for 
\begin_inset Formula $t$
\end_inset

 since 
\begin_inset Formula $t=g$
\end_inset

.
\end_layout

\begin_layout Plain Layout
This completes the proof of the relational parametricity theorem.
 
\begin_inset Formula $\square$
\end_inset

 
\end_layout

\begin_layout Plain Layout
The relational formulation of parametricity is powerful but hard to use
 for deriving equational (i.e., non-relational) laws.
 To convert the relational parametricity law into an equation with functions,
 we need to guess how a function may be turned into a relation 
\begin_inset Formula $r$
\end_inset

 suitable for Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

), and how the resulting lifted relations (
\begin_inset Formula $r^{\updownarrow P}$
\end_inset

 and 
\begin_inset Formula $r^{\updownarrow Q}$
\end_inset

) may be expressed via equations.
 We may choose 
\begin_inset Formula $r=\left<f\right>$
\end_inset

 for some function 
\begin_inset Formula $f$
\end_inset

, but Example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(e) shows that a lifted relation of the form 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 cannot be expressed as an equation when type of 
\begin_inset Formula $P$
\end_inset

 is sufficiently complicated.
\end_layout

\begin_layout Plain Layout
However, most type signatures arising in practice are sufficiently simple
 so that the relations 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 and 
\begin_inset Formula $\left<f\right>^{\updownarrow Q}$
\end_inset

 are expressed as equations.
 In that case, the relational parametricity law can be reduced either to
 the dinaturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-dinatural-transformations-of-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) or to a more general property called the 
\begin_inset Quotes eld
\end_inset

strong
\begin_inset Quotes erd
\end_inset

 dinaturality law.
 Strong dinaturality is useful in a few cases when the dinaturality law
 is not sufficient.
 In this book, strong dinaturality is only used to prove Statements
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:relational-property-for-foldFn"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-Church-encoding-recursive-type-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

, and
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strong-dinaturality-property-of-fix"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The following sections will derive the dinaturality law and the strong
 dinaturality law from the relational parametricity theorem.
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Subsection
Composition of relations
\end_layout

\begin_layout Plain Layout
Like functions, relations can be composed when their types match.
 The composition of relations is motivated by the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

JOIN
\end_layout

\end_inset

 operation in relational databases.
 Two tables are joined using a shared column by selecting the rows where
 the values in the shared column are equal.
 Here is an example:
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset space \hfill{}
\end_inset


\begin_inset Formula $T_{1}=$
\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

NAME
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

IDNUM
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Chandrasekhar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Einstein
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Noether
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Poincar
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
'e
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Formula $T_{2}=$
\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

IDNUM
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

BORN
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1854
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1879
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1882
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1910
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Formula $T_{3}=$
\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

NAME
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

BORN
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Poincar
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
'e
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1854
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Einstein
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1879
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Noether
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1882
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Chandrasekhar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1910
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
The third table is the result of joining the first two tables by the column
 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

IDNUM
\end_layout

\end_inset

 and then dropping that column.
 A SQL command for this operation would be:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT NAME, BORN from T1 NATURAL JOIN T2 ON IDNUM;    //IGNORETHIS
\end_layout

\end_inset

The resulting relation 
\begin_inset Formula $T_{3}$
\end_inset

 between 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

NAME
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

BORN
\end_layout

\end_inset

 can be described by the following condition: 
\begin_inset Formula 
\[
(n^{:\text{String}},b^{:\text{Int}})\in T_{3}\quad\text{ means }\exists i^{:\text{Int}}\text{ such that }(n,i)\in T_{1}\text{ and }(i,b)\in T_{2}\quad.
\]

\end_inset

We require the 
\emph on
existence
\emph default
 of a value 
\begin_inset Formula $i$
\end_inset

 in the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

IDNUM
\end_layout

\end_inset

 column, but we do not add that column to 
\begin_inset Formula $T_{3}$
\end_inset

.
\end_layout

\begin_layout Plain Layout
The 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

JOIN
\end_layout

\end_inset

 operation motivates the following definition of relational composition:
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-composition-of-relations"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-composition-of-relations"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
The 
\series bold
composition
\series default
 of relations 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 and 
\begin_inset Formula $s^{:B\leftrightarrow C}$
\end_inset

 is a relation 
\begin_inset Formula $r\circ s$
\end_inset

 defined by:
\begin_inset Formula 
\[
(r\circ s):A\leftrightarrow C\quad;\quad\quad(a^{:A},c^{:C})\in r\circ s\quad\text{ means }\quad\exists b^{:B}\text{ such that }(a,b)\in r\text{ and }(b,c)\in s\quad.
\]

\end_inset


\end_layout

\begin_layout Plain Layout
We cannot implement a Scala function for composing two arbitrary relations.
 The code would have to enumerate all possible values of type 
\begin_inset Formula $B$
\end_inset

 in order to check whether a value 
\begin_inset Formula $b^{:B}$
\end_inset

 exists such that 
\begin_inset Formula $(a,b)\in r$
\end_inset

 and 
\begin_inset Formula $(b,c)\in s$
\end_inset

.
 This is guaranteed to terminate only if the type 
\begin_inset Formula $B$
\end_inset

 has a small number of distinct values.
 In practical coding, we have to use functions rather than relations.
\end_layout

\begin_layout Plain Layout
The relational composition is compatible with the composition of functions:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-function-composition-relation"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-function-composition-relation"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 An identity function is converted by 
\begin_inset Formula $\left<\right>$
\end_inset

 into an identity relation.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 The composition of functions is converted by 
\begin_inset Formula $\left<\right>$
\end_inset

 into the composition of relations.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 The relation 
\begin_inset Formula $\left<\text{id}\right>$
\end_inset

 corresponding to an identity function 
\begin_inset Formula $\text{id}^{:A\rightarrow A}$
\end_inset

 is defined by:
\begin_inset Formula 
\[
(x^{:A},y^{:A})\in\left<\text{id}\right>\text{ means }x\triangleright\text{id}=y\quad\text{or equivalently}:\quad x=y\quad.
\]

\end_inset

This is the same as the definition of the identity relation 
\begin_inset Formula $\text{id}^{:A\leftrightarrow A}$
\end_inset

.
 So, we can write 
\begin_inset Formula $\left<\text{id}\right>=\text{id}^{:A\leftrightarrow A}$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 Consider two functions 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 and 
\begin_inset Formula $g^{:B\rightarrow C}$
\end_inset

.
 The relation 
\begin_inset Formula $\left<f\bef g\right>$
\end_inset

 is defined like this:
\begin_inset Formula 
\[
(a^{:A},c^{:C})\in\left<f\bef g\right>\text{ means }a\triangleright f\bef g=c\quad\text{or equivalently}:\quad c=g(f(a))\quad.
\]

\end_inset

Now write out the definitions of the relations 
\begin_inset Formula $\left<f\right>$
\end_inset

, 
\begin_inset Formula $\left<g\right>$
\end_inset

, and 
\begin_inset Formula $\left<f\right>\circ\left<g\right>$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & (a^{:A},b^{:B})\in\left<f\right>\text{ means }b=f(a)\quad,\quad\quad(b^{:B},c^{:C})\in\left<g\right>\text{ means }c=g(b)\quad,\\
 & (a^{:A},c^{:C})\in\left<f\right>\circ\left<g\right>\text{ means }\exists b^{:B}\text{ such that }(a,b)\in\left<f\right>\text{ and }(b,c)\in\left<g\right>\quad,\\
 & \quad\quad\text{or equivalently}:\quad\exists b^{:B}\text{ such that }b=f(a)\text{ and }c=g(b)\quad.
\end{align*}

\end_inset

Since the function 
\begin_inset Formula $f$
\end_inset

 is given, 
\begin_inset Formula $b=f(a)$
\end_inset

 always exists.
 Then we get:
\begin_inset Formula 
\[
(a^{:A},c^{:C})\in\left<f\right>\circ\left<g\right>\text{ means }c=g(f(a))\quad.
\]

\end_inset

This is the same as the definition of the relation 
\begin_inset Formula $\left<f\bef g\right>$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Plain Layout
For relations, there is no difference between forward and backward composition
 (i.e., relations are 
\begin_inset Quotes eld
\end_inset

undirected
\begin_inset Quotes erd
\end_inset

).
 Also, relation types 
\begin_inset Formula $A\leftrightarrow B$
\end_inset

 and 
\begin_inset Formula $B\leftrightarrow A$
\end_inset

 are equivalent via the reversal operation (
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

rev
\end_layout

\end_inset

).
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-reverse-relation-properties"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-reverse-relation-properties"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 The relation 
\begin_inset Formula $\text{rev}\left(r\right)$
\end_inset

 is 
\emph on
not
\emph default
 an inverse of 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 in the sense of composition:
\begin_inset Formula 
\[
r\circ\text{rev}\,(r)\neq\text{id}^{:A\leftrightarrow A}\quad.
\]

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 For any relations 
\begin_inset Formula $r^{:B\leftrightarrow A}$
\end_inset

 and 
\begin_inset Formula $s^{:C\leftrightarrow B}$
\end_inset

:
\begin_inset Formula 
\[
\text{rev}\left(r\right)\circ\text{rev}\left(s\right)=\text{rev}\left(s\circ r\right)\quad.
\]

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 Two values 
\begin_inset Formula $x^{:A}$
\end_inset

, 
\begin_inset Formula $y^{:A}$
\end_inset

 are in the relation 
\begin_inset Formula $r\circ\text{rev}\,(r)$
\end_inset

 if:
\begin_inset Formula 
\[
\exists b^{:B}:(x,b)\in r\text{ and }(y,b)\in r\quad.
\]

\end_inset

Since the relation 
\begin_inset Formula $r$
\end_inset

 may be many-to-many, it does not follow that 
\begin_inset Formula $x=y$
\end_inset

.
 So, the identity relation is 
\emph on
not
\emph default
 a consequence of 
\begin_inset Formula $r\circ\text{rev}\,(r)$
\end_inset

.
 It also does not follow that for a given 
\begin_inset Formula $x^{:A}$
\end_inset

 there will exist a 
\begin_inset Formula $b^{:B}$
\end_inset

 such that 
\begin_inset Formula $(x,b)\in r$
\end_inset

.
 So, the pair 
\begin_inset Formula $\left(x,x\right)$
\end_inset

 is 
\emph on
not
\emph default
 necessarily in the relation 
\begin_inset Formula $r\circ\text{rev}\,(r)$
\end_inset

.
 In other words, the relation 
\begin_inset Formula $r\circ\text{rev}\,(r)$
\end_inset

 is not a consequence of the identity relation.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 Use the definition of relational composition:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & (x,y)\in\text{rev}\left(r\right)\circ\text{rev}\left(s\right)\text{ means }\exists z.\,(x,z)\in\text{rev}\left(r\right)\text{ and }(z,y)\in\text{rev}\left(s\right)\quad,\\
\text{or equivalently}:\quad & (x,y)\in\text{rev}\left(r\right)\circ\text{rev}\left(s\right)\text{ means }\exists z.\,(z,x)\in r\text{ and }(y,z)\in s\quad.\\
\text{right-hand side}:\quad & (x,y)\in\text{rev}(s\circ r)\text{ means }(y,x)\in s\circ r\quad,\\
\text{or equivalently}:\quad & (x,y)\in\text{rev}(s\circ r)\text{ means }\exists z.\,(y,z)\in s\text{ and }(z,x)\in r\quad.
\end{align*}

\end_inset

The two conditions are now the same.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-identity-composition-laws-of-relations"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-identity-composition-laws-of-relations"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
The composition of relations satisfies the identity
\begin_inset Index idx
status open

\begin_layout Plain Layout
identity laws!of relational composition
\end_layout

\end_inset

 and 
\begin_inset Index idx
status open

\begin_layout Plain Layout
associativity law!of relational composition
\end_layout

\end_inset

associativity laws:
\begin_inset Formula 
\[
r^{:A\leftrightarrow B}\circ\text{id}^{:B\leftrightarrow B}=r\quad,\quad\quad\text{id}^{:A\leftrightarrow A}\circ r^{:A\leftrightarrow B}=r\quad,\quad(r^{:A\leftrightarrow B}\circ s^{:B\leftrightarrow C})\circ t^{:C\leftrightarrow D}=r\circ(s\circ t)\quad.
\]

\end_inset

The associativity law allows us to write relational composition without
 parentheses, e.g., 
\begin_inset Formula $s\circ p\circ q\circ r$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
To verify the right identity law, assume an arbitrary relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 and write the condition for some values 
\begin_inset Formula $x^{:A}$
\end_inset

 and 
\begin_inset Formula $y^{:B}$
\end_inset

 to be in the relation 
\begin_inset Formula $r\circ\text{id}$
\end_inset

:
\begin_inset Formula 
\[
(x,y)\in r\circ\text{id}\quad\text{ means }\quad\exists b^{:B}\text{ such that }(x,b)\in r\text{ and }(b,y)\in\text{id}\quad.
\]

\end_inset

By definition of the identity relation (
\begin_inset Formula $\text{id}^{:B\leftrightarrow B}$
\end_inset

), the condition 
\begin_inset Formula $(b,y)\in\text{id}$
\end_inset

 means 
\begin_inset Formula $b=y$
\end_inset

.
 So, the condition 
\begin_inset Formula $(x,y)\in r\circ\text{id}$
\end_inset

 is the same as 
\begin_inset Formula $(x,y)\in r$
\end_inset

.
 This means 
\begin_inset Formula $r\circ\text{id}=r$
\end_inset

.
\end_layout

\begin_layout Plain Layout
Similarly, we verify the left identity law:
\begin_inset Formula 
\[
(x,y)\in\text{id}\circ r\quad\text{ means }\quad\exists a^{:A}\text{ such that }(x,a)\in\text{id}\text{ and }(a,y)\in r\quad.
\]

\end_inset

By definition of 
\begin_inset Formula $\text{id}^{:A\leftrightarrow A}$
\end_inset

, we have 
\begin_inset Formula $x=a$
\end_inset

, and so the conditions 
\begin_inset Formula $(x,y)\in\text{id}\circ r$
\end_inset

 and 
\begin_inset Formula $(x,y)\in r$
\end_inset

 are equivalent.
 This means 
\begin_inset Formula $\text{id}\circ r=r$
\end_inset

.
\end_layout

\begin_layout Plain Layout
To verify the associativity law, write the definitions of relational composition
:
\begin_inset Formula 
\begin{align*}
\text{right-hand side}:\quad & (x,y)\in r\circ(s\circ t)\\
\text{is equivalent to}:\quad & \exists b^{:B}\text{ such that }(x,b)\in r\text{ and }(b,y)\in s\circ t\\
\text{is equivalent to}:\quad & \exists b^{:B}\text{ such that }(x,b)\in r\text{ and }\exists c^{:C}\text{ such that }(b,c)\in s\text{ and }(c,y)\in t\quad.
\end{align*}

\end_inset

The right-hand side of the associativity law is rewritten similarly:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & (x,y)\in(r\circ s)\circ t\\
\text{is equivalent to}:\quad & \exists c^{:C}\text{ such that }(x,c)\in r\circ s\text{ and }(c,y)\in t\\
\text{is equivalent to}:\quad & \exists c^{:C}\text{ such that }\exists b^{:B}\text{ such that }(x,b)\in r\text{ and }(b,c)\in s\text{ and }(c,y)\in t\quad.
\end{align*}

\end_inset

To make the two sides equal, place the quantifiers 
\begin_inset Formula $\exists b^{:B}\exists c^{:C}$
\end_inset

 together in front of the expression.
\end_layout

\begin_layout Plain Layout
***This is probably incorrect!
\end_layout

\begin_layout Plain Layout
The pair mapper does not work if we replace relations 
\begin_inset Formula $r^{:A\leftrightarrow C}$
\end_inset

 and 
\begin_inset Formula $s^{:B\leftrightarrow D}$
\end_inset

 by 
\emph on
functions
\emph default
 of types 
\begin_inset Formula $A\rightarrow C$
\end_inset

 and 
\begin_inset Formula $B\rightarrow D$
\end_inset

 because the types do not match: we cannot create a function of type 
\begin_inset Formula $\left(A\rightarrow B\right)\rightarrow C\rightarrow D$
\end_inset

 given 
\begin_inset Formula $p^{:A\rightarrow C}$
\end_inset

 and 
\begin_inset Formula $q^{:B\rightarrow D}$
\end_inset

.
 However, we can use the relational pair mapper if we replace the functions
 
\begin_inset Formula $p$
\end_inset

, 
\begin_inset Formula $q$
\end_inset

 by relations 
\begin_inset Formula $\left<p\right>$
\end_inset

 and 
\begin_inset Formula $\left<q\right>$
\end_inset

.
 The result is, in general, a many-to-many relation 
\begin_inset Formula $\left<p\right>\ogreaterthan\left<q\right>$
\end_inset

 that cannot be expressed as a function but has a pullback form:
\end_layout

\begin_layout Subsubsection
Example 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Example-pair-mapper-of-functions"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-pair-mapper-of-functions"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
Consider two functions 
\begin_inset Formula $p^{:A\rightarrow C}$
\end_inset

, 
\begin_inset Formula $q^{:B\rightarrow D}$
\end_inset

 and the corresponding relations 
\begin_inset Formula $\left<p\right>$
\end_inset

, 
\begin_inset Formula $\left<q\right>$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 Show that the relation 
\begin_inset Formula $\big(\text{rev}\langle p\rangle\big)\ogreaterthan\left<q\right>$
\end_inset

 is equivalent to a function.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 Show that the relation 
\begin_inset Formula $\left<p\right>\ogreaterthan\big(\text{rev}\langle q\rangle\big)$
\end_inset

 is equivalent to a function.
\end_layout

\begin_layout Subparagraph
Solution
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-pair-mapper-of-relations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 gives:
\begin_inset Formula 
\[
(f^{:C\rightarrow B},g^{:A\rightarrow D})\in\big(\text{rev}\left<p\right>\big)\ogreaterthan\left<q\right>\quad\text{means}:\quad\text{if }(y^{:C},x^{:A})\in\text{rev}\left<p\right>\quad\text{then}\quad(f(y),g(x))\in\left<q\right>\quad.
\]

\end_inset

Writing out the definitions of 
\begin_inset Formula $\text{rev}\left<p\right>$
\end_inset

 and 
\begin_inset Formula $\left<q\right>$
\end_inset

, we get:
\begin_inset Formula 
\[
(f,g)\in\big(\text{rev}\left<p\right>\big)\ogreaterthan\left<q\right>\quad\text{means}:\quad\text{if }x\triangleright p=y\quad\text{then}\quad y\triangleright f\triangleright q=x\triangleright g\quad.
\]

\end_inset

Substituting 
\begin_inset Formula $y=x\triangleright p$
\end_inset

 into the last condition, we get 
\begin_inset Formula 
\[
x\triangleright p\triangleright f\triangleright q=x\triangleright g\quad,\quad\quad\text{or equivalently}:\quad p\bef f\bef q=g\quad.
\]

\end_inset

So, the relation between 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

 has the form of a function:
\begin_inset Formula 
\[
(f,g)\in\big(\text{rev}\left<p\right>\big)\ogreaterthan\left<q\right>\quad\text{means}\quad g=\phi(f)\quad,\quad\quad\phi\triangleq f^{:C\rightarrow B}\rightarrow p\bef f\bef q\quad.
\]

\end_inset

We can write the conclusion as: 
\begin_inset Formula 
\[
\big(\text{rev}\left<p\right>\big)\ogreaterthan\left<q\right>=\langle f^{:C\rightarrow B}\rightarrow p\bef f\bef q\rangle\quad.
\]

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 Using Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pair-product-distributive-law-rev"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c) proved below, we have:
\begin_inset Formula 
\[
\text{rev}\big((\text{rev}\left<p\right>)\ogreaterthan\left<q\right>\big)=p\ogreaterthan(\text{rev}\left<q\right>)\quad.
\]

\end_inset

So, we just need to reverse the relation found at the end of part 
\series bold
(b)
\series default
 above: 
\begin_inset Formula 
\[
\left<p\right>\ogreaterthan\big(\text{rev}\left<q\right>\big)=\text{rev}\langle f^{:C\rightarrow B}\rightarrow p\bef f\bef q\rangle\quad.
\]

\end_inset

 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Plain Layout
We have defined several operations on relations: the function lifting 
\begin_inset Formula $\left<f\right>$
\end_inset

, the reversal (
\begin_inset Formula $\text{rev}$
\end_inset

), and four binary operations (
\begin_inset Formula $\circ$
\end_inset

, 
\begin_inset Formula $\boxtimes$
\end_inset

, 
\begin_inset Formula $\boxplus$
\end_inset

, 
\begin_inset Formula $\ogreaterthan$
\end_inset

).
 To illustrate the usefulness of these operations, we will prove a number
 of their properties.
 All these properties have the form of distributive laws for two of these
 operations.
 We already proved one of these distributive laws in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-reverse-relation-properties"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c).
 We will now prove other laws that will be used below.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-pair-product-distributive-law"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pair-product-distributive-law"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
For any functions 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 and 
\begin_inset Formula $g^{:C\rightarrow D}$
\end_inset

, the following distributive laws hold:
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 
\begin_inset Formula $\left<f\boxtimes g\right>=\left<f\right>\boxtimes\left<g\right>$
\end_inset

, both relations having the type 
\begin_inset Formula $A\times C\leftrightarrow B\times D$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 
\begin_inset Formula $\left<f\boxplus g\right>=\left<f\right>\boxplus\left<g\right>$
\end_inset

, both relations having the type 
\begin_inset Formula $A+C\leftrightarrow B+D$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
Consider arbitrary values 
\begin_inset Formula $a^{:A}$
\end_inset

, 
\begin_inset Formula $b^{:B}$
\end_inset

, 
\begin_inset Formula $c^{:C}$
\end_inset

, and 
\begin_inset Formula $d^{:D}$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 By definitions of the pair product for functions and for relations, we
 have:
\begin_inset Formula 
\begin{align*}
 & (a\times c,b\times d)\in\left<f\boxtimes g\right>\text{ means }b\times d=(f\boxtimes g)(a\times c)=f(a)\times g(c)\quad,\\
 & (a\times c,b\times d)\in\left<f\right>\boxtimes\left<g\right>\text{ means }(a,b)\in\left<f\right>\text{ and }(c,d)\in\left<g\right>\quad\text{or equivalently}:\,b=f(a)\text{ and }d=g(c)\quad.
\end{align*}

\end_inset

The two conditions are now the same.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 By definitions of the pair co-product for functions and for relations,
 we have:
\begin_inset Formula 
\begin{align*}
 & (a+\bbnum 0,b+\bbnum 0)\in\left<f\boxplus g\right>\text{ means }b=f(a)\quad,\quad\quad(\bbnum 0+c,\bbnum 0+d)\in\left<f\boxplus g\right>\text{ means }d=g(c)\quad,\\
 & (a+\bbnum 0,b+\bbnum 0)\in\left<f\right>\boxplus\left<g\right>\text{ means }(a,b)\in\left<f\right>\quad,\quad\quad(\bbnum 0+c,\bbnum 0+d)\in\left<f\boxplus g\right>\text{ means }(c,d)\in\left<g\right>\quad,
\end{align*}

\end_inset

while all other combinations of disjunctive values (say, 
\begin_inset Formula $a+\bbnum 0$
\end_inset

 with 
\begin_inset Formula $\bbnum 0+d$
\end_inset

) will not belong to these relations.
 We find that the two conditions are the same.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-pair-product-distributive-law-rev"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pair-product-distributive-law-rev"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
For any relations 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 and 
\begin_inset Formula $s^{:C\leftrightarrow D}$
\end_inset

, the following distributive laws hold:
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 
\begin_inset Formula $\text{rev}\left(r\boxtimes s\right)=\text{rev}\left(r\right)\boxtimes\text{rev}\left(s\right)$
\end_inset

, both relations having the type 
\begin_inset Formula $B\times D\leftrightarrow A\times C$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 
\begin_inset Formula $\text{rev}\left(r\boxplus s\right)=\text{rev}\left(r\right)\boxplus\text{rev}\left(s\right)$
\end_inset

, both relations having the type 
\begin_inset Formula $B+D\leftrightarrow A+C$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(c)
\series default
 
\begin_inset Formula $\text{rev}\left(r\ogreaterthan s\right)=\text{rev}\left(r\right)\ogreaterthan\text{rev}\left(s\right)$
\end_inset

, both relations having the type 
\begin_inset Formula $B\rightarrow D\leftrightarrow A\rightarrow C$
\end_inset

.
\end_layout

\begin_layout Plain Layout
The analogous distributive law for 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

rev
\end_layout

\end_inset

 and 
\begin_inset Formula $\circ$
\end_inset

 was already proved in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-reverse-relation-properties"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c).
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
Consider arbitrary values 
\begin_inset Formula $a^{:A}$
\end_inset

, 
\begin_inset Formula $b^{:B}$
\end_inset

, 
\begin_inset Formula $c^{:C}$
\end_inset

, 
\begin_inset Formula $d^{:D}$
\end_inset

, 
\begin_inset Formula $f^{:B\rightarrow D}$
\end_inset

, and 
\begin_inset Formula $g^{:A\rightarrow C}$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 Write the definitions of the relations in the two sides of the law:
\begin_inset Formula 
\begin{align*}
 & (b\times d,a\times c)\in\text{rev}\left(r\boxtimes s\right)\text{ means }(a\times c,b\times d)\in r\boxtimes s\quad\text{or equivalently}:\quad(a,b)\in r\text{ and }(c,d)\in s\quad,\\
 & (b\times d,a\times c)\in\text{rev}\left(r\right)\boxtimes\text{rev}\left(s\right)\text{ means }(b,a)\in\text{rev}\left(r\right)\text{ and }(d,c)\in\text{rev}\left(s\right)\quad.
\end{align*}

\end_inset

The two conditions are now equivalent.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 Write the definitions of the relations in the two sides of the law:
\begin_inset Formula 
\begin{align*}
 & (b+\bbnum 0,a+\bbnum 0)\in\text{rev}\left(r\boxplus s\right)\text{ means }(a+\bbnum 0,b+\bbnum 0)\in r\boxplus s\quad\text{or}:\quad(a,b)\in r\quad,\\
 & (b+\bbnum 0,a+\bbnum 0)\in\text{rev}\left(r\right)\boxplus\text{rev}\left(s\right)\text{ means }(b,a)\in\text{rev}\left(r\right)\quad\text{or}:\quad(a,b)\in r\quad;\\
 & (\bbnum 0+d,\bbnum 0+c)\in\text{rev}\left(r\boxplus s\right)\text{ means }(\bbnum 0+c,\bbnum 0+d)\in r\boxplus s\quad\text{or}:\quad(c,d)\in s\quad,\\
 & (\bbnum 0+d,\bbnum 0+c)\in\text{rev}\left(r\right)\boxplus\text{rev}\left(s\right)\text{ means }(d,c)\in\text{rev}\left(s\right)\quad\text{or}:\quad(c,d)\in s\quad.
\end{align*}

\end_inset

The two conditions are now equivalent.
\end_layout

\begin_layout Plain Layout

\series bold
(c)
\series default
 Write the definitions of the relations in the two sides of the law:
\begin_inset Formula 
\begin{align*}
 & (f^{:B\rightarrow D},g^{:A\rightarrow C})\in\text{rev}\left(r\ogreaterthan s\right)\text{ means if }(x^{:A},y^{:B})\in r\text{ then }(g(x),f(y))\in s\quad,\\
 & (f,g)\in\text{rev}\left(r\right)\ogreaterthan\text{rev}\left(s\right)\text{ means if }(y^{:B},x^{:A})\in\text{rev}\left(r\right)\text{ then }(f(y),g(x))\in\text{rev}\left(s\right)\quad.
\end{align*}

\end_inset

The two conditions are now equivalent.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-relational-composition-distributive-law"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-composition-distributive-law"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
For any relations 
\begin_inset Formula $r^{:A_{1}\leftrightarrow B_{1}}$
\end_inset

, 
\begin_inset Formula $s^{:B_{1}\leftrightarrow C_{1}}$
\end_inset

, 
\begin_inset Formula $u^{:A_{2}\leftrightarrow B_{2}}$
\end_inset

, and 
\begin_inset Formula $v^{:B_{2}\leftrightarrow C_{2}}$
\end_inset

, the following distributive laws hold:
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 
\begin_inset Formula $(r\circ s)\boxtimes(u\circ v)=(r\boxtimes u)\circ(s\boxtimes v)$
\end_inset

, both relations having the type 
\begin_inset Formula $A_{1}\times A_{2}\leftrightarrow C_{1}\times C_{2}$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 
\begin_inset Formula $(r\circ s)\boxplus(u\circ v)=(r\boxplus u)\circ(s\boxplus v)$
\end_inset

, both relations having the type 
\begin_inset Formula $A_{1}+A_{2}\leftrightarrow C_{1}+C_{2}$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(c)
\series default
 The relation 
\begin_inset Formula $(r\circ s)\ogreaterthan(u\circ v)$
\end_inset

 is 
\emph on
not
\emph default
 equivalent to 
\begin_inset Formula $(r\ogreaterthan u)\circ(s\ogreaterthan v)$
\end_inset

.
 For any values 
\begin_inset Formula $p^{:A_{1}\rightarrow A_{2}}$
\end_inset

 and 
\begin_inset Formula $q^{:C_{1}\rightarrow C_{2}}$
\end_inset

, if 
\begin_inset Formula $\left(p,q\right)\in(r\ogreaterthan u)\circ(s\ogreaterthan v)$
\end_inset

 then 
\begin_inset Formula $\left(p,q\right)\in(r\circ s)\ogreaterthan(u\circ v)$
\end_inset

, but the converse does not hold.
\end_layout

\begin_layout Plain Layout
*** This is used in D.3.4.4 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-relation-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and D.3.4.7 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-relation-laws"
plural "false"
caps "false"
noprefix "false"

\end_inset

, so we need to revise those proofs or to prove a weaker version of the
 distributive law here.
 It's weird that the distributive law does not hold but we are able to obtain
 other laws that use it!
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
Consider arbitrary values 
\begin_inset Formula $a_{1}^{:A_{1}}$
\end_inset

, 
\begin_inset Formula $a_{2}^{:A_{2}}$
\end_inset

, 
\begin_inset Formula $c_{1}^{:C_{1}}$
\end_inset

, and 
\begin_inset Formula $c_{2}^{:C_{2}}$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 Write the conditions for 
\begin_inset Formula $(a_{1}\times a_{2},c_{1}\times c_{2})$
\end_inset

 to be in the relations 
\begin_inset Formula $(r\circ s)\boxtimes(u\circ v)$
\end_inset

 and 
\begin_inset Formula $(r\boxtimes u)\circ(s\boxtimes v)$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & (a_{1}\times a_{2},c_{1}\times c_{2})\in(r\circ s)\boxtimes(u\circ v)\text{ means }(a_{1},c_{1})\in\gunderline{r\circ s}\text{ and }(a_{2},c_{2})\in\gunderline{u\circ v}\quad,\\
\text{rewrite}:\quad & \quad\exists b_{1}^{:B_{1}},b_{2}^{:B_{2}}\text{ such that}:\quad(a_{1},b_{1})\in r\quad,\quad(b_{1},c_{1})\in s\quad,\quad(a_{2},b_{2})\in u\quad,\quad(b_{2},c_{2})\in v\quad;\\
 & (a_{1}\times a_{2},c_{1}\times c_{2})\in(r\boxtimes u)\circ(s\boxtimes v)\text{ means }\exists(b_{1}\times b_{2})^{:B_{1}\times B_{2}}\text{ such that}:\\
 & \quad\quad(a_{1}\times a_{2},b_{1}\times b_{2})\in\gunderline{r\boxtimes u}\text{ and }(b_{1}\times b_{2},c_{1}\times c_{2})\in\gunderline{s\boxtimes v}\quad,\\
\text{rewrite}:\quad & \quad(a_{1},b_{1})\in r\quad,\quad(a_{2},b_{2})\in u\quad,\quad(b_{1},c_{1})\in s\quad,\quad(b_{2},c_{2})\in v\quad.
\end{align*}

\end_inset

We see that the two conditions are equivalent.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 Values 
\begin_inset Formula $x^{:A_{1}+A_{2}}$
\end_inset

 and 
\begin_inset Formula $z^{:C_{1}+C_{2}}$
\end_inset

 belong to the disjunctive relation 
\begin_inset Formula $(r\circ s)\boxplus(u\circ v)$
\end_inset

 if:
\begin_inset Formula 
\begin{align*}
\text{either}:\quad & x=a_{1}+\bbnum 0\quad,\quad z=c_{1}+\bbnum 0\quad,\quad(a_{1},c_{1})\in r\circ s\quad;\\
\text{or}:\quad & x=\bbnum 0+a_{2}\quad,\quad z=\bbnum 0+c_{2}\quad,\quad(a_{2},c_{2})\in u\circ v\quad.
\end{align*}

\end_inset

Writing out the definitions of 
\begin_inset Formula $r\circ s$
\end_inset

 and 
\begin_inset Formula $u\circ v$
\end_inset

, we get the equivalent conditions:
\begin_inset Formula 
\begin{align*}
\text{either}:\quad & x=a_{1}+\bbnum 0\quad,\quad z=c_{1}+\bbnum 0\quad,\quad\exists b_{1}^{:B_{1}}\text{ such that }:\quad(a_{1},b_{1})\in r\quad,\quad(b_{1},c_{1})\in s\quad;\\
\text{or}:\quad & x=\bbnum 0+a_{2}\quad,\quad z=\bbnum 0+c_{2}\quad,\quad\exists b_{2}^{:B_{2}}\text{ such that }:\quad(a_{2},b_{2})\in u\quad,\quad(b_{2},c_{2})\in v\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Plain Layout
The same values 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $z$
\end_inset

 belong to the relation 
\begin_inset Formula $(r\boxplus u)\circ(s\boxplus v)$
\end_inset

 if:
\begin_inset Formula 
\[
\exists y^{:B_{1}+B_{2}}\text{ such that }:\quad(x,y)\in r\boxplus u\quad,\quad(y,z)\in s\boxplus v\quad.
\]

\end_inset

We obtain two cases where all of 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

, 
\begin_inset Formula $z$
\end_inset

 are either on the left or on the right of their disjunctive types:
\begin_inset Formula 
\begin{align*}
\text{either}:\quad & x=a_{1}+\bbnum 0\quad,\quad y=b_{1}^{:B_{1}}+\bbnum 0\quad,\quad z=c_{1}+\bbnum 0\quad,\quad(a_{1},b_{1})\in r\quad,\quad(b_{1},c_{1})\in s\quad;\\
\text{or}:\quad & x=\bbnum 0+a_{2}\quad,\quad y=\bbnum 0+b_{2}^{:B_{2}}\quad,\quad z=\bbnum 0+c_{2}\quad,\quad(a_{2},b_{2})\in u\quad,\quad(b_{2},c_{2})\in v\quad.
\end{align*}

\end_inset

These conditions are the same as the conditions for 
\begin_inset Formula $(x,z)\in(r\circ s)\boxplus(u\circ v)$
\end_inset

.
 
\end_layout

\begin_layout Plain Layout

\series bold
(c)
\series default
 First consider the relation 
\begin_inset Formula $(r\ogreaterthan u)\circ(s\ogreaterthan v)$
\end_inset

 and look at the condition 
\begin_inset Formula $(p,q)\in(r\ogreaterthan u)\circ(s\ogreaterthan v)$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & (p,q)\in(r\ogreaterthan u)\circ(s\ogreaterthan v)\quad\text{ means }\quad\exists f^{:B_{1}\rightarrow B_{2}}\text{ with }(p,f)\in\gunderline{r\ogreaterthan u}\text{ and }(f,q)\in\gunderline{s\ogreaterthan v}\quad;\\
\text{rewrite}:\quad & \quad\exists f^{:B_{1}\rightarrow B_{2}}\quad\text{ such that }\quad\forall\big(a^{:A_{1}},b^{:B_{1}}\big)\quad:\quad\text{ if }(a,b)\in r\text{ then }(p(a),f(b))\in u\\
 & \quad\quad\text{and }\quad\forall\big(b^{:B_{1}},c^{:C_{1}}\big)\quad:\quad\text{ if }(b,c)\in s\text{ then }(f(b),q(c))\in v\quad.
\end{align*}

\end_inset

In the last formula, the conditions for arbitrary values 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $c$
\end_inset

 may be brought together:
\begin_inset Formula 
\begin{align}
 & (p,q)\in(r\ogreaterthan u)\circ(s\ogreaterthan v)\quad\text{ means }\quad\exists f^{:B_{1}\rightarrow B_{2}}\quad\text{ such that }\forall\big(a^{:A_{1}},b^{:B_{1}},c^{:C_{1}}\big)\quad:\quad\nonumber \\
 & \quad\text{ if }(a,b)\in r\text{ and }(b,c)\in s\text{ then }(p(a),f(b))\in u\text{ and }(f(b),q(c))\in v\quad.\label{eq:composition-of-pair-mappers-derivation1}
\end{align}

\end_inset


\end_layout

\begin_layout Plain Layout
Turning now to the relation 
\begin_inset Formula $(r\circ s)\ogreaterthan(u\circ v)$
\end_inset

, we write the condition 
\begin_inset Formula $\left(p,q\right)\in(r\circ s)\ogreaterthan(u\circ v)$
\end_inset

 as:
\begin_inset Formula 
\begin{align*}
 & \left(p,q\right)\in(r\circ s)\ogreaterthan(u\circ v)\quad\text{ means }\quad\forall\big(a^{:A_{1}},c^{:C_{1}}\big):\,\text{if }(a,c)\in r\circ s\text{ then }(p(a),q(c))\in u\circ v\quad;\\
\text{rewrite}:\quad & \quad\text{if }\exists b_{1}^{:B_{1}}\text{ with }(a,b_{1})\in r\text{ and }(b_{1},c)\in s\text{ then }\exists b_{2}^{:B_{2}}\text{ with }(p(a),b_{2})\in u\text{ and }(b_{2},q(c))\in v\quad.
\end{align*}

\end_inset

The last condition requires the existence of a value 
\begin_inset Formula $b_{2}^{:B_{2}}$
\end_inset

 given the existence of a value 
\begin_inset Formula $b_{1}^{:B_{1}}$
\end_inset

.
 This differs from Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:composition-of-pair-mappers-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) where the last condition requires the existence of a 
\emph on
function
\emph default
 of type 
\begin_inset Formula $B_{1}\rightarrow B_{2}$
\end_inset

.
 How can we make these two conditions more similar? The condition for 
\begin_inset Formula $\left(p,q\right)\in(r\circ s)\ogreaterthan(u\circ v)$
\end_inset

 says that we need to find a value 
\begin_inset Formula $b_{2}$
\end_inset

 for any given value of 
\begin_inset Formula $b_{1}$
\end_inset

 satisfying 
\begin_inset Formula $(a,b_{1})\in r$
\end_inset

 and 
\begin_inset Formula $(b_{1},c)\in s$
\end_inset

.
 This is equivalent to having a function 
\begin_inset Formula $f:B_{1}\rightarrow B_{2}$
\end_inset

 such that 
\begin_inset Formula $b_{2}=f(b_{1})$
\end_inset

.
 (We only need to have 
\begin_inset Formula $b_{2}=f(b_{1})$
\end_inset

 for values 
\begin_inset Formula $b_{1}$
\end_inset

 satisfying the conditions 
\begin_inset Formula $(a,b_{1})\in r$
\end_inset

 and 
\begin_inset Formula $(b_{1},c)\in s$
\end_inset

.
 The value 
\begin_inset Formula $f(b_{1})$
\end_inset

 may be arbitrary for other 
\begin_inset Formula $b_{1}$
\end_inset

.) So, renaming 
\begin_inset Formula $b_{1}$
\end_inset

 to 
\begin_inset Formula $b$
\end_inset

, we may rewrite the last formula as:
\begin_inset Formula 
\begin{align}
 & (p,q)\in(r\circ s)\ogreaterthan(u\circ v)\quad\text{ means }\quad\forall\big(a^{:A_{1}},c^{:C_{1}}\big)\quad\exists f^{:B_{1}\rightarrow B_{2}}\quad\text{ such that }\quad\forall b^{:B_{1}}\quad:\nonumber \\
 & \quad\text{if }(a,b)\in r\text{ and }(b,c)\in s\text{ then }(x(a),f(b))\in u\text{ and }(f(b),z(c))\in v\quad.\label{eq:composition-of-pair-mappers-derivation2}
\end{align}

\end_inset


\end_layout

\begin_layout Plain Layout
The difference between Eqs.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:composition-of-pair-mappers-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:composition-of-pair-mappers-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is now only in the order of quantifiers: 
\begin_inset Formula $\exists f\forall(a,b,c)$
\end_inset

 instead of 
\begin_inset Formula $\forall(a,c)\exists f\forall b$
\end_inset

.
 The conditions after the quantifier are the same in both formulas.
\end_layout

\begin_layout Plain Layout
Let us show that Eq.
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:composition-of-pair-mappers-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) follows from Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:composition-of-pair-mappers-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Suppose we have 
\begin_inset Formula $\exists f.\,\forall(a,b,c).\,S(f,a,b,c)$
\end_inset

 where 
\begin_inset Formula $S(f,a,b,c)$
\end_inset

 is some statement about 
\begin_inset Formula $f$
\end_inset

, 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $c$
\end_inset

.
 This gives is a certain function 
\begin_inset Formula $f$
\end_inset

.
 We will make the property 
\begin_inset Formula $\forall(a,c).\,\exists f.\,\forall b.\,S(f,a,b,c)$
\end_inset

 also hold if we use the same 
\begin_inset Formula $f$
\end_inset

 (regardless of 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $c$
\end_inset

).
\end_layout

\begin_layout Plain Layout
The converse is not always true: Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:composition-of-pair-mappers-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) does not follow from Eq.
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:composition-of-pair-mappers-derivation2"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Accordingly, the relations 
\begin_inset Formula $(r\circ s)\ogreaterthan(u\circ v)$
\end_inset

 and 
\begin_inset Formula $(r\ogreaterthan u)\circ(s\ogreaterthan v)$
\end_inset

 are in general 
\emph on
not
\emph default
 equivalent.
 
\end_layout

\begin_layout Plain Layout
As an explicit example, consider a constant-valued function 
\begin_inset Formula $h^{:A\rightarrow B}\triangleq\_^{:A}\rightarrow b_{0}$
\end_inset

 where 
\begin_inset Formula $b_{0}$
\end_inset

 is a fixed value of type 
\begin_inset Formula $B$
\end_inset

, and set 
\begin_inset Formula $r=v=\left<h\right>$
\end_inset

.
 For simplicity, choose 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $u$
\end_inset

 to be identity relations (
\begin_inset Formula $s\triangleq\text{id}^{:B\leftrightarrow B}$
\end_inset

 and 
\begin_inset Formula $u\triangleq\text{id}^{:A\leftrightarrow A}$
\end_inset

).
 Then compare the following two relations:
\begin_inset Formula 
\begin{align*}
 & t_{1}:A\rightarrow A\leftrightarrow B\rightarrow B\quad,\quad\quad t_{1}\triangleq(r\circ s)\ogreaterthan(u\circ v)=\big(\left<h\right>\circ\text{id}^{:B\leftrightarrow B}\big)\ogreaterthan\big(\text{id}^{:A\leftrightarrow A}\circ\left<h\right>\big)\quad,\\
 & t_{2}:A\rightarrow A\leftrightarrow B\rightarrow B\quad,\quad\quad t_{2}\triangleq(r\ogreaterthan u)\circ(s\ogreaterthan v)=\big(\left<h\right>\ogreaterthan\text{id}^{:A\leftrightarrow A}\big)\circ\big(\text{id}^{:B\leftrightarrow A}\ogreaterthan\left<h\right>\big)\quad.
\end{align*}

\end_inset

We can simplify 
\begin_inset Formula $t_{1}$
\end_inset

 using the identity law from Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-identity-composition-laws-of-relations"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\begin_inset Formula 
\[
t_{1}=\left<h\right>\ogreaterthan\left<h\right>\quad.
\]

\end_inset

 We need to write out the conditions for any 
\begin_inset Formula $p^{:A\rightarrow A}$
\end_inset

 and 
\begin_inset Formula $q^{:B\rightarrow B}$
\end_inset

 to belong to 
\begin_inset Formula $t_{1}$
\end_inset

 or to 
\begin_inset Formula $t_{2}$
\end_inset

.
 Begin with 
\begin_inset Formula $t_{1}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & (p,q)\in t_{1}\quad\text{ means }\quad\forall a^{:A},b^{:B}.\,\text{ if }(a,b)\in\left<h\right>\text{ then }(p(a),q(b))\in\left<h\right>\quad,\\
\text{or equivalently}:\quad & \quad\text{ if }h(a)=b\text{ then }h(p(a))=q(b)\quad.
\end{align*}

\end_inset

Since 
\begin_inset Formula $h(x)=b_{0}$
\end_inset

 for any 
\begin_inset Formula $x$
\end_inset

, we can simplify the last condition to 
\begin_inset Formula $q(b_{0})=b_{0}$
\end_inset

.
 There are no restrictions on 
\begin_inset Formula $p$
\end_inset

.
 So, any function 
\begin_inset Formula $p^{:A\rightarrow A}$
\end_inset

 and any 
\begin_inset Formula $q^{:B\rightarrow B}$
\end_inset

 belong to 
\begin_inset Formula $t_{1}$
\end_inset

 as long as 
\begin_inset Formula $q(b_{0})=b_{0}$
\end_inset

.
\end_layout

\begin_layout Plain Layout
Turning now to the condition for 
\begin_inset Formula $\left(p,q\right)\in t_{2}$
\end_inset

, we write:
\begin_inset Formula 
\[
(p,q)\in t_{2}\quad\text{ means }\quad\exists f^{:B\rightarrow A}\text{ such that }(p,f)\in\left<h\right>\ogreaterthan\text{id}^{:A\leftrightarrow A}\text{ and }(f,q)\in\text{id}^{:B\leftrightarrow B}\ogreaterthan\left<h\right>\quad.
\]

\end_inset

Write the definitions of 
\begin_inset Formula $\left<h\right>\ogreaterthan\text{id}$
\end_inset

 and 
\begin_inset Formula $\text{id}\ogreaterthan\left<h\right>$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & (p,f)\in\left<h\right>\ogreaterthan\text{id}^{:A\leftrightarrow A}\quad\text{ means }\quad\forall a^{:A},b^{:B}.\,\text{ if }(a,b)\in\left<h\right>\text{ then }p(a)=f(b)\quad,\\
 & (f,q)\in\text{id}^{:B\leftrightarrow B}\ogreaterthan\left<h\right>\quad\text{ means }\quad\forall b_{1}^{:B},b_{2}^{:B}.\,\text{ if }b_{1}=b_{2}\text{ then }(f(b_{1}),q(b_{2}))\in\left<h\right>\quad.
\end{align*}

\end_inset

Simplifying these conditions, we get:
\begin_inset Formula 
\begin{align*}
 & (p,f)\in\left<h\right>\ogreaterthan\text{id}^{:A\leftrightarrow A}\quad\text{ means }\quad\forall a^{:A}.\,p(a)=f(h(a))=f(b_{0})\quad,\quad\quad\text{or}:\quad p=\_^{:A}\rightarrow f(b_{0})\quad,\\
 & (f,q)\in\text{id}^{:B\leftrightarrow B}\ogreaterthan\left<h\right>\quad\text{ means }\quad\forall b^{:B}.\,h(f(b))=q(b)\quad,\quad\quad\text{or}:\quad q=\_^{:B}\rightarrow b_{0}\quad.
\end{align*}

\end_inset

The only use of 
\begin_inset Formula $f$
\end_inset

 is for computing 
\begin_inset Formula $f(b_{0})$
\end_inset

, which is a value of type 
\begin_inset Formula $A$
\end_inset

 that we can denote by 
\begin_inset Formula $a_{0}$
\end_inset

.
 So, the condition for 
\begin_inset Formula $\left(p,q\right)\in t_{2}$
\end_inset

 becomes:
\begin_inset Formula 
\[
(p,q)\in t_{2}\quad\text{ means }\quad\exists a_{0}^{:A}\text{ such that }p=\_^{:A}\rightarrow a_{0}\text{ and }q=\_^{:B}\rightarrow b_{0}\quad.
\]

\end_inset

Only constant-valued functions 
\begin_inset Formula $p$
\end_inset

, 
\begin_inset Formula $q$
\end_inset

 belong to 
\begin_inset Formula $t_{2}$
\end_inset

, and only if 
\begin_inset Formula $q=h$
\end_inset

.
 We find that 
\begin_inset Formula $t_{2}$
\end_inset

 is stronger than 
\begin_inset Formula $t_{1}$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-relational-identity-distributive-laws"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-identity-distributive-laws"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
The identity relation (
\begin_inset Formula $\text{id}^{:Z\leftrightarrow Z}$
\end_inset

) satisfies:
\begin_inset Formula 
\[
\text{id}\circ\text{id}=\text{id}\quad,\quad\text{id}\boxtimes\text{id}=\text{id}^{:Z\times Z\leftrightarrow Z\times Z}\quad,\quad\quad\text{id}\boxplus\text{id}=\text{id}^{:Z+Z\leftrightarrow Z+Z}\quad,\quad\quad\text{id}\ogreaterthan\text{id}=\text{id}^{:Z\rightarrow Z\leftrightarrow Z\rightarrow Z}\quad.
\]

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
The property 
\begin_inset Formula $\text{id}\circ\text{id}=\text{id}$
\end_inset

 follows from the identity law in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-identity-composition-laws-of-relations"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Plain Layout
For other properties, assume arbitrary values 
\begin_inset Formula $a^{:Z}$
\end_inset

, 
\begin_inset Formula $b^{:Z}$
\end_inset

, 
\begin_inset Formula $c^{:Z}$
\end_inset

, and 
\begin_inset Formula $d^{:Z}$
\end_inset

.
 To verify 
\begin_inset Formula $\text{id}\boxtimes\text{id}=\text{id}$
\end_inset

, write:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & (a\times b,c\times d)\in\text{id}\boxtimes\text{id}\quad\text{ means }\quad(a,c)\in\text{id}\text{ and }(b,d)\in\text{id}\quad,\\
\text{or equivalently}:\quad & (a\times b,c\times d)\in\text{id}\boxtimes\text{id}\quad\text{ means }\quad a=c\text{ and }b=d\quad;\\
\text{right-hand side}:\quad & (a\times b,c\times d)\in\text{id}^{:Z\times Z\leftrightarrow Z\times Z}\quad\text{ means }\quad a\times b=c\times d\quad.
\end{align*}

\end_inset

The conditions (
\begin_inset Formula $a\times b=c\times d$
\end_inset

) and (
\begin_inset Formula $a=c$
\end_inset

 and 
\begin_inset Formula $b=d$
\end_inset

) are equivalent.
\end_layout

\begin_layout Plain Layout
To verify 
\begin_inset Formula $\text{id}\boxplus\text{id}=\text{id}$
\end_inset

, write the two cases where values are in the relation 
\begin_inset Formula $\text{id}\boxplus\text{id}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & (a+\bbnum 0,b+\bbnum 0)\in\text{id}\boxplus\text{id}\quad\text{ when }\quad(a,b)\in\text{id}\quad\text{or equivalently}:\quad a=b\quad;\\
 & (a+\bbnum 0,b+\bbnum 0)\in\text{id}^{:Z+Z\leftrightarrow Z+Z}\quad\text{ when }\quad a+\bbnum 0=b+\bbnum 0\quad\text{ or equivalently }:\quad a=b\quad;\\
 & (\bbnum 0+c,\bbnum 0+d)\in\text{id}\boxplus\text{id}\quad\text{ when }\quad(c,d)\in\text{id}\quad\text{or equivalently}:\quad c=d\quad;\\
 & (\bbnum 0+c,\bbnum 0+d)\in\text{id}^{:Z+Z\leftrightarrow Z+Z}\quad\text{ when }\bbnum 0+c=\bbnum 0+d\quad\text{ or equivalently }:\quad c=d\quad.
\end{align*}

\end_inset

In both cases, the conditions are the same.
\end_layout

\begin_layout Plain Layout
To verify 
\begin_inset Formula $\text{id}\ogreaterthan\text{id}=\text{id}$
\end_inset

, assume arbitrary functions 
\begin_inset Formula $f^{:Z\rightarrow Z}$
\end_inset

 and 
\begin_inset Formula $g^{:Z\rightarrow Z}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & (f,g)\in\text{id}\ogreaterthan\text{id}\quad\text{ means }\quad\text{whenever }(a,b)\in\text{id}\text{ then }(f(a),g(b))\in\text{id}\quad,\\
\text{or equivalently}:\quad & \quad(f,g)\in\text{id}\ogreaterthan\text{id}\quad\text{ means }\quad\text{whenever }a=b\text{ then }f(a)=g(b)\quad,\\
\text{or equivalently}:\quad & \quad(f,g)\in\text{id}\ogreaterthan\text{id}\quad\text{ means }\quad\text{for all }a^{:Z}\quad,\quad f(a)=g(a)\quad.\\
\text{right-hand side}:\quad & (f,g)\in\text{id}^{:Z\rightarrow Z\leftrightarrow Z\rightarrow Z}\quad\text{ means }f=g\quad.
\end{align*}

\end_inset

Two functions are equal when their results on any equal input arguments
 are equal.
 So, the condition 
\begin_inset Formula $f=g$
\end_inset

 is the same condition as 
\begin_inset Formula $f(a)=g(a)$
\end_inset

 for all 
\begin_inset Formula $a^{:Z}$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Strong dinaturality: definition and general properties
\begin_inset CommandInset label
LatexCommand label
name "subsec:Strong-dinaturality.-General-properties"

\end_inset


\end_layout

\begin_layout Standard
While the dinaturality law is often sufficient for proofs involving parametricit
y, some of the more complicated cases require a stronger property that we
 will study in the rest of this Appendix.
 As motivation, we begin by looking at the wedge law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) in more detail.
\end_layout

\begin_layout Standard
We have seen in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-wedge-law-from-parametricity"
plural "false"
caps "false"
noprefix "false"

\end_inset

 that fully parametric values automatically satisfy the wedge law.
 The proof showed that the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation is a consequence of the relation 
\begin_inset Formula $(x,y)\in\left<f\right>^{\updownarrow T}$
\end_inset

 where 
\begin_inset Formula $T^{A}\triangleq P^{A,A}$
\end_inset

.
 Note that the type diagrams for the wedge law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wedge-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

), the dinaturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

), and the commutativity law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:profunctor-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

), involve three relations between values 
\begin_inset Formula $x^{:P^{A,A}}$
\end_inset

 and 
\begin_inset Formula $y^{:P^{B,B}}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{a }\left(P,f\right)\text{-wedge relation}:\quad & x\triangleright f^{\uparrow P^{A,\bullet}}=y\triangleright f^{\downarrow P^{\bullet,B}}\quad,\quad\text{or}:\quad(x,y)\in\text{pull}\,(f^{\uparrow P},f^{\downarrow P})\quad,\\
\text{the left part of a dinaturality diagram}:\quad & \exists z^{:P^{B,A}}\quad\text{such that}\quad x=z\triangleright f^{\downarrow P^{\bullet,A}}\text{ and }y=z\triangleright f^{\uparrow P^{B,\bullet}}\quad,\\
\text{a relation }\left<f\right>\text{ lifted to }T:\quad & (x,y)\in\left<f\right>^{\updownarrow T}\quad.
\end{align*}

\end_inset

To make the notation shorter, we define the 
\series bold
pushout
\series default
 
\series bold
relation
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
pushout relation|textit
\end_layout

\end_inset

 denoted by 
\begin_inset Formula $\text{push}\,(p,q)$
\end_inset

:
\begin_inset Formula 
\[
(x^{:A},y^{:B})\in\text{push}\,(p,q)\text{ means }\exists z^{:C}\text{ such that }x=p(z)\text{ and }y=q(z)\quad.
\]

\end_inset

Here 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

 are any types and 
\begin_inset Formula $p^{:C\rightarrow A}$
\end_inset

 and 
\begin_inset Formula $q^{:C\rightarrow A}$
\end_inset

 are any given functions.
 The left fragment of the dinaturality diagram is then written as 
\begin_inset Formula $(x,y)\in\text{push}\,(f^{\downarrow P},f^{\uparrow P})$
\end_inset

.
\end_layout

\begin_layout Standard
The pullback and pushout relations may be used to reformulate the commutativity
 law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:profunctor-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) as: 
\begin_inset Formula 
\[
\text{for any }x^{:P^{A,A}},y^{:P^{B,B}}\quad:\quad\text{if}\quad(x,y)\in\text{push}\,(f^{\downarrow P},f^{\uparrow P})\quad\text{then}\quad(x,y)\in\text{pull}\,(f^{\uparrow P},f^{\downarrow P})\quad.
\]

\end_inset

We find that the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation, denoted by 
\begin_inset Formula $\text{pull}\,(f^{\uparrow P},f^{\downarrow P})$
\end_inset

 , is a consequence of both the lifted relation 
\begin_inset Formula $\left<f\right>^{\updownarrow T}$
\end_inset

 and of the relation 
\begin_inset Formula $\text{push}\,(f^{\downarrow P},f^{\uparrow P})$
\end_inset

, which we may call the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-pushout relation.
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-pushout relation is generally stronger than the lifted relation 
\begin_inset Formula $\left<f\right>^{\updownarrow T}$
\end_inset

:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-profunctor-pushout-entails-lifted-f"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-profunctor-pushout-entails-lifted-f"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
We assume a fully parametric profunctor 
\begin_inset Formula $P^{\bullet,\bullet}$
\end_inset

, arbitrary types 
\begin_inset Formula $X$
\end_inset

, 
\begin_inset Formula $Y$
\end_inset

, and arbitrary values 
\begin_inset Formula $x^{:P^{X,X}}$
\end_inset

, 
\begin_inset Formula $y^{:P^{Y,Y}}$
\end_inset

, and 
\begin_inset Formula $f^{:X\rightarrow Y}$
\end_inset

.
 If 
\begin_inset Formula $(x,y)\in\text{push}\,(f^{\downarrow P},f^{\uparrow P})$
\end_inset

 then 
\begin_inset Formula $(x,y)\in\left<f\right>^{\updownarrow T}$
\end_inset

 where 
\begin_inset Formula $T^{A}\triangleq P^{A,A}$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
The relation 
\begin_inset Formula $(x,y)\in\text{push}\,(f^{\downarrow P},f^{\uparrow P})$
\end_inset

 means that there exists 
\begin_inset Formula $z^{:P^{Y,X}}$
\end_inset

 such that 
\begin_inset Formula $x=z\triangleright f^{\downarrow P}$
\end_inset

 and 
\begin_inset Formula $y=z\triangleright f^{\uparrow P}$
\end_inset

.
 Rewrite the expressions for 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 using the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap
\end_layout

\end_inset

 method of 
\begin_inset Formula $P$
\end_inset

:
\begin_inset Formula 
\[
x=\text{xmap}_{P}(f)(\text{id})(z)\quad,\quad\quad y=\text{xmap}_{P}(\text{id})(f)(z)\quad.
\]

\end_inset

We need to show that 
\begin_inset Formula $(x,y)\in\left<f\right>^{\updownarrow T}$
\end_inset

, which we can write in terms of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap
\end_layout

\end_inset

 like this:
\begin_inset Formula 
\begin{equation}
\forall z^{:P^{Y,X}}:\quad\big(\text{xmap}_{P}(f)(\text{id})(z),\,\text{xmap}_{P}(\text{id})(f)(z)\big)\in\left<f\right>^{\updownarrow T}\quad.\label{eq:pushout-relation-entails-lifted-derivation1}
\end{equation}

\end_inset

This equation is similar to the relational naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-of-xmap"
plural "false"
caps "false"
noprefix "false"

\end_inset

) of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap
\end_layout

\end_inset

 that was used in the proof of Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-wedge-law-from-parametricity"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\begin_inset Formula 
\[
\forall(a,b,c,d)\quad:\quad(\text{xmap}_{P}^{A,B,C,D},\text{xmap}_{P}^{A^{\prime},B^{\prime},C^{\prime},D^{\prime}})\in(b\ogreaterthan a)\ogreaterthan(c\ogreaterthan d)\ogreaterthan(a,c)^{\updownarrow P}\ogreaterthan(b,d)^{\updownarrow P}\quad.
\]

\end_inset

As we did the proof of that statement, we will now choose specific types
 and relations in this law in order to derive Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:pushout-relation-entails-lifted-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 We begin by writing out the definition of 
\begin_inset Formula $\ogreaterthan$
\end_inset

:
\begin_inset Formula 
\begin{align}
 & \forall\big(a^{:A\leftrightarrow A^{\prime}},b^{:B\leftrightarrow B^{\prime}},c^{:C\leftrightarrow C^{\prime}},d^{:D\leftrightarrow D^{\prime}},g^{:B\rightarrow A},h^{:B^{\prime}\rightarrow A^{\prime}},k^{:C\rightarrow D},l^{:C^{\prime}\rightarrow D^{\prime}},x^{:P^{A,C}},y^{:P^{A^{\prime},C^{\prime}}}\big)\quad:\nonumber \\
 & \quad\text{if}\quad\quad(g,h)\in b\ogreaterthan a\quad,\quad(k,l)\in c\ogreaterthan d\quad,\quad\text{and}\quad(x,y)\in(a,c)^{\updownarrow P}\quad,\nonumber \\
 & \quad\text{then}\quad\quad\big(\text{xmap}_{P}(g)(k)(x),\,\text{xmap}_{P}(h)(l)(y)\big)\in(b,d)^{\updownarrow P}\quad.\label{eq:xmap-relational-law-derivation3}
\end{align}

\end_inset


\end_layout

\begin_layout Standard
The conclusion of Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:pushout-relation-entails-lifted-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is that two 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap(...)
\end_layout

\end_inset

 values are in the relation 
\begin_inset Formula $\left<f\right>^{\updownarrow T}$
\end_inset

.
 We can reproduce that conclusion using Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:xmap-relational-law-derivation3"
plural "false"
caps "false"
noprefix "false"

\end_inset

) if we set 
\begin_inset Formula $b=d=\left<f\right>$
\end_inset

 since, by Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-lifting-consistency-PAA"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we will then have 
\begin_inset Formula $(b,d)^{\updownarrow P}=(\left<f\right>,\left<f\right>)^{\updownarrow P}=\left<f\right>^{\updownarrow T}$
\end_inset

.
 The corresponding types need to be set as 
\begin_inset Formula $B=D=X$
\end_inset

 and 
\begin_inset Formula $B^{\prime}=D^{\prime}=Y$
\end_inset

.
\end_layout

\begin_layout Standard
Next, we need to find the values 
\begin_inset Formula $g$
\end_inset

, 
\begin_inset Formula $h$
\end_inset

, 
\begin_inset Formula $k$
\end_inset

, 
\begin_inset Formula $l$
\end_inset

, 
\begin_inset Formula $x$
\end_inset

, and 
\begin_inset Formula $y$
\end_inset

 such that the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

xmap(...)
\end_layout

\end_inset

 expressions in Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:xmap-relational-law-derivation3"
plural "false"
caps "false"
noprefix "false"

\end_inset

) reproduce those in Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:pushout-relation-entails-lifted-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\begin_inset Formula 
\[
\text{xmap}_{P}(g)(k)(x)=\text{xmap}_{P}(f)(\text{id})(z)\quad,\quad\quad\text{xmap}_{P}(h)(l)(y)=\text{xmap}_{P}(\text{id})(f)(z)\quad.
\]

\end_inset

It is clear that we need to set 
\begin_inset Formula $g=l=f$
\end_inset

, 
\begin_inset Formula $h=\text{id}$
\end_inset

, 
\begin_inset Formula $k=\text{id}$
\end_inset

, and 
\begin_inset Formula $x=y=z$
\end_inset

.
 This also implies that we set the types as 
\begin_inset Formula $B=C^{\prime}=X$
\end_inset

, 
\begin_inset Formula $A=D^{\prime}=Y$
\end_inset

, 
\begin_inset Formula $A^{\prime}=B^{\prime}=Y$
\end_inset

, and 
\begin_inset Formula $C=D=X$
\end_inset

.
\end_layout

\begin_layout Standard
Since we have 
\begin_inset Formula $x=y$
\end_inset

, the precondition 
\begin_inset Formula $(x,y)\in(a,c)^{\updownarrow P}$
\end_inset

 will hold if 
\begin_inset Formula $(a,c)^{\updownarrow P}$
\end_inset

 is an identity relation.
 To achieve that, we choose 
\begin_inset Formula $a=\text{id}$
\end_inset

 and 
\begin_inset Formula $c=\text{id}$
\end_inset

, which also means setting 
\begin_inset Formula $A=A^{\prime}=Y$
\end_inset

 and 
\begin_inset Formula $C=C^{\prime}=X$
\end_inset

.
 
\end_layout

\begin_layout Standard
Finally, we can check that the preconditions 
\begin_inset Formula $(g,h)\in b\ogreaterthan a$
\end_inset

 and 
\begin_inset Formula $(k,l)\in c\ogreaterthan d$
\end_inset

 in Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:xmap-relational-law-derivation3"
plural "false"
caps "false"
noprefix "false"

\end_inset

) will then hold automatically.
 So, we may use the conclusion of Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:xmap-relational-law-derivation3"
plural "false"
caps "false"
noprefix "false"

\end_inset

), which proves Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:pushout-relation-entails-lifted-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
It turns out that for some (but not all) profunctors 
\begin_inset Formula $P$
\end_inset

, the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation is 
\emph on
equivalent
\emph default
 to the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-pushout relation:
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-profunctor-pushout-property"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-profunctor-pushout-property"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
A profunctor 
\begin_inset Formula $P^{X,Y}$
\end_inset

 
\begin_inset Note Comment
status open

\begin_layout Plain Layout
empty arrow
\end_layout

\end_inset

 has the 
\series bold
pushout property
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
profunctor!pushout property
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pushout property of profunctors
\end_layout

\end_inset

 if the relation 
\begin_inset Formula $\text{push}\,(f^{\downarrow P},f^{\uparrow P})$
\end_inset

 is a
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement l
overhang 0in
width "41.5col%"
status open

\begin_layout Plain Layout
\begin_inset VSpace -230baselineskip%
\end_inset


\begin_inset Preview

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{2.3pc}\xyScaleX{1.5pc} & P^{A,A}\ar[d]\sb(0.4){f^{\uparrow P^{A,\bullet}}} & \ar@{}[d]\sb(0.4){\displaystyle \Rightarrow} & P^{B,A}\ar[r]\sp(0.55){f^{\downarrow P^{\bullet,A}}}\ar[d]\sb(0.4){f^{\uparrow P^{B,\bullet}}} & P^{A,A}\ar[d]\sb(0.4){f^{\uparrow P^{A,\bullet}}}\\
P^{B,B}\ar[r]\sp(0.6){f^{\downarrow P^{\bullet,B}}} & P^{A,B} &  & P^{B,B}\ar[r]\sp(0.6){f^{\downarrow P^{\bullet,B}}} & P^{A,B}
}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace -170baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
consequence of 
\begin_inset Formula $\text{pull}\,(f^{\uparrow P},f^{\downarrow P})$
\end_inset

.
 So, for any 
\begin_inset Formula $x^{:P^{A,A}}$
\end_inset

, 
\begin_inset Formula $y^{:P^{B,B}}$
\end_inset

:
\begin_inset Formula 
\[
\text{if }(x,y)\in\text{pull}\,(f^{\uparrow P},f^{\downarrow P})\text{ then }(x,y)\in\text{push}\,(f^{\downarrow P},f^{\uparrow P})\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
In other words, for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 and any values 
\begin_inset Formula $x^{:P^{A,A}}$
\end_inset

 and 
\begin_inset Formula $y^{:P^{B,B}}$
\end_inset

 in the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation (
\begin_inset Formula $x\triangleright f^{\uparrow P^{A,\bullet}}=y\triangleright f^{\downarrow P^{\bullet,B}}$
\end_inset

), we can compute a value 
\begin_inset Formula $p^{:P^{B,A}}$
\end_inset

 such that 
\begin_inset Formula $x=p\triangleright f^{\downarrow P^{\bullet,A}}$
\end_inset

 and 
\begin_inset Formula $y=p\triangleright f^{\uparrow P^{B,\bullet}}$
\end_inset

.
 The type diagram means that a wedge starting with arbitrary 
\begin_inset Formula $x^{:P^{A,A}}$
\end_inset

 and 
\begin_inset Formula $y^{:P^{B,B}}$
\end_inset

 can be always completed to a square that represents the profunctor commutativit
y law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:profunctor-commutativity-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
Below we will perform structural analysis for profunctors 
\begin_inset Formula $P$
\end_inset

 with a pushout property and give some examples.
 The significance of those 
\begin_inset Formula $P$
\end_inset

 is that we can obtain a property that is stronger than ordinary dinaturality:
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-strong-dinaturality"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-strong-dinaturality"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
A function 
\begin_inset Formula $t^{A}:P^{A,A}\rightarrow Q^{A,A}$
\end_inset

 is 
\series bold
strongly dinatural
\series default
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
strong dinaturality law
\end_layout

\end_inset

if for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, 
\begin_inset Formula $x^{:P^{A,A}}$
\end_inset

, and 
\begin_inset Formula $y^{:P^{B,B}}$
\end_inset

 the following property holds:
\begin_inset VSpace -30baselineskip%
\end_inset


\begin_inset Formula 
\begin{equation}
\text{when}\quad x\triangleright f^{\uparrow P^{A,\bullet}}=y\triangleright f^{\downarrow P^{\bullet,B}}\quad\text{ then}\quad x\triangleright t^{A}\triangleright f^{\uparrow Q^{A,\bullet}}=y\triangleright t^{B}\triangleright f^{\downarrow Q^{\bullet,B}}\quad.\label{eq:strong-dinaturality-law}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement i
overhang 0in
width "32col%"
status open

\begin_layout Plain Layout
\begin_inset VSpace -250baselineskip%
\end_inset


\begin_inset Preview

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{1.2pc}\xyScaleX{1.0pc}P^{A,A}\ar[rd]\sb(0.35){f^{\uparrow P^{A,\bullet}}\negthickspace\negthickspace}\ar[rr]\sp(0.5){t^{A}} &  & Q^{A,A}\ar[rd]\sp(0.5){f^{\uparrow Q^{A,\bullet}}}\\
 & P^{A,B} & \negthickspace\Rightarrow & Q^{A,B}\\
P^{B,B}\ar[ru]\sp(0.5){f^{\downarrow P^{\bullet,B}}\negthickspace\negthickspace\negthickspace}\ar[rr]\sp(0.5){t^{B}} &  & Q^{B,B}\ar[ru]\sb(0.65){\negthickspace\negthickspace f^{\downarrow Q^{\bullet,B}}}
}
\]

\end_inset


\end_layout

\end_inset


\begin_inset VSpace -200baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The strong dinaturality law is an equation (the 
\begin_inset Quotes eld
\end_inset

conclusion
\begin_inset Quotes erd
\end_inset

) that is required to hold only when some values satisfy another equation
 (the law's 
\begin_inset Quotes eld
\end_inset

precondition
\begin_inset Quotes erd
\end_inset

).
 The type diagram for that law, shown at left, is a truncated form of the
 type diagram for Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 The diagram starts with two arbitrary values of types 
\begin_inset Formula $P^{A,A}$
\end_inset

 and 
\begin_inset Formula $P^{B,B}$
\end_inset

.
 The implication symbol (
\begin_inset Formula $\Rightarrow$
\end_inset

) here means that the left part of the diagram is an assumption used by
 the right part.
\end_layout

\begin_layout Standard
In terms of the wedge relations, strong dinaturality's 
\begin_inset Quotes eld
\end_inset

precondition
\begin_inset Quotes erd
\end_inset

 is the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation for 
\begin_inset Formula $(x,y)$
\end_inset

, and the 
\begin_inset Quotes eld
\end_inset

conclusion
\begin_inset Quotes erd
\end_inset

 is the 
\begin_inset Formula $\left(Q,f\right)$
\end_inset

-wedge relation for 
\begin_inset Formula $(t^{A}(x),t^{B}(y))$
\end_inset

.
 So, the strong dinaturality condition
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong-dinaturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) can be expressed as a relation using the pair mapper (
\begin_inset Formula $\ogreaterthan$
\end_inset

): 
\begin_inset Formula 
\[
(t^{A},t^{B})\in\text{pull}\big(f^{\uparrow P^{A,\bullet}},f^{\downarrow P^{\bullet,B}}\big)\ogreaterthan\text{pull}\big(f^{\uparrow Q^{A,\bullet}},f^{\downarrow Q^{\bullet,B}}\big)\quad.
\]

\end_inset

For comparison, the ordinary dinaturality property of 
\begin_inset Formula $t$
\end_inset

 is written in a similar way as:
\begin_inset Formula 
\[
(t^{A},t^{B})\in\text{push}\,(f^{\downarrow P^{\bullet,A}},f^{\uparrow P^{B,\bullet}})\ogreaterthan\text{pull}\big(f^{\uparrow Q^{A,\bullet}},f^{\downarrow Q^{\bullet,B}}\big)\quad.
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-strong-dinaturality-pushout"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strong-dinaturality-pushout"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
If a profunctor 
\begin_inset Formula $P$
\end_inset

 has the pushout property and 
\begin_inset Formula $Q$
\end_inset

 is any profunctor then any fully parametric function 
\begin_inset Formula $t:\forall A.\,P^{A,A}\rightarrow Q^{A,A}$
\end_inset

 is strongly dinatural.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
By Statements
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-naturality-laws-from-wedge-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-wedge-law-from-parametricity"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the function 
\begin_inset Formula $t$
\end_inset

 satisfies the ordinary dinaturality law:
\begin_inset Formula 
\[
\text{if}\quad(x^{:P^{A,A}},y^{:P^{B,B}})\in\text{push}\,(f^{\downarrow P},f^{\uparrow P})\quad\text{then}\quad(t^{A}(x),t^{B}(y))\in\text{pull}\,(f^{\uparrow Q},f^{\downarrow Q})\quad.
\]

\end_inset

The pushout property of 
\begin_inset Formula $P$
\end_inset

 means:
\begin_inset Formula 
\[
\text{if}\quad(x^{:P^{A,A}},y^{:P^{B,B}})\in\text{pull}\,(f^{\uparrow P},f^{\downarrow P})\quad\text{then}\quad(x,y)\in\text{push}\,(f^{\downarrow P},f^{\uparrow P})\quad.
\]

\end_inset

Chaining the implications, we find:
\begin_inset Formula 
\[
\text{if}\quad(x^{:P^{A,A}},y^{:P^{B,B}})\in\text{pull}\,(f^{\uparrow P},f^{\downarrow P})\quad\text{then}\quad(t^{A}(x),t^{B}(y))\in\text{pull}\,(f^{\uparrow Q},f^{\downarrow Q})\quad.
\]

\end_inset

This is the strong dinaturality law of 
\begin_inset Formula $t$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
The name 
\begin_inset Quotes eld
\end_inset

strong dinaturality
\begin_inset Quotes erd
\end_inset

 suggests that this property is stronger than the ordinary dinaturality.
 Indeed, strongly dinatural transformations are always dinatural:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-strong-dinaturality-entails-dinaturality"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strong-dinaturality-entails-dinaturality"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 Any function 
\begin_inset Formula $t^{A}:P^{A,A}\rightarrow Q^{A,A}$
\end_inset

 satisfying Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong-dinaturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) will also satisfy Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 A natural transformation 
\begin_inset Formula $t^{A}:F^{A}\rightarrow G^{A}$
\end_inset

 (where 
\begin_inset Formula $F$
\end_inset

 and 
\begin_inset Formula $G$
\end_inset

 are both functors or both contrafunctors) is strongly dinatural.
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 A natural transformation 
\begin_inset Formula $t^{X,Y}:P^{X,Y}\rightarrow Q^{X,Y}$
\end_inset

 between profunctors 
\begin_inset Formula $P$
\end_inset

 and 
\begin_inset Formula $Q$
\end_inset

 gives a strongly dinatural transformation 
\begin_inset Formula $t^{A,A}:P^{A,A}\rightarrow Q^{A,A}$
\end_inset

 if we set 
\begin_inset Formula $X\triangleq A$
\end_inset

 and 
\begin_inset Formula $Y\triangleq A$
\end_inset

 in 
\begin_inset Formula $t^{X,Y}$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 The law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is an equality of functions of type 
\begin_inset Formula $P^{B,A}\rightarrow Q^{A,B}$
\end_inset

.
 We will now show that those functions will give equal results when applied
 to an arbitrary value 
\begin_inset Formula $p:P^{B,A}$
\end_inset

.
 Choose 
\begin_inset Formula $x\triangleq p\triangleright f^{\downarrow P^{\bullet,A}}$
\end_inset

 and 
\begin_inset Formula $y\triangleq p\triangleright f^{\uparrow P^{B,\bullet}}$
\end_inset

.
 The precondition in Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong-dinaturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is satisfied with these 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }(y\triangleright f^{\downarrow P^{\bullet,B}}):\quad & \gunderline x\triangleright f^{\uparrow P^{A,\bullet}}=p\,\gunderline{\triangleright\,f^{\downarrow P^{\bullet,A}}\triangleright f^{\uparrow P^{A,\bullet}}}\\
\text{profunctor commutativity law of }P:\quad & =p\triangleright f^{\uparrow P^{B,\bullet}}\triangleright f^{\downarrow P^{\bullet,B}}=y\triangleright f^{\downarrow P^{\bullet,B}}\quad.
\end{align*}

\end_inset

So, we can use the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong-dinaturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

)'s conclusion and obtain Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) applied to 
\begin_inset Formula $p$
\end_inset

, completing the proof:
\begin_inset Formula 
\begin{align*}
 & \gunderline x\triangleright t^{A}\triangleright f^{\uparrow Q^{A,\bullet}}\overset{!}{=}\gunderline y\triangleright t^{B}\triangleright f^{\downarrow Q^{\bullet,B}}\quad,\\
\text{definitions of }x,y:\quad & p\triangleright f^{\downarrow P^{\bullet,A}}\bef t^{A}\bef f^{\uparrow Q^{A,\bullet}}\overset{!}{=}p\triangleright f^{\uparrow P^{B,\bullet}}\bef t^{B}\bef f^{\downarrow Q^{\bullet,B}}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 Consider the case where 
\begin_inset Formula $F$
\end_inset

 and 
\begin_inset Formula $G$
\end_inset

 are both functors.
 We may view 
\begin_inset Formula $t:F^{A}\rightarrow G^{A}$
\end_inset

 as a function with the type signature 
\begin_inset Formula $t:P^{A,A}\rightarrow Q^{A,A}$
\end_inset

 if we define the profunctors 
\begin_inset Formula $P^{X,Y}\triangleq F^{Y}$
\end_inset

 and 
\begin_inset Formula $Q^{X,Y}\triangleq G^{Y}$
\end_inset

.
 Since 
\begin_inset Formula $P^{X,Y}$
\end_inset

 and 
\begin_inset Formula $Q^{X,Y}$
\end_inset

 ignore the type parameter 
\begin_inset Formula $X$
\end_inset

, we have the liftings 
\begin_inset Formula $f^{\uparrow P}=f^{\uparrow F}$
\end_inset

, 
\begin_inset Formula $f^{\downarrow P}=\text{id}$
\end_inset

, 
\begin_inset Formula $f^{\uparrow Q}=f^{\uparrow G}$
\end_inset

, and 
\begin_inset Formula $f^{\downarrow Q}=\text{id}$
\end_inset

.
 The strong dinaturality law of 
\begin_inset Formula $t$
\end_inset

 is then written as:
\begin_inset Formula 
\[
\text{when}\quad x^{:F^{A}}\triangleright f^{\uparrow F}=y^{:F^{B}}\quad\text{ then}\quad x\triangleright t\triangleright f^{\uparrow G}\overset{?}{=}y\triangleright t\quad.
\]

\end_inset

This is equivalent to 
\begin_inset Formula $x\triangleright t\bef f^{\uparrow G}=x\triangleright f^{\uparrow F}\bef t$
\end_inset

, which holds by the assumed naturality of 
\begin_inset Formula $t$
\end_inset

.
\end_layout

\begin_layout Standard
A similar proof works when 
\begin_inset Formula $F$
\end_inset

 and 
\begin_inset Formula $G$
\end_inset

 are both contrafunctors.
\end_layout

\begin_layout Standard
We may also derive part 
\series bold
(b)
\series default
 from part 
\series bold
(c)
\series default
.
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 A natural transformation 
\begin_inset Formula $t^{X,Y}:P^{X,Y}\rightarrow Q^{X,Y}$
\end_inset

 satisfies naturality laws separately with respect to the type parameters
 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $Y$
\end_inset

.
 So, for all 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 we have:
\begin_inset Formula 
\[
f^{\uparrow P^{X,\bullet}}\bef t^{X,B}=t^{X,A}\bef f^{\uparrow Q^{X,\bullet}}\quad,\quad\quad f^{\downarrow P^{\bullet,Y}}\bef t^{A,Y}=t^{B,Y}\bef f^{\downarrow Q^{\bullet,Y}}\quad.
\]

\end_inset

We need to verify the strong dinaturality law of 
\begin_inset Formula $t^{A,A}$
\end_inset

:
\begin_inset Formula 
\[
\text{when}\quad x^{:P^{A,A}}\triangleright f^{\uparrow P^{A,\bullet}}=y^{:P^{B,B}}\triangleright f^{\downarrow P^{\bullet,B}}\quad\text{ then}\quad x\triangleright t^{A,A}\bef f^{\uparrow Q^{A,\bullet}}\overset{?}{=}y\triangleright t^{B,B}\bef f^{\downarrow Q^{\bullet,B}}\quad.
\]

\end_inset

Using the precondition of that law and the naturality laws of 
\begin_inset Formula $t^{X,Y}$
\end_inset

, rewrite the conclusion of that law:
\begin_inset Formula 
\begin{align*}
 & x\triangleright\gunderline{t^{A,A}\bef f^{\uparrow Q^{A,\bullet}}}=\gunderline{x\triangleright f^{\uparrow P^{A,\bullet}}}\bef t^{A,B}=y\triangleright f^{\downarrow P^{\bullet,B}}\bef t^{A,B}\\
 & \overset{?}{=}y\triangleright\gunderline{t^{B,B}\bef f^{\downarrow Q^{\bullet,B}}}=y\triangleright f^{\downarrow P^{\bullet,B}}\bef t^{A,B}\quad.
\end{align*}

\end_inset

The two sides of the strong dinaturality law are now equal.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Strongly dinatural transformations compose, just as natural transformations
 do:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-natural-transformations-composition"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-natural-transformations-composition"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
For any functors 
\begin_inset Formula $P$
\end_inset

, 
\begin_inset Formula $Q$
\end_inset

, 
\begin_inset Formula $R$
\end_inset

 and natural transformations 
\begin_inset Formula $u:P^{A}\rightarrow Q^{A}$
\end_inset

 and 
\begin_inset Formula $v:Q^{A}\rightarrow R^{A}$
\end_inset

, the composition 
\begin_inset Formula $t\triangleq u\bef v$
\end_inset

 is a natural transformation (of type 
\begin_inset Formula $P^{A}\rightarrow R^{A}$
\end_inset

).
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
The naturality laws for 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

 are written with an arbitrary 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 as
\begin_inset Formula 
\[
f^{\uparrow P}\bef u=u\bef f^{\uparrow Q}\quad,\quad\quad f^{\uparrow Q}\bef v=v\bef f^{\uparrow R}\quad.
\]

\end_inset

The required naturality law for 
\begin_inset Formula $t$
\end_inset

 is derived by a direct calculation:
\end_layout

\begin_layout Plain Layout
\begin_inset Wrap figure
lines 0
placement l
overhang 0in
width "30col%"
status open

\begin_layout Plain Layout
\begin_inset VSpace -160baselineskip%
\end_inset


\begin_inset Preview

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{\xyScaleY{1.8pc}\xyScaleX{2.0pc}P^{A}\ar[d]\sp(0.45){f^{\uparrow P}}\ar[r]\sp(0.5){u} & Q^{A}\ar[d]\sp(0.45){f^{\uparrow Q}}\ar[r]\sp(0.5){v} & R^{A}\ar[d]\sp(0.45){f^{\uparrow R}}\\
P^{B}\ar[r]\sp(0.5){u} & Q^{B}\ar[r]\sp(0.5){v} & R^{B}
}
\]

\end_inset


\end_layout

\end_inset


\begin_inset VSpace -280baselineskip%
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset VSpace -100baselineskip%
\end_inset


\begin_inset Formula 
\begin{align*}
\text{expect to equal }t\bef f^{\uparrow R}:\quad & f^{\uparrow P}\bef\gunderline t=\gunderline{f^{\uparrow P}\bef u}\bef v\\
\text{naturality of }u:\quad & =u\bef\gunderline{f^{\uparrow Q}\bef v}\\
\text{naturality of }v:\quad & =\gunderline{u\bef v}\bef f^{\uparrow R}=t\bef f^{\uparrow R}\quad.
\end{align*}

\end_inset

This calculation shows that the above type diagram commutes.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Plain Layout
While a direct proof fails for the composition of dinatural transformations
 (as we have seen in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Composition-properties-of-dinatural"
plural "false"
caps "false"
noprefix "false"

\end_inset

)***, the additional requirement of 
\emph on
strong
\emph default
 dinaturality makes the composition property straightforward to prove:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-strongly-dinatural-transformation-composition"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strongly-dinatural-transformation-composition"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
For any profunctors 
\begin_inset Formula $P$
\end_inset

, 
\begin_inset Formula $Q$
\end_inset

, 
\begin_inset Formula $R$
\end_inset

 and any two strongly dinatural transformations 
\begin_inset Formula $u:P^{A,A}\rightarrow Q^{A,A}$
\end_inset

 and 
\begin_inset Formula $v:Q^{A,A}\rightarrow R^{A,A}$
\end_inset

, the transformation 
\begin_inset Formula $t\triangleq u\bef v$
\end_inset

 is also strongly dinatural.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
We assume that the strong dinaturality law holds for 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

: given 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

,
\begin_inset Formula 
\begin{align*}
 & \text{for }x^{:P^{A,A}}\text{ and }y^{:P^{B,B}}:\quad\text{ when}\quad x\triangleright f^{\uparrow P^{A,\bullet}}=y\triangleright f^{\downarrow P^{\bullet,B}}\quad\text{ then}\quad x\triangleright u^{A}\triangleright f^{\uparrow Q^{A,\bullet}}=y\triangleright u^{B}\triangleright f^{\downarrow Q^{\bullet,B}}\quad,\\
 & \text{for }m^{:Q^{A,A}}\text{ and }n^{:Q^{B,B}}:\quad\text{ when}\quad m\triangleright f^{\uparrow Q^{A,\bullet}}=n\triangleright f^{\downarrow Q^{\bullet,B}}\quad\text{ then}\quad m\triangleright v^{A}\triangleright f^{\uparrow R^{A,\bullet}}=n\triangleright v^{B}\triangleright f^{\downarrow R^{\bullet,B}}\quad.
\end{align*}

\end_inset

We need to show that the strong naturality law holds for 
\begin_inset Formula $t\triangleq u\bef v$
\end_inset

: 
\begin_inset Formula 
\[
\text{when}\quad x\triangleright f^{\uparrow P^{A,\bullet}}=y\triangleright f^{\downarrow P^{\bullet,B}}\quad\text{ then}\quad x\triangleright u^{A}\triangleright v^{A}\triangleright f^{\uparrow R^{A,\bullet}}\overset{?}{=}y\triangleright u^{B}\triangleright v^{B}\triangleright f^{\downarrow R^{\bullet,B}}\quad.
\]

\end_inset

For any 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 satisfying the above assumption, let 
\begin_inset Formula $m\triangleq x\triangleright u^{A}$
\end_inset

 and 
\begin_inset Formula $n\triangleq y\triangleright u^{B}$
\end_inset

.
 Then the precondition of the strong dinaturality law of 
\begin_inset Formula $v$
\end_inset

 is satisfied due to the strong dinaturality law of 
\begin_inset Formula $u$
\end_inset

:
\begin_inset Formula 
\[
m\triangleright f^{\uparrow Q^{A,\bullet}}=x\triangleright u^{A}\triangleright f^{\uparrow Q^{A,\bullet}}=y\triangleright u^{B}\triangleright f^{\downarrow Q^{\bullet,B}}=n\triangleright f^{\downarrow Q^{\bullet,B}}\quad.
\]

\end_inset

So, we can use the conclusion of the strong dinaturality law of 
\begin_inset Formula $v$
\end_inset

 with these 
\begin_inset Formula $m$
\end_inset

 and 
\begin_inset Formula $n$
\end_inset

:
\begin_inset Formula 
\[
x\triangleright u^{A}\triangleright v^{A}\triangleright f^{\uparrow R^{A,\bullet}}=m\triangleright v^{A}\triangleright f^{\uparrow R^{A,\bullet}}\overset{!}{=}n\triangleright v^{B}\triangleright f^{\downarrow R^{\bullet,B}}=y\triangleright u^{B}\triangleright v^{B}\triangleright f^{\downarrow R^{\bullet,B}}\quad.
\]

\end_inset

This is the same as the conclusion of the strong dinaturality law of 
\begin_inset Formula $t$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Plain Layout
It turns out that the type parameters of a natural transformation can be
 substituted by some profunctors to obtain a strongly dinatural transformation.
 Two versions of this result are proved next.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-strong-dinatural-substitute-functor-in-natural"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strong-dinatural-substitute-functor-in-natural"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
Suppose 
\begin_inset Formula $u^{A}:G^{A}\rightarrow H^{A}$
\end_inset

 is a natural transformation, and suppose 
\begin_inset Formula $P^{X,Y}$
\end_inset

 is some fully parametric profunctor.
 Define the function 
\begin_inset Formula $t$
\end_inset

 by
\begin_inset Formula 
\[
t^{A}:G^{P^{A,A}}\rightarrow H^{P^{A,A}}\quad,\quad\quad t^{A}\triangleq u^{P^{A,A}}\quad,
\]

\end_inset

i.e., as the unmodified code of the function 
\begin_inset Formula $u^{A}$
\end_inset

 with a substituted type parameter (
\begin_inset Formula $P^{A,A}$
\end_inset

 instead of 
\begin_inset Formula $A$
\end_inset

).
 Then 
\begin_inset Formula $t$
\end_inset

 is a strongly dinatural transformation between profunctors 
\begin_inset Formula $G^{P^{A,A}}$
\end_inset

 and 
\begin_inset Formula $H^{P^{A,A}}$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
By assumption, the naturality law of 
\begin_inset Formula $u$
\end_inset

 holds for any 
\begin_inset Formula $k^{:R\rightarrow S}$
\end_inset

 and says that
\begin_inset Formula 
\[
k^{\uparrow G}\bef u^{S}=u^{R}\bef k^{\uparrow H}\quad.
\]

\end_inset

The strong dinaturality law of 
\begin_inset Formula $t$
\end_inset

 says that for arbitrary 
\begin_inset Formula $x^{:G^{P^{A,A}}}$
\end_inset

, 
\begin_inset Formula $y^{:G^{P^{B,B}}}$
\end_inset

, and 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

,
\begin_inset Formula 
\[
\text{when}\quad x\triangleright f^{\uparrow P^{A,\bullet}\uparrow G}=y\triangleright f^{\downarrow P^{\bullet,B}\uparrow G}\quad\text{ then}\quad x\triangleright t^{A}\triangleright f^{\uparrow P^{A,\bullet}\uparrow H}\overset{?}{=}y\triangleright t^{B}\triangleright f^{\downarrow P^{\bullet,B}\uparrow H}\quad.
\]

\end_inset

Substitute 
\begin_inset Formula $t^{A}\triangleq u^{P^{A,A}}$
\end_inset

 into the above equation and use the naturality law of 
\begin_inset Formula $u$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }(y\triangleright t^{B}\triangleright f^{\downarrow P^{\bullet,B}\uparrow H}):\quad & x\triangleright\gunderline{t^{A}}\triangleright f^{\uparrow P^{A,\bullet}\uparrow H}=x\triangleright\gunderline{u^{P^{A,A}}\bef f^{\uparrow P^{A,\bullet}\uparrow H}}\\
\text{naturality law of }u\text{ with }R\triangleq P^{A,A}\text{ and }S\triangleq P^{A,B}:\quad & =\gunderline{x\triangleright f^{\uparrow P^{A,\bullet}\uparrow G}}\bef u^{P^{A,B}}\\
\text{assumption }(x\triangleright f^{\uparrow P\uparrow G}=y\triangleright f^{\downarrow P\uparrow G}):\quad & =y\triangleright\gunderline{f^{\downarrow P^{\bullet,B}\uparrow G}\bef u^{P^{A,B}}}\\
\text{naturality law of }u\text{ with }R\triangleq P^{B,B}\text{ and }S\triangleq P^{A,B}:\quad & =y\triangleright u^{P^{B,B}}\bef f^{\downarrow P^{\bullet,B}\uparrow H}=y\triangleright t^{B}\triangleright f^{\downarrow P^{\bullet,B}\uparrow H}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-strong-dinatural-substitute-profunctor-in-natural"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strong-dinatural-substitute-profunctor-in-natural"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
Assume that 
\begin_inset Formula $G^{X,Y}$
\end_inset

 and 
\begin_inset Formula $H^{X,Y}$
\end_inset

 are bifunctors, 
\begin_inset Formula $P^{X,Y}$
\end_inset

 and 
\begin_inset Formula $Q^{X,Y}$
\end_inset

 are profunctors, and 
\begin_inset Formula $u^{A,B}:G^{A,B}\rightarrow H^{A,B}$
\end_inset

 is a natural transformation (separately with respect to the type parameters
 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

).
 Assume that 
\begin_inset Formula $G$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

 satisfy their commutativity laws.
 Define the function 
\begin_inset Formula $t$
\end_inset

 by
\begin_inset Formula 
\[
t^{A}:G^{P^{A,A},Q^{A,A}}\rightarrow H^{P^{A,A},Q^{A,A}}\quad,\quad\quad t\triangleq u^{P^{A,A},Q^{A,A}}\quad,
\]

\end_inset

i.e., as the unmodified code of 
\begin_inset Formula $u^{A,B}$
\end_inset

 with substituted type parameters (
\begin_inset Formula $P^{A,A}$
\end_inset

 and 
\begin_inset Formula $Q^{A,A}$
\end_inset

 instead of 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

).
 Then 
\begin_inset Formula $t$
\end_inset

 is a strongly dinatural transformation between profunctors 
\begin_inset Formula $G^{P^{A,A},Q^{A,A}}$
\end_inset

 and 
\begin_inset Formula $H^{P^{A,A},Q^{A,A}}$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout
The assumed naturality law of 
\begin_inset Formula $u$
\end_inset

 holds separately with respect to each type parameter:
\begin_inset Formula 
\[
f^{\uparrow G^{\bullet,B}}\bef u^{B,B}=u^{A,B}\bef f^{\uparrow H^{\bullet,B}}\quad,\quad\quad f^{\uparrow G^{A,\bullet}}\bef u^{A,B}=u^{A,A}\bef f^{\uparrow H^{A,\bullet}}\quad.
\]

\end_inset

To formulate the strong dinaturality law of 
\begin_inset Formula $t$
\end_inset

, we need to start with arbitrary 
\begin_inset Formula $x^{:G^{P^{A,A}}}$
\end_inset

, 
\begin_inset Formula $y^{:G^{P^{B,B}}}$
\end_inset

, and 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, and lift 
\begin_inset Formula $f$
\end_inset

 to functors such as 
\begin_inset Formula $G^{P^{A,\bullet},Q^{A,\bullet}}$
\end_inset

.
 Since, by assumption, 
\begin_inset Formula $G$
\end_inset

 obeys the commutativity law, we may lift 
\begin_inset Formula $f$
\end_inset

 to 
\begin_inset Formula $G^{P^{A,\bullet},Q^{A,\bullet}}$
\end_inset

 via a composition of liftings with respect to 
\begin_inset Formula $P$
\end_inset

 and 
\begin_inset Formula $Q$
\end_inset

 in any order, for example 
\begin_inset Formula $x\triangleright f^{\uparrow P^{A,\bullet}\uparrow G^{\bullet,Q}}\triangleright f^{\uparrow Q^{A,\bullet}\uparrow G^{P,\bullet}}$
\end_inset

.
 We handle the lifting to the contrafunctor 
\begin_inset Formula $G^{P^{\bullet,A},Q^{\bullet,A}}$
\end_inset

 similarly.
 So, let us write the strong dinaturality law of 
\begin_inset Formula $t$
\end_inset

: 
\begin_inset Formula 
\begin{align*}
 & \text{when}\quad x\triangleright f^{\uparrow P^{A,\bullet}\uparrow G^{\bullet,Q}}\triangleright f^{\uparrow Q^{A,\bullet}\uparrow G^{P,\bullet}}=y\triangleright f^{\downarrow P^{\bullet,B}\uparrow G^{\bullet,Q}}\triangleright f^{\downarrow Q^{\bullet,B}\uparrow G^{P,\bullet}}\\
 & \quad\text{then}\quad x\triangleright t^{A}\triangleright f^{\uparrow P^{A,\bullet}\uparrow H^{\bullet,Q}}\triangleright f^{\uparrow Q^{A,\bullet}\uparrow H^{P,\bullet}}\overset{?}{=}y\triangleright t^{B}\triangleright f^{\downarrow P^{\bullet,B}\uparrow H^{\bullet,Q}}\triangleright f^{\downarrow Q^{\bullet,B}\uparrow H^{P,\bullet}}\quad.
\end{align*}

\end_inset

Substitute 
\begin_inset Formula $t\triangleq u^{P^{A,A},Q^{A,A}}$
\end_inset

 into the above equation and use the naturality laws of 
\begin_inset Formula $u$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & x\triangleright t^{A}\triangleright f^{\uparrow P^{A,\bullet}\uparrow H^{\bullet,Q}}\triangleright f^{\uparrow Q^{A,\bullet}\uparrow H^{P,\bullet}}=x\triangleright\gunderline{u\bef f^{\uparrow P\uparrow H}\bef}f^{\uparrow Q\uparrow H}=x\triangleright f^{\uparrow P\uparrow G}\bef\gunderline{u\bef f^{\uparrow Q\uparrow H}}=\gunderline{x\triangleright f^{\uparrow P\uparrow G}\triangleright f^{\uparrow Q\uparrow G}}\bef u\\
 & =y\triangleright f^{\downarrow P\uparrow G}\bef\gunderline{f^{\downarrow Q\uparrow G}\bef u}=y\triangleright\gunderline{f^{\downarrow P\uparrow G}\bef u}\bef f^{\downarrow Q\uparrow H}=y\triangleright u\bef f^{\downarrow P\uparrow H}\bef f^{\downarrow Q\uparrow H}\\
 & =y\triangleright t^{B}\triangleright f^{\downarrow P^{\bullet,B}\uparrow H^{\bullet,Q}}\triangleright f^{\downarrow Q^{\bullet,B}\uparrow H^{P,\bullet}}\quad.
\end{align*}

\end_inset

We omitted the full type annotations for brevity, since we already checked
 that types match.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-pair-product-coproduct-strongly-dinatural"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pair-product-coproduct-strongly-dinatural"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
For any two strongly dinatural transformations 
\begin_inset Formula $u^{:P^{A,A}\rightarrow R^{A,A}}$
\end_inset

 and 
\begin_inset Formula $v^{:Q^{A,A}\rightarrow S^{A,A}}$
\end_inset

:
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 The pair product 
\begin_inset Formula $t\triangleq u\boxtimes v$
\end_inset

 (of type 
\begin_inset Formula $P^{A,A}\times Q^{A,A}\rightarrow R^{A,A}\times S^{A,A}$
\end_inset

) is strongly dinatural.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 The pair co-product
\begin_inset Index idx
status open

\begin_layout Plain Layout
pair co-product of functions
\end_layout

\end_inset

 
\begin_inset Formula $t\triangleq u\boxplus v$
\end_inset

 (of type 
\begin_inset Formula $P^{A,A}+Q^{A,A}\rightarrow R^{A,A}+S^{A,A}$
\end_inset

) is strongly dinatural.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 The strong dinaturality law of 
\begin_inset Formula $t\triangleq u\boxtimes v$
\end_inset

 says that, for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \text{when}\quad(x_{1}^{:P^{A,A}}\times y_{1}^{:Q^{A,A}})\triangleright f^{\uparrow(P^{A,\bullet}\times Q^{A,\bullet})}=(x_{2}^{:P^{B,B}}\times y_{2}^{:Q^{B,B}})\triangleright f^{\downarrow(P^{\bullet,B}\times Q^{\bullet,B})}\\
 & \quad\text{then}\quad(x_{1}\times y_{1})\triangleright t\triangleright f^{\uparrow(R^{A,\bullet}\times S^{A,\bullet})}=(x_{2}\times y_{2})\triangleright t\triangleright f^{\downarrow(R^{\bullet,B}\times S^{\bullet,B})}\quad.
\end{align*}

\end_inset

Substituting the definitions of liftings to 
\begin_inset Formula $P\times Q$
\end_inset

 and 
\begin_inset Formula $R\times S$
\end_inset

, as well as the definition 
\begin_inset Formula $t\triangleq u\boxtimes v$
\end_inset

, we get:
\begin_inset Formula 
\begin{align*}
 & \text{when}\quad(x_{1}\triangleright f^{\uparrow P^{A,\bullet}})\times(y_{1}\triangleright f^{\uparrow Q^{A,\bullet}})=(x_{2}\triangleright f^{\downarrow P^{\bullet,B}})\times(y_{2}\triangleright f^{\downarrow Q^{\bullet,B}})\\
 & \quad\text{then}\quad(x_{1}\triangleright u\bef f^{\uparrow R^{A,\bullet}})\times(y_{1}\triangleright v\bef f^{\uparrow S^{A,\bullet}})=(x_{2}\triangleright u\bef f^{\downarrow R^{\bullet,B}})\times(y_{2}\triangleright v\bef f^{\downarrow S^{\bullet,B}})\quad.
\end{align*}

\end_inset

An equality between pairs is the same as two equalities for the elements
 of the pairs.
 So, the strong naturality law of 
\begin_inset Formula $t$
\end_inset

 is the same as the following statement:
\begin_inset Formula 
\begin{align*}
 & \text{when}\quad x_{1}^{:P^{A,A}}\triangleright f^{\uparrow P^{A,\bullet}}=x_{1}^{:P^{B,B}}\triangleright f^{\downarrow P^{\bullet,B}}\quad\text{ and }\quad y_{1}^{:Q^{A,A}}\triangleright f^{\uparrow Q^{A,\bullet}}=y_{2}^{:Q^{B,B}}\triangleright f^{\downarrow Q^{\bullet,B}}\\
 & \quad\text{then}\quad x_{1}\triangleright u\bef f^{\uparrow R^{A,\bullet}}=x_{2}\triangleright u\bef f^{\downarrow R^{\bullet,B}}\quad\text{ and }\quad y_{1}\triangleright v\bef f^{\uparrow S^{A,\bullet}}=y_{2}\triangleright v\bef f^{\downarrow S^{\bullet,B}}\quad.
\end{align*}

\end_inset

These are exactly the preconditions and the conclusions of the strong naturality
 laws of 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 The strong dinaturality law of 
\begin_inset Formula $t\triangleq u\boxplus v$
\end_inset

 says that, for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \text{when}\quad x^{:P^{A,A}+Q^{A,A}}\triangleright f^{\uparrow(P^{A,\bullet}+Q^{A,\bullet})}=y^{:P^{B,B}+Q^{B,B}}\triangleright f^{\downarrow(P^{\bullet,B}+Q^{\bullet,B})}\\
 & \quad\text{then}\quad x\triangleright t\triangleright f^{\uparrow(R^{A,\bullet}+S^{A,\bullet})}=y\triangleright t\triangleright f^{\downarrow(R^{\bullet,B}+S^{\bullet,B})}\quad.
\end{align*}

\end_inset

Substituting the definitions of liftings to 
\begin_inset Formula $P+Q$
\end_inset

 and 
\begin_inset Formula $R+S$
\end_inset

, as well as the definition 
\begin_inset Formula $t\triangleq u\boxplus v$
\end_inset

, we get:
\begin_inset Formula 
\begin{align*}
 & \text{when}\quad x^{:P^{A,A}+Q^{A,A}}\triangleright\,\begin{array}{|c||cc|}
 & P^{A,B} & Q^{A,B}\\
\hline P^{A,A} & f^{\uparrow P^{A,\bullet}} & \bbnum 0\\
Q^{A,A} & \bbnum 0 & f^{\uparrow Q^{A,\bullet}}
\end{array}\,=y^{:P^{B,B}+Q^{B,B}}\triangleright\,\begin{array}{|c||cc|}
 & P^{A,B} & Q^{A,B}\\
\hline P^{B,B} & f^{\downarrow P^{\bullet,B}} & \bbnum 0\\
Q^{B,B} & \bbnum 0 & f^{\downarrow Q^{\bullet,B}}
\end{array}\,\quad\text{ then}\\
 & x\triangleright\,\begin{array}{|c||cc|}
 & R^{A,A} & S^{A,A}\\
\hline P^{A,A} & u & \bbnum 0\\
Q^{A,A} & \bbnum 0 & v
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & R^{A,B} & S^{A,B}\\
\hline R^{A,A} & f^{\uparrow R^{A,\bullet}} & \bbnum 0\\
S^{A,A} & \bbnum 0 & f^{\uparrow S^{A,\bullet}}
\end{array}\,=y\triangleright\,\begin{array}{|c||cc|}
 & R^{B,B} & S^{B,B}\\
\hline P^{B,B} & u & \bbnum 0\\
Q^{B,B} & \bbnum 0 & v
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & R^{A,B} & S^{A,B}\\
\hline R^{B,B} & f^{\downarrow R^{\bullet,B}} & \bbnum 0\\
S^{B,B} & \bbnum 0 & f^{\downarrow S^{\bullet,B}}
\end{array}
\end{align*}

\end_inset

or, simplifying the matrix composition:
\begin_inset Formula 
\[
x\triangleright\,\begin{array}{|c||cc|}
 & R^{A,B} & S^{A,B}\\
\hline P^{A,A} & u\bef f^{\uparrow R^{A,\bullet}} & \bbnum 0\\
Q^{A,A} & \bbnum 0 & v\bef f^{\uparrow S^{A,\bullet}}
\end{array}\,=y\triangleright\,\begin{array}{|c||cc|}
 & R^{A,B} & S^{A,B}\\
\hline P^{B,B} & u\bef f^{\downarrow R^{\bullet,B}} & \bbnum 0\\
Q^{B,B} & \bbnum 0 & v\bef f^{\downarrow S^{\bullet,B}}
\end{array}\quad.
\]

\end_inset

The precondition of the strong dinaturality law of 
\begin_inset Formula $t$
\end_inset

 is an equality between values of disjunctive type 
\begin_inset Formula $P^{A,B}+Q^{A,B}$
\end_inset

 computed by applying some diagonal code matrices to 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

.
 So, the precondition can hold only if both 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 are in the same part of the disjunction.
 We must have either 
\begin_inset Formula $x=p_{1}^{:P^{A,A}}+\bbnum 0$
\end_inset

 and 
\begin_inset Formula $y=p_{2}^{:P^{B,B}}+\bbnum 0$
\end_inset

, or 
\begin_inset Formula $x=\bbnum 0+q_{1}^{:Q^{A,A}}$
\end_inset

 and 
\begin_inset Formula $y=\bbnum 0+q_{2}^{:Q^{B,B}}$
\end_inset

.
 In the first case, we can simplify the strong dinaturality law of 
\begin_inset Formula $t$
\end_inset

 to
\begin_inset Formula 
\[
\text{when }\quad p_{1}^{:P^{A,A}}\triangleright f^{\uparrow P^{A,\bullet}}=p_{2}\triangleright f^{\downarrow P^{\bullet,B}}\quad\text{ then }\quad p_{1}\triangleright u\bef f^{\uparrow R^{A,\bullet}}=p_{2}\triangleright u\bef f^{\downarrow R^{\bullet,B}}\quad,
\]

\end_inset

and in the second case to 
\begin_inset Formula 
\[
\text{when }\quad q_{1}^{:P^{A,A}}\triangleright f^{\uparrow Q^{A,\bullet}}=q_{2}\triangleright f^{\downarrow Q^{\bullet,B}}\quad\text{ then }\quad q_{1}\triangleright v\bef f^{\uparrow S^{A,\bullet}}=q_{2}\triangleright v\bef f^{\downarrow S^{\bullet,B}}\quad.
\]

\end_inset

These are exactly the statements of the strong dinaturality laws of 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-strongly-dinatural-product-of-functions"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strongly-dinatural-product-of-functions"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 If both 
\begin_inset Formula $u:P^{A,A}\rightarrow Q^{A,A}$
\end_inset

 and 
\begin_inset Formula $v:P^{A,A}\rightarrow R^{A,A}$
\end_inset

 are strongly dinatural then 
\begin_inset Formula 
\[
t:P^{A,A}\rightarrow Q^{A,A}\times R^{A,A}\quad,\quad\quad t\triangleq p^{:P^{A,A}}\rightarrow u(p)\times v(p)
\]

\end_inset

is also strongly dinatural.
 
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 If both 
\begin_inset Formula $u:P^{A,A}\rightarrow R^{A,A}$
\end_inset

 and 
\begin_inset Formula $v:Q^{A,A}\rightarrow R^{A,A}$
\end_inset

 are strongly dinatural then
\begin_inset Formula 
\[
t:P^{A,A}+Q^{A,A}\rightarrow R^{A,A}\quad,\quad\quad t\triangleq\,\begin{array}{|c||c|}
 & R^{A,A}\\
\hline P^{A,A} & u\\
Q^{A,A} & v
\end{array}
\]

\end_inset

is also strongly dinatural.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 The function 
\begin_inset Formula $t$
\end_inset

 can be expressed as
\begin_inset Formula 
\[
t=(p^{:P^{A,A}}\rightarrow p\times p)\bef\big(p^{:P^{A,A}}\times p^{:P^{A,A}}\rightarrow u(p)\times v(p)\big)=\Delta^{P^{A,A}}\bef(u\boxtimes v)\quad.
\]

\end_inset

Note that 
\begin_inset Formula $\Delta^{A}:A\rightarrow A\times A$
\end_inset

 is a natural transformation (see Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Deriving-laws-for-functions-"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 By Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strong-dinatural-substitute-functor-in-natural"
plural "false"
caps "false"
noprefix "false"

\end_inset

, setting the type parameter of 
\begin_inset Formula $\Delta$
\end_inset

 to 
\begin_inset Formula $P^{A,A}$
\end_inset

 yields a strongly dinatural transformation (
\begin_inset Formula $\Delta^{P^{A,A}}$
\end_inset

).
 The pair product 
\begin_inset Formula $u\boxtimes v$
\end_inset

 is strongly dinatural by Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pair-product-coproduct-dinatural"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a).
 Finally, the composition 
\begin_inset Formula $\Delta\bef(u\boxtimes v)$
\end_inset

 is strongly dinatural by Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strongly-dinatural-transformation-composition"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 The function 
\begin_inset Formula $t$
\end_inset

 can be expressed via the natural transformation 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

merge
\end_layout

\end_inset

 (see Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Working-with-disjunctive-functions"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\begin_inset Formula 
\[
t=\,\begin{array}{|c||cc|}
 & R^{A,A} & R^{A,A}\\
\hline P^{A,A} & u & \bbnum 0\\
Q^{A,A} & \bbnum 0 & v
\end{array}\,\bef\,\begin{array}{|c||c|}
 & R^{A,A}\\
\hline R^{A,A} & \text{id}\\
R^{A,A} & \text{id}
\end{array}\,=(u\boxplus v)\bef\text{merge}^{R^{A,A}}\quad.
\]

\end_inset

The pair co-product (
\begin_inset Formula $u\boxplus v$
\end_inset

) is strongly dinatural by Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pair-product-coproduct-dinatural"
plural "false"
caps "false"
noprefix "false"

\end_inset

(b).
 The function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

merge
\end_layout

\end_inset

 with a substituted type parameter (
\begin_inset Formula $R^{A,A}$
\end_inset

) is strongly dinatural by Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strong-dinatural-substitute-functor-in-natural"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Finally, the composition 
\begin_inset Formula $(u\boxplus v)\bef\text{merge}$
\end_inset

 is strongly dinatural by Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strongly-dinatural-transformation-composition"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-strong-dinaturality-of-function-application"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strong-dinaturality-of-function-application"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
Consider the (fully parametric) function 
\begin_inset Formula $w\triangleq q\times z\rightarrow q(z)$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 The most general type signature for 
\begin_inset Formula $w$
\end_inset

 is 
\begin_inset Formula $w^{Q,Z}:(Z\rightarrow Q)\times Z\rightarrow Q$
\end_inset

 with two type parameters (
\begin_inset Formula $Q$
\end_inset

, 
\begin_inset Formula $Z$
\end_inset

).
 With this type signature, 
\begin_inset Formula $w$
\end_inset

 is strongly dinatural with respect to both 
\begin_inset Formula $Q$
\end_inset

 and 
\begin_inset Formula $Z$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 If we substitute the types 
\begin_inset Formula $Q^{A,A}$
\end_inset

 and 
\begin_inset Formula $Z^{A,A}$
\end_inset

 instead of 
\begin_inset Formula $Q$
\end_inset

 and 
\begin_inset Formula $Z$
\end_inset

, where 
\begin_inset Formula $Q^{X,Y}$
\end_inset

 and 
\begin_inset Formula $Z^{X,Y}$
\end_inset

 are some profunctors obeying their commutativity laws, we obtain the function
\begin_inset Formula 
\[
w:\forall A.\,(Z^{A,A}\rightarrow Q^{A,A})\times Z^{A,A}\rightarrow Q^{A,A}\quad,\quad\quad w^{A}\triangleq q^{:Z^{A,A}\rightarrow Q^{A,A}}\times z^{:Z^{A,A}}\rightarrow q(z)\quad.
\]

\end_inset

The function 
\begin_inset Formula $w$
\end_inset

 is a dinatural transformation.
\end_layout

\begin_layout Plain Layout

\series bold
(c)
\series default
 Under the same assumptions as in 
\series bold
(b)
\series default
, the function 
\begin_inset Formula $w$
\end_inset

 is strongly dinatural if the profunctor
\begin_inset Formula $Z^{X,Y}$
\end_inset

 has the 
\begin_inset Quotes eld
\end_inset

pushout property
\begin_inset Quotes erd
\end_inset

 (see Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-weak-pullback-property"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-weak-pullback-property"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Otherwise, 
\begin_inset Formula $w$
\end_inset

 is 
\emph on
not
\emph default
 necessarily strongly dinatural.
 — not clear if we can show a counterexample
\end_layout

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Plain Layout

\series bold
(a)
\series default
 The type signature 
\begin_inset Formula $\forall(Q,Z).\,(Z\rightarrow Q)\times Z\rightarrow Q$
\end_inset

 has the form of a natural transformation with respect to the parameter
 
\begin_inset Formula $Q$
\end_inset

 (but not with respect to 
\begin_inset Formula $Z$
\end_inset

).
 By Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-strong-dinaturality-entails-dinaturality"
plural "false"
caps "false"
noprefix "false"

\end_inset

(b), strong dinaturality holds with respect to 
\begin_inset Formula $Q$
\end_inset

.
 
\end_layout

\begin_layout Plain Layout
The strong dinaturality law of 
\begin_inset Formula $w$
\end_inset

 with respect to 
\begin_inset Formula $Z$
\end_inset

 needs to be checked directly.
 For convenience, define the profunctors 
\begin_inset Formula $P^{X,Y}\triangleq(X\rightarrow Q)\times Y$
\end_inset

 and 
\begin_inset Formula $R^{X,Y}\triangleq Q$
\end_inset

, so that 
\begin_inset Formula $w$
\end_inset

 has the type signature 
\begin_inset Formula $P^{Z,Z}\rightarrow R^{Z,Z}$
\end_inset

.
 We need to prove that, for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

,
\begin_inset Formula 
\[
\text{when}\quad x^{:P^{A,A}}\triangleright f^{\uparrow P^{A,\bullet}}=y^{:P^{B,B}}\triangleright f^{\downarrow P^{\bullet,B}}\quad\text{ then}\quad x\triangleright w\triangleright f^{\uparrow R}\overset{?}{=}y\triangleright w\triangleright f^{\downarrow R}\quad.
\]

\end_inset

Since 
\begin_inset Formula $R^{X,Y}$
\end_inset

 is a constant profunctor, we have 
\begin_inset Formula $f^{\uparrow R}=\text{id}$
\end_inset

 and 
\begin_inset Formula $f^{\downarrow R}=\text{id}$
\end_inset

.
 Defining 
\begin_inset Formula $g^{:A\rightarrow Q}\times a^{:A}\triangleq x^{:P^{A,A}}$
\end_inset

 and 
\begin_inset Formula $h^{:B\rightarrow Q}\times b^{:B}\triangleq y^{:P^{B,B}}$
\end_inset

, and using the liftings 
\begin_inset Formula 
\[
f^{\uparrow P^{A,\bullet}}=\text{id}^{A\rightarrow Q}\boxtimes f\quad,\quad\quad f^{\downarrow P^{\bullet,B}}=(g^{:B\rightarrow Q}\rightarrow f\bef g)\boxtimes\text{id}^{B}\quad,
\]

\end_inset

we can rewrite the law as
\begin_inset Formula 
\[
\text{when}\quad g^{:A\rightarrow Q}\times f(a^{:A})=(f\bef h^{:B\rightarrow Q})\times b^{:B}\quad\text{ then}\quad g(a)\overset{?}{=}h(b)\quad.
\]

\end_inset

Since we must have 
\begin_inset Formula $b=f(a)$
\end_inset

 and 
\begin_inset Formula $g=f\bef h$
\end_inset

, the law holds:
\begin_inset Formula 
\[
g(a)=h(f(a))=h(b).
\]

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
(b)
\series default
 Define the profunctor 
\begin_inset Formula $P^{X,Y}\triangleq(Z^{Y,X}\rightarrow Q^{X,Y})\times Z^{X,Y}$
\end_inset

 (note the reverse order of type parameters in 
\begin_inset Formula $Z^{Y,X}$
\end_inset

).
 Then 
\begin_inset Formula $w^{A}$
\end_inset

 has type signature 
\begin_inset Formula $P^{A,A}\rightarrow Q^{A,A}$
\end_inset

, and the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-dinatural-transformations-of-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is
\begin_inset Formula 
\[
f^{\downarrow P}\bef w\bef f^{\uparrow Q}\overset{?}{=}f^{\uparrow P}\bef w\bef f^{\downarrow Q}\quad.
\]

\end_inset

It helps to write out the code for the liftings to 
\begin_inset Formula $P$
\end_inset

.
 For arbitrary 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

,
\begin_inset Formula 
\begin{align*}
 & (g^{:Z^{Y,B}\rightarrow Q^{B,Y}}\times a^{:Z^{B,Y}})\triangleright f^{\downarrow P^{\bullet,Y}}=\big(f^{\uparrow Z^{Y,\bullet}}\bef g\bef f^{\downarrow Q^{\bullet,Y}}\big)\times(a\triangleright f^{\downarrow Z^{\bullet,Y}})\quad,\\
 & (g^{:Z^{A,X}\rightarrow Q^{X,A}}\times a^{:Z^{X,A}})\triangleright f^{\uparrow P^{X,\bullet}}=\big(f^{\downarrow Z^{\bullet,X}}\bef g\bef f^{\uparrow Q^{X,\bullet}}\big)\times(a\triangleright f^{\uparrow Z^{X,\bullet}})\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Plain Layout
The naturality law of 
\begin_inset Formula $w$
\end_inset

 is written as an equation between functions of type 
\begin_inset Formula $P^{B,A}\rightarrow Q^{A,B}$
\end_inset

:
\begin_inset Formula 
\[
f^{\downarrow P^{\bullet,A}}\bef w^{A}\bef f^{\uparrow Q^{A,\bullet}}\overset{?}{=}f^{\uparrow P^{B,\bullet}}\bef w^{B}\bef f^{\downarrow Q^{\bullet,B}}\quad.
\]

\end_inset

Apply both sides of the law to an arbitrary value 
\begin_inset Formula $g\times a:P^{B,A}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & (g^{:Z^{A,B}\rightarrow Q^{B,A}}\times a^{:Z^{B,A}})\,\gunderline{\triangleright f^{\downarrow P}}\bef w\bef f^{\uparrow Q}=\big((f^{\uparrow Z}\bef g\bef f^{\downarrow Q})\times(a\triangleright f^{\downarrow Z})\big)\triangleright w\triangleright f^{\uparrow Q}\\
\text{definition of }w:\quad & \quad=(a\triangleright f^{\downarrow Z})\triangleright(f^{\uparrow Z}\bef g\bef f^{\downarrow Q})\triangleright f^{\uparrow Q}=a\triangleright f^{\downarrow Z}\bef f^{\uparrow Z}\bef g\bef f^{\downarrow Q}\bef f^{\uparrow Q}\\
\text{right-hand side}:\quad & \overset{?}{=}(g\times a)\,\gunderline{\triangleright f^{\uparrow P}}\bef w\bef f^{\downarrow Q}=\big((f^{\downarrow Z}\bef g\bef f^{\uparrow Q})\times(a\triangleright f^{\uparrow Z})\big)\triangleright w\triangleright f^{\downarrow Q}\\
\text{definition of }w:\quad & \quad=(a\triangleright f^{\uparrow Z})\triangleright(f^{\downarrow Z}\bef g\bef f^{\uparrow Q})\triangleright f^{\downarrow Q}=a\triangleright f^{\uparrow Z}\bef f^{\downarrow Z}\bef g\bef f^{\uparrow Q}\bef f^{\downarrow Q}\quad.
\end{align*}

\end_inset

The remaining difference between two sides disappears due to the commutativity
 laws of 
\begin_inset Formula $Q$
\end_inset

 and 
\begin_inset Formula $Z$
\end_inset

 (namely 
\begin_inset Formula $f^{\uparrow Q}\bef f^{\downarrow Q}=f^{\downarrow Q}\bef f^{\uparrow Q}$
\end_inset

 and 
\begin_inset Formula $f^{\uparrow Z}\bef f^{\downarrow Z}=f^{\downarrow Z}\bef f^{\uparrow Z}$
\end_inset

).
\end_layout

\begin_layout Plain Layout

\series bold
(c)
\series default
 The strong dinaturality of 
\begin_inset Formula $w$
\end_inset

 says that, for arbitrary 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

,
\begin_inset Formula 
\[
\text{when}\quad x^{:G^{A,A}\times Z^{A,A}}\triangleright f^{\uparrow(G\times Z)}=y^{:G^{B,B}\times Z^{B,B}}\triangleright f^{\downarrow(G\times Z)}\quad\text{ then}\quad x\triangleright w\triangleright f^{\uparrow Q}\overset{?}{=}y\triangleright w\triangleright f^{\downarrow Q}\quad.
\]

\end_inset

Since 
\begin_inset Formula $f^{\uparrow(G\times Z)}=f^{\uparrow G}\boxtimes f^{\uparrow Z}$
\end_inset

, the precondition of the law splits into two equations:
\begin_inset Formula 
\begin{align*}
\text{defining }g_{1},z_{1},g_{2},z_{2}:\quad & g_{1}^{:G^{A,A}}\times z_{1}^{:Z^{A,A}}\triangleq x\quad,\quad\quad g_{2}^{:G^{B,B}}\times z_{2}^{:Z^{B,B}}\triangleq y\quad,\\
\text{the precondition is equivalent to}:\quad & g_{1}\triangleright f^{\uparrow G}=g_{2}\triangleright f^{\downarrow G}\quad\text{ and }\quad z_{1}\triangleright f^{\uparrow Z}=z_{2}\triangleright f^{\downarrow Z}\quad.
\end{align*}

\end_inset

The precondition 
\begin_inset Formula $g_{1}\triangleright f^{\uparrow G}=g_{2}\triangleright f^{\downarrow G}$
\end_inset

 is equivalent to
\begin_inset Formula 
\begin{equation}
f^{\downarrow Z}\bef g_{1}\bef f^{\uparrow Q}=f^{\uparrow Z}\bef g_{2}\bef f^{\downarrow Q}\quad.\label{eq:strong-dinaturality-precondition-derivation1}
\end{equation}

\end_inset

Now we express the conclusion of the law via the new variables:
\begin_inset Formula 
\begin{equation}
x\triangleright w\triangleright f^{\uparrow Q}=z_{1}\triangleright g_{1}\bef f^{\uparrow Q}\overset{?}{=}y\triangleright w\triangleright f^{\downarrow Q}=z_{2}\triangleright g_{2}\bef f^{\downarrow Q}\quad.\label{eq:strong-dinaturality-conclusion-derivation1}
\end{equation}

\end_inset

From here, the proof cannot proceed without more information.
 We need to show that 
\begin_inset Formula $z_{1}\triangleright g_{1}\bef f^{\uparrow Q}\overset{?}{=}z_{2}\triangleright g_{2}\bef f^{\downarrow Q}$
\end_inset

, but we do not have any equations relating 
\begin_inset Formula $g_{1}\bef f^{\uparrow Q}$
\end_inset

 to 
\begin_inset Formula $g_{2}\bef f^{\downarrow Q}$
\end_inset

.
 We cannot use Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong-dinaturality-precondition-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) because it contains additional lifted functions 
\begin_inset Formula $f^{\downarrow Z}$
\end_inset

 and 
\begin_inset Formula $f^{\uparrow Z}$
\end_inset

 that we cannot insert into the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong-dinaturality-conclusion-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

), given that 
\begin_inset Formula $z_{1}$
\end_inset

 and 
\begin_inset Formula $z_{2}$
\end_inset

 are unknown.
 
\end_layout

\begin_layout Plain Layout
If the profunctor 
\begin_inset Formula $Z$
\end_inset

 has the pushout property, the 
\begin_inset Formula $\left(Z,f\right)$
\end_inset

-wedge relation 
\begin_inset Formula $z_{1}\triangleright f^{\uparrow Z}=z_{2}\triangleright f^{\downarrow Z}$
\end_inset

 gives us a value 
\begin_inset Formula $u^{:Z^{B,A}}$
\end_inset

 such that 
\begin_inset Formula $z_{1}=u\triangleright f^{\downarrow Z}$
\end_inset

 and 
\begin_inset Formula $z_{2}=u\triangleright f^{\uparrow Z}$
\end_inset

.
 Then the law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong-dinaturality-conclusion-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) becomes
\begin_inset Formula 
\[
z_{1}\triangleright g_{1}\bef f^{\uparrow Q}=u\triangleright f^{\downarrow Z}\bef g_{1}\bef f^{\uparrow Q}\overset{?}{=}z_{2}\triangleright g_{2}\bef f^{\downarrow Q}=u\triangleright f^{\uparrow Z}\bef g_{2}\bef f^{\downarrow Q}\quad.
\]

\end_inset

Both sides are now equal due to Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong-dinaturality-precondition-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Getting stuck in a proof without the pushout property is not sufficient;
 we need to show a counterexample.
 For that, let us choose a profunctor 
\begin_inset Formula $Z$
\end_inset

 that does 
\emph on
not
\emph default
 have the pushout property, and show that the corresponding 
\begin_inset Formula $w$
\end_inset

 is not strongly dinatural.
 By Example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-weak-pullback-property"
plural "false"
caps "false"
noprefix "false"

\end_inset

, a suitable profunctor is 
\begin_inset Formula $Z^{X,Y}\triangleq X\rightarrow Y$
\end_inset

.
\end_layout

\begin_layout Plain Layout
???It seems that this profunctor does not give a clear counterexample...
\end_layout

\begin_layout Plain Layout
For simplicity, choose 
\begin_inset Formula $Q^{X,Y}\triangleq X\rightarrow Y$
\end_inset

 to be the same profunctor.
 The corresponding function 
\begin_inset Formula $w$
\end_inset

 is
\begin_inset Formula 
\[
w\triangleq q^{:(A\rightarrow A)\rightarrow A\rightarrow A}\times z^{:A\rightarrow A}\rightarrow q(z)\quad.
\]

\end_inset


\end_layout

\begin_layout Plain Layout
Using the specific code for function liftings to 
\begin_inset Formula $Z$
\end_inset

 and 
\begin_inset Formula $Q$
\end_inset

,
\begin_inset Formula 
\[
f^{\uparrow Z}=u\rightarrow u\bef f\quad,\quad\quad f^{\downarrow Z}=v\rightarrow f\bef v\quad,\quad\quad f^{\uparrow Q}=u\rightarrow u\bef f\quad,\quad\quad f^{\downarrow Q}=v\rightarrow f\bef v\quad,
\]

\end_inset

we can write the strong dinaturality law of 
\begin_inset Formula $w$
\end_inset

: for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, 
\begin_inset Formula $z_{1}^{:A\rightarrow A}$
\end_inset

, 
\begin_inset Formula $z_{2}^{:B\rightarrow B}$
\end_inset

, 
\begin_inset Formula $g_{1}^{:(A\rightarrow A)\rightarrow A\rightarrow A}$
\end_inset

, 
\begin_inset Formula $g_{2}^{:(B\rightarrow B)\rightarrow B\rightarrow B}$
\end_inset

,
\begin_inset Formula 
\begin{align*}
\text{precondition}:\quad & \text{when}\quad(u\rightarrow f\bef u)\bef g_{1}\bef(v\rightarrow v\bef f)=(u\rightarrow u\bef f)\bef g_{2}\bef(v\rightarrow f\bef v)\text{ and }z_{1}\bef f=f\bef z_{2}\\
\text{conclusion}:\quad & \text{then}\quad z_{1}\triangleright g_{1}\bef(u\rightarrow u\bef f)\overset{?}{=}z_{2}\triangleright g_{2}\bef(v\rightarrow f\bef v)\quad.
\end{align*}

\end_inset

The precondition is simplified (by applying to an arbitrary value 
\begin_inset Formula $u^{:B\rightarrow A}$
\end_inset

) to:
\begin_inset Formula 
\[
\forall u^{:B\rightarrow A}.\,g_{1}(f\bef u)\bef f=f\bef g_{2}(u\bef f)\text{ and }z_{1}\bef f=f\bef z_{2}\quad.
\]

\end_inset

Choose 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 as a constant function 
\begin_inset Formula $f\triangleq\_^{:A}\rightarrow b_{0}$
\end_inset

 with a fixed value 
\begin_inset Formula $b_{0}^{:B}$
\end_inset

.
 The law becomes:
\begin_inset Formula 
\[
\text{when}\quad b_{0}=b_{0}\triangleright g_{2}(\_\rightarrow b_{0})\text{ and }b_{0}=z_{2}(b_{0})\quad\text{then}\quad b_{0}\overset{?}{=}b_{0}\triangleright g_{2}(z_{2})\quad.
\]

\end_inset

To find a counterexample, we need to show that, with suitable functions
 
\begin_inset Formula $z_{2}$
\end_inset

 and 
\begin_inset Formula $g_{2}$
\end_inset

, the precondition holds but the conclusion fails to hold.
 We may choose for simplicity 
\begin_inset Formula $g_{2}^{:(B\rightarrow B)\rightarrow B\rightarrow B}=\text{id}^{B\rightarrow B}$
\end_inset

.
 It remains to find a function 
\begin_inset Formula $z_{2}^{:B\rightarrow B}$
\end_inset

 such that 
\begin_inset Formula $z_{2}(b_{0})=b_{0}$
\end_inset

 and 
\begin_inset Formula $ $
\end_inset

,
\begin_inset Formula 
\begin{align*}
 & b_{0}=b_{0}\triangleright g_{2}(\_\rightarrow b_{0})\\
 & b_{0}=z_{2}(b_{0})\\
 & b_{0}\neq b_{0}\triangleright g_{2}(z_{2})
\end{align*}

\end_inset

To get a counterexample, we just need to find 
\begin_inset Formula $g_{2}$
\end_inset

 such that 
\begin_inset Formula $g_{2}(\_\rightarrow b_{0})\neq g_{2}(z_{2})$
\end_inset

 for some function 
\begin_inset Formula $z_{2}^{:B\rightarrow B}$
\end_inset

 that is not constant but satisfies 
\begin_inset Formula $z_{2}(b_{0})=b_{0}$
\end_inset

.
 We could even have 
\begin_inset Formula $g_{2}=\text{id}$
\end_inset

 and this will work.
\end_layout

\begin_layout Plain Layout
???
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
We will now formulate the pushout property used in the previous statement.
 
\end_layout

\end_inset

Let us look at some examples of profunctors to see which ones have the pushout
 property.
\end_layout

\begin_layout Subsubsection
Example 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Example-weak-pullback-property-1"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-weak-pullback-property-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 Suppose a profunctor 
\begin_inset Formula $P^{X,Y}$
\end_inset

 does not depend on the type parameter 
\begin_inset Formula $X$
\end_inset

 (so, 
\begin_inset Formula $P^{X,Y}\triangleq G^{Y}$
\end_inset

 with some functor 
\begin_inset Formula $G$
\end_inset

).
 Then 
\begin_inset Formula $P$
\end_inset

 has the pushout property.
 
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 The pushout property holds for profunctors 
\begin_inset Formula $P^{X,Y}\triangleq H^{X}$
\end_inset

, where 
\begin_inset Formula $H$
\end_inset

 is a contrafunctor.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 With the choice 
\begin_inset Formula $P^{X,Y}\triangleq G^{Y}$
\end_inset

, we have the liftings 
\begin_inset Formula $f^{\uparrow P}=f^{\uparrow G}$
\end_inset

 and 
\begin_inset Formula $f^{\downarrow P}=f$
\end_inset

.
 The pushout property of 
\begin_inset Formula $P^{X,Y}$
\end_inset

 says that, for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, 
\begin_inset Formula $x^{:G^{A}}$
\end_inset

, 
\begin_inset Formula $y^{:G^{B}}$
\end_inset

:
\begin_inset Formula 
\[
\text{when}\quad x\triangleright f^{\uparrow G}=y\quad\text{ then }\quad\exists p^{:G^{A}}\text{ such that }x=p\text{ and }y=p\triangleright f^{\uparrow G}\quad.
\]

\end_inset

This property is satisfied by choosing 
\begin_inset Formula $p\triangleq x$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 With the choice 
\begin_inset Formula $P^{X,Y}\triangleq H^{X}$
\end_inset

, we have the liftings 
\begin_inset Formula $f^{\uparrow P}=f$
\end_inset

 and 
\begin_inset Formula $f^{\downarrow P}=f^{\downarrow H}$
\end_inset

.
 The pushout property of 
\begin_inset Formula $P^{X,Y}$
\end_inset

 says that, for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, 
\begin_inset Formula $x^{:H^{A}}$
\end_inset

, 
\begin_inset Formula $y^{:H^{B}}$
\end_inset

:
\begin_inset Formula 
\[
\text{when}\quad x=y\triangleright f^{\downarrow H}\quad\text{ then }\quad\exists p^{:H^{A}}\text{ such that }x=p\triangleright f^{\downarrow H}\text{ and }y=p\quad.
\]

\end_inset

This property is satisfied by choosing 
\begin_inset Formula $p\triangleq y$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Example 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Example-weak-pullback-property"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-weak-pullback-property"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The profunctor 
\begin_inset Formula $P^{X,Y}\triangleq X\rightarrow Y$
\end_inset

 does 
\emph on
not
\emph default
 have the pushout property.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
With 
\begin_inset Formula $P^{X,Y}\triangleq X\rightarrow Y$
\end_inset

, we rewrite the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation (
\begin_inset Formula $x\triangleright f^{\uparrow P^{A,\bullet}}=y\triangleright f^{\downarrow P^{\bullet,B}}$
\end_inset

) for arbitrary 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, 
\begin_inset Formula $x^{:A\rightarrow A}$
\end_inset

, and 
\begin_inset Formula $y^{:B\rightarrow B}$
\end_inset

 as:
\begin_inset Formula 
\[
x\bef f=f\bef y\quad.
\]

\end_inset

The pushout property requires us to find a value 
\begin_inset Formula $p^{:B\rightarrow A}$
\end_inset

 such that 
\begin_inset Formula $x=f\bef p$
\end_inset

 and 
\begin_inset Formula $y=p\bef f$
\end_inset

.
 Choose 
\begin_inset Formula $f$
\end_inset

 as a constant function (
\begin_inset Formula $f\triangleq\_\rightarrow b_{0}$
\end_inset

 with a fixed value 
\begin_inset Formula $b_{0}^{:B}$
\end_inset

).
 The 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation applied to an arbitrary value 
\begin_inset Formula $a^{:A}$
\end_inset

 gives:
\begin_inset Formula 
\[
a\triangleright x\bef f=b_{0}\overset{!}{=}a\triangleright f\bef y=y(b_{0})\quad.
\]

\end_inset

So, the wedge relation will hold for any 
\begin_inset Formula $x^{:A\rightarrow A}$
\end_inset

 and for any 
\begin_inset Formula $y^{:B\rightarrow B}$
\end_inset

 such that 
\begin_inset Formula $y(b_{0})=b_{0}$
\end_inset

.
 In particular, 
\begin_inset Formula $y$
\end_inset

 is not necessarily a constant function.
 But the condition 
\begin_inset Formula $y=p\bef f=\_\rightarrow b_{0}$
\end_inset

 can be satisfied only if 
\begin_inset Formula $y$
\end_inset

 is a constant function.
 So, there exists no suitable value 
\begin_inset Formula $p^{:P^{B,A}}$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
Structural analysis allows us to discover profunctors that have the pushout
 property:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-weak-pullback-property"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-weak-pullback-property"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
A profunctor 
\begin_inset Formula $P^{X,Y}$
\end_inset

 has the pushout property if:
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 
\begin_inset Formula $P^{X,Y}\triangleq F^{Y}$
\end_inset

 with some (covariant) functor 
\begin_inset Formula $F$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 
\begin_inset Formula $P^{X,Y}\triangleq G^{X}$
\end_inset

 with some contrafunctor 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 
\begin_inset Formula $P^{X,Y}\triangleq Z\rightarrow Q^{X,Y}$
\end_inset

 with a fixed type 
\begin_inset Formula $Z$
\end_inset

 and a profunctor 
\begin_inset Formula $Q$
\end_inset

 that has the pushout property.
\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 
\begin_inset Formula $P^{X,Y}\triangleq Q^{X,Y}\times R^{X,Y}$
\end_inset

 with profunctors 
\begin_inset Formula $Q$
\end_inset

 and 
\begin_inset Formula $R$
\end_inset

 that both have the pushout property.
\end_layout

\begin_layout Standard

\series bold
(e)
\series default
 
\begin_inset Formula $P^{X,Y}\triangleq Q^{X,Y}+R^{X,Y}$
\end_inset

 with profunctors 
\begin_inset Formula $Q$
\end_inset

 and 
\begin_inset Formula $R$
\end_inset

 that both have the pushout property.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
Consider some values 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, 
\begin_inset Formula $x^{:P^{A,A}}$
\end_inset

, and 
\begin_inset Formula $y^{:P^{B,B}}$
\end_inset

, for which the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation holds:
\begin_inset Formula 
\[
x\triangleright f^{\uparrow P^{A,\bullet}}=y\triangleright f^{\downarrow P^{\bullet,B}}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 If 
\begin_inset Formula $P^{X,Y}=F^{Y}$
\end_inset

 with a functor 
\begin_inset Formula $F$
\end_inset

, the wedge relation is simplified to 
\begin_inset Formula $x\triangleright f^{\uparrow F}=y$
\end_inset

 with 
\begin_inset Formula $x^{:F^{A}}$
\end_inset

 and 
\begin_inset Formula $y^{:F^{B}}$
\end_inset

.
 We need to find 
\begin_inset Formula $p^{:F^{A}}$
\end_inset

 such that 
\begin_inset Formula $x=p$
\end_inset

 and 
\begin_inset Formula $y=x\triangleright f^{\uparrow F}$
\end_inset

.
 So, we define 
\begin_inset Formula $p\triangleq x$
\end_inset

 and complete the commuting square.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 If 
\begin_inset Formula $P^{X,Y}=G^{X}$
\end_inset

 with a contrafunctor 
\begin_inset Formula $G$
\end_inset

, the wedge relation is simplified to 
\begin_inset Formula $x=y\triangleright f^{\downarrow G}$
\end_inset

 with 
\begin_inset Formula $x^{:G^{A}}$
\end_inset

 and 
\begin_inset Formula $y^{:G^{B}}$
\end_inset

.
 We need to find 
\begin_inset Formula $p^{:G^{B}}$
\end_inset

 such that 
\begin_inset Formula $x=p\triangleright f^{\downarrow G}$
\end_inset

 and 
\begin_inset Formula $y=p$
\end_inset

.
 So, we define 
\begin_inset Formula $p\triangleq y$
\end_inset

 and complete the commuting square.
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 Write the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation for 
\begin_inset Formula $x^{:Z\rightarrow Q^{A,A}}$
\end_inset

 and 
\begin_inset Formula $y^{:Z\rightarrow Q^{B,B}}$
\end_inset

, applied to an arbitrary 
\begin_inset Formula $z^{:Z}$
\end_inset

:
\begin_inset Formula 
\[
z\triangleright x\triangleright f^{\uparrow Q^{A,\bullet}}=z\triangleright y\triangleright f^{\downarrow Q^{\bullet,B}}\quad.
\]

\end_inset

Note that this is the same as the 
\begin_inset Formula $\left(Q,f\right)$
\end_inset

-wedge relation for the values 
\begin_inset Formula $z\triangleright x$
\end_inset

 and 
\begin_inset Formula $z\triangleright y$
\end_inset

.
 By assumption, 
\begin_inset Formula $Q^{X,Y}$
\end_inset

 has the pushout property.
 So, we may apply that property to 
\begin_inset Formula $z\triangleright x$
\end_inset

 and 
\begin_inset Formula $z\triangleright y$
\end_inset

 and obtain a value 
\begin_inset Formula $q^{:Q^{B,A}}$
\end_inset

 that satisfies the following two equations:
\begin_inset Formula 
\begin{equation}
q\triangleright f^{\uparrow Q^{B,\bullet}}=z\triangleright y\quad,\quad\quad q\triangleright f^{\downarrow Q^{\bullet,A}}=z\triangleright x\quad.\label{eq:weak-pullback-c-derivation1}
\end{equation}

\end_inset

We need to find 
\begin_inset Formula $p^{:Z\rightarrow Q^{B,A}}$
\end_inset

 such that 
\begin_inset Formula $x=p\bef f^{\downarrow Q^{\bullet,A}}$
\end_inset

 and 
\begin_inset Formula $y=p\bef f^{\uparrow Q^{B,\bullet}}$
\end_inset

.
 These equations are the same as Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:weak-pullback-c-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) if we define 
\begin_inset Formula $p(z)\triangleq q$
\end_inset

.
 We have found a value 
\begin_inset Formula $p$
\end_inset

 that completes the square diagram.
\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 Write the wedge relation for 
\begin_inset Formula $x^{:Q^{A,A}\times R^{A,A}}=x_{1}^{:Q^{A,A}}\times x_{2}^{:R^{A,A}}$
\end_inset

 and 
\begin_inset Formula $y^{:Q^{B,B}\times R^{B,B}}=y_{1}^{:Q^{B,B}}\times y_{2}^{:R^{B,B}}$
\end_inset

 as:
\begin_inset Formula 
\[
(x_{1}\times x_{2})\triangleright f^{\uparrow(Q\times R)}=(x_{1}\triangleright f^{\uparrow Q})\times(x_{2}\triangleright f^{\uparrow R})\overset{!}{=}(y_{1}\times y_{2})\triangleright f^{\downarrow(Q\times R)}=(y_{1}\triangleright f^{\downarrow Q})\times(y_{2}\triangleright f^{\downarrow R})\quad.
\]

\end_inset

This equation is equivalent to the two equations:
\begin_inset Formula 
\[
x_{1}\triangleright f^{\uparrow Q}\overset{!}{=}y_{1}\triangleright f^{\downarrow Q}\quad\text{ and }\quad x_{2}\triangleright f^{\uparrow R}\overset{!}{=}y_{2}\triangleright f^{\downarrow R}\quad,
\]

\end_inset

which are the 
\begin_inset Formula $\left(Q,f\right)$
\end_inset

- and 
\begin_inset Formula $\left(R,f\right)$
\end_inset

-wedge relations.
 By assumption, 
\begin_inset Formula $Q$
\end_inset

 and 
\begin_inset Formula $R$
\end_inset

 have the pushout property.
 So, we may compute values 
\begin_inset Formula $p_{1}^{:Q^{B,A}}$
\end_inset

 and 
\begin_inset Formula $p_{2}^{:R^{B,A}}$
\end_inset

 such that:
\begin_inset Formula 
\[
p_{1}\triangleright f^{\downarrow Q}=x_{1}\quad,\quad\quad p_{1}\triangleright f^{\uparrow Q}=y_{1}\quad,\quad\quad p_{2}\triangleright f^{\downarrow R}=x_{2}\quad,\quad\quad p_{2}\triangleright f^{\uparrow R}=y_{2}\quad.
\]

\end_inset

If we define 
\begin_inset Formula $p\triangleq p_{1}\times p_{2}$
\end_inset

, we complete the square diagram for 
\begin_inset Formula $\left(Q\times R,f\right)$
\end_inset

-wedge relation because:
\begin_inset Formula 
\[
p\triangleright f^{\downarrow(Q\times R)}=(p_{1}\triangleright f^{\downarrow Q})\times(p_{2}\triangleright f^{\downarrow R})=x_{1}\times x_{2}\quad,\quad\quad p\triangleright f^{\uparrow(Q\times R)}=(p_{1}\triangleright f^{\uparrow Q})\times(p_{2}\triangleright f^{\uparrow R})=y_{1}\times y_{2}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard

\series bold
(e)
\series default
 Write the wedge relation for 
\begin_inset Formula $x^{:Q^{A,A}+R^{A,A}}$
\end_inset

 and 
\begin_inset Formula $y^{:Q^{B,B}+R^{B,B}}$
\end_inset

 as:
\begin_inset Formula 
\[
x\triangleright\,\begin{array}{|c||cc|}
 & Q^{A,B} & R^{A,B}\\
\hline Q^{A,A} & f^{\uparrow Q^{A,\bullet}} & \bbnum 0\\
R^{A,A} & \bbnum 0 & f^{\uparrow R^{A,\bullet}}
\end{array}\,=y\triangleright\,\begin{array}{|c||cc|}
 & Q^{A,B} & R^{A,B}\\
\hline Q^{B,B} & f^{\downarrow Q^{\bullet,B}} & \bbnum 0\\
R^{B,B} & \bbnum 0 & f^{\downarrow R^{\bullet,B}}
\end{array}\quad.
\]

\end_inset

This equation can be satisfied only if both sides are either of type 
\begin_inset Formula $Q^{A,B}+\bbnum 0$
\end_inset

 or of type 
\begin_inset Formula $\bbnum 0+R^{A,B}$
\end_inset

.
 Since the lifting matrices are diagonal, this can happen only if 
\begin_inset Formula $x$
\end_inset

 has type 
\begin_inset Formula $Q^{A,A}+\bbnum 0$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 has type 
\begin_inset Formula $Q^{B,B}+\bbnum 0$
\end_inset

, of if 
\begin_inset Formula $x$
\end_inset

 has type 
\begin_inset Formula $\bbnum 0+R^{A,A}$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 has type 
\begin_inset Formula $\bbnum 0+R^{B,B}$
\end_inset

.
 In the first case, the property becomes equivalent to that of the profunctor
 
\begin_inset Formula $Q$
\end_inset

; in the second case, to that of the profunctor 
\begin_inset Formula $R$
\end_inset

.
\end_layout

\begin_layout Standard
To see this in detail, consider two cases: 
\begin_inset Formula $x\triangleq x_{1}^{:Q^{A,A}}+\bbnum 0$
\end_inset

 and 
\begin_inset Formula $x\triangleq\bbnum 0+x_{2}^{:R^{A,A}}$
\end_inset

.
 In the first case, 
\begin_inset Formula $x\triangleright f^{\uparrow P}=(x_{1}\triangleright f^{\uparrow Q})+\bbnum 0$
\end_inset

.
 This can be equal to 
\begin_inset Formula $y\triangleright f^{\downarrow P}$
\end_inset

 only if 
\begin_inset Formula $y\triangleright f^{\downarrow P}$
\end_inset

 is in the left part of the disjunction type 
\begin_inset Formula $Q^{A,B}+R^{A,B}$
\end_inset

.
 This happens only when 
\begin_inset Formula $y=y_{1}^{:Q^{B,B}}+\bbnum 0$
\end_inset

 with some 
\begin_inset Formula $y_{1}$
\end_inset

.
 So, the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation implies 
\begin_inset Formula $x_{1}\triangleright f^{\uparrow Q}=y_{1}\triangleright f^{\downarrow Q}$
\end_inset

.
 This is the 
\begin_inset Formula $\left(Q,f\right)$
\end_inset

-wedge relation for 
\begin_inset Formula $(x_{1},y_{1})$
\end_inset

.
 By assumption, 
\begin_inset Formula $Q$
\end_inset

 has the pushout property.
 So, we can compute some 
\begin_inset Formula $p_{1}^{:Q^{B,A}}$
\end_inset

 such that 
\begin_inset Formula $x_{1}=p_{1}\triangleright f^{\downarrow Q}$
\end_inset

 and 
\begin_inset Formula $y_{1}=p_{1}\triangleright f^{\uparrow Q}$
\end_inset

.
 If we now define 
\begin_inset Formula $p\triangleq p_{1}+\bbnum 0$
\end_inset

, we will have 
\begin_inset Formula $p\triangleright f^{\downarrow P}=x$
\end_inset

 and 
\begin_inset Formula $p\triangleright f^{\uparrow P}=y$
\end_inset

, so the pushout property of 
\begin_inset Formula $P$
\end_inset

 holds.
\end_layout

\begin_layout Standard
The case 
\begin_inset Formula $x\triangleq\bbnum 0+x_{2}^{:R^{A,A}}$
\end_inset

 is proved similarly by using the pushout property of 
\begin_inset Formula $R$
\end_inset

.
 
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout

\series bold
(f)
\series default
 Rewrite the wedge relation for 
\begin_inset Formula $x^{:S^{A,A,P^{A,A}}}$
\end_inset

 and 
\begin_inset Formula $y^{:S^{B,B,P^{B,B}}}$
\end_inset

 by using the explicit liftings to 
\begin_inset Formula $S$
\end_inset

:
\begin_inset Formula 
\[
x\triangleright f^{\uparrow S^{A,\bullet,P^{A,A}}}\bef\big(\overline{f^{\uparrow P^{A,\bullet}}}\big)^{\uparrow S^{A,B,\bullet}}=y\triangleright f^{\downarrow S^{\bullet,B,P^{B,B}}}\bef\big(\overline{f^{\downarrow P^{\bullet,B}}}\big)^{\uparrow S^{A,B,\bullet}}\quad.
\]

\end_inset

Due to the commutativity law of 
\begin_inset Formula $S$
\end_inset

, we may exchange the order of compositions here:
\begin_inset Formula 
\[
f^{\uparrow S^{A,\bullet,P^{A,B}}}\big(x\triangleright(f^{\uparrow P^{A,\bullet}})^{\uparrow S^{A,A,\bullet}}\big)=y\triangleright\big(\overline{f^{\downarrow P^{\bullet,B}}}\big)^{\uparrow S^{B,B,\bullet}}\triangleright f^{\downarrow S^{\bullet,B,P^{A,B}}}\quad.
\]

\end_inset

Now we can use the pushout property of 
\begin_inset Formula $S$
\end_inset

 to obtain some 
\begin_inset Formula $z:S^{B,A,P^{A,B}}$
\end_inset

 such that
\begin_inset Formula 
\[
x\triangleright\big(\overline{f^{\uparrow P^{A,\bullet}}}\big)^{\uparrow S^{A,A,\bullet}}=z\triangleright f^{\downarrow S^{\bullet,A,P^{A,B}}}\text{ and }y\triangleright\big(\overline{f^{\downarrow P^{\bullet,B}}}\big)^{\uparrow S^{B,B,\bullet}}=z\triangleright f^{\uparrow S^{B,\bullet,P^{A,B}}}\quad.
\]

\end_inset

We need to produce a value 
\begin_inset Formula $t:S^{B,A,P^{B,A}}$
\end_inset

 such that 
\begin_inset Formula 
\[
x=t\triangleright f^{\downarrow S^{\bullet,A,P^{B,A}}}\bef\big(\overline{f^{\downarrow P^{\bullet,A}}}\big)^{\uparrow S^{A,A,\bullet}}\text{ and }y=t\triangleright f^{\uparrow S^{B,\bullet,P^{B,A}}}\bef\big(\overline{f^{\uparrow P^{B,\bullet}}}\big)^{\uparrow S^{B,B,\bullet}}\quad.
\]

\end_inset


\end_layout

\end_inset


\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
The list of constructions in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-weak-pullback-property"
plural "false"
caps "false"
noprefix "false"

\end_inset

 does not include the recursive type construction.
 It remains an open question whether, say, a suitably limited form of the
 recursive type construction would produce new profunctors having the pushout
 property.
\end_layout

\begin_layout Standard
However, profunctors 
\begin_inset Formula $P$
\end_inset

 with the pushout property are not the only ones that produce strongly dinatural
 transformations.
 This is because the pushout property is too restrictive.
 It is sufficient if the lifted relation 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 is a 
\emph on
consequence
\emph default
 of the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation.
 We call this the 
\begin_inset Quotes eld
\end_inset

post-wedge
\begin_inset Quotes erd
\end_inset

 property
\begin_inset Index idx
status open

\begin_layout Plain Layout
profunctor!post-wedge property
\end_layout

\end_inset

 of the profunctor 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Standard
Here and below, we will frequently need to use liftings 
\begin_inset Formula $r^{\updownarrow T}$
\end_inset

 to a type constructor 
\begin_inset Formula $T^{\bullet}$
\end_inset

 defined as 
\begin_inset Formula $T^{A}\triangleq P^{A,A}$
\end_inset

 with some profunctor 
\begin_inset Formula $P^{X,Y}$
\end_inset

.
 Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-relational-lifting-consistency-PAA"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows that 
\begin_inset Formula $r^{\updownarrow T}=(r,r)^{\updownarrow P}$
\end_inset

.
 So, we will write the simultaneous lifting 
\begin_inset Formula $(r,r)^{\updownarrow P}$
\end_inset

 simply as 
\begin_inset Formula $r^{\updownarrow P}$
\end_inset

 when this does not cause confusion.
\end_layout

\begin_layout Subsubsection
Definition 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Definition-pre-post-wedge-property"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-pre-post-wedge-property"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
A profunctor 
\begin_inset Formula $P$
\end_inset

 has the 
\series bold
post-wedge property
\series default
 if for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, 
\begin_inset Formula $x^{:P^{A,A}}$
\end_inset

, and 
\begin_inset Formula $y^{:P^{B,B}}$
\end_inset

:
\begin_inset Formula 
\[
\text{if }\quad x\triangleright f^{\uparrow P}=x\triangleright f^{\downarrow P}\quad\text{ then }\quad(x,y)\in\left<f\right>^{\updownarrow P}\quad.
\]

\end_inset

In other words, the lifted relation 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 always follows from the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
By Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-wedge-law-from-parametricity"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a), the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation is always a consequence of the lifted relation 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

.
 So, the post-wedge property of 
\begin_inset Formula $P$
\end_inset

 means that 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 is 
\emph on
equivalent
\emph default
 to the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-post-wedge-entails-strong-dinaturality"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-post-wedge-entails-strong-dinaturality"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $P$
\end_inset

 is a profunctor with the post-wedge property and 
\begin_inset Formula $Q$
\end_inset

 is any profunctor then any fully parametric function 
\begin_inset Formula $t:\forall A.\,P^{A,A}\rightarrow Q^{A,A}$
\end_inset

 is strongly dinatural.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
The post-wedge property of 
\begin_inset Formula $P$
\end_inset

 means:
\begin_inset Formula 
\[
\text{if}\quad(x^{:P^{A,A}},y^{:P^{B,B}})\in\text{pull}\,(f^{\uparrow P},f^{\downarrow P})\quad\text{then}\quad(x,y)\in\left<f\right>^{\updownarrow P}\quad.
\]

\end_inset

Since 
\begin_inset Formula $t$
\end_inset

 is fully parametric, it satisfies the relational naturality law:
\begin_inset Formula 
\[
\text{if}\quad(x,y)\in\left<f\right>^{\updownarrow P}\quad\text{then}\quad(t^{A}(x),t^{B}(y))\in\left<f\right>^{\updownarrow Q}\quad.
\]

\end_inset

By Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-wedge-law-from-parametricity"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a), the wedge law follows from the relational naturality law of 
\begin_inset Formula $t$
\end_inset

:
\begin_inset Formula 
\[
\text{if}\quad(t^{A}(x),t^{B}(y))\in\left<f\right>^{\updownarrow Q}\quad\text{then}\quad(t^{A}(x),t^{B}(y))\in\text{pull}\,(f^{\uparrow Q},f^{\downarrow Q})\quad.
\]

\end_inset

Chaining the implications, we find:
\begin_inset Formula 
\[
\text{if}\quad(x^{:P^{A,A}},y^{:P^{B,B}})\in\text{pull}\,(f^{\uparrow P},f^{\downarrow P})\quad\text{then}\quad(t^{A}(x),t^{B}(y))\in\text{pull}\,(f^{\uparrow Q},f^{\downarrow Q})\quad.
\]

\end_inset

This is the strong dinaturality law of 
\begin_inset Formula $t$
\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
We will now do structural analysis to describe the profunctors with the
 post-wedge property.
\begin_inset Foot
status open

\begin_layout Plain Layout
The following derivations are based on the talk slides: 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://www.ioc.ee/~tarmo/tday-voore/vene-slides.pdf"
literal "false"

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-post-wedge"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-post-wedge"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
A profunctor 
\begin_inset Formula $P$
\end_inset

 will have the post-wedge property if:
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 The type expression 
\begin_inset Formula $P^{X,Y}$
\end_inset

 does not depend either on 
\begin_inset Formula $X$
\end_inset

 or on 
\begin_inset Formula $Y$
\end_inset

.
 That is, either 
\begin_inset Formula $P^{X,Y}\triangleq Q^{Y}$
\end_inset

 where 
\begin_inset Formula $Q$
\end_inset

 is a functor or 
\begin_inset Formula $P^{X,Y}\triangleq R^{X}$
\end_inset

 where 
\begin_inset Formula $R$
\end_inset

 is a contrafunctor.
 
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 We have 
\begin_inset Formula $P^{X,Y}\triangleq K^{X,Y}\times L^{X,Y}$
\end_inset

, where the profunctors 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

 have the post-wedge property.
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 We have 
\begin_inset Formula $P^{X,Y}\triangleq K^{X,Y}+L^{X,Y}$
\end_inset

, where the profunctors 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

 have the post-wedge property.
\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 We have 
\begin_inset Formula $P^{X,Y}\triangleq K^{Y,X}\rightarrow L^{X,Y}$
\end_inset

, where the profunctor 
\begin_inset Formula $K$
\end_inset

 has the pushout property and the profunctor 
\begin_inset Formula $L$
\end_inset

 has the post-wedge property.
\begin_inset Note Comment
status open

\begin_layout Plain Layout

\series bold
(e)
\series default
 We have a recursive type 
\begin_inset Formula $P^{X,Y}\triangleq S^{X,Y,P^{X,Y}}$
\end_inset

, where 
\begin_inset Formula $S^{X,Y,R}$
\end_inset

 is contravariant in 
\begin_inset Formula $X$
\end_inset

 and covariant in 
\begin_inset Formula $Y$
\end_inset

 and 
\begin_inset Formula $R$
\end_inset

, and has the post-wedge property when viewed as a profunctor with respect
 to 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $Y$
\end_inset

.
 Does the post-wedge really hold for 
\begin_inset Formula $P$
\end_inset

?
\end_layout

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
In each case, assuming the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation for 
\begin_inset Formula $(x,y)$
\end_inset

, we will show that 
\begin_inset Formula $(x,y)\in\left<f\right>^{\updownarrow P}$
\end_inset

.
 
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 If 
\begin_inset Formula $P^{X,Y}$
\end_inset

 does not depend on one of its type parameters then we have either 
\begin_inset Formula $P^{X,Y}\triangleq Q^{Y}$
\end_inset

 or 
\begin_inset Formula $P^{X,Y}\triangleq R^{X}$
\end_inset

.
 We know from Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-weak-pullback-property"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a, b) that 
\begin_inset Formula $P$
\end_inset

 will then have the pushout property.
 So, if any values 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 are in the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation then 
\begin_inset Formula $(x,y)\in\text{push}\,(f^{\downarrow P},f^{\uparrow P})$
\end_inset

.
 By Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-profunctor-pushout-entails-lifted-f"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we will also have 
\begin_inset Formula $(x,y)\in\left<f\right>^{\uparrow P}$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 We need to show that 
\begin_inset Formula $P$
\end_inset

 has the post-wedge property:
\begin_inset Formula 
\[
\text{if }\quad(k_{1}^{:K^{A,A}}\times l_{1}^{:L^{A,A}})\triangleright f^{\uparrow P}=(k_{2}^{:K^{B,B}}\times l_{2}^{:L^{B,B}})\triangleright f^{\downarrow P}\quad\text{ then }\quad(k_{1}\times l_{1},k_{2}\times l_{2})\in\left<f\right>^{\updownarrow P}\quad.
\]

\end_inset

Using the definitions of the liftings 
\begin_inset Formula $^{\updownarrow P}$
\end_inset

, 
\begin_inset Formula $^{\uparrow P}$
\end_inset

, and 
\begin_inset Formula $^{\downarrow P}$
\end_inset

, we rewrite the above condition as:
\begin_inset Formula 
\[
\text{if }\quad k_{1}\triangleright f^{\uparrow K}=k_{2}\triangleright f^{\downarrow K}\text{ and }l_{1}\triangleright f^{\uparrow L}=l_{2}\triangleright f^{\downarrow L}\quad\text{ then }\quad(k_{1},k_{2})\in\left<f\right>^{\updownarrow K}\text{ and }(l_{1},l_{2})\in\left<f\right>^{\updownarrow L}\quad.
\]

\end_inset

This is the same as the conjunction of the post-wedge properties of 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

.
 
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 We need to show that 
\begin_inset Formula $P$
\end_inset

 has the post-wedge property:
\begin_inset Formula 
\[
\text{if }\quad p_{1}^{:K^{A,A}+L^{A,A}}\triangleright f^{\uparrow P}=p_{2}^{:K^{B,B}+L^{B,B}}\triangleright f^{\downarrow P}\quad\text{ then }\quad(p_{1},p_{2})\in\left<f\right>^{\updownarrow P}\quad.
\]

\end_inset

The liftings 
\begin_inset Formula $f^{\uparrow P}$
\end_inset

 and 
\begin_inset Formula $f^{\downarrow P}$
\end_inset

 are defined via the standard pattern-matching code for disjunctive types:
\begin_inset Formula 
\[
f^{\uparrow P^{A,\bullet}}\triangleq\,\begin{array}{|c||cc|}
 & K^{A,B} & L^{A,B}\\
\hline K^{A,A} & f^{\uparrow K^{A,\bullet}} & \bbnum 0\\
L^{A,A} & \bbnum 0 & f^{\uparrow L^{A,\bullet}}
\end{array}\quad,\quad\quad f^{\downarrow P^{\bullet,B}}\triangleq\,\begin{array}{|c||cc|}
 & K^{A,B} & L^{A,B}\\
\hline K^{B,B} & f^{\downarrow K^{\bullet,B}} & \bbnum 0\\
L^{B,B} & \bbnum 0 & f^{\downarrow L^{\bullet,B}}
\end{array}\quad.
\]

\end_inset

Since both code matrices are diagonal, the two parts of the disjunctive
 type 
\begin_inset Formula $K+L$
\end_inset

 do not mix.
 It follows that 
\begin_inset Formula $p_{1}\triangleright f^{\uparrow P}=p_{2}\triangleright f^{\downarrow P}$
\end_inset

 only if both 
\begin_inset Formula $p_{1}$
\end_inset

 and 
\begin_inset Formula $p_{2}$
\end_inset

 are in the same part of the disjunction 
\begin_inset Formula $K+L$
\end_inset

.
 If both 
\begin_inset Formula $p_{1}$
\end_inset

 and 
\begin_inset Formula $p_{2}$
\end_inset

 are in the left part of the disjunction, we have 
\begin_inset Formula $p_{1}\triangleq k_{1}^{:K^{A,A}}+\bbnum 0$
\end_inset

 and 
\begin_inset Formula $p_{2}\triangleq k_{2}^{:K^{B,B}}+\bbnum 0$
\end_inset

, and the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation for 
\begin_inset Formula $p_{1}$
\end_inset

 and 
\begin_inset Formula $p_{2}$
\end_inset

 reduces to the 
\begin_inset Formula $\left(K,f\right)$
\end_inset

-wedge relation for 
\begin_inset Formula $k_{1}$
\end_inset

 and 
\begin_inset Formula $k_{2}$
\end_inset

:
\begin_inset Formula 
\[
k_{1}\triangleright f^{\uparrow K}=k_{2}\triangleright f^{\downarrow K}\quad.
\]

\end_inset

By Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

(d), the values 
\begin_inset Formula $p_{1}$
\end_inset

 and 
\begin_inset Formula $p_{2}$
\end_inset

 will be in the relation 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 only if 
\begin_inset Formula $(k_{1},k_{2})\in\left<f\right>^{\updownarrow K}$
\end_inset

.
 Then the post-wedge property of 
\begin_inset Formula $P$
\end_inset

 becomes:
\begin_inset Formula 
\[
\text{if }\quad k_{1}\triangleright f^{\uparrow K}=k_{2}\triangleright f^{\downarrow K}\quad\text{ then }\quad(k_{1},k_{2})\in\left<f\right>^{\updownarrow K}\quad.
\]

\end_inset

This holds because it is just the post-wedge property of 
\begin_inset Formula $K$
\end_inset

.
 Similarly, we prove that if both 
\begin_inset Formula $p_{1}$
\end_inset

 and 
\begin_inset Formula $p_{2}$
\end_inset

 are in the right part of the disjunction then the post-wedge property of
 
\begin_inset Formula $P$
\end_inset

 is reduced to the post-wedge property of 
\begin_inset Formula $L$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 Express the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation and the relation 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

 for 
\begin_inset Formula $(x,y)$
\end_inset

 through liftings to 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

:
\begin_inset Formula 
\begin{align}
 & x^{:K^{A,A}\rightarrow L^{A,A}}\triangleright f^{\uparrow P^{A,\bullet}}=y^{:K^{B,B}\rightarrow L^{B,B}}\triangleright f^{\downarrow P^{\bullet,B}}\quad\text{or equivalently}:\quad f^{\downarrow K^{\bullet,A}}\bef x\bef f^{\uparrow L^{A,\bullet}}=f^{\uparrow K^{B,\bullet}}\bef y\bef f^{\downarrow L^{\bullet,B}}\quad,\label{eq:p-f-wedge-relation-x-y-derivation1}\\
 & (x^{:K^{A,A}\rightarrow L^{A,A}},y^{:K^{B,B}\rightarrow L^{B,B}})\in\left<f\right>^{\updownarrow P}\text{ means if }(k_{1}^{:K^{A,A}},k_{2}^{:K^{B,B}})\in\left<f\right>^{\updownarrow K}\text{ then }(x(k_{1}),y(k_{2}))\in\left<f\right>^{\updownarrow L}\quad.\nonumber 
\end{align}

\end_inset

Fix any 
\begin_inset Formula $k_{1}^{:K^{A,A}}$
\end_inset

 and 
\begin_inset Formula $k_{2}^{:K^{B,B}}$
\end_inset

 such that 
\begin_inset Formula $(k_{1},k_{2})\in\left<f\right>^{\updownarrow K}$
\end_inset

.
 We need to prove that 
\begin_inset Formula $(x(k_{1}),y(k_{2}))\in\left<f\right>^{\updownarrow L}$
\end_inset

 assuming Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:p-f-wedge-relation-x-y-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
The pushout property of 
\begin_inset Formula $K$
\end_inset

 gives:
\begin_inset Formula 
\[
\text{if }\quad k_{1}^{:K^{A,A}}\triangleright f^{\uparrow K}=k_{2}^{:K^{B,B}}\triangleright f^{\downarrow K}\quad\text{ then }\quad\exists k_{0}^{:K^{B,A}}\text{ such that }k_{1}=k_{0}\triangleright f^{\downarrow K^{\bullet,A}}\text{ and }k_{2}=k_{0}\triangleright f^{\uparrow K^{B,\bullet}}\quad.
\]

\end_inset

So, there exists a suitable value 
\begin_inset Formula $k_{0}^{:K^{B,A}}$
\end_inset

.
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
By Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-wedge-law-from-parametricity"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a), the values 
\begin_inset Formula $k_{1}$
\end_inset

, 
\begin_inset Formula $k_{2}$
\end_inset

 are in the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation: 
\begin_inset Formula $k_{1}\triangleright f^{\uparrow K}=k_{2}\triangleright f^{\downarrow K}$
\end_inset

.
\end_layout

\end_inset

 Apply both sides of Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:p-f-wedge-relation-x-y-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) to that 
\begin_inset Formula $k_{0}$
\end_inset

:
\begin_inset Formula 
\[
k_{0}\triangleright f^{\downarrow K^{\bullet,A}}\bef x\bef f^{\uparrow L^{A,\bullet}}=k_{0}\triangleright f^{\uparrow K^{B,\bullet}}\bef y\bef f^{\downarrow L^{\bullet,B}}\quad\text{or equivalently}:\quad k_{1}\triangleright x\triangleright f^{\uparrow L}=k_{2}\triangleright y\triangleright f^{\downarrow L}\quad.
\]

\end_inset

 It is also given that 
\begin_inset Formula $L$
\end_inset

 has the post-wedge property:
\begin_inset Formula 
\[
\text{if }\quad l_{1}^{:L^{A,A}}\triangleright f^{\uparrow L}=l_{2}^{:L^{B,B}}\triangleright f^{\downarrow L}\quad\text{ then }\quad(l_{1},l_{2})\in\left<f\right>^{\updownarrow L}\quad.
\]

\end_inset

We now set 
\begin_inset Formula $l_{1}\triangleq k_{1}\triangleright x$
\end_inset

 and 
\begin_inset Formula $l_{2}\triangleq k_{2}\triangleright y$
\end_inset

 to obtain 
\begin_inset Formula $(x(k_{1}),y(k_{2}))\in\left<f\right>^{\updownarrow L}$
\end_inset

 as required.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
As a consequence of Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-post-wedge"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we can quickly prove (without structural analysis) that a function relation
 lifted to functors or contrafunctors will yield another function relation:
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-lifting-function-relation-covariant-1"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-lifting-function-relation-covariant-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Lifting a function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 to a fully parametric functor or a contrafunctor 
\begin_inset Formula $G$
\end_inset

 agrees with lifting the relation 
\begin_inset Formula $\left<f\right>$
\end_inset

 to 
\begin_inset Formula $G$
\end_inset

.
 In detail: 
\series bold
(a)
\series default
 
\begin_inset Formula $\left<f\right>^{\updownarrow G}=\langle f^{\uparrow G}\rangle$
\end_inset

 if 
\begin_inset Formula $G$
\end_inset

 is a functor.
 
\series bold
(b)
\series default
 
\begin_inset Formula $\left<f\right>^{\updownarrow G}=\text{rev}\langle f^{\downarrow G}\rangle$
\end_inset

 if 
\begin_inset Formula $G$
\end_inset

 is a contrafunctor.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
Whether 
\begin_inset Formula $G$
\end_inset

 is a functor or a contrafunctor, Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-post-wedge"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a) shows that it has the post-wedge property.
 So, the relation 
\begin_inset Formula $(\left<f\right>,\left<f\right>)^{\updownarrow P}$
\end_inset

 is 
\emph on
equivalent
\emph default
 to the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation:
\begin_inset Formula 
\[
(x,y)\in(\left<f\right>,\left<f\right>)^{\updownarrow P}\quad\text{is equivalent to}:\quad x\triangleright f^{\uparrow P}=y\triangleright f^{\downarrow P}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 If 
\begin_inset Formula $G$
\end_inset

 is a functor, define 
\begin_inset Formula $P^{X,Y}\triangleq G^{Y}$
\end_inset

.
 Simplifying 
\begin_inset Formula $(\left<f\right>,\left<f\right>)^{\updownarrow P}=\left<f\right>^{\updownarrow G}$
\end_inset

 and using the liftings 
\begin_inset Formula $f^{\uparrow P}=f^{\uparrow G}$
\end_inset

 and 
\begin_inset Formula $f^{\downarrow P}=\text{id}$
\end_inset

, we get:
\begin_inset Formula 
\[
(x,y)\in\left<f\right>^{\updownarrow G}\quad\text{is equivalent to}:\quad x\triangleright f^{\uparrow G}=y\quad\text{or equivalently}:\quad(x,y)\in\langle f^{\uparrow G}\rangle\quad.
\]

\end_inset

So, we find 
\begin_inset Formula $\left<f\right>^{\updownarrow G}=\langle f^{\uparrow G}\rangle$
\end_inset

 as required.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 If 
\begin_inset Formula $G$
\end_inset

 is a contrafunctor, define 
\begin_inset Formula $P^{X,Y}\triangleq G^{X}$
\end_inset

.
 Simplifying 
\begin_inset Formula $(\left<f\right>,\left<f\right>)^{\updownarrow P}=\left<f\right>^{\updownarrow G}$
\end_inset

 and using the liftings 
\begin_inset Formula $f^{\uparrow P}=\text{id}$
\end_inset

 and 
\begin_inset Formula $f^{\downarrow P}=f^{\downarrow G}$
\end_inset

, we get:
\begin_inset Formula 
\[
(x,y)\in\left<f\right>^{\updownarrow G}\quad\text{is equivalent to}:\quad x=y\triangleright f^{\downarrow G}\quad\text{or equivalently}:\quad(x,y)\in\text{rev}\langle f^{\downarrow G}\rangle\quad.
\]

\end_inset

 So, we find 
\begin_inset Formula $\left<f\right>^{\updownarrow G}=\text{rev}\langle f^{\downarrow G}\rangle$
\end_inset

 as required.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
Strong dinaturality holds only for type signatures 
\begin_inset Formula $\forall A.\,K^{A,A}\rightarrow L^{A,A}$
\end_inset

 where the profunctor 
\begin_inset Formula $K$
\end_inset

 has a certain structure.
 Nevertheless, a broad range of practically encountered functions have type
 signatures of this form.
 Here are some examples.
\end_layout

\begin_layout Subsubsection
Example 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Example-strong-dinaturality-for-some-type-signatures"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-strong-dinaturality-for-some-type-signatures"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solved examples
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Use Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-post-wedge-entails-strong-dinaturality"
plural "false"
caps "false"
noprefix "false"

\end_inset

 to show that strong dinaturality holds for all fully parametric functions
 with the following type signatures:
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 
\begin_inset Formula $\forall A.\,F^{A}\rightarrow H^{A}\quad.$
\end_inset


\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 
\begin_inset Formula $\forall A.\,F^{A}\rightarrow G^{A}\rightarrow H^{A}\quad.$
\end_inset


\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 
\begin_inset Formula $\forall A.\,(F^{A}\rightarrow G^{A})\rightarrow H^{A}\quad.$
\end_inset


\end_layout

\begin_layout Standard
Here each of 
\begin_inset Formula $F^{\bullet}$
\end_inset

, 
\begin_inset Formula $G^{\bullet}$
\end_inset

, 
\begin_inset Formula $H^{\bullet}$
\end_inset

 is independently either a functor or a contrafunctor.
 
\end_layout

\begin_layout Subparagraph
Solution
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 and 
\series bold
(b)
\series default
 We can represent these type signatures as 
\begin_inset Formula $\forall A.\,K^{A,A}\rightarrow L^{A,A}$
\end_inset

 with some profunctors 
\begin_inset Formula $K^{X,Y}$
\end_inset

 and 
\begin_inset Formula $L^{X,Y}$
\end_inset

.
 Then we will need to consider two cases where 
\begin_inset Formula $F$
\end_inset

 is either covariant or contravariant.
 If 
\begin_inset Formula $F$
\end_inset

 is covariant, we define 
\begin_inset Formula $K^{X,Y}\triangleq F^{Y}$
\end_inset

.
 If 
\begin_inset Formula $F$
\end_inset

 is contravariant, we define 
\begin_inset Formula $K^{X,Y}\triangleq F^{X}$
\end_inset

.
 In every case, 
\begin_inset Formula $K$
\end_inset

 depends on only one of its type parameters.
 We define 
\begin_inset Formula $L^{X,Y}$
\end_inset

 appropriately for each case.
 By Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-post-wedge"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a), 
\begin_inset Formula $K$
\end_inset

 will have the post-wedge property.
 Strong dinaturality will then follow from Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-post-wedge-entails-strong-dinaturality"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 The type signature 
\begin_inset Formula $\forall A.\,(F^{A}\rightarrow G^{A})\rightarrow H^{A}$
\end_inset

 needs to be expressed as 
\begin_inset Formula $\forall A.\,K^{A,A}\rightarrow L^{A,A}$
\end_inset

 with some profunctors 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

.
 We define 
\begin_inset Formula $K^{X,Y}\triangleq M^{Y,X}\rightarrow N^{X,Y}$
\end_inset

 with suitably chosen profunctors 
\begin_inset Formula $M$
\end_inset

 and 
\begin_inset Formula $N$
\end_inset

.
 Reasoning as before, we find that the profunctors 
\begin_inset Formula $M$
\end_inset

 and 
\begin_inset Formula $N$
\end_inset

 will depend only on one of their type parameters.
 So, they will have the post-wedge property.
 In addition, Example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-weak-pullback-property-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a) shows that 
\begin_inset Formula $M$
\end_inset

 has the pushout property.
 The post-wedge property of 
\begin_inset Formula $K$
\end_inset

 is then established via Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-post-wedge"
plural "false"
caps "false"
noprefix "false"

\end_inset

(d).
 So, the profunctor 
\begin_inset Formula $K$
\end_inset

 satisfies the conditions of Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-post-wedge-entails-strong-dinaturality"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Standard
Example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-strong-dinaturality-for-some-type-signatures"
plural "false"
caps "false"
noprefix "false"

\end_inset

(c) is used in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-Church-encoding-recursive-type-covariant"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for the Church encoding of recursive types.
\end_layout

\begin_layout Subsection
Strong dinaturality of 
\family typewriter
foldFn
\end_layout

\begin_layout Standard
This section will show that the function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

foldFn
\end_layout

\end_inset

 used in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-foldleft-foldmap-equivalence"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is strongly dinatural.
 The type signature of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

foldFn
\end_layout

\end_inset

,
\begin_inset Formula 
\[
\text{foldFn}_{L}:\forall B.\,L^{B\rightarrow B}\rightarrow B\rightarrow B\quad,
\]

\end_inset

is not immediately covered by Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-post-wedge-entails-strong-dinaturality"
plural "false"
caps "false"
noprefix "false"

\end_inset

 because it contains the composition of an arbitrary functor 
\begin_inset Formula $L$
\end_inset

 and a profunctor.
 To handle 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

foldFn
\end_layout

\end_inset

, we will first need to prove some additional properties.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-functor-post-pre-wedge"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-functor-post-pre-wedge"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $L^{\bullet}$
\end_inset

 is a polynomial functor and 
\begin_inset Formula $K^{\bullet,\bullet}$
\end_inset

 is a profunctor with the post-wedge property then the profunctor 
\begin_inset Formula $P^{X,Y}\triangleq L^{K^{X,Y}}$
\end_inset

 also has the post-wedge property.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
Assume any two values 
\begin_inset Formula $x^{:L^{K^{A,A}}}$
\end_inset

 and 
\begin_inset Formula $y^{:L^{K^{B,B}}}$
\end_inset

 that are in the 
\begin_inset Formula $\left(P,f\right)$
\end_inset

-wedge relation:
\begin_inset Formula 
\[
(x,y)\in\text{pull}\,(f^{\uparrow K^{A,\bullet}\uparrow L},f^{\downarrow K^{\bullet,B}\uparrow L})\quad\text{or equivalently}:\quad x\triangleright f^{\uparrow K^{A,\bullet}\uparrow L}=y\triangleright f^{\downarrow K^{\bullet,B}\uparrow L}\quad.
\]

\end_inset

We need to show that 
\begin_inset Formula $\left(x,y\right)\in\left<f\right>^{\updownarrow P}$
\end_inset

.
 As shown in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-functor-composition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 below, lifting a relation to 
\begin_inset Formula $P$
\end_inset

 means first lifting to 
\begin_inset Formula $K$
\end_inset

 and then to 
\begin_inset Formula $L$
\end_inset

, so 
\begin_inset Formula $\left<f\right>^{\updownarrow P}=\left<f\right>^{\updownarrow K\updownarrow L}$
\end_inset

.
 Since 
\begin_inset Formula $K$
\end_inset

 has the post-wedge property, the 
\begin_inset Formula $\left(K,f\right)$
\end_inset

-wedge relation is equivalent to the relation 
\begin_inset Formula $\left<f\right>^{\updownarrow K}$
\end_inset

:
\begin_inset Formula 
\[
(k_{1},k_{2})\in\left<f\right>^{\updownarrow K}\quad\text{is equivalent to}:\quad(k_{1},k_{2})\in\text{pull}\,(f^{\uparrow K^{A,\bullet}},f^{\downarrow K^{B,\bullet}})\quad.
\]

\end_inset

By Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pullback-lifted-to-functor"
plural "false"
caps "false"
noprefix "false"

\end_inset

 proved below, lifting a pullback relation to 
\begin_inset Formula $L$
\end_inset

 gives again a pullback relation:
\begin_inset Formula 
\[
\left(x,y\right)\in\left<f\right>^{\updownarrow P}=\big(\text{pull}\,(f^{\uparrow K^{A,\bullet}},f^{\downarrow K^{B,\bullet}})\big)^{\updownarrow L}\quad\text{means}\quad(x,y)\in\text{pull}\,(f^{\uparrow K^{A,\bullet}\uparrow L},f^{\downarrow K^{\bullet,B}\uparrow L})\quad.
\]

\end_inset

So, 
\begin_inset Formula $\left(x,y\right)$
\end_inset

 are in the relation 
\begin_inset Formula $\left<f\right>^{\updownarrow P}$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-functor-composition-relational-lifting"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-functor-composition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
For any type constructors 
\begin_inset Formula $G^{\bullet}$
\end_inset

 and 
\begin_inset Formula $H^{\bullet}$
\end_inset

, define 
\begin_inset Formula $F\triangleq G\circ H$
\end_inset

 or equivalently 
\begin_inset Formula $F^{A}\triangleq G^{H^{A}}$
\end_inset

.
 Then the lifting of any relation 
\begin_inset Formula $r^{:A\leftrightarrow B}$
\end_inset

 to 
\begin_inset Formula $F^{\bullet}$
\end_inset

 can be expressed as 
\begin_inset Formula $r^{\updownarrow F}=(r^{\updownarrow H})^{\updownarrow G}$
\end_inset

, which we may write more concisely as 
\begin_inset Formula $r^{\updownarrow F}=r^{\updownarrow H\updownarrow G}$
\end_inset

.
\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
For each case of Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for the type constructor 
\begin_inset Formula $G^{\bullet}$
\end_inset

, we show that 
\begin_inset Formula $r^{\updownarrow F}=(r^{\updownarrow H})^{\updownarrow G}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Constant type
\end_layout

\begin_layout Standard
With 
\begin_inset Formula $G^{A}\triangleq Z$
\end_inset

 where 
\begin_inset Formula $Z$
\end_inset

 is a fixed type, we have 
\begin_inset Formula $F^{A}=Z$
\end_inset

, so we write:
\begin_inset Formula 
\[
r^{\updownarrow F}=\text{id}^{:Z\leftrightarrow Z}\quad\text{and}\quad(r^{\updownarrow H})^{\updownarrow G}=\text{id}^{:Z\leftrightarrow Z}\quad.
\]

\end_inset


\end_layout

\begin_layout Paragraph
Type parameter
\end_layout

\begin_layout Standard
With 
\begin_inset Formula $G^{A}\triangleq A$
\end_inset

, we have 
\begin_inset Formula $F^{A}=H^{A}$
\end_inset

, so we write:
\begin_inset Formula 
\[
r^{\updownarrow F}=r^{\updownarrow H}\quad\text{and}\quad(r^{\updownarrow H})^{\updownarrow G}=(r^{\updownarrow H})^{\updownarrow\text{Id}}=r^{\updownarrow H}\quad.
\]

\end_inset


\end_layout

\begin_layout Paragraph
Products
\end_layout

\begin_layout Standard
With 
\begin_inset Formula $G^{A}\triangleq K^{A}\times L^{A}$
\end_inset

, we have 
\begin_inset Formula $F^{A}=K^{H^{A}}\times L^{H^{A}}$
\end_inset

.
 Assuming that Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-functor-composition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 already holds for 
\begin_inset Formula $K\circ H$
\end_inset

 and 
\begin_inset Formula $L\circ H$
\end_inset

, we write:
\begin_inset Formula 
\begin{align*}
 & r^{\updownarrow F}=r^{\updownarrow(K\circ H)}\boxtimes r^{\updownarrow(L\circ H)}=r^{\updownarrow H\updownarrow K}\boxtimes r^{\updownarrow H\updownarrow L}=(r^{\updownarrow H})^{\updownarrow K}\boxtimes(r^{\updownarrow H})^{\updownarrow L}\quad,\\
 & (r^{\updownarrow H})^{\updownarrow G}=(r^{\updownarrow H})^{\updownarrow(K\times L)}=(r^{\updownarrow H})^{\updownarrow K}\boxtimes(r^{\updownarrow H})^{\updownarrow L}\quad.
\end{align*}

\end_inset

The two relations are now equal.
\end_layout

\begin_layout Paragraph
Co-products and function types
\end_layout

\begin_layout Standard
The proofs are similar to that for products if we replace the operation
 
\begin_inset Formula $\boxtimes$
\end_inset

 by 
\begin_inset Formula $\boxplus$
\end_inset

 or by 
\begin_inset Formula $\ogreaterthan$
\end_inset

 everywhere as appropriate.
\end_layout

\begin_layout Paragraph
Recursive types
\end_layout

\begin_layout Standard
With 
\begin_inset Formula $G^{A}\triangleq S^{A,G^{A}}$
\end_inset

, we have 
\begin_inset Formula $F^{A}=S^{H^{A},G^{H^{A}}}=S^{H^{A},F^{A}}$
\end_inset

.
 Denoting 
\begin_inset Formula $Q^{A,B}\triangleq S^{H^{A},B}$
\end_inset

, we can write 
\begin_inset Formula $F^{A}=Q^{A,F^{A}}$
\end_inset

.
 One inductive assumption is that Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-functor-composition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 already holds separately with respect to each type parameter of 
\begin_inset Formula $S^{\bullet,\bullet}$
\end_inset

 and, in particular, a simultaneous lifting to 
\begin_inset Formula $Q$
\end_inset

 satisfies:
\begin_inset Formula 
\[
(r,s)^{\updownarrow P}=(r,s)^{\updownarrow S^{H^{\bullet},\bullet}}=(r^{\updownarrow H},s)^{\updownarrow S^{\bullet,\bullet}}\quad.
\]

\end_inset

Then we can finish the derivation:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }(r^{\updownarrow H})^{\updownarrow G}:\quad & r^{\updownarrow F}=(r,\overline{r^{\updownarrow F}})^{\updownarrow P}=(r^{\updownarrow H},\overline{r^{\updownarrow F}})^{\updownarrow S}\\
\text{inductive assumption }\overline{r^{\updownarrow F}}=\overline{r^{\updownarrow H\updownarrow G}}:\quad & =(r^{\updownarrow H},\overline{r^{\updownarrow H\updownarrow G}})^{\updownarrow S}=(r^{\updownarrow H})^{\updownarrow G}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Paragraph
Quantified types
\end_layout

\begin_layout Standard
With 
\begin_inset Formula $G^{A}\triangleq\forall X.\,P^{X,A}$
\end_inset

, we have 
\begin_inset Formula $F^{A}=\forall X.\,P^{X,H^{A}}$
\end_inset

.
 We may assume that Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-functor-composition-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 already holds separately for liftings with respect to each type parameter
 of 
\begin_inset Formula $P^{\bullet,\bullet}$
\end_inset

.
 In particular, if we denote 
\begin_inset Formula $Q^{X,B}\triangleq P^{X,H^{B}}$
\end_inset

 then:
\begin_inset Formula 
\[
(s,r)^{\updownarrow Q}=(s,r)^{\updownarrow P^{\bullet,H^{\bullet}}}=(s,r^{\updownarrow H})^{\updownarrow P}\quad.
\]

\end_inset

For any types 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $X$
\end_inset

, 
\begin_inset Formula $Y$
\end_inset

 and for any values 
\begin_inset Formula $p^{:F^{A}}$
\end_inset

 and 
\begin_inset Formula $q^{:F^{B}}$
\end_inset

, we write:
\begin_inset Formula 
\begin{align*}
 & (p,q)\in r^{\updownarrow F}\quad\text{means}\quad\forall s^{:X\leftrightarrow Y}\,:\,(p^{X},q^{Y})\in(s,r)^{\updownarrow P^{\bullet,H^{\bullet}}}=(s,r^{\updownarrow H})^{\updownarrow P}\quad,\\
 & (p,q)\in(r^{\updownarrow H})^{\updownarrow G}\quad\text{means}\quad\forall s^{:X\leftrightarrow Y}\,:\,(p^{X},q^{Y})\in(s,r^{\updownarrow H})^{\updownarrow P^{\bullet,\bullet}}\quad.
\end{align*}

\end_inset

The two relations are now equal.
 
\end_layout

\begin_layout Subsubsection
Statement 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Statement-pullback-lifted-to-functor"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pullback-lifted-to-functor"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The lifting of a pullback relation to any polynomial functor 
\begin_inset Formula $F$
\end_inset

 is equivalent to a pullback relation with lifted functions:
\begin_inset Formula 
\[
\text{for all }f^{:A\rightarrow C},g^{:B\rightarrow C}\quad:\quad\big(\text{pull}\,(f,g)\big)^{\updownarrow F}=\text{pull}\,(f^{\uparrow F},g^{\uparrow F})\quad.
\]

\end_inset


\end_layout

\begin_layout Subparagraph
Proof
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Most likely this is wrong for non-polynomial (although covariant) functors
 
\begin_inset Formula $F$
\end_inset


\end_layout

\end_inset

We enumerate the type constructions that 
\begin_inset Formula $F$
\end_inset

 is built from.
 Denote 
\begin_inset Formula $r^{:A\leftrightarrow B}\triangleq\text{pull}\,(f,g)$
\end_inset

.
\end_layout

\begin_layout Paragraph
Constant types
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{A}\triangleq Z$
\end_inset

 where 
\begin_inset Formula $Z$
\end_inset

 is a fixed type then 
\begin_inset Formula $r^{\updownarrow F}=\text{id}^{:Z\leftrightarrow Z}$
\end_inset

.
 We write:
\begin_inset Formula 
\[
\text{pull}\,(f^{\uparrow F},g^{\uparrow F})=\text{pull}\,(\text{id}^{:Z\leftrightarrow Z},\text{id}^{:Z\leftrightarrow Z})=\text{id}^{:Z\leftrightarrow Z}=r^{\updownarrow F}\quad.
\]

\end_inset


\end_layout

\begin_layout Paragraph
Type parameter
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{A}\triangleq A$
\end_inset

 then 
\begin_inset Formula $r^{\updownarrow F}=r$
\end_inset

, 
\begin_inset Formula $f^{\uparrow F}=f$
\end_inset

, and 
\begin_inset Formula $g^{\uparrow F}=g$
\end_inset

.
 We write:
\begin_inset Formula 
\[
\text{pull}\,(f^{\uparrow F},g^{\uparrow F})=\text{pull}\,(f,g)=r=r^{\updownarrow F}\quad.
\]

\end_inset


\end_layout

\begin_layout Paragraph
Products
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{A}\triangleq K^{A}\times L^{A}$
\end_inset

 then 
\begin_inset Formula $r^{\updownarrow F}=r^{\updownarrow K}\boxtimes r^{\updownarrow L}$
\end_inset

, 
\begin_inset Formula $f^{\uparrow F}=f^{\uparrow K}\boxtimes f^{\uparrow L}$
\end_inset

, and 
\begin_inset Formula $g^{\uparrow F}=g^{\uparrow K}\boxtimes g^{\uparrow L}$
\end_inset

.
 For any values 
\begin_inset Formula $k_{1}^{:K^{A}}$
\end_inset

, 
\begin_inset Formula $l_{1}^{:L^{A}}$
\end_inset

, 
\begin_inset Formula $k_{2}^{:K^{B}}$
\end_inset

, and 
\begin_inset Formula $l_{2}^{:L^{B}}$
\end_inset

, we write out the relation 
\begin_inset Formula $r^{\updownarrow F}$
\end_inset

:
\begin_inset Formula 
\[
(k_{1}\times l_{1},k_{2}\times l_{2})\in r^{\updownarrow F}=r^{\updownarrow K}\boxtimes r^{\updownarrow L}\quad\text{means}\quad(k_{1},k_{2})\in r^{\updownarrow K}\text{ and }(l_{1},l_{2})\in r^{\updownarrow L}\quad.
\]

\end_inset

The inductive assumptions for 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

 allow us to rewrite the last conditions as:
\begin_inset Formula 
\[
(k_{1},k_{2})\in\text{pull}\,(f^{\uparrow K},g^{\uparrow K})\quad\text{ and }\quad(l_{1},l_{2})\in\text{pull}\,(f^{\uparrow L},g^{\uparrow L})\quad.
\]

\end_inset

Turning now to the pullback relation, 
\begin_inset Formula $\text{pull}\,(f^{\uparrow F},g^{\uparrow F})$
\end_inset

, we write:
\begin_inset Formula 
\begin{align*}
 & (k_{1}^{:K^{A}}\times l_{1}^{:L^{A}},k_{2}^{:K^{B}}\times l_{2}^{:L^{B}})\in\text{pull}\,(f^{\uparrow F},g^{\uparrow F})=\text{pull}\,(f^{\uparrow K}\boxtimes f^{\uparrow L},g^{\uparrow K}\boxtimes g^{\uparrow L})\\
 & \quad\text{means}\quad(k_{1}\times l_{1})\triangleright(f^{\uparrow K}\boxtimes f^{\uparrow L})=(k_{2}\times l_{2})\triangleright(g^{\uparrow K}\boxtimes g^{\uparrow L})\quad,\\
\text{or equivalently}:\quad & k_{1}\triangleright f^{\uparrow K}=k_{2}\triangleright g^{\uparrow K}\quad\text{ and }\quad l_{1}\triangleright f^{\uparrow L}=l_{2}\triangleright g^{\uparrow L}\quad.
\end{align*}

\end_inset

The last conditions are now the same as for the relation 
\begin_inset Formula $r^{\updownarrow F}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Co-products
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{A}\triangleq K^{A}+L^{A}$
\end_inset

 then 
\begin_inset Formula $r^{\updownarrow F}=r^{\updownarrow K}\boxplus r^{\updownarrow L}$
\end_inset

, 
\begin_inset Formula $f^{\uparrow F}=f^{\uparrow K}\boxplus f^{\uparrow L}$
\end_inset

, and 
\begin_inset Formula $g^{\uparrow F}=g^{\uparrow K}\boxplus g^{\uparrow L}$
\end_inset

.
 For any values 
\begin_inset Formula $k_{1}^{:K^{A}}$
\end_inset

, 
\begin_inset Formula $l_{1}^{:L^{A}}$
\end_inset

, 
\begin_inset Formula $k_{2}^{:K^{B}}$
\end_inset

, and 
\begin_inset Formula $l_{2}^{:L^{B}}$
\end_inset

, we write out the relation 
\begin_inset Formula $r^{\updownarrow F}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{either}:\quad & (k_{1}+\bbnum 0,k_{2}+\bbnum 0)\in r^{\updownarrow K}\boxplus r^{\updownarrow L}\quad\text{when}\quad(k_{1},k_{2})\in r^{\updownarrow K}\quad,\\
\text{or}:\quad & (\bbnum 0+l_{1},\bbnum 0+l_{2})\in r^{\updownarrow K}\boxplus r^{\updownarrow L}\quad\text{when}\quad(l_{1},l_{2})\in r^{\updownarrow L}\quad.
\end{align*}

\end_inset

The inductive assumptions for 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

 allow us to rewrite the last conditions as:
\begin_inset Formula 
\begin{align*}
 & (k_{1},k_{2})\in r^{\updownarrow K}=\text{pull}\,(f^{\uparrow K},g^{\uparrow K})\quad\text{or equivalently}:\quad k_{1}\triangleright f^{\uparrow K}=k_{2}\triangleright g^{\uparrow K}\quad,\\
 & (l_{1},l_{2})\in r^{\updownarrow L}=\text{pull}\,(f^{\uparrow L},g^{\uparrow L})\quad\text{or equivalently}:\quad l_{1}\triangleright f^{\uparrow L}=l_{2}\triangleright g^{\uparrow L}\quad.
\end{align*}

\end_inset

Turning now to the pullback relation, 
\begin_inset Formula $\text{pull}\,(f^{\uparrow F},g^{\uparrow F})$
\end_inset

, we write:
\begin_inset Formula 
\begin{align}
 & (p_{1}^{:K^{A}+L^{A}},p_{2}^{:K^{B}+L^{B}})\in\text{pull}\,(f^{\uparrow F},g^{\uparrow F})=\text{pull}\,(f^{\uparrow K}\boxplus f^{\uparrow L},g^{\uparrow K}\boxplus g^{\uparrow L})\nonumber \\
 & \quad\text{means}\quad p_{1}\triangleright(f^{\uparrow K}\boxplus f^{\uparrow L})=p_{2}\triangleright(g^{\uparrow K}\boxplus g^{\uparrow L})\quad.\label{eq:p1-p2-condition-derivation1}
\end{align}

\end_inset

The pair co-product (such as 
\begin_inset Formula $f^{\uparrow K}\boxplus f^{\uparrow L}$
\end_inset

) preserves the left and right parts of the disjunctive type, so the condition
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:p1-p2-condition-derivation1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is satisfied only when 
\begin_inset Formula $p_{1}$
\end_inset

 and 
\begin_inset Formula $p_{2}$
\end_inset

 are both in the same part of the disjunction:
\begin_inset Formula 
\begin{align*}
 & p_{1}\triangleright(f^{\uparrow K}\boxplus f^{\uparrow L})=p_{2}\triangleright(g^{\uparrow K}\boxplus g^{\uparrow L})\quad\text{means}\quad:\\
\text{either}:\quad & p_{1}=k_{1}+\bbnum 0\quad,\quad p_{2}=k_{2}+\bbnum 0\quad,\quad k_{1}\triangleright f^{\uparrow K}=k_{2}\triangleright g^{\uparrow K}\quad;\\
\text{or}:\quad & p_{1}=\bbnum 0+l_{1}\quad,\quad p_{2}=\bbnum 0+l_{2}\quad,\quad l_{1}\triangleright f^{\uparrow L}=l_{2}\triangleright g^{\uparrow L}\quad.
\end{align*}

\end_inset

The last conditions are now the same as for the relation 
\begin_inset Formula $r^{\updownarrow F}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Function types
\end_layout

\begin_layout Standard
We may not use this construction since 
\begin_inset Formula $F$
\end_inset

 is assumed to be a polynomial functor.
\begin_inset Note Note
status collapsed

\begin_layout Paragraph
Function types
\end_layout

\begin_layout Plain Layout
If 
\begin_inset Formula $F^{A}\triangleq K^{A}\rightarrow L^{A}$
\end_inset

 (where 
\begin_inset Formula $K$
\end_inset

 is a contrafunctor and 
\begin_inset Formula $L$
\end_inset

 is a functor) then 
\begin_inset Formula $r^{\updownarrow F}=r^{\updownarrow K}\ogreaterthan r^{\updownarrow L}$
\end_inset

 while:
\begin_inset Formula 
\[
f^{\uparrow F}=p^{:K^{A}\rightarrow L^{A}}\rightarrow f^{\downarrow K}\bef p\bef f^{\uparrow L}\quad,\quad\quad g^{\uparrow F}=p^{:K^{A}\rightarrow L^{A}}\rightarrow g^{\downarrow K}\bef p\bef g^{\uparrow L}\quad.
\]

\end_inset

Write the conditions for any 
\begin_inset Formula $p^{:K^{A}\rightarrow L^{A}}$
\end_inset

 and 
\begin_inset Formula $q^{:K^{B}\rightarrow L^{B}}$
\end_inset

 to be in the relations 
\begin_inset Formula $r^{\updownarrow F}$
\end_inset

 and 
\begin_inset Formula $\text{pull}\,(f^{\uparrow F},g^{\uparrow F})$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & (p,q)\in r^{\updownarrow F}\quad\text{means}\quad\forall(k_{1}^{:K^{A}},k_{2}^{:K^{B}}):\text{ if }(k_{1},k_{2})\in r^{\updownarrow K}\text{ then }(p(k_{1}),q(k_{2}))\in r^{\updownarrow L}\quad;\\
 & (p,q)\in\text{pull}\,(f^{\uparrow F},g^{\uparrow F})\quad\text{means}\quad f^{\downarrow K}\bef p\bef f^{\uparrow L}=g^{\downarrow K}\bef q\bef g^{\uparrow L}\quad.
\end{align*}

\end_inset

The inductive assumptions for the contrafunctor 
\begin_inset Formula $K$
\end_inset

 and the functor 
\begin_inset Formula $L$
\end_inset

 are:
\begin_inset Formula 
\[
r^{\updownarrow K}=\text{push}\,(f^{\downarrow K},g^{\downarrow K})\quad,\quad\quad r^{\updownarrow L}=\text{pull}\,(f^{\uparrow L},g^{\uparrow L})\quad.
\]

\end_inset

So, we can rewrite the condition 
\begin_inset Formula $(p,q)\in r^{\updownarrow F}$
\end_inset

 as:
\begin_inset Formula 
\[
(p,q)\in r^{\updownarrow F}\quad\text{means}\quad\forall(k_{1}^{:K^{A}},k_{2}^{:K^{B}}):\text{if }\exists z^{:K^{C}}:\;k_{1}=z\triangleright f^{\downarrow K}\text{ and }k_{2}=z\triangleright g^{\downarrow K}\text{ then }k_{1}\triangleright p\triangleright f^{\uparrow L}=k_{2}\triangleright q\triangleright g^{\uparrow L}\quad.
\]

\end_inset

Substituting 
\begin_inset Formula $k_{1}$
\end_inset

 and 
\begin_inset Formula $k_{2}$
\end_inset

 through 
\begin_inset Formula $z$
\end_inset

 and replacing 
\begin_inset Quotes eld
\end_inset

if exists 
\begin_inset Formula $z$
\end_inset


\begin_inset Quotes erd
\end_inset

 by 
\begin_inset Quotes eld
\end_inset

for all 
\begin_inset Formula $z$
\end_inset


\begin_inset Quotes erd
\end_inset

, we get:
\begin_inset Formula 
\[
(p,q)\in r^{\updownarrow F}\quad\text{means}\quad\text{for all }z^{:K^{C}}:\quad z\triangleright f^{\downarrow K}\triangleright p\triangleright f^{\uparrow L}=z\triangleright g^{\downarrow K}\triangleright q\triangleright g^{\uparrow L}\quad.
\]

\end_inset

The last condition is equivalent to 
\begin_inset Formula $f^{\downarrow K}\bef p\bef f^{\uparrow L}=g^{\downarrow K}\bef q\bef g^{\uparrow L}$
\end_inset

 as required.
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Recursive types
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $F^{A}\triangleq S^{A,F^{A}}$
\end_inset

 where 
\begin_inset Formula $S^{\bullet,\bullet}$
\end_inset

 is a polynomial bifunctor then:
\begin_inset Formula 
\[
r^{\updownarrow F}=\big(r,\overline{r^{\updownarrow F}}\big)^{\updownarrow S}\quad,\quad\quad f^{\uparrow F}=f^{\uparrow S^{\bullet,F^{A}}}\bef\big(\overline{f^{\uparrow F}}\big)^{\uparrow S^{C,\bullet}}\quad,\quad\quad g^{\uparrow F}=g^{\uparrow S^{\bullet,F^{B}}}\bef\big(\overline{g^{\uparrow F}}\big)^{\uparrow S^{C,\bullet}}\quad.
\]

\end_inset

The inductive assumptions are that Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-pullback-lifted-to-functor"
plural "false"
caps "false"
noprefix "false"

\end_inset

 already holds for the recursively used lifting 
\begin_inset Formula $\overline{r^{\updownarrow F}}$
\end_inset

 and for simultaneous liftings of 
\emph on
two
\emph default
 pullback relations to 
\begin_inset Formula $S^{\bullet,\bullet}$
\end_inset

.
 We can write these assumptions as:
\begin_inset Formula 
\begin{align*}
\text{for }\overline{r^{\updownarrow F}}:\quad & \overline{r^{\updownarrow F}}\overset{!}{=}\text{pull}\,\big(\overline{f^{\uparrow F}},\overline{g^{\uparrow F}}\big)\quad,\\
\text{for }S:\quad & \big(\text{pull}\,(f^{:A\rightarrow C},g^{:B\rightarrow C}),\,\,\text{pull}\,(h^{:X\rightarrow Z},k^{:Y\rightarrow Z})\big)^{\updownarrow S}\overset{!}{=}\text{pull}\,(f^{\uparrow S^{\bullet,X}}\bef h^{\uparrow S^{C,\bullet}},\,\,g^{\uparrow S^{\bullet,Y}}\bef k^{\uparrow S^{C,\bullet}})\quad,
\end{align*}

\end_inset

where the last pullback relation involves functions of types 
\begin_inset Formula $S^{A,X}\rightarrow S^{C,Z}$
\end_inset

 and 
\begin_inset Formula $S^{B,Y}\rightarrow S^{C,Z}$
\end_inset

.
 We write:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\text{pull}\,(f^{\uparrow F},g^{\uparrow F}):\quad & r^{\updownarrow F}=\big(r,\overline{r^{\updownarrow F}}\big)^{\updownarrow S}=\big(\text{pull}\,(f,g),\,\,\text{pull}\,\big(\overline{f^{\uparrow F}},\overline{g^{\uparrow F}}\big)\big)^{\updownarrow S}\\
\text{assumption for }S:\quad & =\text{pull}\,\big(f^{\uparrow S^{\bullet,F^{A}}}\bef\big(\overline{f^{\uparrow F}}\big)^{\uparrow S^{C,\bullet}}\,\,,g^{\uparrow S^{\bullet,F^{B}}}\bef\big(\overline{g^{\uparrow F}}\big)^{\uparrow S^{C,\bullet}}\big)\\
\text{definitions of }(...)^{\uparrow F}:\quad & =\text{pull}\,(f^{\uparrow F},g^{\uparrow F})\quad.
\end{align*}

\end_inset


\begin_inset Formula $\square$
\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
(b)
\series default
 We denote 
\begin_inset Formula $r\triangleq\text{push}\,(f,g)$
\end_inset

 and enumerate the constructions that create a contrafunctor 
\begin_inset Formula $F$
\end_inset

.
\end_layout

\begin_layout Paragraph
Constant types
\end_layout

\begin_layout Plain Layout
The case 
\begin_inset Formula $F^{A}\triangleq Z$
\end_inset

 where 
\begin_inset Formula $Z$
\end_inset

 is a fixed type was already proved in part 
\series bold
(a)
\series default
.
\end_layout

\begin_layout Paragraph
Type parameter
\end_layout

\begin_layout Plain Layout
If 
\begin_inset Formula $F^{A}\triangleq A$
\end_inset

 then 
\begin_inset Formula $F$
\end_inset

 is a functor, not a contrafunctor.
\end_layout

\begin_layout Paragraph
Products
\end_layout

\begin_layout Plain Layout
If 
\begin_inset Formula $F^{A}\triangleq K^{A}\times L^{A}$
\end_inset

 then we have 
\begin_inset Formula $f^{\downarrow F}=f^{\downarrow K}\boxtimes f^{\downarrow L}$
\end_inset

 and 
\begin_inset Formula $g^{\downarrow F}=g^{\downarrow K}\boxtimes g^{\downarrow L}$
\end_inset

.
 For any values 
\begin_inset Formula $k_{1}^{:K^{A}}$
\end_inset

, 
\begin_inset Formula $l_{1}^{:L^{A}}$
\end_inset

, 
\begin_inset Formula $k_{2}^{:K^{B}}$
\end_inset

, and 
\begin_inset Formula $l_{2}^{:L^{B}}$
\end_inset

, we write out the relation 
\begin_inset Formula $r^{\updownarrow F}$
\end_inset

:
\begin_inset Formula 
\[
(k_{1}\times l_{1},k_{2}\times l_{2})\in r^{\updownarrow F}=r^{\updownarrow K}\boxtimes r^{\updownarrow L}\quad\text{means}\quad(k_{1},k_{2})\in r^{\updownarrow K}\text{ and }(l_{1},l_{2})\in r^{\updownarrow L}\quad.
\]

\end_inset

The inductive assumptions for 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

 allow us to rewrite the last conditions as:
\begin_inset Formula 
\begin{align*}
 & (k_{1},k_{2})\in\text{push}\,(f^{\downarrow K},g^{\downarrow K})\quad\text{ and }\quad(l_{1},l_{2})\in\text{push}\,(f^{\downarrow L},g^{\downarrow L})\quad,\quad\text{or equivalently}:\\
 & \exists u^{:K^{C}}:\quad k_{1}=u\triangleright f^{\downarrow K}\quad,\quad k_{2}=u\triangleright g^{\downarrow K}\quad,\quad\text{and}\quad\exists v^{:L^{C}}:\quad l_{1}=v\triangleright f^{\downarrow L}\quad,\quad l_{2}=v\triangleright g^{\downarrow L}\quad.
\end{align*}

\end_inset

Turning now to the pushout relation, 
\begin_inset Formula $\text{push}\,(f^{\downarrow F},g^{\downarrow F})$
\end_inset

, we write:
\begin_inset Formula 
\begin{align*}
 & (k_{1}^{:K^{A}}\times l_{1}^{:L^{A}},k_{2}^{:K^{B}}\times l_{2}^{:L^{B}})\in\text{push}\,(f^{\downarrow F},g^{\downarrow F})=\text{push}\,(f^{\downarrow K}\boxtimes f^{\downarrow L},g^{\downarrow K}\boxtimes g^{\downarrow L})\quad\text{means}\quad:\\
 & \quad\exists(u\times v)^{:K^{C}\times L^{C}}\text{ such that}:\quad k_{1}\times l_{1}=(u\times v)\triangleright(f^{\downarrow K}\boxtimes f^{\downarrow L})\quad,\quad k_{2}\times l_{2}=(u\times v)\triangleright(g^{\downarrow K}\boxtimes g^{\downarrow L})\quad.
\end{align*}

\end_inset

After expanding the pair products, the last conditions become the same as
 for the relation 
\begin_inset Formula $r^{\updownarrow F}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Co-products
\end_layout

\begin_layout Plain Layout
If 
\begin_inset Formula $F^{A}\triangleq K^{A}+L^{A}$
\end_inset

 then 
\begin_inset Formula $r^{\updownarrow F}=r^{\updownarrow K}\boxplus r^{\updownarrow L}$
\end_inset

, 
\begin_inset Formula $f^{\downarrow F}=f^{\downarrow K}\boxplus f^{\downarrow L}$
\end_inset

, and 
\begin_inset Formula $g^{\downarrow F}=g^{\downarrow K}\boxplus g^{\downarrow L}$
\end_inset

.
 For any values 
\begin_inset Formula $k_{1}^{:K^{A}}$
\end_inset

, 
\begin_inset Formula $l_{1}^{:L^{A}}$
\end_inset

, 
\begin_inset Formula $k_{2}^{:K^{B}}$
\end_inset

, and 
\begin_inset Formula $l_{2}^{:L^{B}}$
\end_inset

, we write out the relation 
\begin_inset Formula $r^{\updownarrow F}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{either}:\quad & (k_{1}+\bbnum 0,k_{2}+\bbnum 0)\in r^{\updownarrow K}\boxplus r^{\updownarrow L}\quad\text{when}\quad(k_{1},k_{2})\in r^{\updownarrow K}\quad,\\
\text{or}:\quad & (\bbnum 0+l_{1},\bbnum 0+l_{2})\in r^{\updownarrow K}\boxplus r^{\updownarrow L}\quad\text{when}\quad(l_{1},l_{2})\in r^{\updownarrow L}\quad.
\end{align*}

\end_inset

The inductive assumptions for 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $L$
\end_inset

 allow us to rewrite the last conditions as:
\begin_inset Formula 
\begin{align*}
 & (k_{1},k_{2})\in r^{\updownarrow K}=\text{push}\,(f^{\downarrow K},g^{\downarrow K})\quad\text{or equivalently}:\quad\exists u^{:K^{C}}:\quad k_{1}=u\triangleright f^{\downarrow K}\quad,\quad k_{2}=u\triangleright g^{\downarrow K}\quad,\\
 & (l_{1},l_{2})\in r^{\updownarrow L}=\text{push}\,(f^{\downarrow L},g^{\downarrow L})\quad\text{or equivalently}:\quad\exists v^{:L^{C}}:\quad l_{1}=v\triangleright f^{\downarrow L}\quad,\quad l_{2}=v\triangleright g^{\downarrow L}\quad.
\end{align*}

\end_inset

Turning now to the pushout relation, 
\begin_inset Formula $\text{push}\,(f^{\uparrow F},g^{\uparrow F})$
\end_inset

, we write:
\begin_inset Formula 
\begin{align}
 & (p_{1}^{:K^{A}+L^{A}},p_{2}^{:K^{B}+L^{B}})\in\text{push}\,(f^{\downarrow F},g^{\downarrow F})=\text{push}\,(f^{\downarrow K}\boxplus f^{\downarrow L},g^{\downarrow K}\boxplus g^{\downarrow L})\nonumber \\
 & \quad\text{means}\quad\exists z^{:K^{C}+L^{C}}:\quad p_{1}=z\triangleright(f^{\downarrow K}\boxplus f^{\downarrow L})\quad,\quad p_{2}=z\triangleright(g^{\downarrow K}\boxplus g^{\downarrow L})\quad.\label{eq:p1-p2-condition-derivation1-1}
\end{align}

\end_inset

The pair co-product (such as 
\begin_inset Formula $f^{\downarrow K}\boxplus f^{\downarrow L}$
\end_inset

) preserves the left and right parts of the disjunctive type, so the condition
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:p1-p2-condition-derivation1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is satisfied only when 
\begin_inset Formula $p_{1}$
\end_inset

, 
\begin_inset Formula $p_{2}$
\end_inset

, and 
\begin_inset Formula $z$
\end_inset

 are in the same part of the disjunction:
\begin_inset Formula 
\begin{align*}
 & \exists z^{:K^{C}+L^{C}}:\quad p_{1}=z\triangleright(f^{\downarrow K}\boxplus f^{\downarrow L})\quad,\quad p_{2}=z\triangleright(g^{\downarrow K}\boxplus g^{\downarrow L})\quad\text{means}\quad:\\
\text{either}:\quad & z=u^{:K^{C}}+\bbnum 0\quad,\quad p_{1}=k_{1}+\bbnum 0\quad,\quad p_{2}=k_{2}+\bbnum 0\quad,\quad k_{1}=u\triangleright f^{\downarrow K}\quad,\quad k_{2}=u\triangleright g^{\downarrow K}\quad;\\
\text{or}:\quad & z=\bbnum 0+v^{:L^{C}}\quad,\quad p_{1}=\bbnum 0+l_{1}\quad,\quad p_{2}=\bbnum 0+l_{2}\quad,\quad l_{1}=v\triangleright f^{\downarrow L}\quad,\quad l_{2}=v\triangleright g^{\downarrow L}\quad.
\end{align*}

\end_inset

The last conditions are now the same as for the relation 
\begin_inset Formula $r^{\updownarrow F}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Function types
\end_layout

\begin_layout Plain Layout
If 
\begin_inset Formula $F^{A}\triangleq K^{A}\rightarrow L^{A}$
\end_inset

 (where 
\begin_inset Formula $K$
\end_inset

 is a functor and 
\begin_inset Formula $L$
\end_inset

 is a contrafunctor) then 
\begin_inset Formula $r^{\updownarrow F}=r^{\updownarrow K}\ogreaterthan r^{\updownarrow L}$
\end_inset

 while:
\begin_inset Formula 
\[
f^{\downarrow F}=p^{:K^{A}\rightarrow L^{A}}\rightarrow f^{\uparrow K}\bef p\bef f^{\downarrow L}\quad,\quad\quad g^{\downarrow F}=p^{:K^{A}\rightarrow L^{A}}\rightarrow g^{\uparrow K}\bef p\bef g^{\downarrow L}\quad.
\]

\end_inset

Write the conditions for any 
\begin_inset Formula $p^{:K^{A}\rightarrow L^{A}}$
\end_inset

 and 
\begin_inset Formula $q^{:K^{B}\rightarrow L^{B}}$
\end_inset

 to be in the relations 
\begin_inset Formula $r^{\updownarrow F}$
\end_inset

 and 
\begin_inset Formula $\text{push}\,(f^{\downarrow F},g^{\downarrow F})$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & (p,q)\in r^{\updownarrow F}\quad\text{means}\quad\forall(k_{1}^{:K^{A}},k_{2}^{:K^{B}}):\text{ if }(k_{1},k_{2})\in r^{\updownarrow K}\text{ then }(p(k_{1}),q(k_{2}))\in r^{\updownarrow L}\quad;\\
 & (p,q)\in\text{push}\,(f^{\downarrow F},g^{\downarrow F})\quad\text{means}\quad\exists z^{:K^{C}\rightarrow L^{C}}:\quad p=f^{\uparrow K}\bef z\bef f^{\downarrow L}\text{ and }q=g^{\uparrow K}\bef z\bef g^{\downarrow L}\quad.
\end{align*}

\end_inset

The inductive assumptions for the functor 
\begin_inset Formula $K$
\end_inset

 and the contrafunctor 
\begin_inset Formula $L$
\end_inset

 are:
\begin_inset Formula 
\[
r^{\updownarrow K}=\text{pull}\,(f^{\uparrow K},g^{\uparrow K})\quad,\quad\quad r^{\updownarrow L}=\text{push}\,(f^{\downarrow L},g^{\downarrow L})\quad.
\]

\end_inset

So, we can rewrite the condition 
\begin_inset Formula $(p,q)\in r^{\updownarrow F}$
\end_inset

 as:
\begin_inset Formula 
\[
(p,q)\in r^{\updownarrow F}\quad\text{means}\quad\forall(k_{1}^{:K^{A}},k_{2}^{:K^{B}}):\text{if }k_{1}\triangleright f^{\uparrow K}=k_{2}\triangleright g^{\uparrow K}\quad\text{then}\quad\exists z^{:L^{C}}:\;p(k_{1})=z\triangleright f^{\downarrow L}\text{ and }q(k_{2})=z\triangleright g^{\downarrow L}\quad.
\]

\end_inset

The last condition is equivalent to *** as required.
\end_layout

\begin_layout Paragraph
Recursive types
\end_layout

\begin_layout Plain Layout
***
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The strong dinaturality property of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

foldFn
\end_layout

\end_inset

 is now proved as a special case of Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-functor-post-pre-wedge"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\end_layout

\begin_layout Subsubsection
Example 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Example-strong-dinaturality-proof-of-foldFn-law"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Example-strong-dinaturality-proof-of-foldFn-law"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solved examples
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Show that any fully parametric function 
\begin_inset Formula $f:\forall A.\,L^{A\rightarrow A}\rightarrow A\rightarrow A$
\end_inset

 is strongly dinatural when 
\begin_inset Formula $L$
\end_inset

 is any polynomial functor.
\end_layout

\begin_layout Subparagraph
Solution
\end_layout

\begin_layout Standard
Define the profunctor 
\begin_inset Formula $K^{X,Y}\triangleq X\rightarrow Y$
\end_inset

 so that the type signature of 
\begin_inset Formula $f$
\end_inset

 is written as:
\begin_inset Formula 
\[
\forall A.\,L^{A\rightarrow A}\rightarrow A\rightarrow A=L^{K^{A,A}}\rightarrow K^{A,A}\quad.
\]

\end_inset

The profunctor 
\begin_inset Formula $K$
\end_inset

 has the post-wedge property by Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-post-wedge"
plural "false"
caps "false"
noprefix "false"

\end_inset

(a) and (d).
 Then Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-functor-post-pre-wedge"
plural "false"
caps "false"
noprefix "false"

\end_inset

 means that the profunctor 
\begin_inset Formula $L^{K^{X,Y}}$
\end_inset

 also has the post-wedge property.
 We can now use Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-functor-post-pre-wedge"
plural "false"
caps "false"
noprefix "false"

\end_inset

 to find that 
\begin_inset Formula $f$
\end_inset

 satisfies the strong dinaturality law.
 
\end_layout

\begin_layout Section
Summary and further directions
\end_layout

\begin_layout Standard
We have proved several properties that apply to all fully parametric code:
\end_layout

\begin_layout Itemize
The lifting methods of any fully parametric bifunctor, profunctor, or bi-contraf
unctor obey the commutativity law such as Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:f-fmap-fmap-bifunctor-commutativity"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\end_layout

\begin_layout Itemize
All fully parametric functions of type 
\begin_inset Formula $P^{A,A}\rightarrow Q^{A,A}$
\end_inset

 (where 
\begin_inset Formula $P$
\end_inset

, 
\begin_inset Formula $Q$
\end_inset

 are profunctors) obey the dinaturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dinaturality-law-for-profunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 The form of the law depends only on the function's type signature and applies
 to all fully parametric implementations of that type signature.
 
\end_layout

\begin_layout Itemize
A given type constructor may have one fully parametric and lawful implementation
 of the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Functor
\end_layout

\end_inset

 or 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Contrafunctor
\end_layout

\end_inset

 typeclass instance.
 (For most other typeclasses, such as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Filterable
\end_layout

\end_inset

 or 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Monad
\end_layout

\end_inset

, many type constructors have several inequivalent and lawful typeclass
 instances.) The unique implementations are defined by the type constructions
 from Sections
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:f-Functor-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:f-Contrafunctor-constructions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Itemize
Parametricity theorem: Any fully parametric expression 
\begin_inset Formula $t:\forall A.\,Q^{A}$
\end_inset

 satisfies the relational naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 In general, the relational naturality law expresses a property of 
\emph on
relations
\emph default
 rather than functions and is not equivalent to any equation satisfied by
 
\begin_inset Formula $t$
\end_inset

.
 
\end_layout

\begin_layout Itemize
If the type signature of 
\begin_inset Formula $t$
\end_inset

 satisfies the conditions of Statements
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-post-wedge-entails-strong-dinaturality"
plural "false"
caps "false"
noprefix "false"

\end_inset

 or
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-functor-post-pre-wedge"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the function 
\begin_inset Formula $t$
\end_inset

 satisfies the 
\begin_inset Quotes eld
\end_inset

strong dinaturality
\begin_inset Quotes erd
\end_inset

 law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong-dinaturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

), which gives more information than the dinaturality law but is simpler
 to use than the relational naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:relational-naturality-law-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
What remains unexplored:
\end_layout

\begin_layout Itemize
Relational databases give programmers many operations such as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

SELECT
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

JOIN
\end_layout

\end_inset

.
 Similar operations can be defined for binary relations.
 For instance, two relations 
\begin_inset Formula $r:A\leftrightarrow B$
\end_inset

 and 
\begin_inset Formula $s:B\leftrightarrow C$
\end_inset

 can be composed using an operation similar to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

JOIN
\end_layout

\end_inset

, which yields a new relation (denoted by 
\begin_inset Formula $r\circ s$
\end_inset

) of type 
\begin_inset Formula $A\leftrightarrow C$
\end_inset

.
 However, relational composition turns out to be unnecessary for proving
 the practically useful parametricity properties.
 At the same time, properties of relational composition are complicated
 and not intuitive.
 For instance, it is not true that 
\begin_inset Formula $(r\circ s)^{\updownarrow F}=r^{\updownarrow F}\circ s^{\updownarrow F}$
\end_inset

 for arbitrary type constructors 
\begin_inset Formula $F$
\end_inset

.
 It is also not possible to use the relational composition as a replacement
 for the simultaneous lifting construction (Definition
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Definition-simultaneous-relational-lifting"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Itemize
Parametricity can be extended to types and code constructions beyond those
 covered in this book.
 The scope of material in this Appendix is intentionally limited to theory
 that has already proven its practical importance for programmers.
 For instance, we did not cover parametricity for functions with typeclass
 constraints.
 The corresponding theory is complicated
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The theory of parametricity applied to functions with typeclass constraints
 is developed by J.
\begin_inset space ~
\end_inset

Voigtl
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\begin_inset Quotes erd
\end_inset

a
\end_layout

\end_inset

nder
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Janis@Janis Voigtl
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\begin_inset Quotes erd
\end_inset

a
\end_layout

\end_inset

nder
\end_layout

\end_inset

 in the paper 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "https://www.janis-voigtlaender.eu/papers/FreeTheoremsInvolvingTypeConstructorClasses.pdf"
literal "false"

\end_inset


\end_layout

\end_inset

 and yet delivers few practically useful results.
 For example, that theory does not seem to solve Problem
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "par:Problem-identity-natural-monad-morphism"
plural "false"
caps "false"
noprefix "false"

\end_inset

, which considers functions with the following type signature:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def epsilon[M[_]: Monad, A]: M[A] => M[A]
\end_layout

\end_inset

If 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

epsilon
\end_layout

\end_inset

 is a monad morphism that works in the same way for all monads 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

M
\end_layout

\end_inset

 and all types 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

, can we prove that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

epsilon
\end_layout

\end_inset

 is an identity function? The analogous question involving functors can
 be answered by the parametricity theorem.
 Using the Yoneda lemma for functors (Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-covariant-yoneda-identity-for-type-constructors"
plural "false"
caps "false"
noprefix "false"

\end_inset

), one can prove that any fully parametric function with the type signature:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def epsilon[F[_]: Functor, A]: F[A] => F[A]
\end_layout

\end_inset

must be an identity function.
\end_layout

\begin_layout Chapter
Solutions of some exercises
\end_layout

\begin_layout Subsection*
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:1-Values,-types,-expressions,"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:ch1-aggr-Exercise-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def at(n: Double, maxN: Int) = (0 to maxN)
\end_layout

\begin_layout Plain Layout

  .map { k => 1.0*(1 - k % 2 * 2) / (2 * k + 1) / math.pow(n, 2 * k + 1) }
\end_layout

\begin_layout Plain Layout

  .sum
\end_layout

\begin_layout Plain Layout

def p(n: Int) = 16 * at(5, n) - 4 * at(239, n)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> p(12)
\end_layout

\begin_layout Plain Layout

res0: Double = 3.141592653589794
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:ch1-aggr-Exercise-2"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def isPrime(n: Int) = (2 to n - 1).takeWhile(k => k * k <= n).forall(k =>
 n % k != 0)
\end_layout

\begin_layout Plain Layout

def ep(n: Int): Double = (2 to n)
\end_layout

\begin_layout Plain Layout

  .filter(isPrime)
\end_layout

\begin_layout Plain Layout

  .map  { k => 1.0 / (1.0 - 1.0 / k / k / k /k) }
\end_layout

\begin_layout Plain Layout

  .product
\end_layout

\begin_layout Plain Layout

val pi = 3.1415926535897932
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> ep(100); pi*pi*pi*pi/90
\end_layout

\begin_layout Plain Layout

res0_0: Double = 1.0823231553280295
\end_layout

\begin_layout Plain Layout

res0_1: Double = 1.082323233711138 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:2-Mathematical-induction"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "tuples-Exercise-10"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

numsLists.map(_.sortBy(- _).take(3))
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "tuples-Exercise-11"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

a.flatMap(x => b.map(y => (x, y)))
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "tuples-Exercise-12"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def payments[Person, Amount](data: Seq[Map[Person, Amount]]): Map[Person,
 Seq[Amount]] =
\end_layout

\begin_layout Plain Layout

  data.flatMap(_.toSeq).groupBy(_._1).mapValues(_.map(_._2))
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-2.2-foldleft-5"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def batching[A](xs: Seq[A], size: Int): Seq[Seq[A]] = {  
\end_layout

\begin_layout Plain Layout

  type Acc = (Seq[Seq[A]], Seq[A], Int)
\end_layout

\begin_layout Plain Layout

  val init: Acc = ((Seq(), Seq(), 0))
\end_layout

\begin_layout Plain Layout

  val (result, rem, _) = xs.foldLeft(init){ case ((seq, rem, len), x) =>
\end_layout

\begin_layout Plain Layout

    val newLen = len + 1
\end_layout

\begin_layout Plain Layout

    if (newLen > size) (seq ++ Seq(rem), Seq(x), 1)
\end_layout

\begin_layout Plain Layout

    else (seq, rem ++ Seq(x), newLen)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  result ++ Seq(rem)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-2.2-foldleft-5-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def weightBatching[A](xs: Seq[A], maxW: Double)(w: A => Double): Seq[Seq[A]]
 = {  
\end_layout

\begin_layout Plain Layout

  type Acc = (Seq[Seq[A]], Seq[A], Double)
\end_layout

\begin_layout Plain Layout

  val init: Acc = ((Seq(), Seq(), 0.0))
\end_layout

\begin_layout Plain Layout

  val (result, rem, _) = xs.foldLeft(init) { case ((seq, rem, weight), x)
 =>
\end_layout

\begin_layout Plain Layout

    val wx = w(x)
\end_layout

\begin_layout Plain Layout

    if (wx > maxW) (seq ++ Seq(rem, Seq(x)), Seq(), 0.0)
\end_layout

\begin_layout Plain Layout

    else {
\end_layout

\begin_layout Plain Layout

      val newWeight = weight + wx
\end_layout

\begin_layout Plain Layout

      if (newWeight > maxW) (seq ++ Seq(rem), Seq(x), wx)
\end_layout

\begin_layout Plain Layout

      else (seq, rem ++ Seq(x), newWeight)
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  result ++ Seq(rem)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-2.2-foldleft-6"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def groupBy[A, K](xs: Seq[A])(by: A => K): Map[K, Seq[A]] = {  
\end_layout

\begin_layout Plain Layout

  val init: Map[K, Seq[A]] = Map()
\end_layout

\begin_layout Plain Layout

  xs.foldLeft(init) { (res, x) =>
\end_layout

\begin_layout Plain Layout

    val key = by(x)
\end_layout

\begin_layout Plain Layout

    val seq = res.getOrElse(key, Seq()) ++ Seq(x)
\end_layout

\begin_layout Plain Layout

    res.updated(key, seq)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:ch2Exercise-seq-3"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def digitsOf(n: Int): Seq[Int] = Stream.iterate(n)(_ / 10).takeWhile(_ !=
 0).map(_ % 10).toList
\end_layout

\begin_layout Plain Layout

def cubeDigits(n: Int): Int = digitsOf(n).map(x => x*x*x).sum
\end_layout

\begin_layout Plain Layout

def cubes(n: Int): Stream[Int] = Stream.iterate(n)(cubeDigits)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def stopRepeats[T](str: Stream[T]): Stream[T] = {
\end_layout

\begin_layout Plain Layout

  val halfSpeed = str.flatMap(x => Seq(x, x))
\end_layout

\begin_layout Plain Layout

  val result = halfSpeed.zip(str).drop(1).takeWhile{ case (h, s) => h != s
 }.map(_._2)
\end_layout

\begin_layout Plain Layout

  if (result.isEmpty) str.take(1) else str
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

def cubesReach1(n: Int): Boolean = stopRepeats(cubes(n)).contains(1)
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:ch2Exercise-seq-4"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def prod3(a: Set[Int], b: Set[Int], c: Set[Int]): Set[Set[Int]] =
\end_layout

\begin_layout Plain Layout

  a.flatMap(x => b.flatMap(y => c.map(z => Set(x, y, z))))
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:ch2Exercise-seq-5"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def prodSet(sets: Set[Set[Int]]): Set[Set[Int]] =
\end_layout

\begin_layout Plain Layout

    sets.foldLeft(Set[Set[Int]](Set())) {
\end_layout

\begin_layout Plain Layout

      // Combine each of results so far with each element in current set
\end_layout

\begin_layout Plain Layout

      case (accumSet: Set[Set[Int]], currSet: Set[Int]) =>
\end_layout

\begin_layout Plain Layout

        for {
\end_layout

\begin_layout Plain Layout

          s <- accumSet
\end_layout

\begin_layout Plain Layout

          i <- currSet
\end_layout

\begin_layout Plain Layout

        } yield s + i
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:ch2Exercise-seq-4-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@tailrec def pairs(goal: Int, xs: Array[Int])(
\end_layout

\begin_layout Plain Layout

  res: Set[(Int, Int)] = Set(), left: Int = 0, right: Int = xs.length): Set[(Int,
 Int)] =
\end_layout

\begin_layout Plain Layout

    if (left == right) res else {
\end_layout

\begin_layout Plain Layout

      val sum = xs(left) + xs(right - 1)
\end_layout

\begin_layout Plain Layout

      val (newLeft, newRight, newRes) = if (sum == goal) 
\end_layout

\begin_layout Plain Layout

                  (left + 1, right, res + ((xs(left), xs(right - 1)))) 
\end_layout

\begin_layout Plain Layout

                else if (sum < goal)
\end_layout

\begin_layout Plain Layout

                  (left + 1, right, res)
\end_layout

\begin_layout Plain Layout

                else (left, right - 1, res)
\end_layout

\begin_layout Plain Layout

      pairs(goal, xs)(newRes, newLeft, newRight)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:ch2Exercise-seq-6"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def revSentence(sentence: String): String = sentence.split(" ").reverse.mkString("
 ")
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:ch2revdigits-Exercise-seq-7"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def digitsOf(n: Int): Seq[Int] = Stream.iterate(n)(_ / 10).takeWhile(_ !=
 0).map(_ % 10).toList
\end_layout

\begin_layout Plain Layout

def revDigits(n: Int): Int = digitsOf(n).foldLeft(0){case (acc, d) => acc
 * 10 + d }
\end_layout

\begin_layout Plain Layout

def isPalindrome(n: Int): Boolean = revDigits(n) == n
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:ch2Exercise-seq-8"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def findPalindrome(n: Int): Int = 
\end_layout

\begin_layout Plain Layout

  Stream.iterate(n) { x => x + revDigits(x) } .filter(isPalindrome).head
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:ch2Exercise-seq-9-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def unfold2[A,B](init: A)(next: A => Option[(A,B)]): Stream[B] = next(init)
 match {
\end_layout

\begin_layout Plain Layout

   case None           => Stream()
\end_layout

\begin_layout Plain Layout

   case Some((a, b))   => Stream.cons(b, unfold2(a)(next))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Disjunctive-types"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Disjunctive-Exercise-non-empty-list-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def toList[A](nel: NEL[A]): List[A] = nel match {
\end_layout

\begin_layout Plain Layout

  case Last(x)         => List(x)
\end_layout

\begin_layout Plain Layout

  case More(x, tail)   => x :: toList(tail)
\end_layout

\begin_layout Plain Layout

} // Not tail-recursive.
\end_layout

\begin_layout Plain Layout

def toList[A](nel: NEL[A]): List[A] = foldLeft(nel)(Nil:List[A]) {
\end_layout

\begin_layout Plain Layout

  (prev, x) =>  x :: prev
\end_layout

\begin_layout Plain Layout

}.reverse // Tail-recursive, but performs two traversals.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-disjunctive-EvenList"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sealed trait EvenList[A]
\end_layout

\begin_layout Plain Layout

final case class Lempty[A]() extends EvenList[A]
\end_layout

\begin_layout Plain Layout

final case class Lpair[A](x: A, y: A, tail: EvenList[A]) extends EvenList
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def fmap[A, B](f: A => B): EvenList[A] => EvenList[B] = {
\end_layout

\begin_layout Plain Layout

  case Lempty()            => Lempty[B]()
\end_layout

\begin_layout Plain Layout

  case Lpair(x, y, tail)   => Lpair[B](f(x), f(y), fmap(f)(tail))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Higher-order-functions"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-hof-simple-8"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@tailrec def convergeN[X](p: X => Boolean)(x:X)(m:Int)(f: X => X): Option[X]
 =  {
\end_layout

\begin_layout Plain Layout

              if (m <= 0) None
\end_layout

\begin_layout Plain Layout

              else if (p(x)) Some(x) else converge(p)(f(x))(m-1)(f)    
         }
\end_layout

\begin_layout Plain Layout

// Defining it as def convergeN[X]: (X => Boolean) => X => Int => (X =>
 X) => Option[X] = ???
\end_layout

\begin_layout Plain Layout

// will break tail recursion!
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-hof-simple-7-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def recover[E, A]: Option[Either[E, A]] => (E => A) => Option[A] = {
\end_layout

\begin_layout Plain Layout

  case None             => _ => None
\end_layout

\begin_layout Plain Layout

  case Some(Right(a))   => _ => Some(a)
\end_layout

\begin_layout Plain Layout

  case Some(Left(e))    => f => Some(f(e))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-hof-composition-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 Choose 
\begin_inset Formula $f^{:A\rightarrow A}\triangleq(\_\rightarrow z)$
\end_inset

 and compute 
\begin_inset Formula $(f\bef h)(x)=h(z)\overset{!}{=}h(x)$
\end_inset

, for any 
\begin_inset Formula $x$
\end_inset

.
 So, 
\begin_inset Formula $h(x)$
\end_inset

 equals a fixed value 
\begin_inset Formula $h(z)$
\end_inset

.
 It follows that 
\begin_inset Formula $h(x)$
\end_inset

 does not depend on 
\begin_inset Formula $x$
\end_inset

, i.e., 
\begin_inset Formula $h$
\end_inset

 is a constant function.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 Choose 
\begin_inset Formula $f^{:A\rightarrow B}\triangleq\_\rightarrow b$
\end_inset

 and compute 
\begin_inset Formula $(f\bef h)(x)=h(b)\overset{!}{=}(g\bef f)(x)=f(g(x))=b$
\end_inset

.
 It follows that 
\begin_inset Formula $h(b)=b$
\end_inset

 for any 
\begin_inset Formula $b^{:B}$
\end_inset

, so 
\begin_inset Formula $h$
\end_inset

 is an identity function.
 Substitute that into the law and get 
\begin_inset Formula $f=g\bef f$
\end_inset

 for any function 
\begin_inset Formula $f$
\end_inset

.
 Substitute 
\begin_inset Formula $f\triangleq\text{id}$
\end_inset

 into that and derive 
\begin_inset Formula $\text{id}=g\bef\text{id}=g$
\end_inset

.
 So, 
\begin_inset Formula $g$
\end_inset

 is the identity function.
\end_layout

\begin_layout Subsection*
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:5-Curry-Howard"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-type-notation-2"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The type expression is: 
\begin_inset Formula $A\times\text{Int}+A\times\text{Char}+A\times\text{Float}$
\end_inset

.
\end_layout

\begin_layout Subsection*
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Reasoning-about-code"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-reasoning-1-4-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
It is assumed that 
\begin_inset Formula $\phi:\forall A.\,F^{A}\rightarrow G^{A}$
\end_inset

 satisfies its naturality law: for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

,
\begin_inset Formula 
\[
f^{\uparrow F}\bef\phi=\phi\bef f^{\uparrow G}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 To verify the naturality law of 
\begin_inset Formula $\phi^{\uparrow K}$
\end_inset

: for any 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

,
\begin_inset Formula 
\begin{align*}
 & f^{\uparrow F\uparrow K}\bef\phi^{\uparrow K}\overset{?}{=}\phi^{\uparrow K}\bef f^{\uparrow G\uparrow K}\quad,\\
\text{composition under }^{\uparrow K}:\quad & (f^{\uparrow F}\bef\phi)^{\uparrow K}\overset{?}{=}(\phi\bef f^{\uparrow G})^{\uparrow K}\quad.
\end{align*}

\end_inset

The last equation holds due to the naturality law of 
\begin_inset Formula $\phi$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 The naturality law of the pair product (
\begin_inset Formula $\phi\boxtimes\psi$
\end_inset

) says that for any 
\begin_inset Formula $p^{:A\rightarrow B}$
\end_inset

,
\begin_inset Formula 
\[
p^{\uparrow(F\times K)}\bef(\phi\boxtimes\psi)\overset{?}{=}(\phi\boxtimes\psi)\bef p^{\uparrow(G\times L)}\quad.
\]

\end_inset

Begin with the left-hand side of this equation:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & p^{\uparrow(F\times K)}\bef(\phi\boxtimes\psi)\\
\text{definition of }^{\uparrow(F\times K)}:\quad & =\big(f^{:F^{A}}\times k^{:K^{A}}\rightarrow(f\triangleright p^{\uparrow F})\times(k\triangleright p^{\uparrow K})\big)\bef(\phi\boxtimes\psi)\\
\text{definition of }\phi\boxtimes\psi:\quad & =f\times k\rightarrow\phi(f\triangleright p^{\uparrow F})\times\psi(k\triangleright p^{\uparrow K})=f\times k\rightarrow(f\triangleright p^{\uparrow F}\bef\phi)\times(k\triangleright p^{\uparrow K}\bef\psi)\quad.
\end{align*}

\end_inset

To rewrite the right-hand side, introduce the function argument into 
\begin_inset Formula $\phi\boxtimes\psi$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{right-hand side}:\quad & (\phi\boxtimes\psi)\bef p^{\uparrow(G\times L)}=\big(f^{:F^{A}}\times k^{:K^{A}}\rightarrow(f\triangleright\phi)\times(k\triangleright\psi)\big)\bef p^{\uparrow(G\times L)}\\
\text{definition of }^{\uparrow(G\times L)}:\quad & =f\times k\rightarrow(f\triangleright\gunderline{\phi\triangleright p^{\uparrow G}})\times(k\triangleright\gunderline{\psi\triangleright p^{\uparrow L}})=f\times k\rightarrow(f\triangleright\phi\bef p^{\uparrow G})\times(k\triangleright\psi\bef p^{\uparrow L})\quad.
\end{align*}

\end_inset

The remaining differences between the two sides disappear due to the naturality
 laws of 
\begin_inset Formula $\phi$
\end_inset

 and 
\begin_inset Formula $\psi$
\end_inset

:
\begin_inset Formula 
\[
p^{\uparrow F}\bef\phi=\phi\bef p^{\uparrow G}\quad,\quad\quad p^{\uparrow K}\bef\psi=\psi\bef p^{\uparrow L}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
The naturality law of the pair co-product (
\begin_inset Formula $\phi\boxplus\psi$
\end_inset

) says that for any 
\begin_inset Formula $p^{:A\rightarrow B}$
\end_inset

,
\begin_inset Formula 
\[
p^{\uparrow(F+K)}\bef(\phi\boxplus\psi)\overset{?}{=}(\phi\boxplus\psi)\bef p^{\uparrow(G+L)}\quad.
\]

\end_inset

Begin with the left-hand side of this equation:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & p^{\uparrow(F+K)}\bef(\phi\boxplus\psi)\\
\text{definitions of }^{\uparrow(F+K)}\text{ and of }\phi\boxplus\psi:\quad & =\,\begin{array}{|c||cc|}
 & F^{B} & K^{B}\\
\hline F^{A} & p^{\uparrow F} & \bbnum 0\\
K^{A} & \bbnum 0 & p^{\uparrow K}
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & G^{B} & L^{B}\\
\hline F^{B} & \phi & \bbnum 0\\
K^{B} & \bbnum 0 & \psi
\end{array}\\
\text{matrix composition}:\quad & =\,\,\begin{array}{|c||cc|}
 & G^{B} & L^{B}\\
\hline F^{A} & p^{\uparrow F}\bef\phi & \bbnum 0\\
K^{A} & \bbnum 0 & p^{\uparrow K}\bef\psi
\end{array}\quad.
\end{align*}

\end_inset

The right-hand side is rewritten in a similar way:
\begin_inset Formula 
\begin{align*}
\text{right-hand side}:\quad & (\phi\boxplus\psi)\bef p^{\uparrow(G+L)}\\
 & =\,\begin{array}{|c||cc|}
 & G^{A} & L^{A}\\
\hline F^{A} & \phi & \bbnum 0\\
K^{A} & \bbnum 0 & \psi
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & G^{B} & L^{B}\\
\hline G^{A} & p^{\uparrow G} & \bbnum 0\\
L^{A} & \bbnum 0 & p^{\uparrow L}
\end{array}\,=\,\begin{array}{|c||cc|}
 & G^{B} & L^{B}\\
\hline F^{A} & \phi\bef p^{\uparrow G} & \bbnum 0\\
K^{A} & \bbnum 0 & \psi\bef p^{\uparrow L}
\end{array}\quad.
\end{align*}

\end_inset

The remaining differences between the two sides disappear due to the naturality
 laws of 
\begin_inset Formula $\phi$
\end_inset

 and 
\begin_inset Formula $\psi$
\end_inset

.
 
\end_layout

\begin_layout Subsection*
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Typeclasses-and-functions"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:tc-Exercise-3"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def monoidFunc[A: Monoid, R] = Monoid[R => A](
\end_layout

\begin_layout Plain Layout

  { (x, y) => r => x(r) |+| y(r) }, _ => implicitly[Monoid[A]].empty
\end_layout

\begin_layout Plain Layout

)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the code notation:
\begin_inset Formula 
\[
f^{:R\rightarrow A}\oplus g^{:R\rightarrow A}\triangleq a\rightarrow f(a)\oplus_{A}g(a)\quad,\quad\quad e\triangleq(\_\rightarrow e_{A})\quad.
\]

\end_inset

Proof of monoid laws:
\begin_inset Formula 
\begin{align*}
 & a\triangleright\left(\left(f\oplus g\right)\oplus h\right)=\left(a\triangleright(f\oplus g)\right)\oplus_{A}h(a)=f(a)\oplus_{A}g(a)\oplus_{A}h(a)\quad.\\
 & a\triangleright\left(f\oplus\left(g\oplus h\right)\right)=f(a)\oplus_{A}\left(a\triangleright(g\oplus h)\right)=f(a)\oplus_{A}g(a)\oplus_{A}h(a)\quad.\\
 & a\triangleright\left(e\oplus f\right)=e(a)\oplus_{A}f(a)=e_{A}\oplus_{A}f(a)=f(a)=a\triangleright f\quad.\\
 & a\triangleright(f\oplus e)=f(a)\oplus_{A}e(a)=f(a)\oplus_{A}e_{A}=f(a)=a\triangleright f\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:tc-Exercise-9-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 A counterexample is the functor 
\begin_inset Formula $F^{A}\triangleq R\rightarrow A$
\end_inset

, where 
\begin_inset Formula $R$
\end_inset

 is a fixed type.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 The function 
\begin_inset Formula $C^{A}\times C^{B}\rightarrow C^{A+B}$
\end_inset

 cannot be implemented for 
\begin_inset Formula $C^{A}\triangleq\left(A\rightarrow P\right)+\left(A\rightarrow Q\right)$
\end_inset

.
 This more complicated contrafunctor 
\begin_inset Formula $C$
\end_inset

 is necessary because the simpler contrafunctor 
\begin_inset Formula $C^{A}\triangleq A\rightarrow P$
\end_inset

 does not provide a counterexample.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:tc-Exercise-9-1-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Define the method 
\begin_inset Formula $\text{ex}_{F}$
\end_inset

 as:
\begin_inset Formula 
\[
\text{ex}_{F}\triangleq x^{:F^{A}}\rightarrow x\triangleright(a^{:A}\rightarrow a\times1)^{\uparrow F}\triangleright q^{A,\bbnum 1}\triangleright\pi_{1}\quad\text{ or equivalently: }\quad\text{ex}_{F}\triangleq(a^{:A}\rightarrow a\times1)^{\uparrow F}\bef q^{A,\bbnum 1}\bef\pi_{1}\quad.
\]

\end_inset

To show that the naturality law (
\begin_inset Formula $f^{\uparrow F}\bef\text{ex}_{F}=\text{ex}_{F}\bef f$
\end_inset

) holds, use the identity 
\begin_inset Formula $(f\boxtimes g)\bef\pi_{1}=\pi_{1}\bef f$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & f^{\uparrow F}\bef\text{ex}_{F}=\gunderline{f^{\uparrow F}\bef(a^{:A}\rightarrow a\times1)^{\uparrow F}}\bef q^{A,\bbnum 1}\bef\pi_{1}=(a^{:A}\rightarrow a\times1)^{\uparrow F}\bef\gunderline{(f\boxtimes\text{id})^{\uparrow F}\bef q^{A,\bbnum 1}}\bef\pi_{1}\\
 & =(a^{:A}\rightarrow a\times1)^{\uparrow F}\bef q^{A,\bbnum 1}\bef\gunderline{(f\boxtimes\text{id}^{\uparrow F})\bef\pi_{1}}=\gunderline{(a^{:A}\rightarrow a\times1)^{\uparrow F}\bef q^{A,\bbnum 1}\bef\pi_{1}}\bef f=\text{ex}_{F}\bef f\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Given a method 
\begin_inset Formula $\text{ex}_{F}$
\end_inset

, define 
\begin_inset Formula $q$
\end_inset

 as:
\begin_inset Formula 
\[
q^{A,B}\triangleq f^{:F^{A\times B}}\rightarrow(f\triangleright\pi_{1}^{\uparrow F}\triangleright\text{ex}_{F}^{A})\times(f\triangleright\pi_{2}^{\uparrow F})\quad\text{ or equivalently: }\quad q^{A,B}\triangleq\Delta\bef(\pi_{1}^{\uparrow F}\boxtimes\pi_{2}^{\uparrow F})\bef(\text{ex}_{F}^{A}\boxtimes\text{id})\quad.
\]

\end_inset

Show that the required laws hold for 
\begin_inset Formula $q$
\end_inset

.
 Identity law: 
\begin_inset Formula 
\[
f\triangleright q^{\bbnum 1,B}=(f\triangleright\pi_{1}^{\uparrow F}\triangleright\text{ex}_{F}^{\bbnum 1})\times(f\triangleright\pi_{2}^{\uparrow F})=1\times(f\triangleright\pi_{2}^{\uparrow F})
\]

\end_inset

because 
\begin_inset Formula $\text{ex}_{F}^{\bbnum 1}$
\end_inset

 produces a value of type 
\begin_inset Formula $\bbnum 1$
\end_inset

, which can only be 
\begin_inset Formula $1$
\end_inset

.
\end_layout

\begin_layout Standard
To prove the naturality law:
\begin_inset Formula 
\begin{align*}
(f^{:A\rightarrow C}\boxtimes g^{:B\rightarrow D})^{\uparrow F}\bef\Delta\bef(\pi_{1}^{\uparrow F}\boxtimes\pi_{2}^{\uparrow F})\bef(\text{ex}_{F}^{A}\boxtimes\text{id}) & =\Delta\bef(\pi_{1}^{\uparrow F}\boxtimes\pi_{2}^{\uparrow F})\bef(\text{ex}_{F}^{A}\boxtimes\text{id})\bef f\boxtimes(g^{\uparrow F})\\
\Delta\bef((f\boxtimes g)^{\uparrow F}\boxtimes(f\boxtimes g)^{\uparrow F})\bef(\pi_{1}^{\uparrow F}\boxtimes\pi_{2}^{\uparrow F})\bef(\text{ex}_{F}^{A}\boxtimes\text{id}) & =\Delta\bef(\pi_{1}^{\uparrow F}\bef\text{ex}_{F}\bef f)\boxtimes(\pi_{2}^{\uparrow F}\bef g^{\uparrow F})\\
\Delta\bef(\pi_{1}^{\uparrow F}\bef\,\gunderline{f^{\uparrow F}\bef\text{ex}_{F}})\boxtimes(\pi_{2}^{\uparrow F}\bef g^{\uparrow F}) & =\Delta\bef(\pi_{1}^{\uparrow F}\bef\,\gunderline{\text{ex}_{F}\bef f})\boxtimes(\pi_{2}^{\uparrow F}\bef g^{\uparrow F})
\end{align*}

\end_inset

To prove the associativity law, write the left-hand side as:
\begin_inset Formula 
\begin{align*}
 & f^{:F^{A\times B\times C}}\triangleright q^{A,B\times C}\bef(\text{id}^{A}\boxtimes q^{B,C})=(f\triangleright\pi_{1}^{\uparrow F}\triangleright\text{ex}_{F}^{A})\times(f\triangleright(a\times b\times c\rightarrow b\times c)^{\uparrow F}\triangleright q^{B,C})\\
 & =(f\triangleright\pi_{1}^{\uparrow F}\triangleright\text{ex}_{F}^{A})\times(f\triangleright(a\times b\times c\rightarrow b\times c)^{\uparrow F}\triangleright\pi_{1}^{\uparrow F}\triangleright\text{ex}_{F}^{B})\times(f\triangleright(a\times b\times c\rightarrow b\times c)^{\uparrow F}\triangleright\pi_{2}^{\uparrow F})\\
 & =\left(f\triangleright\text{ex}_{F}\triangleright(a\times b\times c\rightarrow a)\right)\times\left(f\triangleright\text{ex}_{F}\triangleright(a\times b\times c\rightarrow b)\right)\times(f\triangleright(a\times b\times c\rightarrow c)^{\uparrow F})\quad.
\end{align*}

\end_inset

The right-hand side is then simplified to the same expression:
\begin_inset Formula 
\begin{align*}
 & f^{:F^{A\times B\times C}}\triangleright q^{A\times B,C}=(f\triangleright\text{ex}_{F}\triangleright(a\times b\times c\rightarrow a\times b))\times(f\triangleright(a\times b\times c\rightarrow c)^{\uparrow F})\\
 & =\left(f\triangleright\text{ex}_{F}\triangleright(a\times b\times c\rightarrow a)\right)\times\left(f\triangleright\text{ex}_{F}\triangleright(a\times b\times c\rightarrow b)\right)\times(f\triangleright(a\times b\times c\rightarrow c)^{\uparrow F})\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subsection*
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Filterable-functors"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:filt-exercise-derive-liftOpt-equivalence-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Starting from 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

liftOpt
\end_layout

\end_inset

's law, derive the naturality law:
\begin_inset Formula 
\[
\text{liftOpt}\left(g\right)\bef\text{liftOpt}\,(f\bef\text{pu}_{\text{Opt}})=\text{liftOpt}(f\bef\text{pu}_{\text{Opt}}\diamond_{_{\text{Opt}}}g)=\text{liftOpt}(f\bef g)\quad.
\]

\end_inset

Now use the naturality-identity law and get 
\begin_inset Formula $\text{liftOpt}\,(f\bef\text{pu}_{\text{Opt}})=f^{\downarrow C}$
\end_inset

.
 The result is the naturality law 
\begin_inset Formula $\text{liftOpt}\left(f\bef g\right)=\text{liftOpt}\left(g\right)\bef f^{\downarrow C}$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-filterable-laws-4"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
A counterexample is the functor 
\begin_inset Formula $F^{A}\triangleq\bbnum 1+A\times\left(Z\rightarrow A\right)$
\end_inset

.
 For this functor, one can implement 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

deflate
\end_layout

\end_inset

's type signature, but the code cannot obey the identity law because it
 must always return 
\begin_inset Formula $1+\bbnum 0$
\end_inset

.
\end_layout

\begin_layout Subsection*
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Semimonads-and-monads"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-1-monads-3-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The given non-standard implementation of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 will return the same results as the standard 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 method of the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List
\end_layout

\end_inset

 type constructor, except if one of the nested sub-lists is empty.
 In that case, the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 function returns an empty list (unlike 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List
\end_layout

\end_inset

's standard 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 method).
 The 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

 method remains unchanged.
 The code is:
\begin_inset listings
lstparams "mathescape=true"
inline false
status open

\begin_layout Plain Layout

def pure[A](x: A): List[A] = List(x) // $
\backslash
color{dkgreen}
\backslash
textrm{pu}_L$
\end_layout

\begin_layout Plain Layout

def flatten[A](p: List[List[A]]): List[A] = if (p.exists(_.isEmpty)) Nil else
 p.flatten  // $
\backslash
color{dkgreen}
\backslash
textrm{ftn}_L$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To verify the monad laws, we use the known fact that the standard 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List
\end_layout

\end_inset

 monad obeys the laws.
 So, we only need to check the laws in the cases when the new 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 function is applied to a value of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List[List[A]]
\end_layout

\end_inset

 having an empty nested sub-list.
 That case cannot arise in the identity laws since neither 
\begin_inset Formula $\text{pu}_{L}(x^{:A})$
\end_inset

 nor 
\begin_inset Formula $\text{pu}_{L}^{\uparrow L}(x^{:\text{List}^{A}})$
\end_inset

 ever returns a value with a nested empty sub-list:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pure(List(a, b, c)) == List(List(a, b, c))
\end_layout

\begin_layout Plain Layout

List(a, b, c).map(pure) == List(List(a), List(b), List(c))
\end_layout

\end_inset

Applying 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 to these values gives the initial list 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List(a, b, c)
\end_layout

\end_inset

.
 So, both identity laws hold.
\end_layout

\begin_layout Standard
It remains to check the associativity law, which is an equality between
 functions 
\begin_inset Formula $\text{ftn}_{L}\bef\text{ftn}_{L}$
\end_inset

 and 
\begin_inset Formula $\text{ftn}_{L}^{\uparrow L}\bef\text{ftn}_{L}$
\end_inset

 of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List[List[List[A]]] => List[A]
\end_layout

\end_inset

.
 A value 
\begin_inset Formula $p$
\end_inset

 of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List[List[List[A]]]
\end_layout

\end_inset

 could contain a nested empty list at the first and/or the second nesting
 depth, for instance:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

val p1: List[List[List[Int]]] = List(List[List[Int]](), List(List(123),
 List(456)))
\end_layout

\begin_layout Plain Layout

val p2: List[List[List[Int]]] = List(List(List[Int](), List(123)), List(List(456
)))
\end_layout

\end_inset

Whenever 
\begin_inset Formula $p$
\end_inset

 contains an empty sub-list at the first nesting depth, we will have 
\begin_inset Formula $p\triangleright\text{ftn}_{L}=\text{Nil}$
\end_inset

 because 
\begin_inset Formula $\text{ftn}_{L}$
\end_inset

 explicitly checks for the existence of an empty sub-list.
 So, 
\begin_inset Formula $p\triangleright\text{ftn}_{L}\bef\text{ftn}_{L}=\text{Nil}$
\end_inset

.
 On the other hand, 
\begin_inset Formula $p\triangleright\text{ftn}_{L}^{\uparrow L}$
\end_inset

 will be again a list containing an empty sub-list, for example:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

scala> p1.map(flatten)
\end_layout

\begin_layout Plain Layout

res0: List[List[Int]] = List(List(), List(123, 456))
\end_layout

\end_inset

We will then have 
\begin_inset Formula $p\triangleright\text{ftn}_{L}^{\uparrow L}\triangleright\text{ftn}_{L}=\text{Nil}$
\end_inset

, and the law holds.
 If 
\begin_inset Formula $p$
\end_inset

 contains an empty sub-list at the 
\emph on
second
\emph default
 nesting depth, 
\begin_inset Formula $p\triangleright\text{ftn}_{L}$
\end_inset

 will contain an empty sub-list at the first nesting depth, for example:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

scala> flatten(p2)
\end_layout

\begin_layout Plain Layout

res1: List[List[Int]] = List(List(), List(123), List(456)) 
\end_layout

\end_inset

So 
\begin_inset Formula $p\triangleright\text{ftn}_{L}\bef\text{ftn}_{L}=\text{Nil}$
\end_inset

.
 On the other hand, 
\begin_inset Formula $p\triangleright\text{ftn}_{L}^{\uparrow L}$
\end_inset

 will also be a list with an empty sub-list at the first nesting depth,
 for example:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

scala> p2.map(flatten)
\end_layout

\begin_layout Plain Layout

res2: List[List[Int]] = List(List(), List(456))
\end_layout

\end_inset

Applying 
\begin_inset Formula $\text{ftn}_{L}$
\end_inset

 to the last result, we will get an empty list.
 Thus, 
\begin_inset Formula $p\triangleright\text{ftn}_{L}\triangleright\text{ftn}_{L}=\text{Nil}$
\end_inset

, and the law again holds.
 So, we have shown that the associativity law holds for the non-standard
 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List
\end_layout

\end_inset

 monad.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-flatten-concat-distributive-law"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The values 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

 must have type 
\begin_inset Formula $\text{List}^{\text{List}^{A}}$
\end_inset

.
 There are two possibilities: 
\begin_inset Formula $p$
\end_inset

 is an empty list (
\begin_inset Formula $p=1+\bbnum 0$
\end_inset

), and 
\begin_inset Formula $p=\bbnum 0+h\times t$
\end_inset

.
 If 
\begin_inset Formula $p$
\end_inset

 is empty, so is 
\begin_inset Formula $p\triangleright\text{ftn}$
\end_inset

 and the law holds.
 In the other case, we have (due to the code of 
\begin_inset Formula $\pplus$
\end_inset

) that:
\begin_inset Formula 
\[
\left(\bbnum 0+h\times t\right)\pplus q=\bbnum 0+h\times\left(t\pplus q\right)\quad,
\]

\end_inset

and so:
\begin_inset Formula 
\begin{align*}
 & \left(p\pplus q\right)\triangleright\text{ftn}=\left(\bbnum 0+h\times\left(t\pplus q\right)\right)\triangleright\text{ftn}=h\pplus\gunderline{\left(t\pplus q\right)\triangleright\overline{\text{ftn}}}\\
\text{inductive assumption}:\quad & =\gunderline{h\pplus(t\triangleright\overline{\text{ftn}})}\pplus(q\triangleright\overline{\text{ftn}})\\
\text{code of }\text{ftn}:\quad & =\left(\bbnum 0+h\times t\right)\triangleright\overline{\text{ftn}}\pplus(q\triangleright\overline{\text{ftn}})=\left(p\triangleright\text{ftn}\right)\pplus\left(q\triangleright\text{ftn}\right)\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-monad-of-monoid-is-monoid"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Define the empty element (
\begin_inset Formula $e_{M}$
\end_inset

) of the monoid 
\begin_inset Formula $M^{W}$
\end_inset

 as:
\begin_inset Formula 
\[
e_{M}\triangleq\text{pu}_{M}(e_{W})\quad.
\]

\end_inset

The binary operation 
\begin_inset Formula $\oplus_{M}$
\end_inset

 of the monoid 
\begin_inset Formula $M^{W}$
\end_inset

 may be implemented through 
\begin_inset Formula $\oplus_{W}$
\end_inset

 as:
\begin_inset Formula 
\[
p\oplus_{M}q\triangleq p\triangleright\text{flm}_{M}\big(u^{:W}\rightarrow q\triangleright(v^{:W}\rightarrow u\oplus_{W}v)^{\uparrow M}\big)\quad.
\]

\end_inset

To check the left identity law of 
\begin_inset Formula $M^{W}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }p:\quad & e_{M}\oplus_{M}p=e_{W}\triangleright\gunderline{\text{pu}_{M}\triangleright\text{flm}_{M}}\big(u^{:W}\rightarrow p\triangleright(v^{:W}\rightarrow u\oplus_{W}v)^{\uparrow M}\big)\\
 & =e_{W}\triangleright\big(u^{:W}\rightarrow p\triangleright(v^{:W}\rightarrow u\oplus_{W}v)^{\uparrow M}\big)=p\triangleright(v\rightarrow\gunderline{e_{W}\oplus_{W}v})^{\uparrow M}\\
\text{left identity law of }W:\quad & =p\triangleright(v\rightarrow v)^{\uparrow M}=p\triangleright\text{id}^{\uparrow M}=p\quad.
\end{align*}

\end_inset

To check the right identity law of 
\begin_inset Formula $M^{W}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }p:\quad & p\oplus_{M}e_{M}=p\triangleright\text{flm}_{M}\big(u^{:W}\rightarrow e_{W}\triangleright\gunderline{\text{pu}_{M}\triangleright(v^{:W}\rightarrow u\oplus_{W}v)^{\uparrow M}}\big)\\
\text{naturality of }\text{pu}_{M}:\quad & =p\triangleright\text{flm}_{M}\big(u^{:W}\rightarrow\gunderline{e_{W}\triangleright(v^{:W}}\rightarrow u\oplus_{W}v)\triangleright\text{pu}_{M}\big)\\
\text{apply function}:\quad & =p\triangleright\text{flm}_{M}\big(u^{:W}\rightarrow(\gunderline{u\oplus_{W}e_{W}})\triangleright\text{pu}_{M}\big)\\
\text{right identity law of }W:\quad & =p\triangleright\text{flm}_{M}\big(u^{:W}\rightarrow u\triangleright\text{pu}_{M}\big)=p\triangleright\text{id}=p\quad.
\end{align*}

\end_inset

To check the associativity law of 
\begin_inset Formula $M^{W}$
\end_inset

, we use the associativity law of 
\begin_inset Formula $\text{flm}_{M}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & (p\oplus_{M}q)\oplus_{M}r\\
 & =p\triangleright\gunderline{\text{flm}_{M}}\big(u\rightarrow q\triangleright(v\rightarrow u\oplus_{W}v)^{\uparrow M}\big)\,\gunderline{\triangleright\text{flm}_{M}}\big(t\rightarrow r\triangleright(w\rightarrow t\oplus_{W}w)^{\uparrow M}\big)\\
\text{associativity of }\text{flm}_{M}:\quad & =p\triangleright\text{flm}_{M}\big(\gunderline (u\rightarrow q\triangleright(v\rightarrow u\oplus_{W}v)^{\uparrow M}\gunderline{)\bef}\,\text{flm}_{M}(t\rightarrow r\triangleright(w\rightarrow t\oplus_{W}w)^{\uparrow M})\big)\\
\text{compute composition}:\quad & =p\triangleright\text{flm}_{M}\big(u\rightarrow q\triangleright(v\rightarrow u\oplus_{W}v\gunderline{)^{\uparrow M}\triangleright\text{flm}_{M}}(t\rightarrow r\triangleright(w\rightarrow t\oplus_{W}w)^{\uparrow M})\big)\\
\text{naturality of }\text{flm}_{M}:\quad & =p\triangleright\text{flm}_{M}\big(u\rightarrow q\triangleright\text{flm}_{M}(v\rightarrow\gunderline{u\oplus_{W}v})\,\gunderline{\bef(t}\rightarrow r\triangleright(w\rightarrow\gunderline t\oplus_{W}w)^{\uparrow M}))\big)\\
\text{compute composition}:\quad & =p\triangleright\text{flm}_{M}\big(u\rightarrow q\triangleright\text{flm}_{M}(v\rightarrow r\triangleright(w\rightarrow(u\oplus_{W}v)\oplus_{W}w)^{\uparrow M})\big)\quad.
\end{align*}

\end_inset

Now write the right-hand side of the law:
\begin_inset Formula 
\begin{align*}
\text{right-hand side}:\quad & p\oplus_{M}(q\oplus_{M}r)=p\triangleright\text{flm}_{M}\big(u\rightarrow(q\oplus r)\triangleright(t\rightarrow u\oplus_{W}t)^{\uparrow M}\big)\\
\text{substitute }q\oplus r:\quad & =p\triangleright\text{flm}_{M}\big(u\rightarrow q\triangleright\text{flm}_{M}(v\rightarrow r\triangleright(w\rightarrow v\oplus_{W}w)^{\uparrow M})\,\gunderline{\triangleright\,(}t\rightarrow u\oplus_{W}t\gunderline{)^{\uparrow M}}\big)\\
\text{naturality of }\text{flm}_{M}:\quad & =p\triangleright\text{flm}_{M}\big(u\rightarrow q\triangleright\text{flm}_{M}(v\rightarrow r\triangleright(w\rightarrow u\oplus_{W}w\gunderline{)^{\uparrow M}\bef}\,(t\rightarrow u\oplus_{W}t\gunderline{)^{\uparrow M}})\big)\\
\text{composition under }^{\uparrow M}:\quad & =p\triangleright\text{flm}_{M}\big(u\rightarrow q\triangleright\text{flm}_{M}(v\rightarrow r\triangleright(w\rightarrow u\oplus_{W}(v\oplus_{W}w))^{\uparrow M})\big)\quad.
\end{align*}

\end_inset

 The difference between the two sides now vanishes due to the assumed associativ
ity law of 
\begin_inset Formula $W$
\end_inset

:
\begin_inset Formula 
\[
(u\oplus_{W}v)\oplus_{W}w\overset{!}{=}u\oplus_{W}(v\oplus_{W}w)\quad.
\]

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-1-monads-9-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 The code is converted into monad methods like this:
\begin_inset Formula 
\begin{align*}
 & r_{1}=p\triangleright\text{flm}_{M}(x\rightarrow q\triangleright(y\rightarrow f(x,y))^{\uparrow M})\quad,\\
 & r_{2}=q\triangleright\text{flm}_{M}(y\rightarrow p\triangleright(x\rightarrow f(x,y))^{\uparrow M})\quad.
\end{align*}

\end_inset

For a commutative monad 
\begin_inset Formula $M$
\end_inset

, we have 
\begin_inset Formula $r_{1}=r_{2}$
\end_inset

.
 The monoid operation 
\begin_inset Formula $\oplus_{M}$
\end_inset

 is defined by:
\begin_inset Formula 
\[
p^{:M^{\bbnum 1}}\oplus_{M}q^{:M^{\bbnum 1}}\triangleq p\triangleright\text{flm}_{M}(1\rightarrow q)\quad.
\]

\end_inset

Commutativity of 
\begin_inset Formula $\oplus_{M}$
\end_inset

 means that:
\begin_inset Formula 
\[
p\triangleright\text{flm}_{M}(1\rightarrow q)=p\oplus_{M}q\overset{?}{=}q\oplus_{M}p=q\triangleright\text{flm}_{M}(1\rightarrow p)\quad.
\]

\end_inset

Use 
\begin_inset Formula $f(x,y)\triangleq1$
\end_inset

 in the definitions of 
\begin_inset Formula $r_{1}$
\end_inset

 and 
\begin_inset Formula $r_{2}$
\end_inset

; then the above equation is equivalent to 
\begin_inset Formula $r_{1}=r_{2}$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-1-monads-12"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The second definition, 
\begin_inset Formula $\text{pu}_{L}\triangleq a\rightarrow\bbnum 0+\text{pu}_{F}(a)$
\end_inset

, fails the right identity law:
\begin_inset Formula 
\begin{align*}
 & \text{pu}_{L}^{\uparrow L}\bef\text{ftn}_{L}=\,\begin{array}{|c||ccc|}
 & A & F^{A} & F^{L^{A}}\\
\hline A & \bbnum 0 & \text{pu}_{F} & \bbnum 0\\
F^{A} & \bbnum 0 & \bbnum 0 & \text{pu}_{L}^{\uparrow F}
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & A & F^{A}\\
\hline A & \text{id} & \bbnum 0\\
F^{A} & \bbnum 0 & \text{id}\\
F^{L^{A}} & \bbnum 0 & \gamma^{\uparrow F}\bef\text{ftn}_{F}
\end{array}\,=\,\begin{array}{|c||cc|}
 & A & F^{A}\\
\hline A & \bbnum 0 & \text{pu}_{F}\\
F^{A} & \bbnum 0 & ...
\end{array}\,\neq\text{id}\quad.
\end{align*}

\end_inset

This matrix cannot be equal to the identity function because it has a missing
 diagonal element.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-monad-composition-mm"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $M$
\end_inset

 is a semimonad, we have the Kleisli composition 
\begin_inset Formula $\diamond_{_{M}}$
\end_inset

 that satisfies the associativity law.
 Define 
\begin_inset Formula $\diamond_{_{L}}$
\end_inset

 by:
\begin_inset Formula 
\[
f^{:A\rightarrow M^{M^{B}}}\diamond_{_{L}}g^{:B\rightarrow M^{M^{C}}}\triangleq f\bef\text{ftn}_{M}\diamond_{_{M}}g\quad.
\]

\end_inset

Here, the expression of the form 
\begin_inset Formula $f\bef h\diamond_{_{M}}g$
\end_inset

 does not need parentheses (see Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-equivalence-kleisli-composition-and-flatMap"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
It is inconvenient to mix the Kleisli composition and the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 method, so we express 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 as:
\begin_inset Formula 
\[
\text{ftn}_{M}^{:M^{M^{A}}\rightarrow M^{A}}=\text{flm}_{M}(\text{id}^{:M^{A}\rightarrow M^{A}})=\text{id}^{:M^{M^{A}}\rightarrow M^{M^{A}}}\diamond_{_{M}}\text{id}^{:M^{A}\rightarrow M^{A}}\quad.
\]

\end_inset

For brevity, we will omit type annotations from now on.
 So, we can express the Kleisli composition 
\begin_inset Formula $\diamond_{_{L}}$
\end_inset

 through 
\begin_inset Formula $\diamond_{_{M}}$
\end_inset

 by:
\begin_inset Formula 
\[
f\diamond_{_{L}}g\triangleq f\bef\gunderline{\left(\text{id}\diamond_{_{M}}\text{id}\right)\diamond_{_{M}}g}=f\bef\left(\text{id}\diamond_{_{M}}\left(\text{id}\diamond_{_{M}}g\right)\right)=\left(f\bef\text{id}\right)\diamond_{_{M}}\left(\text{id}\diamond_{_{M}}g\right)=f\diamond_{_{M}}\text{id}\diamond_{_{M}}g\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
Associativity of 
\begin_inset Formula $\diamond_{_{L}}$
\end_inset

 then follows from associativity of 
\begin_inset Formula $\diamond_{_{M}}$
\end_inset

 as:
\begin_inset Formula 
\begin{align*}
\left(f\diamond_{_{L}}g\right)\diamond_{_{L}}h & =\left(f\diamond_{_{M}}\text{id}\diamond_{_{M}}g\right)\diamond_{_{M}}\text{id}\diamond_{_{M}}h=f\diamond_{_{M}}\text{id}\diamond_{_{M}}g\diamond_{_{M}}\text{id}\diamond_{_{M}}h\quad,\\
f\diamond_{_{L}}\left(g\diamond_{_{L}}h\right) & =f\diamond_{_{M}}\text{id}\diamond_{_{M}}\left(g\diamond_{_{M}}\text{id}\diamond_{_{M}}h\right)=f\diamond_{_{M}}\text{id}\diamond_{_{M}}g\diamond_{_{M}}\text{id}\diamond_{_{M}}h\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
This definition of 
\begin_inset Formula $\diamond_{_{L}}$
\end_inset

 corresponds to a definition of 
\begin_inset Formula $\text{ftn}_{L}$
\end_inset

 that flattens the 
\emph on
first
\emph default
 three layers of 
\begin_inset Formula $M$
\end_inset

 in 
\begin_inset Formula $M\circ M\circ M\circ M$
\end_inset

:
\begin_inset Formula 
\[
\text{ftn}_{L}\triangleq\text{ftn}_{M}\bef\text{ftn}_{M}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
An alternative definition will flatten the 
\emph on
last
\emph default
 three layers:
\begin_inset Formula 
\[
\text{ftn}_{L}\triangleq(\text{ftn}_{M}\bef\text{ftn}_{M})^{\uparrow M}\quad.
\]

\end_inset

Both definitions satisfy the associativity law and so define a semimonad
 
\begin_inset Formula $L$
\end_inset

,
\begin_inset Formula 
\[
\text{ftn}_{L}^{\uparrow L}\bef\text{ftn}_{L}=\text{ftn}_{L}\bef\text{ftn}_{L}\quad.
\]

\end_inset

Let us verify that directly.
 For the first definition:
\begin_inset Formula 
\begin{align*}
 & \gunderline{(\text{ftn}_{M}\bef\text{ftn}_{M})^{\uparrow M\uparrow M}\bef\text{ftn}_{M}}\bef\text{ftn}_{M}=\text{ftn}_{M}\bef\big(\gunderline{\text{ftn}_{M}\bef\text{ftn}_{M}}\big)^{\uparrow M}\bef\text{ftn}_{M}\\
\text{associativity of }M:\quad & =\gunderline{\text{ftn}_{M}\bef\text{ftn}_{M}^{\uparrow M\uparrow M}}\bef\text{ftn}_{M}^{\uparrow M}\bef\text{ftn}_{M}=\gunderline{\text{ftn}_{M}^{\uparrow M}\bef\text{ftn}_{M}}\bef\gunderline{\text{ftn}_{M}^{\uparrow M}\bef\text{ftn}_{M}}\\
\text{associativity of }M:\quad & =\text{ftn}_{M}\bef\text{ftn}_{M}\bef\text{ftn}_{M}\bef\text{ftn}_{M}\quad.
\end{align*}

\end_inset

For the second definition, we just apply 
\begin_inset Formula $^{\uparrow M}$
\end_inset

 to the preceding derivation.
\end_layout

\begin_layout Standard
A definition of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 that flattens separately the first two and the last two layers of 
\begin_inset Formula $M$
\end_inset

 (
\begin_inset Formula $\text{ftn}_{L}\triangleq\text{ftn}_{M}\bef\text{ftn}_{M}^{\uparrow M}$
\end_inset

) will fail the associativity law when 
\begin_inset Formula $M$
\end_inset

 is chosen in a suitable way.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $M$
\end_inset

 is a full monad, we have 
\begin_inset Formula $\text{pu}_{M}$
\end_inset

 that satisfies the identity laws.
 Define 
\begin_inset Formula $\text{pu}_{L}$
\end_inset

 by:
\begin_inset Formula 
\[
\text{pu}_{L}\triangleq\text{pu}_{M}\bef\text{pu}_{M}\quad.
\]

\end_inset

There is no other way of defining 
\begin_inset Formula $\text{pu}_{L}$
\end_inset

 since we cannot obtain a value of type 
\begin_inset Formula $M^{A}$
\end_inset

 other than via 
\begin_inset Formula $\text{pu}_{M}$
\end_inset

.
\end_layout

\begin_layout Standard
With any of the two possible definitions of 
\begin_inset Formula $\text{ftn}_{L}$
\end_inset

, at least one of the identity laws for 
\begin_inset Formula $\diamond_{_{L}}$
\end_inset

 fails.
\end_layout

\begin_layout Standard
For the definition of 
\begin_inset Formula $\text{ftn}_{L}$
\end_inset

 that flattens the first three layers, the right identity law will fail:
\begin_inset Formula 
\[
\text{pu}_{L}^{\uparrow L}\bef\text{ftn}_{L}=\gunderline{(\text{pu}_{M}\bef\text{pu}_{M})^{\uparrow M\uparrow M}\bef\text{ftn}_{M}}\bef\text{ftn}_{M}=\text{ftn}_{M}\bef\text{pu}_{M}^{\uparrow M}\bef\gunderline{\text{pu}_{M}^{\uparrow M}\bef\text{ftn}_{M}}=\text{ftn}_{M}\bef\text{pu}_{M}^{\uparrow M}\quad.
\]

\end_inset

In general, this function is not equal to an identity function, because
 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 merges the two monadic layers of 
\begin_inset Formula $M$
\end_inset

 and in that way loses information about a value of type 
\begin_inset Formula $M^{M^{A}}$
\end_inset

.
\end_layout

\begin_layout Standard
For the definition of 
\begin_inset Formula $\text{ftn}_{L}$
\end_inset

 that flattens the last three layers, the left identity law will fail:
\begin_inset Formula 
\[
\text{pu}_{L}\bef\text{ftn}_{L}=\text{pu}_{M}\bef\gunderline{\text{pu}_{M}\bef(\text{ftn}_{M}}\bef\text{ftn}_{M})^{\uparrow M}=\gunderline{\text{pu}_{M}\bef\text{ftn}_{M}}\bef\text{pu}_{M}\bef\text{ftn}_{M}^{\uparrow M}=\text{pu}_{M}\bef\text{ftn}_{M}^{\uparrow M}=\text{ftn}_{M}\bef\text{pu}_{M}\quad.
\]

\end_inset

In general, this function is not equal to an identity function.
\end_layout

\begin_layout Subsection*
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:8-Applicative-functors,-contrafunctors"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-simplify-law-omit-lifted-function"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
We may choose 
\begin_inset Formula $f=\text{id}$
\end_inset

 and derive 
\begin_inset Formula $u=v$
\end_inset

 from the given law.
 Conversely, if 
\begin_inset Formula $u=v$
\end_inset

 then 
\begin_inset Formula $u\bef f^{\uparrow F}=v\bef f^{\uparrow F}$
\end_inset

 for any function 
\begin_inset Formula $f$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-applicative-II-4-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
To verify the law, write:
\begin_inset Formula 
\begin{align*}
 & \text{ap}\,(r)(\text{pu}_{L}(a))=\text{zip}\big(r\times\text{pu}_{L}(a)\big)\triangleright\text{eval}^{\uparrow L}\\
\text{right identity law of }\text{zip}:\quad & =r\triangleright\left(f\rightarrow f\times a\right)^{\uparrow L}\bef\text{eval}^{\uparrow L}\\
\text{composition under }^{\uparrow L}:\quad & =r\triangleright(f\rightarrow f(a))\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-function-type-construction-not-applicative"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 We cannot implement 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

zip
\end_layout

\end_inset

 as a fully parametric function having this type:
\begin_inset Formula 
\[
\text{zip}_{F}(p^{:(A\rightarrow P)\rightarrow Q}\times q^{:(B\rightarrow P)\rightarrow Q})\triangleq h^{:A\times B\rightarrow P}\rightarrow\text{???}^{:Q}\quad.
\]

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import io.chymyst.ch._
\end_layout

\begin_layout Plain Layout

type S[A] = (A => P) => Q
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> def zip[A, B](p: S[A], q: S[B]): S[(A, B)] = implement
\end_layout

\begin_layout Plain Layout

type ((A => P) => Q) => ((B => P) => Q) => (Tuple2[A,B] => P) => Q cannot
 be implemented
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The reason it cannot be implemented is that the only way of getting a value
 of type 
\begin_inset Formula $Q$
\end_inset

 is to call the given functions 
\begin_inset Formula $p$
\end_inset

 or 
\begin_inset Formula $q$
\end_inset

.
 But we cannot call 
\begin_inset Formula $p$
\end_inset

 or 
\begin_inset Formula $q$
\end_inset

 since we cannot supply their arguments: we have a function of type 
\begin_inset Formula $A\times B\rightarrow P$
\end_inset

, and we cannot produce a function of type 
\begin_inset Formula $A\rightarrow P$
\end_inset

 or 
\begin_inset Formula $B\rightarrow P$
\end_inset

 out of it.
\end_layout

\begin_layout Standard
The only solution is for 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

zip
\end_layout

\end_inset

 to ignore its arguments and always return the empty value 
\begin_inset Formula $e_{Q}$
\end_inset

.
 However, that implementation loses information and would fail the identity
 laws.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 We 
\emph on
can
\emph default
 implement the type signature of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

zip
\end_layout

\end_inset

, but only in a trivial way:
\begin_inset Formula 
\[
\text{zip}_{F}(p^{:(A\rightarrow P)\rightarrow\bbnum 1+A}\times q^{:(B\rightarrow P)\rightarrow\bbnum 1+B})\triangleq h^{:A\times B\rightarrow P}\rightarrow\text{???}^{:\bbnum 1+A\times B}\quad.
\]

\end_inset

The functions 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

 cannot be called since we cannot supply their arguments, just as in part
 
\series bold
(a)
\series default
.
 The only solution is that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

zip
\end_layout

\end_inset

 should ignore its arguments and always return 
\begin_inset Formula $1+\bbnum 0^{:A\times B}$
\end_inset

.
 However, that implementation loses information and would fail the identity
 laws.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-additional-law-of-ap"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
We define 
\begin_inset Formula $\text{ex}_{F}(h\times g)\triangleq\text{ex}_{H}(h)$
\end_inset

 and obtain:
\begin_inset Formula 
\begin{align*}
 & \text{ex}_{F}(\text{zip}_{F}(h_{1}\times g_{1}\times h_{2}\times g_{2}))=\text{ex}_{F}(\text{zip}_{H}(h_{1}\times h_{2})\times\text{zip}_{G}(g_{1}\times g_{2}))=\text{ex}_{H}(\text{zip}_{H}(h_{1}\times h_{2}))\quad,\\
 & \text{ex}_{F}(h_{1}\times g_{1})\times\text{ex}_{F}(h_{2}\times g_{2})=\text{ex}_{H}(h_{1})\times\text{ex}_{H}(h_{2})\quad.
\end{align*}

\end_inset

The two sides are equal due to the compatibility law of 
\begin_inset Formula $\text{zip}_{H}$
\end_inset

 and 
\begin_inset Formula $\text{ex}_{H}$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-profunctor-example"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The first and the third occurrences of 
\begin_inset Formula $A$
\end_inset

 in 
\begin_inset Formula $Q^{A}$
\end_inset

 are contravariant while the others are covariant.
 So, we define a profunctor 
\begin_inset Formula $P^{X,Y}$
\end_inset

 and get:
\begin_inset Formula 
\[
P^{X,Y}\triangleq\left(X\rightarrow\text{Int}\right)\times Y\times\left(X\rightarrow Y\right)\quad,\quad\quad Q^{A}=P^{A,A}\quad.
\]

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-applicative-II-11"
plural "false"
caps "false"
noprefix "false"

\end_inset

(b)
\end_layout

\begin_layout Standard
Hint: Use 
\begin_inset Formula $P^{A}\triangleq A\rightarrow Z$
\end_inset

 as a counterexample.
\end_layout

\begin_layout Subsection*
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:9-Traversable-functors-and"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-traversables-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
First, we express 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

consume
\end_layout

\end_inset

 via 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sequence
\end_layout

\end_inset

 and back:
\begin_inset Formula 
\begin{align}
 & \text{consume}_{L}(f^{:L^{A}\rightarrow B})(p^{:L^{F^{A}}})=p\triangleright\text{seq}_{L}\triangleright f^{\uparrow F}\quad,\quad\text{or equivalently}:\quad\text{consume}_{L}(f)=\text{seq}_{L}\bef f^{\uparrow F}\quad,\label{eq:consume-via-seq}\\
 & \text{seq}_{L}=\text{consume}_{L}(\text{id}^{:L^{A}\rightarrow L^{A}})\quad.\label{eq:seq-via-consume}
\end{align}

\end_inset

The pattern is similar to that in Statement
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-tr-equivalent-to-ftr"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and to the equivalence of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sequence
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

traverse
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
We need to derive the equivalence between 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

consume
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sequence
\end_layout

\end_inset

 in both directions.
 To figure out the necessary naturality law, we begin with the direction
 that restores 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

consume
\end_layout

\end_inset

 from 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sequence
\end_layout

\end_inset

 because 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

consume
\end_layout

\end_inset

 is the more complicated function (having two type parameters).
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 Given a function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

consume
\end_layout

\end_inset

, we define 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sequence
\end_layout

\end_inset

 via Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:seq-via-consume"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and then define a new function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

consume
\end_layout

\end_inset


\begin_inset Formula $^{\prime}$
\end_inset

 via Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:consume-via-seq"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Then we need to show that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

consume
\end_layout

\end_inset


\begin_inset Formula $^{\prime}$
\end_inset

 equals 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

consume
\end_layout

\end_inset

.
 For an arbitrary 
\begin_inset Formula $f^{:L^{A}\rightarrow B}$
\end_inset

, we write:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\text{consume}_{L}(f):\quad & \text{consume}_{L}^{\prime}(f)=\text{seq}_{L}\bef f^{\uparrow F}=\text{consume}_{L}(\text{id})\bef f^{\uparrow F}=???
\end{align*}

\end_inset

If we know nothing about 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

consume
\end_layout

\end_inset

, we cannot conclude that 
\begin_inset Formula $\text{consume}_{L}(f)\overset{?}{=}\text{consume}_{L}(\text{id})\bef f^{\uparrow F}$
\end_inset

 because the function 
\begin_inset Formula $f$
\end_inset

 is arbitrary and the value 
\begin_inset Formula $\text{consume}_{L}(f)$
\end_inset

 does not need to be related in any way to 
\begin_inset Formula $\text{consume}_{L}(\text{id})$
\end_inset

.
 We must use a naturality law involving a lifted function applied after
 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

consume
\end_layout

\end_inset

:
\begin_inset Formula 
\begin{equation}
\text{consume}_{L}(f^{:L^{A}\rightarrow B})\bef(g^{:B\rightarrow C})^{\uparrow F}=\text{consume}_{L}(f\bef g)\quad.\label{eq:consume-naturality-law}
\end{equation}

\end_inset

If this law holds, we can derive the required equation:
\begin_inset Formula 
\[
\text{consume}_{L}^{\prime}(f)=\text{consume}_{L}(\text{id})\bef f^{\uparrow F}=\text{consume}_{L}(\text{id}\bef f)=\text{consume}_{L}(f)\quad.
\]

\end_inset


\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 Given a function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sequence
\end_layout

\end_inset

, we first define 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

consume
\end_layout

\end_inset

 via Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:consume-via-seq"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and then define a new function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sequence
\end_layout

\end_inset


\begin_inset Formula $^{\prime}$
\end_inset

 via Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:seq-via-consume"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 We then show that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sequence
\end_layout

\end_inset


\begin_inset Formula $^{\prime}$
\end_inset

 equals 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sequence
\end_layout

\end_inset

:
\begin_inset Formula 
\[
\text{seq}_{L}^{\prime}=\text{consume}_{L}(\text{id})=\text{seq}_{L}\bef\gunderline{\text{id}^{\uparrow F}}=\text{seq}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
If a function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

consume
\end_layout

\end_inset

 is defined via 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sequence
\end_layout

\end_inset

, the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:consume-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) will hold automatically:
\begin_inset Formula 
\[
\text{consume}_{L}(f)\bef g^{\uparrow F}=\text{seq}_{L}\bef\gunderline{f^{\uparrow F}\bef g^{\uparrow F}}=\text{seq}_{L}\bef(f\bef g)^{\uparrow F}=\text{consume}_{L}\left(f\bef g\right)\quad.
\]

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-traversables-laws-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The naturality law of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ftr
\end_layout

\end_inset

 with respect to the type parameter 
\begin_inset Formula $B$
\end_inset

 is:
\begin_inset Formula 
\begin{equation}
\text{ftr}\,(f^{:A\rightarrow G^{B}})\bef(g^{:B\rightarrow C})^{\uparrow H}=\text{ftr}\,(f\bef g^{\uparrow G})\quad.\label{eq:ftr-right-naturality-law}
\end{equation}

\end_inset

The type signature of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

tr
\end_layout

\end_inset

 has only one type parameter, so 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

tr
\end_layout

\end_inset

 has only one naturality law:
\begin_inset Formula 
\begin{equation}
(f^{:A\rightarrow B})^{\uparrow G\uparrow F}\bef\text{tr}=\text{tr}\bef f^{\uparrow H}\quad.\label{eq:tr-naturality-law}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
1) We show that the naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:tr-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

) of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

tr
\end_layout

\end_inset

 follows from the two naturality laws of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ftr
\end_layout

\end_inset

.
 Express 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

tr
\end_layout

\end_inset

 as 
\begin_inset Formula $\text{ftr}\left(\text{id}\right)$
\end_inset

 and substitute into the two sides of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

tr
\end_layout

\end_inset

's naturality law:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & f^{\uparrow G\uparrow F}\bef\text{tr}=f^{\uparrow G\uparrow F}\bef\text{ftr}\left(\text{id}\right)\\
\text{naturality law~(\ref{eq:ftr-left-naturality-law})}:\quad & \quad=\text{ftr}\,(f^{\uparrow G}\bef\text{id})=\text{ftr}\,(f^{\uparrow G})\quad,\\
\text{right-hand side}:\quad & \text{tr}\bef f^{\uparrow H}=\text{ftr}\left(\text{id}\right)\bef f^{\uparrow H}\\
\text{naturality law~(\ref{eq:ftr-right-naturality-law})}:\quad & \quad=\text{ftr}\,(\text{id}\bef f^{\uparrow G})=\text{ftr}\,(f^{\uparrow G})\quad.
\end{align*}

\end_inset

The two sides of the law are now equal.
\end_layout

\begin_layout Standard
2) We show that the second naturality law of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ftr
\end_layout

\end_inset

 follows from the naturality law of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

tr
\end_layout

\end_inset

.
 Express 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ftr
\end_layout

\end_inset

 through 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

tr
\end_layout

\end_inset

 as 
\begin_inset Formula $\text{ftr}\,(f)=f^{\uparrow F}\bef\text{tr}$
\end_inset

, and substitute into the two sides of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ftr
\end_layout

\end_inset

's naturality law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:ftr-right-naturality-law"
plural "false"
caps "false"
noprefix "false"

\end_inset

): 
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & \text{ftr}\,(f\big)\bef g^{\uparrow H}=f^{\uparrow F}\bef\gunderline{\text{tr}\bef g^{\uparrow H}}\\
\text{naturality law~(\ref{eq:tr-naturality-law}) of }\text{tr}:\quad & =f^{\uparrow F}\bef g^{\uparrow G\uparrow F}\bef\text{tr}=(f\bef g^{\uparrow G})^{\uparrow F}\bef\text{tr}\quad,\\
\text{right-hand side}:\quad & \text{ftr}\,(f\bef g^{\uparrow G})=(f\bef g^{\uparrow G})^{\uparrow F}\bef\text{tr}\quad.
\end{align*}

\end_inset

The two sides of the law are now equal.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-traversables-5"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
To verify the identity law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:identity-law-of-sequence"
plural "false"
caps "false"
noprefix "false"

\end_inset

), set 
\begin_inset Formula $F=\text{Id}$
\end_inset

 in the definition
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:def-sequence-for-functor-composition"
plural "false"
caps "false"
noprefix "false"

\end_inset

) of 
\begin_inset Formula $\text{seq}_{L}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\text{id}:\quad & \text{seq}_{L}^{\text{Id},A}=(\text{seq}_{N}^{\text{Id},A})^{\uparrow M}\bef\text{seq}_{M}^{\text{Id},N^{A}}\\
\text{identity laws of }\text{seq}_{M}\text{ and }\text{seq}_{N}:\quad & =\text{id}^{\uparrow M}\bef\text{id}=\text{id}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
To verify the composition law
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:composition-law-of-sequence"
plural "false"
caps "false"
noprefix "false"

\end_inset

), begin with the left-hand side:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\text{seq}_{L}^{F\circ G,A}:\quad & \text{seq}_{L}^{F,G^{A}}\bef(\text{seq}_{L}^{G,A})^{\uparrow F}\\
 & \quad=(\text{seq}_{N}^{F,G^{A}})^{\uparrow M}\bef\gunderline{\text{seq}_{M}^{F,N^{G^{A}}}\bef\big((\text{seq}_{N}^{G,A})^{\uparrow M}}\bef\text{seq}_{M}^{G,N^{A}}\big)^{\uparrow F}\\
\text{naturality law of }\text{seq}_{M}:\quad & \quad=(\text{seq}_{N}^{F,G^{A}})^{\uparrow M}\bef(\text{seq}_{N}^{G,A})^{\uparrow F\uparrow M}\bef\text{seq}_{M}^{F,G^{N^{A}}}\bef(\text{seq}_{M}^{G,N^{A}})^{\uparrow F}\\
\text{composition laws of }\text{seq}_{M}\text{ and }\text{seq}_{N}:\quad & \quad=(\text{seq}_{N}^{F\circ G,A})^{\uparrow M}\bef\text{seq}_{M}^{F\circ G,N^{A}}=\text{seq}_{L}^{F\circ G,A}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-traversables-10"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The empty elements of the monoids 
\begin_inset Formula $M^{R}$
\end_inset

 and 
\begin_inset Formula $M^{S}$
\end_inset

 are, by definition, 
\begin_inset Formula $\text{pu}_{M}(e_{R})$
\end_inset

 and 
\begin_inset Formula $\text{pu}_{M}(e_{S})$
\end_inset

 respectively.
 The binary operations of 
\begin_inset Formula $M^{R}$
\end_inset

 and 
\begin_inset Formula $M^{S}$
\end_inset

 are:
\begin_inset Formula 
\begin{align*}
 & p\underset{M^{R}}{\oplus}q\triangleq p\triangleright\text{flm}_{M}\big(u^{:R}\rightarrow q\triangleright(v^{:R}\rightarrow u\oplus_{R}v)^{\uparrow M}\big)\quad,\\
 & p\underset{M^{S}}{\oplus}q\triangleq p\triangleright\text{flm}_{M}\big(u^{:S}\rightarrow q\triangleright(v^{:S}\rightarrow u\oplus_{S}v)^{\uparrow M}\big)\quad.
\end{align*}

\end_inset

To verify the properties of the monoid morphism, begin with the identity
 law:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }e_{M^{S}}:\quad & \gunderline{e_{M^{R}}}\triangleright\phi^{\uparrow M}=e_{R}\triangleright\gunderline{\text{pu}_{M}\triangleright\phi^{\uparrow M}}=\gunderline{e_{R}\triangleright\phi}\triangleright\text{pu}_{M}=e_{S}\triangleright\text{pu}_{M}=e_{M^{S}}\quad.
\end{align*}

\end_inset

Now check the composition law.
 For any 
\begin_inset Formula $p^{:M^{R}}$
\end_inset

 and 
\begin_inset Formula $q^{:M^{R}}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }(p\underset{M^{R}}{\oplus}q)\triangleright\phi^{\uparrow M}:\quad & (p\triangleright\phi^{\uparrow M})\underset{M^{S}}{\oplus}(q\triangleright\phi^{\uparrow M})\\
 & =(p\triangleright\gunderline{\phi^{\uparrow M})\triangleright\text{flm}_{M}}\big(u\rightarrow q\triangleright\phi^{\uparrow M}\triangleright(v\rightarrow u\oplus_{S}v)^{\uparrow M}\big)\\
\text{naturality of }\text{flm}_{M}:\quad & =p\triangleright\text{flm}_{M}\big(u\rightarrow q\triangleright(\gunderline{\phi\bef(}v\rightarrow\phi(u)\oplus_{S}v))^{\uparrow M}\big)\\
\text{compute composition}:\quad & =p\triangleright\text{flm}_{M}\big(u\rightarrow q\triangleright(v\rightarrow\gunderline{\phi(u)\oplus_{S}\phi(v)}))^{\uparrow M}\big)\\
\text{composition law of }\phi:\quad & =p\triangleright\text{flm}_{M}\big(u\rightarrow q\triangleright(v\rightarrow\phi(u\oplus_{R}v))^{\uparrow M}\big)\\
\text{move }\phi^{\uparrow M}\text{ outside}:\quad & =p\triangleright\text{flm}_{M}\big(u\rightarrow q\triangleright(v\rightarrow u\oplus_{R}v)^{\uparrow M}\bef\phi^{\uparrow M}\big)\\
\text{naturality of }\text{flm}_{M}:\quad & =\gunderline{p\triangleright\text{flm}_{M}\big(u\rightarrow q\triangleright(v\rightarrow u\oplus_{R}v)^{\uparrow M}\big)}\bef\phi^{\uparrow M}\\
 & =(p\underset{M^{R}}{\oplus}q)\triangleright\phi^{\uparrow M}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-traversables-10-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The empty elements of the monoids 
\begin_inset Formula $M^{R}$
\end_inset

 and 
\begin_inset Formula $N^{R}$
\end_inset

 are, by definition, are 
\begin_inset Formula $\text{pu}_{M}(e_{R})$
\end_inset

 and 
\begin_inset Formula $\text{pu}_{N}(e_{R})$
\end_inset

 respectively.
 The binary operations of 
\begin_inset Formula $M^{R}$
\end_inset

 and 
\begin_inset Formula $N^{R}$
\end_inset

 are:
\begin_inset Formula 
\begin{align*}
 & p\underset{M^{R}}{\oplus}q\triangleq p\triangleright\text{flm}_{M}\big(u^{:R}\rightarrow q\triangleright(v^{:R}\rightarrow u\oplus_{R}v)^{\uparrow M}\big)\quad,\\
 & p\underset{N^{R}}{\oplus}q\triangleq p\triangleright\text{flm}_{N}\big(u^{:R}\rightarrow q\triangleright(v^{:R}\rightarrow u\oplus_{R}v)^{\uparrow N}\big)\quad.
\end{align*}

\end_inset

To verify the properties of the monoid morphism, begin with the identity
 law:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }e_{N^{R}}:\quad & \gunderline{e_{M^{R}}}\triangleright\phi=\gunderline{e_{R}\triangleright\text{pu}_{M}}\triangleright\phi=e_{R}\triangleright\text{pu}_{N}=e_{N^{R}}\quad.
\end{align*}

\end_inset

Now check the composition law.
 For any 
\begin_inset Formula $p^{:M^{R}}$
\end_inset

 and 
\begin_inset Formula $q^{:M^{R}}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }(p\underset{M^{R}}{\oplus}q)\triangleright\phi:\quad & (p\triangleright\phi)\underset{N^{R}}{\oplus}(q\triangleright\phi)=(p\triangleright\phi)\triangleright\text{flm}_{N}\big(u\rightarrow q\triangleright\gunderline{\phi\triangleright(v\rightarrow u\oplus_{R}v)^{\uparrow N}}\big)\\
\text{naturality of }\phi:\quad & =p\triangleright\gunderline{\phi\bef\big(u\rightarrow q\triangleright(v\rightarrow u\oplus_{R}v)^{\uparrow M}\bef\phi\big)^{\uparrow N}}\bef\text{ftn}_{N}\\
\text{naturality of }\phi:\quad & =p\triangleright\big(u\rightarrow q\triangleright(v\rightarrow u\oplus_{R}v)^{\uparrow M}\big)^{\uparrow M}\bef\gunderline{\phi\bef\phi^{\uparrow N}\bef\text{ftn}_{N}}\\
\text{composition law of }\phi:\quad & =p\triangleright\big(u\rightarrow q\triangleright(v\rightarrow u\oplus_{R}v)^{\uparrow M}\gunderline{\big)^{\uparrow M}\bef\text{ftn}_{M}}\bef\phi\\
\text{definition of }\text{ftn}_{M}:\quad & =p\triangleright\text{flm}_{M}\big(u\rightarrow q\triangleright(v\rightarrow u\oplus_{R}v)^{\uparrow M}\big)\bef\phi=(p\underset{M^{R}}{\oplus}q)\triangleright\phi\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subsection*
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:monad-transformers"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-monad-transformer-extra-layer"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The identity law of monad morphisms is:
\begin_inset Formula 
\[
\text{pu}_{\text{Id}}\bef\phi=\text{pu}_{M}\quad.
\]

\end_inset

Since 
\begin_inset Formula $\text{pu}_{\text{Id}}=\text{id}$
\end_inset

, we get 
\begin_inset Formula $\phi=\text{pu}_{M}$
\end_inset

.
 So, there can be no other monad morphisms 
\begin_inset Formula $\text{Id}\leadsto M$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-monad-transformer-extra-layer-5"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The identity law of monad morphisms says that 
\begin_inset Formula $\text{pu}_{\bbnum 1}\bef\phi=\text{pu}_{M}$
\end_inset

.
 However, 
\begin_inset Formula $\text{pu}_{\bbnum 1}=\_^{:A}\rightarrow1$
\end_inset

 and ignores its argument.
 So, 
\begin_inset Formula $\text{pu}_{M}$
\end_inset

 is also a function that ignores its argument.
 By the monad 
\begin_inset Formula $M$
\end_inset

's left identity law, 
\begin_inset Formula $\text{pu}_{M}\bef\text{ftn}_{M}=\text{id}^{:M^{A}\rightarrow M^{A}}$
\end_inset

.
 So, the identity function 
\begin_inset Formula $\text{id}:M^{A}\rightarrow M^{A}$
\end_inset

 ignores its argument.
 It always returns the same value of type 
\begin_inset Formula $M^{A}$
\end_inset

, say 
\begin_inset Formula $m_{0}$
\end_inset

.
 It follows that the type 
\begin_inset Formula $M^{A}$
\end_inset

 has only one distinct value, namely 
\begin_inset Formula $m_{0}$
\end_inset

.
 So 
\begin_inset Formula $M^{A}\cong\bbnum 1$
\end_inset

.
 This argument holds for each type 
\begin_inset Formula $A$
\end_inset

.
 
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-monad-transformer-extra-layer-3"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 For any monad morphism 
\begin_inset Formula $\phi:M\leadsto N$
\end_inset

, the monadic naturality law must hold:
\begin_inset Formula 
\[
\text{dbl}\bef\phi\overset{?}{=}\phi\bef\text{dbl}\quad.
\]

\end_inset

The left-hand side applied to an arbitrary value 
\begin_inset Formula $m^{:M^{A}}$
\end_inset

 is:
\begin_inset Formula 
\begin{align*}
 & m\triangleright\text{dbl}\bef\phi=m\triangleright(\_\rightarrow m)^{\uparrow M}\bef\gunderline{\text{ftn}_{M}\bef\phi}\\
\text{monad morphism law of }\phi:\quad & =m\triangleright\gunderline{(\_\rightarrow m)^{\uparrow M}\bef\phi^{\uparrow M}}\bef\phi\bef\text{ftn}_{M}\\
\text{compute composition}:\quad & =m\triangleright\gunderline{(\_\rightarrow m\triangleright\phi)^{\uparrow M}\bef\phi}\bef\text{ftn}_{M}\\
\text{naturality of }\phi:\quad & =m\triangleright\phi\bef(\_\rightarrow m\triangleright\phi)^{\uparrow M}\bef\text{ftn}_{M}\quad.
\end{align*}

\end_inset

The right-hand side applied to 
\begin_inset Formula $m$
\end_inset

 is:
\begin_inset Formula 
\begin{align*}
 & m\triangleright\phi\bef\text{dbl}=m\triangleright\phi\triangleright\text{dbl}=m\triangleright\phi\triangleright(\_\rightarrow m\triangleright\phi)^{\uparrow M}\bef\text{ftn}_{M}\\
 & =m\triangleright\phi\bef(\_\rightarrow m\triangleright\phi)^{\uparrow M}\bef\text{ftn}_{M}\quad.
\end{align*}

\end_inset

Both sides are now equal.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 The identity law holds:
\begin_inset Formula 
\[
a\triangleright\text{pu}_{M}\bef\text{dbl}=a\triangleright\text{pu}_{M}\triangleright\text{flm}_{M}(\_\rightarrow a\triangleright\text{pu}_{M})=a\triangleright(\_\rightarrow a\triangleright\text{pu}_{M})=a\triangleright\text{pu}_{M}\quad.
\]

\end_inset

The composition law:
\begin_inset Formula 
\[
\text{dbl}^{\uparrow M}\bef\text{dbl}\bef\text{ftn}_{M}\overset{?}{=}\text{ftn}_{M}\bef\text{dbl}\quad.
\]

\end_inset

Simplify the left-hand side, applying to an arbitrary value 
\begin_inset Formula $p:M^{M^{A}}$
\end_inset

.
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & p\triangleright\text{dbl}^{\uparrow M}\bef\text{dbl}\bef\text{ftn}_{M}=p\triangleright\text{dbl}^{\uparrow M}\triangleright(\_\rightarrow p\triangleright\text{dbl}^{\uparrow M})^{\uparrow M}\bef\gunderline{\text{ftn}_{M}\bef\text{ftn}_{M}}\\
\text{associativity law of }M:\quad & =p\triangleright\text{dbl}^{\uparrow M}\bef(\_\rightarrow p\triangleright\text{dbl}^{\uparrow M})^{\uparrow M}\bef\text{ftn}_{M}^{\uparrow M}\bef\text{ftn}_{M}\\
 & =p\triangleright\big(\text{dbl}\bef(\_\rightarrow p\triangleright\text{dbl}^{\uparrow M})\bef\text{ftn})\big)^{\uparrow M}\bef\text{ftn}_{M}=p\triangleright\big(\_\rightarrow p\triangleright\text{dbl}^{\uparrow M}\bef\text{ftn}_{M})\big)^{\uparrow M}\bef\text{ftn}_{M}\\
 & =p\triangleright\text{flm}_{M}\big(\_\rightarrow p\triangleright\text{flm}_{M}(\text{dbl})\big)\quad.
\end{align*}

\end_inset

The right-hand side:
\begin_inset Formula 
\begin{align*}
\text{right-hand side}:\quad & p\triangleright\text{ftn}_{M}\bef\text{dbl}=p\triangleright\gunderline{\text{ftn}_{M}\bef(\_\rightarrow p\triangleright\text{ftn}_{M})^{\uparrow M}}\bef\text{ftn}_{M}\\
\text{naturality of }\text{ftn}_{M}:\quad & =p\triangleright(\_\rightarrow p\triangleright\text{ftn}_{M})^{\uparrow M\uparrow M}\bef\gunderline{\text{ftn}_{M}\bef\text{ftn}_{M}}\\
\text{associativity law of }M:\quad & =p\triangleright(\_\rightarrow p\triangleright\text{ftn}_{M})^{\uparrow M\uparrow M}\bef\text{ftn}_{M}^{\uparrow M}\bef\text{ftn}_{M}\\
 & =p\triangleright\big((\_\rightarrow p\triangleright\text{ftn}_{M})^{\uparrow M}\bef\text{ftn}_{M}\big)^{\uparrow M}\bef\text{ftn}_{M}\\
 & =p\triangleright\text{flm}_{M}\big(\text{flm}_{M}(\_\rightarrow p\triangleright\text{ftn}_{M})\big)\quad.
\end{align*}

\end_inset

The simplification is stuck — we cannot make the two sides coincide; no
 law can be applied to simplify further.
\end_layout

\begin_layout Standard
Choosing specific values 
\begin_inset Formula $p=\text{pu}_{M}(m)$
\end_inset

 or 
\begin_inset Formula $p=\text{pu}_{M}^{\uparrow M}(m)$
\end_inset

 does not help to obtain a counter-example: the laws hold for those specific
 choices.
\end_layout

\begin_layout Standard
To obtain a counter-example, consider a specific non-commutative monad,
 such as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List
\end_layout

\end_inset

.
 For the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List
\end_layout

\end_inset

 monad, the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

double
\end_layout

\end_inset

 function repeats the entire list as many times as elements in the list:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

scala> double(List(1, 2))
\end_layout

\begin_layout Plain Layout

res0: List[Int] = List(1, 2, 1, 2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> val ll = List(List(1, 2), List(3))
\end_layout

\begin_layout Plain Layout

ll: List[List[Int]] = List(List(1, 2), List(3))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> double(ll.flatten)
\end_layout

\begin_layout Plain Layout

res1: List[Int] = List(1, 2, 3, 1, 2, 3, 1, 2, 3)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> double(ll.map(double))
\end_layout

\begin_layout Plain Layout

res2: List[List[Int]] = List(List(1, 2, 1, 2), List(3), List(1, 2, 1, 2),
 List(3)) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> double(ll.map(double)).flatten
\end_layout

\begin_layout Plain Layout

res3: List[Int] = List(1, 2, 1, 2, 3, 1, 2, 1, 2, 3)
\end_layout

\end_inset

The composition law does not hold.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Statement-search-and-selector-monads"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The identity law does not hold:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }a\triangleright\text{pu}_{\text{Search}}:\quad & a\triangleright\text{pu}_{\text{Sel}}\bef\text{finder}=(\_^{:A\rightarrow\bbnum 1+P}\rightarrow a)\triangleright\text{finder}\\
 & =p\rightarrow p(a)\triangleright\,\begin{array}{|c||cc|}
 & \bbnum 1 & A\\
\hline \bbnum 1 & \text{id} & \bbnum 0\\
P & \bbnum 0 & a
\end{array}\,=p\rightarrow a\triangleright p\bef(\_\rightarrow a)^{\uparrow\text{Opt}}\neq p\rightarrow\bbnum 0+a\quad.
\end{align*}

\end_inset

The result should have been 
\begin_inset Formula $\text{pu}_{\text{Search}}(a)=\_\rightarrow\text{pu}_{\text{Opt}}(a)=\_\rightarrow\bbnum 0+a$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-selector-and-continuation-monads"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
To verify the identity law:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }a\triangleright\text{pu}_{\text{Cont}}:\quad & a\triangleright\text{pu}_{\text{Sel}}\bef\text{scc}=f\rightarrow f(f\triangleright(\gunderline{a\triangleright\text{pu}_{\text{Sel}}}))\\
\text{use definition of }\text{pu}_{\text{Sel}}:\quad & =f\rightarrow f(f\triangleright(\_\rightarrow a))=f\rightarrow f(a)=a\triangleright\text{pu}_{\text{Cont}}\quad.
\end{align*}

\end_inset

To verify the composition law, we begin with the flipped Kleisli formulation
 of the two monads.
 The flipped Kleisli functions have types 
\begin_inset Formula $\left(B\rightarrow P\right)\rightarrow A\rightarrow P$
\end_inset

 (for 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Cont
\end_layout

\end_inset

) and 
\begin_inset Formula $\left(B\rightarrow P\right)\rightarrow A\rightarrow B$
\end_inset

 (for 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Sel
\end_layout

\end_inset

).
\begin_inset Formula 
\begin{align*}
 & f^{:\left(B\rightarrow P\right)\rightarrow A\rightarrow P}\tilde{\diamond}_{_{\text{Cont}}}g^{:\left(C\rightarrow P\right)\rightarrow B\rightarrow P}\triangleq h^{:C\rightarrow P}\rightarrow h\triangleright g\triangleright f=g\bef f\quad,\\
 & f^{:\left(B\rightarrow P\right)\rightarrow A\rightarrow B}\tilde{\diamond}_{_{\text{Sel}}}g^{:\left(C\rightarrow P\right)\rightarrow B\rightarrow C}\triangleq h^{:C\rightarrow P}\rightarrow f(g(h)\bef h)\bef g(h)\quad.
\end{align*}

\end_inset

We need to check that 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Sel
\end_layout

\end_inset

's Kleisli composition (
\begin_inset Formula $\tilde{\diamond}_{_{\text{Sel}}}$
\end_inset

) is mapped to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Cont
\end_layout

\end_inset

's Kleisli composition (
\begin_inset Formula $\tilde{\diamond}_{_{\text{Cont}}}$
\end_inset

).
 First, we need to modify 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

scc
\end_layout

\end_inset

 so that it works on the flipped Kleisli functions:
\begin_inset Formula 
\[
\tilde{\text{scc}}^{A,B}:\left(\left(B\rightarrow P\right)\rightarrow A\rightarrow B\right)\rightarrow\left(B\rightarrow P\right)\rightarrow A\rightarrow P\quad,\quad\tilde{\text{scc}}=c^{:\left(\left(B\rightarrow P\right)\rightarrow A\rightarrow B\right)}\rightarrow k^{:B\rightarrow P}\rightarrow c(k)\bef k\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
Note that the implementation of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

scc
\end_layout

\end_inset

 is uniquely determined by its type signature, and so is the implementation
 of 
\begin_inset Formula $\tilde{\text{scc}}$
\end_inset

.
 So, we can spare ourselves the effort of translating 
\begin_inset Formula $\text{scc}$
\end_inset

 into 
\begin_inset Formula $\tilde{\text{scc}}$
\end_inset

.
\end_layout

\begin_layout Standard
Now it remains to show that for any 
\begin_inset Formula $f^{:\left(B\rightarrow P\right)\rightarrow A\rightarrow B}$
\end_inset

 and 
\begin_inset Formula $g^{:\left(C\rightarrow P\right)\rightarrow B\rightarrow C}$
\end_inset

 the law holds:
\begin_inset Formula 
\[
(f\triangleright\tilde{\text{scc}}^{A,B})\tilde{\diamond}_{_{\text{Cont}}}(g\triangleright\tilde{\text{scc}}^{B,C})=(f\tilde{\diamond}_{_{\text{Sel}}}g)\triangleright\tilde{\text{scc}}^{A,C}\quad.
\]

\end_inset

Rewrite the two sides of the law separately:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & (f\triangleright\tilde{\text{scc}})\tilde{\diamond}_{_{\text{Cont}}}(g\triangleright\tilde{\text{scc}})=(g\triangleright\tilde{\text{scc}})\bef(f\triangleright\tilde{\text{scc}})=(k\rightarrow g(k)\bef k)\bef(h\rightarrow f(h)\bef h)\\
 & \quad=k\rightarrow f(g(k)\bef k)\bef g(k)\bef k\quad,\\
\text{right-hand side}:\quad & (f\tilde{\diamond}_{_{\text{Sel}}}g)\triangleright\tilde{\text{scc}}=\big(h\rightarrow f(g(h)\bef h)\bef g(h)\big)\triangleright\tilde{\text{scc}}=k\rightarrow\big(h\rightarrow f(g(h)\bef h)\bef g(h)\big)(k)\bef k\\
 & \quad=k\rightarrow f(g(k)\bef k)\bef g(k)\bef k\quad.
\end{align*}

\end_inset

Both sides are now equal.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Exercise-mt-3-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The operations 
\begin_inset Formula $\text{pu}_{N}$
\end_inset

 and 
\begin_inset Formula $\text{ftn}_{N}$
\end_inset

 are defined by:
\begin_inset Formula 
\[
\text{pu}_{N}\triangleq\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0
\end{array}\quad,\quad\quad\text{ftn}_{N}\triangleq\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0\\
M^{A} & \bbnum 0 & \text{id}\\
M^{N^{A}} & \bbnum 0 & \gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}
\end{array}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
To verify the identity law:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\text{pu}_{M}:\quad & \text{pu}_{N}\bef\gamma_{M}=\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0
\end{array}\,\bef\,\begin{array}{|c||c|}
 & M^{A}\\
\hline A & \text{pu}_{M}\\
M^{A} & \text{id}
\end{array}\,=\text{pu}_{M}\quad.
\end{align*}

\end_inset

To verify the composition law, transform separately the two sides of the
 law:
\begin_inset Formula 
\begin{align*}
\text{left-hand side}:\quad & \gamma_{M}\bef\gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}=\,\begin{array}{|c||c|}
 & M^{N^{A}}\\
\hline N^{A} & \text{pu}_{M}\\
M^{N^{A}} & \text{id}
\end{array}\,\bef\gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}=\,\begin{array}{|c||c|}
 & M^{A}\\
\hline N^{A} & \gunderline{\text{pu}_{M}\bef\gamma_{M}^{\uparrow M}}\bef\text{ftn}_{M}\\
M^{N^{A}} & \gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}
\end{array}\\
 & \quad=\,\begin{array}{|c||c|}
 & M^{A}\\
\hline N^{A} & \gamma_{M}\bef\gunderline{\text{pu}_{M}\bef\text{ftn}_{M}}\\
M^{N^{A}} & \gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}
\end{array}\,=\,\begin{array}{|c||c|}
 & M^{A}\\
\hline A & \text{pu}_{M}\\
M^{A} & \text{id}\\
M^{N^{A}} & \gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}
\end{array}\quad,\\
\text{right-hand side}:\quad & \text{ftn}_{N}\bef\gamma_{M}=\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0\\
M^{A} & \bbnum 0 & \text{id}\\
M^{N^{A}} & \bbnum 0 & \gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}
\end{array}\,\bef\,\begin{array}{|c||c|}
 & M^{A}\\
\hline A & \text{pu}_{M}\\
M^{A} & \text{id}
\end{array}\,=\,\begin{array}{|c||c|}
 & M^{A}\\
\hline A & \text{pu}_{M}\\
M^{A} & \text{id}\\
M^{N^{A}} & \gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}
\end{array}\quad.
\end{align*}

\end_inset

The two sides are now equal.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Exercise-mt-3"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
The operations 
\begin_inset Formula $\text{ftn}_{L}$
\end_inset

 and 
\begin_inset Formula $\text{ftn}_{N}$
\end_inset

 are defined as usual for a free pointed monad:
\begin_inset Formula 
\begin{align*}
 & \text{ftn}_{L}\triangleq\,\begin{array}{|c||c|}
 & L^{A}\\
\hline L^{A} & \text{id}\\
K^{L^{A}} & k\rightarrow\bbnum 0+k\triangleright\gamma_{K}^{\uparrow K}\bef\text{ftn}_{K}
\end{array}\,=\,\begin{array}{|c||cc|}
 & A & K^{A}\\
\hline A & \text{id} & \bbnum 0\\
K^{A} & \bbnum 0 & \text{id}\\
K^{L^{A}} & \bbnum 0 & \gamma_{K}^{\uparrow K}\bef\text{ftn}_{K}
\end{array}\quad,\\
 & \text{ftn}_{N}\triangleq\,\begin{array}{|c||c|}
 & N^{A}\\
\hline N^{A} & \text{id}\\
M^{N^{A}} & m\rightarrow\bbnum 0+m\triangleright\gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}
\end{array}\,=\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0\\
M^{A} & \bbnum 0 & \text{id}\\
M^{N^{A}} & \bbnum 0 & \gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}
\end{array}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
We define 
\begin_inset Formula $\psi$
\end_inset

 by:
\begin_inset Formula 
\[
\psi=\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0\\
K^{A} & \bbnum 0 & \phi
\end{array}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
To verify the identity law for 
\begin_inset Formula $\psi$
\end_inset

:
\begin_inset Formula 
\[
\text{pu}_{L}\bef\psi=\,\begin{array}{|c||cc|}
 & A & K^{A}\\
\hline A & \text{id} & \bbnum 0
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0\\
K^{A} & \bbnum 0 & \phi
\end{array}\,=\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0
\end{array}\,=\text{pu}_{N}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
To verify the composition law for 
\begin_inset Formula $\psi$
\end_inset

, write both sides of the law separately:
\begin_inset Formula 
\begin{align*}
\psi^{\uparrow L}\bef\psi\bef\text{ftn}_{N} & =\,\begin{array}{|c||ccc|}
 & A & M^{A} & K^{N^{A}}\\
\hline A & \text{id} & \bbnum 0 & \bbnum 0\\
K^{A} & \bbnum 0 & \phi & \bbnum 0\\
K^{L^{A}} & \bbnum 0 & \bbnum 0 & \psi^{\uparrow K}
\end{array}\,\bef\,\begin{array}{|c||ccc|}
 & A & M^{A} & M^{N^{A}}\\
\hline A & \text{id} & \bbnum 0 & \bbnum 0\\
M^{A} & \bbnum 0 & \text{id} & \bbnum 0\\
K^{N^{A}} & \bbnum 0 & \bbnum 0 & \phi
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0\\
M^{A} & \bbnum 0 & \text{id}\\
M^{N^{A}} & \bbnum 0 & \gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}
\end{array}\\
 & =\,\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0\\
K^{A} & \bbnum 0 & \phi\\
K^{L^{A}} & \bbnum 0 & \psi^{\uparrow K}\bef\phi\bef\gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}
\end{array}\quad,\\
\text{ftn}_{L}\bef\psi & =\,\begin{array}{|c||cc|}
 & A & K^{A}\\
\hline A & \text{id} & \bbnum 0\\
K^{A} & \bbnum 0 & \text{id}\\
K^{L^{A}} & \bbnum 0 & \gamma_{K}^{\uparrow K}\bef\text{ftn}_{K}
\end{array}\,\bef\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0\\
K^{A} & \bbnum 0 & \phi
\end{array}\,=\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0\\
K^{A} & \bbnum 0 & \phi\\
K^{L^{A}} & \bbnum 0 & \gamma_{K}^{\uparrow K}\bef\text{ftn}_{K}\bef\phi
\end{array}\quad.
\end{align*}

\end_inset

It remains to show that:
\begin_inset Formula 
\[
\psi^{\uparrow K}\bef\phi\bef\gamma_{M}^{\uparrow M}\bef\text{ftn}_{M}\overset{?}{=}\gamma_{K}^{\uparrow K}\bef\text{ftn}_{K}\bef\phi\quad.
\]

\end_inset

The monad morphism law for 
\begin_inset Formula $\phi$
\end_inset

 gives:
\begin_inset Formula 
\[
\phi\bef\phi^{\uparrow M}\bef\text{ftn}_{M}=\text{ftn}_{K}\bef\phi\quad.
\]

\end_inset

It remains to show that:
\begin_inset Formula 
\begin{align*}
 & \gunderline{\psi^{\uparrow K}\bef\phi}\bef\gamma_{M}^{\uparrow M}\overset{?}{=}\gunderline{\gamma_{K}^{\uparrow K}\bef\phi}\bef\phi^{\uparrow M}\quad.\\
 & \phi\bef\psi^{\uparrow M}\bef\gamma_{M}^{\uparrow M}=\phi\bef(\psi\bef\gamma_{M})^{\uparrow M}\overset{?}{=}\phi\bef\gamma_{K}^{\uparrow M}\bef\phi^{\uparrow M}=\phi\bef(\gamma_{K}\bef\phi)^{\uparrow M}\quad.
\end{align*}

\end_inset

It remains to show that 
\begin_inset Formula $\psi\bef\gamma_{M}=\gamma_{K}\bef\phi$
\end_inset

.
 For that, we use the identity law of 
\begin_inset Formula $\phi$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & \psi\bef\gamma_{M}=\,\begin{array}{|c||cc|}
 & A & M^{A}\\
\hline A & \text{id} & \bbnum 0\\
K^{A} & \bbnum 0 & \phi
\end{array}\,\bef\,\begin{array}{|c||c|}
 & M^{A}\\
\hline A & \text{pu}_{M}\\
M^{A} & \text{id}
\end{array}\,=\,\begin{array}{|c||c|}
 & M^{A}\\
\hline A & \text{pu}_{M}\\
K^{A} & \phi
\end{array}\quad,\\
 & \gamma_{K}\bef\phi=\,\begin{array}{|c||c|}
 & K^{A}\\
\hline A & \text{pu}_{K}\\
K^{A} & \text{id}
\end{array}\,\bef\phi=\,\begin{array}{|c||c|}
 & M^{A}\\
\hline A & \gunderline{\text{pu}_{K}\bef\phi}\\
K^{A} & \phi
\end{array}\,=\,\begin{array}{|c||c|}
 & M^{A}\\
\hline A & \text{pu}_{M}\\
K^{A} & \phi
\end{array}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Exercise-mt-3-3"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 Verify the naturality law of 
\begin_inset Formula $\psi$
\end_inset

, assuming the naturality laws of 
\begin_inset Formula $\phi$
\end_inset

 and 
\begin_inset Formula $\chi$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & (f^{:A\rightarrow B})^{\uparrow(K+L)}\bef\psi=\,\begin{array}{|c||cc|}
 & K^{B} & L^{B}\\
\hline K^{A} & f^{\uparrow K} & \bbnum 0\\
L^{A} & \bbnum 0 & f^{\uparrow L}
\end{array}\,\bef\,\begin{array}{|c||c|}
 & M^{B}\\
\hline K^{B} & \phi\\
L^{B} & \chi
\end{array}\,=\,\begin{array}{|c||c|}
 & M^{B}\\
\hline K^{A} & \gunderline{f^{\uparrow K}\bef\phi}\\
L^{A} & \gunderline{f^{\uparrow L}\bef\chi}
\end{array}\,=\,\begin{array}{|c||c|}
 & M^{B}\\
\hline K^{A} & \phi\bef f^{\uparrow M}\\
L^{A} & \chi\bef f^{\uparrow M}
\end{array}\quad,\\
 & \psi\bef f^{\uparrow M}=\,\begin{array}{|c||c|}
 & M^{A}\\
\hline K^{A} & \phi\\
L^{A} & \chi
\end{array}\,\bef f^{\uparrow M}=\,\begin{array}{|c||c|}
 & M^{B}\\
\hline K^{A} & \phi\bef f^{\uparrow M}\\
L^{A} & \chi\bef f^{\uparrow M}
\end{array}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 Given the definitions of 
\begin_inset Formula $\phi$
\end_inset

 and 
\begin_inset Formula $\chi$
\end_inset

, we can write 
\begin_inset Formula $\psi$
\end_inset

 as:
\begin_inset Formula 
\[
\psi=\,\begin{array}{|c||c|}
 & M^{A}\\
\hline K^{A} & \phi\\
L^{A} & \chi
\end{array}\quad.
\]

\end_inset

Assuming the naturality law of 
\begin_inset Formula $\psi$
\end_inset

, verify the naturality law of 
\begin_inset Formula $\phi$
\end_inset

 by applying to an arbitrary value 
\begin_inset Formula $k^{:K^{A}}$
\end_inset

 and expressing 
\begin_inset Formula $f^{\uparrow K}$
\end_inset

 through 
\begin_inset Formula $f^{\uparrow(K+L)}$
\end_inset

: 
\begin_inset Formula 
\begin{align*}
\text{expect to equal }k\triangleright\phi\bef f^{\uparrow M}:\quad & k\triangleright f^{\uparrow K}\bef\phi=k\triangleright f^{\uparrow K}\triangleright(k\rightarrow k+\bbnum 0)\triangleright\psi=\big((k\triangleright f^{\uparrow K})+\bbnum 0\big)\triangleright\psi\\
 & =(k+\bbnum 0)\triangleright\,\begin{array}{|c||cc|}
 & K^{B} & L^{B}\\
\hline K^{A} & f^{\uparrow K} & \bbnum 0\\
L^{A} & \bbnum 0 & f^{\uparrow L}
\end{array}\,\bef\psi=(k+\bbnum 0)\triangleright\gunderline{f^{\uparrow(K+L)}\bef\psi}\\
\text{naturality law of }\psi:\quad & =(\gunderline{k+\bbnum 0})\triangleright\psi\bef f^{\uparrow M}=k\triangleright\gunderline{(x\rightarrow x+\bbnum 0)\bef\psi}\bef f^{\uparrow M}=k\triangleright\phi\bef f^{\uparrow M}\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
The proof of the naturality law of 
\begin_inset Formula $\chi$
\end_inset

 is analogous.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Exercise-mt-3-2-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 Choose the monads 
\begin_inset Formula $K^{A}\triangleq R\rightarrow A$
\end_inset

 and 
\begin_inset Formula $M^{A}\triangleq S\rightarrow A$
\end_inset

, where 
\begin_inset Formula $R$
\end_inset

, 
\begin_inset Formula $S$
\end_inset

 are fixed (but arbitrary) types.
 Define 
\begin_inset Formula $P^{A}\triangleq A+T_{K}^{M,A}$
\end_inset

 and show that there exist no monad morphisms 
\begin_inset Formula $\phi:M^{A}\rightarrow P^{A}$
\end_inset

.
 If such 
\begin_inset Formula $\phi$
\end_inset

 exists, it must satisfy the identity law, 
\begin_inset Formula $\text{pu}_{M}\bef\phi=\text{pu}_{P}$
\end_inset

.
 The type signature of 
\begin_inset Formula $\phi$
\end_inset

 is:
\begin_inset Formula 
\[
\phi:(R\rightarrow A)\rightarrow A+(S\rightarrow R\rightarrow A)\quad.
\]

\end_inset

The only fully parametric implementation is:
\begin_inset Formula 
\[
\phi:f^{:R\rightarrow A}\rightarrow\bbnum 0+(\_^{:S}\rightarrow f)\quad,
\]

\end_inset

because we cannot produce values of type 
\begin_inset Formula $A+\bbnum 0$
\end_inset

 since we cannot create values of the unknown type 
\begin_inset Formula $R$
\end_inset

.
 However, this implementation of 
\begin_inset Formula $\phi$
\end_inset

 does not satisfy the identity law since 
\begin_inset Formula $\text{pu}_{P}$
\end_inset

 must return values of type 
\begin_inset Formula $A+\bbnum 0$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 Given 
\begin_inset Formula $\theta_{K}:K^{A}\rightarrow M^{A}$
\end_inset

, we define:
\begin_inset Formula 
\[
\theta_{L}:L^{A}\rightarrow M^{A}\quad,\quad\quad\theta_{L}\triangleq\,\begin{array}{|c||c|}
 & M^{A}\\
\hline A & \text{pu}_{M}\\
K^{A} & \theta_{K}
\end{array}\quad.
\]

\end_inset

The proof becomes shorter if we express 
\begin_inset Formula $\theta_{L}$
\end_inset

 as:
\begin_inset Formula 
\[
\theta_{L}=\gamma_{K}\bef\theta_{K}\quad,\quad\quad\gamma_{K}\triangleq\,\begin{array}{|c||c|}
 & K^{A}\\
\hline A & \text{pu}_{K}\\
K^{A} & \text{id}
\end{array}\quad.
\]

\end_inset

We already know that 
\begin_inset Formula $\gamma_{K}:L\leadsto K$
\end_inset

 is a monad morphism (Exercise
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "par:Exercise-mt-3-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 So, 
\begin_inset Formula $\theta_{L}$
\end_inset

 is a composition of monad morphisms.
\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 Choose 
\begin_inset Formula $K^{A}\triangleq\bbnum 1$
\end_inset

 (the unit monad) and note that 
\begin_inset Formula $L^{A}=A+\bbnum 1$
\end_inset

 is the standard 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Option
\end_layout

\end_inset

 monad (there are no other lawful monad implementations for the type constructor
 
\begin_inset Formula $L^{A}\triangleq A+\bbnum 1$
\end_inset

).
 Choose 
\begin_inset Formula $M\triangleq L$
\end_inset

, so that a monad morphism 
\begin_inset Formula $\theta_{L}\triangleq\text{id}^{:L\leadsto M}$
\end_inset

 exists.
 If it were possible to define a monad morphism 
\begin_inset Formula $K\leadsto M$
\end_inset

, we would have a monad morphism 
\begin_inset Formula $\bbnum 1\rightarrow\bbnum 1+A$
\end_inset

, but this is impossible: the only natural transformation of type 
\begin_inset Formula $\bbnum 1\rightarrow\bbnum 1+A$
\end_inset

 is 
\begin_inset Formula $1\rightarrow1+\bbnum 0$
\end_inset

, which does not satisfy the identity law of monad morphisms, 
\begin_inset Formula $\text{pu}_{K}\bef\theta_{K}=\text{pu}_{M}$
\end_inset

, since it never returns any values of type 
\begin_inset Formula $\bbnum 0+A$
\end_inset

.
 (Generally, the existence of a monad morphism 
\begin_inset Formula $\bbnum 1\leadsto M$
\end_inset

 means that 
\begin_inset Formula $M=\bbnum 1$
\end_inset

.)
\end_layout

\begin_layout Standard

\series bold
(d)
\series default
 By Exercise
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "par:Exercise-mt-3-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we have a natural transformation 
\begin_inset Formula $\theta_{K}:K^{A}\rightarrow A$
\end_inset

 defined by:
\begin_inset Formula 
\[
\theta_{K}\triangleq(k\rightarrow\bbnum 0+k)\bef\theta_{L}\quad.
\]

\end_inset

The given runner 
\begin_inset Formula $\theta_{L}$
\end_inset

 is then expressed through 
\begin_inset Formula $\theta_{K}$
\end_inset

 as:
\begin_inset Formula 
\[
\theta_{L}=\,\begin{array}{|c||c|}
 & A\\
\hline A & \text{id}\\
K^{A} & \theta_{K}
\end{array}\quad,
\]

\end_inset

because the natural transformation in the upper row of the matrix has the
 type signature 
\begin_inset Formula $A\rightarrow A$
\end_inset

 and so must be an identity function.
\end_layout

\begin_layout Standard
It remains to verify the monad morphism laws of 
\begin_inset Formula $\theta_{K}:K\leadsto\text{Id}$
\end_inset

.
 The identity law is:
\begin_inset Formula 
\[
\text{pu}_{K}\bef\theta_{K}\overset{?}{=}\text{pu}_{\text{Id}}=\text{id}\quad.
\]

\end_inset

 Since the function 
\begin_inset Formula $p\triangleq\text{pu}_{K}\bef\theta_{K}$
\end_inset

 has type signature 
\begin_inset Formula $A\rightarrow A$
\end_inset

 and is a natural transformation (as a composition of two natural transformation
s), that function must satisfy 
\begin_inset Formula $p\bef f=f\bef p$
\end_inset

 for any function 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

, and so 
\begin_inset Formula $p$
\end_inset

 must be equal to the identity function.
\end_layout

\begin_layout Standard
The composition law of 
\begin_inset Formula $\theta_{K}$
\end_inset

 is an equation for functions of type 
\begin_inset Formula $K^{K^{A}}\rightarrow A$
\end_inset

:
\begin_inset Formula 
\[
\text{ftn}_{K}\bef\theta_{K}\overset{?}{=}\theta_{K}^{\uparrow K}\bef\theta_{K}\bef\text{ftn}_{\text{Id}}=\theta_{K}\bef\theta_{K}\quad.
\]

\end_inset

Applied to an arbitrary value 
\begin_inset Formula $k:K^{K^{A}}$
\end_inset

, this law becomes:
\begin_inset Formula 
\[
k\triangleright\text{ftn}_{K}\bef\theta_{K}\overset{?}{=}k\triangleright\theta_{K}^{\uparrow K}\bef\theta_{K}\quad.
\]

\end_inset

Since 
\begin_inset Formula $\theta_{K}$
\end_inset

 is defined via 
\begin_inset Formula $\theta_{L}$
\end_inset

, we need to use the composition law of 
\begin_inset Formula $\theta_{L}$
\end_inset

:
\begin_inset Formula 
\[
\text{ftn}_{L}\bef\theta_{L}\overset{!}{=}\theta_{L}^{\uparrow L}\bef\theta_{L}\bef\text{ftn}_{\text{Id}}=\theta_{L}^{\uparrow K}\bef\theta_{L}\quad.
\]

\end_inset

Rewrite this law as:
\begin_inset Formula 
\begin{align*}
 & \text{ftn}_{L}\bef\theta_{L}=\,\begin{array}{|c||cc|}
 & A & K^{A}\\
\hline A & \text{id} & \bbnum 0\\
K^{A} & \bbnum 0 & \text{id}\\
K^{L^{A}} & \bbnum 0 & \gamma_{K}^{\uparrow K}\bef\text{ftn}_{K}
\end{array}\,\bef\,\begin{array}{|c||c|}
 & A\\
\hline A & \text{id}\\
K^{A} & \theta_{K}
\end{array}\,=\,\begin{array}{|c||c|}
 & A\\
\hline A & \text{id}\\
K^{A} & \theta_{K}\\
K^{L^{A}} & \gamma_{K}^{\uparrow K}\bef\text{ftn}_{K}\bef\theta_{K}
\end{array}\quad,\\
 & \theta_{L}^{\uparrow L}\bef\theta_{L}=\,\begin{array}{|c||cc|}
 & A & K^{A}\\
\hline A & \text{id} & \bbnum 0\\
K^{A} & \bbnum 0 & \text{id}\\
K^{L^{A}} & \bbnum 0 & \theta_{L}^{\uparrow K}
\end{array}\,\bef\,\begin{array}{|c||c|}
 & A\\
\hline A & \text{id}\\
K^{A} & \theta_{K}
\end{array}\,=\,\begin{array}{|c||c|}
 & A\\
\hline A & \text{id}\\
K^{A} & \theta_{K}\\
K^{L^{A}} & \theta_{L}^{\uparrow K}\bef\theta_{K}
\end{array}\quad.
\end{align*}

\end_inset

The third rows of the matrices give the equation for functions of type 
\begin_inset Formula $K^{L^{A}}\rightarrow A$
\end_inset

:
\begin_inset Formula 
\[
\gamma_{K}^{\uparrow K}\bef\text{ftn}_{K}\bef\theta_{K}\overset{!}{=}\theta_{L}^{\uparrow K}\bef\theta_{K}\quad.
\]

\end_inset

Apply both sides of this equation to an arbitrary value 
\begin_inset Formula $p$
\end_inset

 of type 
\begin_inset Formula $K^{\bbnum 0+K^{A}}$
\end_inset

, defined via an arbitrary value 
\begin_inset Formula $k^{:K^{K^{A}}}$
\end_inset

 as 
\begin_inset Formula $p\triangleq k\triangleright(x\rightarrow\bbnum 0+x)^{\uparrow K}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
 & p\triangleright\gamma_{K}^{\uparrow K}\bef\text{ftn}_{K}\bef\theta_{K}\overset{!}{=}p\triangleright\theta_{L}^{\uparrow K}\bef\theta_{K}\quad,\\
\text{or equivalently}:\quad & k\triangleright(x\rightarrow\bbnum 0+x)^{\uparrow K}\bef\gamma_{K}^{\uparrow K}\bef\text{ftn}_{K}\bef\theta_{K}\overset{!}{=}k\triangleright(x\rightarrow\bbnum 0+x)^{\uparrow K}\bef\theta_{L}^{\uparrow K}\bef\theta_{K}\quad.
\end{align*}

\end_inset

We compute some sub-expressions separately:
\begin_inset Formula 
\begin{align*}
 & (x\rightarrow\bbnum 0+x)\bef\gamma_{K}=(x\rightarrow\bbnum 0+x)\bef\,\begin{array}{|c||c|}
 & K^{A}\\
\hline A & \text{pu}_{K}\\
K^{A} & \text{id}
\end{array}\,=x\rightarrow x=\text{id}\quad,\\
 & (x\rightarrow\bbnum 0+x)\bef\theta_{L}=\theta_{K}\quad.
\end{align*}

\end_inset

After these simplifications, the composition law of 
\begin_inset Formula $\theta_{L}$
\end_inset

 gives:
\begin_inset Formula 
\[
k\triangleright\text{ftn}_{K}\bef\theta_{K}\overset{!}{=}k\triangleright\theta_{K}^{\uparrow K}\bef\theta_{K}\quad.
\]

\end_inset

This is the composition law of 
\begin_inset Formula $\theta_{K}$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Exercise-mt-3-2"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Consider the monad morphism 
\begin_inset Formula $\varepsilon:K\leadsto\bbnum 1$
\end_inset

 defined by 
\begin_inset Formula $\varepsilon\triangleq\_\rightarrow1$
\end_inset

.
 (This is a monad morphism because all its laws reduce to the equation 
\begin_inset Formula $1=1$
\end_inset

.) By Exercise
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "par:Exercise-mt-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we can implement a corresponding monad morphism between free pointed monads
 
\begin_inset Formula $\text{Id}+K\leadsto\text{Id}+\bbnum 1$
\end_inset

.
 Define 
\begin_inset Formula $\delta$
\end_inset

 as that monad morphism.
 The monad 
\begin_inset Formula $\text{Id}+\bbnum 1$
\end_inset

 (the free pointed monad on 
\begin_inset Formula $\bbnum 1$
\end_inset

) is the standard 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Option
\end_layout

\end_inset

 monad.
 So, we have implemented a monad morphism 
\begin_inset Formula $\delta:A+K^{A}\rightarrow\text{Opt}^{A}$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-effectful-list-not-monad"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 Consider the requirement of mapping 
\begin_inset Formula $L^{L^{A}}\rightarrow L^{A}$
\end_inset

 via a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 function:
\begin_inset Formula 
\[
\text{ftn}_{L}:\bbnum 1+L^{A}\times M^{L^{L^{A}}}\rightarrow\bbnum 1+A\times M^{L^{A}}\quad,\quad\quad\text{ftn}_{L}=\text{???}
\]

\end_inset

The result value of this function cannot always be 
\begin_inset Formula $1$
\end_inset

, or else it will fail the monad laws.
 This function must sometimes return a pair of type 
\begin_inset Formula $A\times M^{L^{A}}$
\end_inset

.
 Let us rewrite the type signature of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 as
\begin_inset Formula 
\[
\text{ftn}_{L}:\bbnum 1+(\bbnum 1+A\times M^{L^{A}})\times M^{L^{L^{A}}}\rightarrow\bbnum 1+A\times M^{L^{A}}\quad.
\]

\end_inset

Consider input values of the form:
\begin_inset Formula 
\[
x\triangleq\bbnum 0^{:\bbnum 1}+(1+\bbnum 0^{:A\times M^{L^{A}}})\times m^{:M^{L^{L^{A}}}}\quad.
\]

\end_inset

the result of evaluating 
\begin_inset Formula $\text{ftn}_{L}(x)$
\end_inset

 must be 
\begin_inset Formula $1+\bbnum 0$
\end_inset

: a fully parametric function cannot extract values of type 
\begin_inset Formula $A$
\end_inset

 from a value of type 
\begin_inset Formula $M^{A}$
\end_inset

 with an unknown monad 
\begin_inset Formula $M$
\end_inset

.
 Note that the value 
\begin_inset Formula $(1+\bbnum 0^{:A\times M^{L^{A}}})$
\end_inset

 represents an empty list; let us denote that value by 
\begin_inset Formula $\text{Nil}^{:L^{A}}$
\end_inset

.
 So, we must have:
\begin_inset Formula 
\[
\text{ftn}_{L}(\bbnum 0+\text{Nil}\times(...))=\text{Nil}\quad.
\]

\end_inset

Since the only way to extract list values is to run the 
\begin_inset Formula $M$
\end_inset

-effects, the implementation of 
\begin_inset Formula $\text{ftn}_{L}$
\end_inset

 must proceed recursively, extracting list elements left to right.
 Now consider 
\begin_inset Formula $M=\text{Id}$
\end_inset

 (so we can simply omit the functor layers of 
\begin_inset Formula $M$
\end_inset

) and the nested list value:
\begin_inset Formula 
\[
z\triangleq\left[p,q,\text{Nil},r,s,...\right]\quad,
\]

\end_inset

 where 
\begin_inset Formula $p$
\end_inset

, 
\begin_inset Formula $q$
\end_inset

, 
\begin_inset Formula $r$
\end_inset

, 
\begin_inset Formula $s$
\end_inset

 are some sub-lists of type 
\begin_inset Formula $L^{A}$
\end_inset

 with some type 
\begin_inset Formula $A$
\end_inset

.
 Then the value 
\begin_inset Formula $z$
\end_inset

 has the form:
\begin_inset Formula 
\[
z=\bbnum 0+p\times(\bbnum 0+q\times(\bbnum 0+\text{Nil}\times(\bbnum 0+r\times(\bbnum 0+s\times(1+\bbnum 0)))))\quad.
\]

\end_inset

As we must have 
\begin_inset Formula $\text{ftn}_{L}(\bbnum 0+\text{Nil}\times t)=\text{Nil}$
\end_inset

 for any 
\begin_inset Formula $t^{:M^{L^{L^{A}}}}$
\end_inset

, the recursive evaluation of 
\begin_inset Formula $\text{ftn}_{L}(z)$
\end_inset

 will give:
\begin_inset Formula 
\[
\text{ftn}_{L}(z)=...\text{ftn}_{L}(\bbnum 0+\text{Nil}\times(\bbnum 0+r\times(\bbnum 0+s\times(1+\bbnum 0))))=...\text{Nil}\quad.
\]

\end_inset

So, the result may be some function of 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

 (which could be 
\begin_inset Formula $p\pplus q$
\end_inset

) but cannot depend on 
\begin_inset Formula $r$
\end_inset

 and 
\begin_inset Formula $s$
\end_inset

.
 We have shown that 
\begin_inset Formula $\text{ftn}_{L}$
\end_inset

 must ignore all sub-lists that follow an empty sub-list.
 A possible behavior of 
\begin_inset Formula $\text{ftn}_{L}$
\end_inset

 is:
\begin_inset Formula 
\[
\text{ftn}_{L}(\left[\left[1,2\right],\left[3,4\right],\left[\right],\left[5,6,7,8\right]\right])=\left[1,2,3,4\right]\quad,
\]

\end_inset

instead of the full flattened list 
\begin_inset Formula $\left[1,2,3,4,5,6,7,8\right]$
\end_inset

.
 Regardless of how we implement 
\begin_inset Formula $\text{ftn}_{L}$
\end_inset

 (and whether it satisfies the monad laws), the result of evaluating 
\begin_inset Formula $\text{ftn}_{L}(z)$
\end_inset

 cannot be the full concatenation 
\begin_inset Formula $p\pplus q\pplus r\pplus s$
\end_inset

 because the computation must ignore the sub-lists 
\begin_inset Formula $r$
\end_inset

 and 
\begin_inset Formula $s$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 The code for the non-standard 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 function is:
\begin_inset listings
lstparams "mathescape=true"
inline false
status open

\begin_layout Plain Layout

def flatten[A](p: List[List[A]]): List[A] = p.takeWhile(_.nonEmpty).flatten
  // $
\backslash
color{dkgreen}
\backslash
textrm{ftn}_L$
\end_layout

\end_inset

The new 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 function gives  the same results as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List
\end_layout

\end_inset

's standard 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 method, except if one of the nested sub-lists is empty.
 Then the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

 function truncates the result after the first empty sub-list.
\end_layout

\begin_layout Standard
It turns out that this code fails the monad's associativity law of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

.
 That law is an equality of functions 
\begin_inset Formula $\text{ftn}_{L}\bef\text{ftn}_{L}$
\end_inset

 and 
\begin_inset Formula $\text{ftn}_{L}^{\uparrow L}\bef\text{ftn}_{L}$
\end_inset

 of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List[List[List[A]]] => List[A]
\end_layout

\end_inset

.
 The failure is found when a value 
\begin_inset Formula $p$
\end_inset

 of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List[List[List[A]]]
\end_layout

\end_inset

 contains a nested empty list at the 
\emph on
second
\emph default
 nesting depth, following some non-empty lists.
 Here is an example that triggers the failure of the law:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

val p: List[List[List[Int]]] = List(List(List(1, 2, 3)), List(List(4), Nil),
 List(List(5, 6)))
\end_layout

\end_inset

Here the nested list 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

List(List(4), Nil)
\end_layout

\end_inset

 contains an empty list (
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Nil
\end_layout

\end_inset

) after a non-empty list.
 Applying both sides of the law to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

p
\end_layout

\end_inset

, we find that the two sides of the law are not equal:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

scala> flatten(flatten(p))
\end_layout

\begin_layout Plain Layout

res0: List[List[Int]] = List(1, 2, 3, 4)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> flatten(p.map(flatten))
\end_layout

\begin_layout Plain Layout

res1: List[List[Int]] = List(1, 2, 3, 4, 5, 6)
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
(c)
\series default
 Try implementing the method 
\begin_inset Formula $\text{flift}:M^{A}\rightarrow L^{A}$
\end_inset

.
 The function 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flift
\end_layout

\end_inset

 must produce a value of type 
\begin_inset Formula $L^{A}\cong\bbnum 1+A\times M^{L^{A}}$
\end_inset

.
 Since 
\begin_inset Formula $M$
\end_inset

 is an arbitrary monad, we cannot extract a value of type 
\begin_inset Formula $A$
\end_inset

 out of 
\begin_inset Formula $M^{A}$
\end_inset

 while keeping the code fully parametric.
 So, we can implement 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flift
\end_layout

\end_inset

 only by defining 
\begin_inset Formula $\text{flift}\triangleq\_^{:M^{A}}\rightarrow\text{Nil}^{:L^{A}}$
\end_inset

.
 However, that implementation loses information and fails the identity law:
\begin_inset Formula 
\[
\text{pu}_{M}\bef\text{flift}=(\_\rightarrow\text{Nil})\neq\text{pu}_{L}\quad.
\]

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercise 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercise-combined-codensity-monad"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 Denote for brevity 
\begin_inset Formula $\text{Cod}_{F}^{M,A}\triangleq C^{A}$
\end_inset

.
 The naturality law for functions 
\begin_inset Formula $c^{:C^{A}}$
\end_inset

 says that for any 
\begin_inset Formula $k^{:A\rightarrow F^{X}}$
\end_inset

 and 
\begin_inset Formula $q^{:X\rightarrow Y}$
\end_inset

, we have:
\begin_inset Formula 
\[
(k^{:A\rightarrow F^{X}}\bef q^{\uparrow F})\triangleright c^{Y}=k\triangleright c^{X}\bef q^{\uparrow M\uparrow F}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
The flipped Kleisli method 
\begin_inset Formula $\tilde{\text{pu}}_{C}$
\end_inset

 is defined by:
\begin_inset Formula 
\[
\tilde{\text{pu}}_{C}:\forall X.\,(A\rightarrow F^{X})\rightarrow A\rightarrow F^{M^{X}}\quad,\quad\quad\tilde{\text{pu}}_{C}\triangleq\forall X.\,k^{:A\rightarrow F^{X}}\rightarrow k\bef\text{pu}_{M}^{\uparrow F}\quad.
\]

\end_inset


\end_layout

\begin_layout Standard
To verify the left identity law:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }g:\quad & \tilde{\text{pu}}_{C}\tilde{\diamond}\,g^{:\forall Y.\,(B\rightarrow F^{Y})\rightarrow A\rightarrow F^{M^{Y}}}=\forall Z.\,k^{:B\rightarrow F^{Z}}\rightarrow\big(\gunderline{k\triangleright g^{Z}\triangleright\tilde{\text{pu}}_{C}^{M^{Z}}}\big)\bef\text{ftn}_{M}^{\uparrow F}\\
 & =\forall Z.\,k^{:C\rightarrow F^{Z}}\rightarrow\big(g^{Z}(k)\bef\gunderline{\text{pu}_{M}^{\uparrow F}\big)\bef\text{ftn}_{M}^{\uparrow F}}\\
\text{left identity law of }M:\quad & =\forall Z.\,k^{:C\rightarrow F^{Z}}\rightarrow g^{Z}(k)=g\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
To verify the right identity law:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }f:\quad & f^{:\forall X.\,(B\rightarrow F^{X})\rightarrow A\rightarrow F^{M^{X}}}\tilde{\diamond}\,\tilde{\text{pu}}_{C}=\forall Z.\,k^{:B\rightarrow F^{Z}}\rightarrow\big(\gunderline{k\triangleright\tilde{\text{pu}}_{C}^{Z}}\triangleright f^{M^{Z}}\big)\bef\text{ftn}_{M}^{\uparrow F}\\
 & =\forall Z.\,k^{:B\rightarrow F^{Z}}\rightarrow\big(\gunderline{(k\bef\text{pu}_{M}^{\uparrow F})\triangleright f^{M^{Z}}}\big)\bef\text{ftn}_{M}^{\uparrow F}\\
\text{naturality law of }f:\quad & =\forall Z.\,k^{:B\rightarrow F^{Z}}\rightarrow\big(k\triangleright f^{Z}\bef\gunderline{\text{pu}_{M}^{\uparrow M\uparrow F}\big)\bef\text{ftn}_{M}^{\uparrow F}}\\
\text{right identity law of }M:\quad & =\forall Z.\,k^{:B\rightarrow F^{Z}}\rightarrow k\triangleright f^{Z}=f\quad.
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
To verify the associativity law, write its two sides separately; omit all
 types for brevity:
\begin_inset Formula 
\begin{align*}
 & (f\,\tilde{\diamond}\,g)\,\tilde{\diamond}\,h=l\rightarrow\big(l\triangleright h\triangleright(\gunderline{f\,\tilde{\diamond}\,g})\big)\bef\text{ftn}_{M}^{\uparrow F}=l\rightarrow\big(\gunderline{l\triangleright h\triangleright(k}\rightarrow(k\triangleright g\triangleright f)\bef\text{ftn}_{M}^{\uparrow F})\big)\bef\text{ftn}_{M}^{\uparrow F}\\
 & \quad=l\rightarrow\big((l\triangleright h\triangleright g\triangleright f)\bef\text{ftn}_{M}^{\uparrow F}\big)\bef\text{ftn}_{M}^{\uparrow F}=l\rightarrow l\triangleright h\bef g\bef f\bef\text{ftn}_{M}^{\uparrow F}\bef\text{ftn}_{M}^{\uparrow F}\quad,\\
 & f\,\tilde{\diamond}\,(g\,\tilde{\diamond}\,h)=l\rightarrow\big(l\triangleright(g\,\tilde{\diamond}\,h)\triangleright f\big)\bef\text{ftn}_{M}^{\uparrow F}=l\rightarrow\big(l\triangleright(k\rightarrow(k\triangleright h\triangleright g)\bef\text{ftn}_{M}^{\uparrow F})\triangleright f\big)\bef\text{ftn}_{M}^{\uparrow F}\\
 & \quad=l\rightarrow\big(\big((l\triangleright h\triangleright g)\bef\gunderline{\text{ftn}_{M}^{\uparrow F}\big)\triangleright f}\big)\bef\text{ftn}_{M}^{\uparrow F}=l\rightarrow l\triangleright h\triangleright g\triangleright f\bef\text{ftn}_{M}^{\uparrow M\uparrow F}\bef\text{ftn}_{M}^{\uparrow F}\quad.
\end{align*}

\end_inset

In the last line, we have used the naturality law of 
\begin_inset Formula $f$
\end_inset

.
 The remaining difference between the two sides is:
\begin_inset Formula 
\[
\text{ftn}_{M}^{\uparrow F}\bef\text{ftn}_{M}^{\uparrow F}\overset{?}{=}\text{ftn}_{M}^{\uparrow M\uparrow F}\bef\text{ftn}_{M}^{\uparrow F}\quad,
\]

\end_inset

which follows from the associativity law of 
\begin_inset Formula $\text{ftn}_{M}$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(b)
\series default
 The 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

 method must have the type signature:
\begin_inset Formula 
\[
\text{flm}_{L}:\big((A\rightarrow X)\rightarrow M^{X}\big)\rightarrow(A\rightarrow(B\rightarrow X)\rightarrow M^{X})\rightarrow(B\rightarrow X)\rightarrow M^{X}\quad.
\]

\end_inset

Choose 
\begin_inset Formula $M^{A}\triangleq\bbnum 1+A$
\end_inset

; now we need to implement the type signature:
\begin_inset Formula 
\begin{align*}
 & \text{flm}_{L}:\big((A\rightarrow X)\rightarrow\bbnum 1+X\big)\rightarrow\left(A\rightarrow(B\rightarrow X)\rightarrow\bbnum 1+X\right)\rightarrow(B\rightarrow X)\rightarrow\bbnum 1+X\quad,\\
 & \text{flm}_{L}\triangleq p^{:(A\rightarrow X)\rightarrow\bbnum 1+X}\rightarrow q^{:\left(A\rightarrow(B\rightarrow X)\rightarrow\bbnum 1+X\right)}\rightarrow r^{:B\rightarrow X}\rightarrow\text{???}^{:\bbnum 1+X}\quad.
\end{align*}

\end_inset

Can this function ever return a value of type 
\begin_inset Formula $\bbnum 0+X$
\end_inset

? When we try filling out the typed hole 
\begin_inset Formula $\text{???}^{:\bbnum 1+X}$
\end_inset

, we cannot apply the function 
\begin_inset Formula $r$
\end_inset

 since we have no available values of type 
\begin_inset Formula $B$
\end_inset

.
 We could substitute 
\begin_inset Formula $r$
\end_inset

 into the second curried argument of 
\begin_inset Formula $q$
\end_inset

, obtaining a function of type 
\begin_inset Formula $A\rightarrow\bbnum 1+X$
\end_inset

.
 But we have no available values of type 
\begin_inset Formula $A$
\end_inset

.
 We also cannot apply the function 
\begin_inset Formula $p$
\end_inset

 since its argument is of type 
\begin_inset Formula $A\rightarrow X$
\end_inset

, but we only have 
\begin_inset Formula $A\rightarrow\bbnum 1+X$
\end_inset

, which is not guaranteed to return nonempty values.
 So, the only way of implementing 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

 via fully parametric code is to return the constant value 
\begin_inset Formula $1+\bbnum 0^{:X}$
\end_inset

.
 This would lose information and violate an identity law of monads.
\end_layout

\begin_layout Chapter
A humorous disclaimer
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
jokes
\end_layout

\end_inset


\emph on
The following text is quoted in part from an anonymous online source (
\begin_inset Quotes eld
\end_inset

Project Guten Tag
\begin_inset Quotes erd
\end_inset

) dating back at least to 1997.
 The original text is no longer available on the Internet.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\noun on
Warranto Limitensis; Disclamatantus Damagensis
\end_layout

\begin_layout Standard
Solus exceptus 
\begin_inset Quotes eld
\end_inset

Rectum Replacator Refundiens
\begin_inset Quotes erd
\end_inset

 describitus ecci,
\end_layout

\begin_layout Enumerate
Projectus (etque nunquam partum quis hic etext remitibus cum 
\noun on
Project Guten Tag
\noun default

\begin_inset Formula $^{\text{TM}}$
\end_inset

 identificator) disclamabat omni liabilitus tuus damagensis, pecuniensisque,
 includibantus pecunia legalitus, et 
\end_layout

\begin_layout Enumerate

\noun on
Remedia Negligentitia Non Habet Tuus, Warrantus Destructi
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
-
\end_layout

\end_inset

bus Contractus Nullibus Ni Liabilitus Sumus, Inclutatibus Non Limitatus
 Destructio Directibus, Consequentius, Punitio, O Incidentus, Non Sunt Si
 Nos Notificat Vobis
\noun default
.
 
\end_layout

\begin_layout Standard
Sit discubriatus defectus en etextum sic entram diariam noventam recibidio,
 pecuniam tuum refundatorium receptorus posset, sic scribatis vendor.
 Sit veniabat medium physicalis, vobis idem reternat et replacator possit
 copius.
 Sit venitabat electronicabilis, sic viri datus chansus segundibus.
 
\end_layout

\begin_layout Standard

\noun on
Hic Etext Venid 
\begin_inset Quotes eld
\end_inset

Como-asi
\begin_inset Quotes erd
\end_inset

.
 Nihil Warranti Nunquam Classum, Expressito Ni Implicato, Le Macchen Como
 Si Etexto Bene Sit O Il Medio Bene Sit, Inclutat Et Non Limitat Warranti
 Mercatensis, Appropriatensis Purposem.
 
\end_layout

\begin_layout Standard
Statuen varias non permitatent disclamabaris ni warranti implicatoren ni
 exclusioni limitatio damagaren consequentialis, ecco lo qua disclamatori
 exclusato
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
-
\end_layout

\end_inset

rique non vobis applicant, et potat optia alia legali.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
twocolumn
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
GNU Free Documentation License
\begin_inset CommandInset label
LatexCommand label
name "sec:GFDL"

\end_inset

 
\end_layout

\begin_layout Standard

\size footnotesize
Version 1.2, November 2002
\end_layout

\begin_layout Standard

\size tiny
Copyright (c) 2000,2001,2002 Free Software Foundation, Inc.
 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
\end_layout

\begin_layout Standard

\size tiny
Everyone is permitted to copy and distribute verbatim copies of this license
 document, but changing it is not allowed.
\end_layout

\begin_layout Standard

\size tiny
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
setcounter{subsection}{-1}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*

\size tiny
Preamble
\end_layout

\begin_layout Standard

\size tiny
The purpose of this License is to make a manual, textbook, or other functional
 and useful document free in the sense of freedom: to assure everyone the
 effective freedom to copy and redistribute it, with or without modifying
 it, either commercially or noncommercially.
 Secondarily, this License preserves for the author and publisher a way
 to get credit for their work, while not being considered responsible for
 modifications made by others.
\end_layout

\begin_layout Standard

\size tiny
This License is a kind of “copyleft
\begin_inset Quotes erd
\end_inset

, which means that derivative works of the document must themselves be free
 in the same sense.
 It complements the GNU General Public License, which is a copyleft license
 designed for free software.
\end_layout

\begin_layout Standard

\size tiny
We have designed this License in order to use it for manuals for free software,
 because free software needs free documentation: a free program should come
 with manuals providing the same freedoms that the software does.
 But this License is not limited to software manuals; it can be used for
 any textual work, regardless of subject matter or whether it is published
 as a printed book.
 We recommend this License principally for works whose purpose is instruction
 or reference.
\end_layout

\begin_layout Subsection
Applicability and definitions
\begin_inset CommandInset label
LatexCommand label
name "subsec:1Applicability-and-definitions"

\end_inset


\end_layout

\begin_layout Standard

\size tiny
This License applies to any manual or other work, in any medium, that contains
 a notice placed by the copyright holder saying it can be distributed under
 the terms of this License.
 Such a notice grants a world-wide, royalty-free license, unlimited in duration,
 to use that work under the conditions stated herein.
 The “Document'', below, refers to any such manual or work.
 Any member of the public is a licensee, and is addressed as “you''.
 You accept the license if you copy, modify or distribute the work in a
 way requiring permission under copyright law.
\end_layout

\begin_layout Standard

\size tiny
A “Modified Version
\begin_inset Quotes erd
\end_inset

 of the Document means any work containing the Document or a portion of
 it, either copied verbatim, or with modifications and/or translated into
 another language.
\end_layout

\begin_layout Standard

\size tiny
A “Secondary Section
\begin_inset Quotes erd
\end_inset

 is a named appendix or a front-matter section of the Document that deals
 exclusively with the relationship of the publishers or authors of the Document
 to the Document's overall subject (or to related matters) and contains
 nothing that could fall directly within that overall subject.
 (Thus, if the Document is in part a textbook of mathematics, a Secondary
 Section may not explain any mathematics.) The relationship could be a matter
 of historical connection with the subject or with related matters, or of
 legal, commercial, philosophical, ethical or political position regarding
 them.
\end_layout

\begin_layout Standard

\size tiny
The “Invariant Sections'' are certain Secondary Sections whose titles are
 designated, as being those of Invariant Sections, in the notice that says
 that the Document is released under this License.
 If a section does not fit the above definition of Secondary then it is
 not allowed to be designated as Invariant.
 The Document may contain zero Invariant Sections.
 If the Document does not identify any Invariant Sections then there are
 none.
\end_layout

\begin_layout Standard

\size tiny
The “Cover Texts'' are certain short passages of text that are listed, as
 Front-Cover Texts or Back-Cover Texts, in the notice that says that the
 Document is released under this License.
 A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be
 at most 25 words.
\end_layout

\begin_layout Standard

\size tiny
A “Transparent'' copy of the Document means a machine-readable copy, represented
 in a format whose specification is available to the general public, that
 is suitable for revising the document straightforwardly with generic text
 editors or (for images composed of pixels) generic paint programs or (for
 drawings) some widely available drawing editor, and that is suitable for
 input to text formatters or for automatic translation to a variety of formats
 suitable for input to text formatters.
 A copy made in an otherwise Transparent file format whose markup, or absence
 of markup, has been arranged to thwart or discourage subsequent modification
 by readers is not Transparent.
 An image format is not Transparent if used for any substantial amount of
 text.
 A copy that is not “Transparent'' is called “Opaque
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard

\size tiny
Examples of suitable formats for Transparent copies include plain ASCII
 without markup, Texinfo input format, \SpecialChar LaTeX
 input format, SGML or XML using
 a publicly available DTD, and standard-conforming simple HTML, PostScript
 or PDF designed for human modification.
 Examples of transparent image formats include PNG, XCF and JPG.
 Opaque formats include proprietary formats that can be read and edited
 only by proprietary word processors, SGML or XML for which the DTD and/or
 processing tools are not generally available, and the machine-generated
 HTML, PostScript or PDF produced by some word processors for output purposes
 only.
\end_layout

\begin_layout Standard

\size tiny
The 
\begin_inset Quotes eld
\end_inset

Title Page
\begin_inset Quotes erd
\end_inset

 means, for a printed book, the title page itself, plus such following pages
 as are needed to hold, legibly, the material this License requires to appear
 in the title page.
 For works in formats which do not have any title page as such, “Title Page”
 means the text near the most prominent appearance of the work's title,
 preceding the beginning of the body of the text.
\end_layout

\begin_layout Standard

\size tiny
A section 
\begin_inset Quotes eld
\end_inset

Entitled XYZ
\begin_inset Quotes erd
\end_inset

 means a named subunit of the Document whose title either is precisely XYZ
 or contains XYZ in parentheses following text that translates XYZ in another
 language.
 (Here XYZ stands for a specific section name mentioned below, such as “Acknowle
dgements”, “Dedications”, “Endorsements”, or “History”.) To “Preserve the
 Title” of such a section when you modify the Document means that it remains
 a section “Entitled XYZ” according to this definition.
\end_layout

\begin_layout Standard

\size tiny
The Document may include Warranty Disclaimers next to the notice which states
 that this License applies to the Document.
 These Warranty Disclaimers are considered to be included by reference in
 this License, but only as regards disclaiming warranties: any other implication
 that these Warranty Disclaimers may have is void and has no effect on the
 meaning of this License.
\end_layout

\begin_layout Subsection
Verbatim copying
\begin_inset CommandInset label
LatexCommand label
name "subsec:2Verbatim-copying"

\end_inset


\end_layout

\begin_layout Standard

\size tiny
You may copy and distribute the Document in any medium, either commercially
 or noncommercially, provided that this License, the copyright notices,
 and the license notice saying this License applies to the Document are
 reproduced in all copies, and that you add no other conditions whatsoever
 to those of this License.
 You may not use technical measures to obstruct or control the reading or
 further copying of the copies you make or distribute.
 However, you may accept compensation in exchange for copies.
 If you distribute a large enough number of copies you must also follow
 the conditions in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:3Copying-in-quantity"

\end_inset

.
\end_layout

\begin_layout Standard

\size tiny
You may also lend copies, under the same conditions stated above, and you
 may publicly display copies.
\end_layout

\begin_layout Subsection
Copying in quantity
\begin_inset CommandInset label
LatexCommand label
name "subsec:3Copying-in-quantity"

\end_inset


\end_layout

\begin_layout Standard

\size tiny
If you publish printed copies (or copies in media that commonly have printed
 covers) of the Document, numbering more than 100, and the Document's license
 notice requires Cover Texts, you must enclose the copies in covers that
 carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on
 the front cover, and Back-Cover Texts on the back cover.
 Both covers must also clearly and legibly identify you as the publisher
 of these copies.
 The front cover must present the full title with all words of the title
 equally prominent and visible.
 You may add other material on the covers in addition.
 Copying with changes limited to the covers, as long as they preserve the
 title of the Document and satisfy these conditions, can be treated as verbatim
 copying in other respects.
\end_layout

\begin_layout Standard

\size tiny
If the required texts for either cover are too voluminous to fit legibly,
 you should put the first ones listed (as many as fit reasonably) on the
 actual cover, and continue the rest onto adjacent pages.
\end_layout

\begin_layout Standard

\size tiny
If you publish or distribute Opaque copies of the Document numbering more
 than 100, you must either include a machine-readable Transparent copy along
 with each Opaque copy, or state in or with each Opaque copy a computer-network
 location from which the general network-using public has access to download
 using public-standard network protocols a complete Transparent copy of
 the Document, free of added material.
 If you use the latter option, you must take reasonably prudent steps, when
 you begin distribution of Opaque copies in quantity, to ensure that this
 Transparent copy will remain thus accessible at the stated location until
 at least one year after the last time you distribute an Opaque copy (directly
 or through your agents or retailers) of that edition to the public.
\end_layout

\begin_layout Standard

\size tiny
It is requested, but not required, that you contact the authors of the Document
 well before redistributing any large number of copies, to give them a chance
 to provide you with an updated version of the Document.
\end_layout

\begin_layout Subsection
Modifications
\begin_inset CommandInset label
LatexCommand label
name "subsec:4Modifications"

\end_inset


\end_layout

\begin_layout Standard

\size tiny
You may copy and distribute a Modified Version of the Document under the
 conditions of sections
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:2Verbatim-copying"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:3Copying-in-quantity"

\end_inset

 above, provided that you release the Modified Version under precisely this
 License, with the Modified Version filling the role of the Document, thus
 licensing distribution and modification of the Modified Version to whoever
 possesses a copy of it.
 In addition, you must do these things in the Modified Version:
\end_layout

\begin_layout Standard

\size tiny
A.
 Use in the Title Page (and on the covers, if any) a title distinct from
 that of the Document, and from those of previous versions (which should,
 if there were any, be listed in the History section of the Document).
 You may use the same title as a previous version if the original publisher
 of that version gives permission.
\end_layout

\begin_layout Standard

\size tiny
B.
 List on the Title Page, as authors, one or more persons or entities responsible
 for authorship of the modifications in the Modified Version, together with
 at least five of the principal authors of the Document (all of its principal
 authors, if it has fewer than five), unless they release you from this
 requirement.
\end_layout

\begin_layout Standard

\size tiny
C.
 State on the Title page the name of the publisher of the Modified Version,
 as the publisher.
\end_layout

\begin_layout Standard

\size tiny
D.
 Preserve all the copyright notices of the Document.
\end_layout

\begin_layout Standard

\size tiny
E.
 Add an appropriate copyright notice for your modifications adjacent to
 the other copyright notices.
\end_layout

\begin_layout Standard

\size tiny
F.
 Include, immediately after the copyright notices, a license notice giving
 the public permission to use the Modified Version under the terms of this
 License, in the form shown in the Addendum below.
\end_layout

\begin_layout Standard

\size tiny
G.
 Preserve in that license notice the full lists of Invariant Sections and
 required Cover Texts given in the Document's license notice.
\end_layout

\begin_layout Standard

\size tiny
H.
 Include an unaltered copy of this License.
\end_layout

\begin_layout Standard

\size tiny
I.
 Preserve the section Entitled 
\begin_inset Quotes eld
\end_inset

History
\begin_inset Quotes erd
\end_inset

, Preserve its Title, and add to it an item stating at least the title,
 year, new authors, and publisher of the Modified Version as given on the
 Title Page.
 If there is no section Entitled “History” in the Document, create one stating
 the title, year, authors, and publisher of the Document as given on its
 Title Page, then add an item describing the Modified Version as stated
 in the previous sentence.
\end_layout

\begin_layout Standard

\size tiny
J.
 Preserve the network location, if any, given in the Document for public
 access to a Transparent copy of the Document, and likewise the network
 locations given in the Document for previous versions it was based on.
 These may be placed in the 
\begin_inset Quotes eld
\end_inset

History
\begin_inset Quotes erd
\end_inset

 section.
 You may omit a network location for a work that was published at least
 four years before the Document itself, or if the original publisher of
 the version it refers to gives permission.
\end_layout

\begin_layout Standard

\size tiny
K.
 For any section Entitled 
\begin_inset Quotes eld
\end_inset

Acknowledgements
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

Dedications
\begin_inset Quotes erd
\end_inset

, Preserve the Title of the section, and preserve in the section all the
 substance and tone of each of the contributor acknowledgements and/or dedicatio
ns given therein.
\end_layout

\begin_layout Standard

\size tiny
L.
 Preserve all the Invariant Sections of the Document, unaltered in their
 text and in their titles.
 Section numbers or the equivalent are not considered part of the section
 titles.
\end_layout

\begin_layout Standard

\size tiny
M.
 Delete any section Entitled 
\begin_inset Quotes eld
\end_inset

Endorsements
\begin_inset Quotes erd
\end_inset

.
 Such a section may not be included in the Modified Version.
\end_layout

\begin_layout Standard

\size tiny
N.
 Do not retitle any existing section to be Entitled 
\begin_inset Quotes eld
\end_inset

Endorsements
\begin_inset Quotes erd
\end_inset

 or to conflict in title with any Invariant Section.
\end_layout

\begin_layout Standard

\size tiny
O.
 Preserve any Warranty Disclaimers.
\end_layout

\begin_layout Standard

\size tiny
If the Modified Version includes new front-matter sections or appendices
 that qualify as Secondary Sections and contain no material copied from
 the Document, you may at your option designate some or all of these sections
 as invariant.
 To do this, add their titles to the list of Invariant Sections in the Modified
 Version's license notice.
 These titles must be distinct from any other section titles.
\end_layout

\begin_layout Standard

\size tiny
You may add a section Entitled 
\begin_inset Quotes eld
\end_inset

Endorsements
\begin_inset Quotes erd
\end_inset

, provided it contains nothing but endorsements of your Modified Version
 by various parties — for example, statements of peer review or that the
 text has been approved by an organization as the authoritative definition
 of a standard.
\end_layout

\begin_layout Standard

\size tiny
You may add a passage of up to five words as a Front-Cover Text, and a passage
 of up to 25 words as a Back-Cover Text, to the end of the list of Cover
 Texts in the Modified Version.
 Only one passage of Front-Cover Text and one of Back-Cover Text may be
 added by (or through arrangements made by) any one entity.
 If the Document already includes a cover text for the same cover, previously
 added by you or by arrangement made by the same entity you are acting on
 behalf of, you may not add another; but you may replace the old one, on
 explicit permission from the previous publisher that added the old one.
\end_layout

\begin_layout Standard

\size tiny
The author(s) and publisher(s) of the Document do not by this License give
 permission to use their names for publicity for or to assert or imply endorseme
nt of any Modified Version.
\end_layout

\begin_layout Subsection*

\size tiny
Combining documents
\end_layout

\begin_layout Standard

\size tiny
You may combine the Document with other documents released under this License,
 under the terms defined in section 4 above for modified versions, provided
 that you include in the combination all of the Invariant Sections of all
 of the original documents, unmodified, and list them all as Invariant Sections
 of your combined work in its license notice, and that you preserve all
 their Warranty Disclaimers.
\end_layout

\begin_layout Standard

\size tiny
The combined work need only contain one copy of this License, and multiple
 identical Invariant Sections may be replaced with a single copy.
 If there are multiple Invariant Sections with the same name but different
 contents, make the title of each such section unique by adding at the end
 of it, in parentheses, the name of the original author or publisher of
 that section if known, or else a unique number.
 Make the same adjustment to the section titles in the list of Invariant
 Sections in the license notice of the combined work.
\end_layout

\begin_layout Standard

\size tiny
In the combination, you must combine any sections Entitled “History” in
 the various original documents, forming one section Entitled “History”;
 likewise combine any sections Entitled “Acknowledgements”, and any sections
 Entitled “Dedications”.
 You must delete all sections Entitled “Endorsements.”
\end_layout

\begin_layout Subsection*

\size tiny
Collections of documents
\end_layout

\begin_layout Standard

\size tiny
You may make a collection consisting of the Document and other documents
 released under this License, and replace the individual copies of this
 License in the various documents with a single copy that is included in
 the collection, provided that you follow the rules of this License for
 verbatim copying of each of the documents in all other respects.
\end_layout

\begin_layout Standard

\size tiny
You may extract a single document from such a collection, and distribute
 it individually under this License, provided you insert a copy of this
 License into the extracted document, and follow this License in all other
 respects regarding verbatim copying of that document.
\end_layout

\begin_layout Subsection*

\size tiny
Aggregation with independent works
\end_layout

\begin_layout Standard

\size tiny
A compilation of the Document or its derivatives with other separate and
 independent documents or works, in or on a volume of a storage or distribution
 medium, is called an “aggregate” if the copyright resulting from the compilatio
n is not used to limit the legal rights of the compilation's users beyond
 what the individual works permit.
 When the Document is included an aggregate, this License does not apply
 to the other works in the aggregate which are not themselves derivative
 works of the Document.
\end_layout

\begin_layout Standard

\size tiny
If the Cover Text requirement of section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:3Copying-in-quantity"

\end_inset

 is applicable to these copies of the Document, then if the Document is
 less than one half of the entire aggregate, the Document's Cover Texts
 may be placed on covers that bracket the Document within the aggregate,
 or the electronic equivalent of covers if the Document is in electronic
 form.
 Otherwise they must appear on printed covers that bracket the whole aggregate.
\end_layout

\begin_layout Subsection*

\size tiny
Translation
\end_layout

\begin_layout Standard

\size tiny
Translation is considered a kind of modification, so you may distribute
 translations of the Document under the terms of section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:4Modifications"

\end_inset

.
 Replacing Invariant Sections with translations requires special permission
 from their copyright holders, but you may include translations of some
 or all Invariant Sections in addition to the original versions of these
 Invariant Sections.
 You may include a translation of this License, and all the license notices
 in the Document, and any Warranty Disclaimers, provided that you also include
 the original English version of this License and the original versions
 of those notices and disclaimers.
 In case of a disagreement between the translation and the original version
 of this License or a notice or disclaimer, the original version will prevail.
\end_layout

\begin_layout Standard

\size tiny
If a section in the Document is Entitled “Acknowledgements”, “Dedications”,
 or “History”, the requirement (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:4Modifications"

\end_inset

) to Preserve its Title (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:1Applicability-and-definitions"

\end_inset

) will typically require changing the actual title.
\end_layout

\begin_layout Subsection*

\size tiny
Termination
\end_layout

\begin_layout Standard

\size tiny
You may not copy, modify, sublicense, or distribute the Document except
 as expressly provided for under this License.
 Any other attempt to copy, modify, sublicense or distribute the Document
 is void, and will automatically terminate your rights under this License.
 However, parties who have received copies, or rights, from you under this
 License will not have their licenses terminated so long as such parties
 remain in full compliance.
\end_layout

\begin_layout Subsection*

\size tiny
Future revisions of this license
\end_layout

\begin_layout Standard

\size tiny
The Free Software Foundation may publish new, revised versions of the GNU
 Free Documentation License from time to time.
 Such new versions will be similar in spirit to the present version, but
 may differ in detail to address new problems or concerns.
 See 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
url{http://www.gnu.org/copyleft/}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard

\size tiny
Each version of the License is given a distinguishing version number.
 If the Document specifies that a particular numbered version of this License
 “or any later version” applies to it, you have the option of following
 the terms and conditions either of that specified version or of any later
 version that has been published (not as a draft) by the Free Software Foundatio
n.
 If the Document does not specify a version number of this License, you
 may choose any version ever published (not as a draft) by the Free Software
 Foundation.
\end_layout

\begin_layout Subsection*

\size tiny
\noun on
Addendum
\noun default
: How to use this License for your documents
\end_layout

\begin_layout Standard

\size tiny
To use this License in a document you have written, include a copy of the
 License in the document and put the following copyright and license notices
 just after the title page:
\end_layout

\begin_layout Standard

\size tiny
Copyright (c) <year> <your name>.
 Permission is granted to copy, distribute and/or modify this document under
 the terms of the GNU Free Documentation License, Version 1.2 or any later
 version published by the Free Software Foundation; with no Invariant Sections,
 no Front-Cover Texts, and no Back-Cover Texts.
 A copy of the license is included in the section entitled “GNU Free Documentati
on License”.
\end_layout

\begin_layout Standard

\size tiny
If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
 replace the “with...Texts.” line with this:
\end_layout

\begin_layout Standard

\size tiny
with the Invariant Sections being <list their titles>, with the Front-Cover
 Texts being <list>, and with the Back-Cover Texts being <list>.
\end_layout

\begin_layout Standard

\size tiny
If you have Invariant Sections without Cover Texts, or some other combination
 of the three, merge those two alternatives to suit the situation.
\end_layout

\begin_layout Standard

\size tiny
If your document contains nontrivial examples of program code, we recommend
 releasing these examples in parallel under your choice of free software
 license, such as the GNU General Public License, to permit their use in
 free software.
\end_layout

\begin_layout Subsection*

\size tiny
Copyright 
\end_layout

\begin_layout Standard

\size tiny
Copyright (c) 2000, 2001, 2002 Free Software Foundation, Inc.
 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
\end_layout

\begin_layout Standard

\size tiny
Everyone is permitted to copy and distribute verbatim copies of this license
 document, but changing it is not allowed.
\end_layout

\end_body
\end_document
