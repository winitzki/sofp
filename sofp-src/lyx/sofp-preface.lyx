#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
\usepackage[all]{xy} % xypic

% pstricks with support for pdflatex
%\usepackage{pdftricks}
%\begin{psinputs}
%   \usepackage{pstricks}
%   \usepackage{multido}
%\end{psinputs}
\usepackage{pstricks}

% Cover picture on first page.
\usepackage{wallpaper}
% Custom commands for cover page.
\usepackage[absolute,overlay]{textpos}

% No page numbers on "Part" pages.
\renewcommand*{\partpagestyle}{empty}

% Use a special "equal by definition" symbol.
\renewcommand*{\triangleq}{\overset{\lower1mm\hbox{\texttt{\tiny def}}} {=}}

% Running head: works, but results are not satisfactory.
%\usepackage{scrlayer-scrpage}
%\automark[subsection]{chapter}


% "Better text justification"? Actually, this causes a fatal error "auto expansion is only possible with scalable fonts".
%\usepackage{microtype}

% Fix the numbering of exercises: subsubsections appear as paragraphs but are numbered.
%\usepackage{titlesec} % Incompatible with komascript's later versions.
% See https://tex.stackexchange.com/questions/7627/how-to-reference-paragraph
% See the `titlesec` package documentation at http://www.ctex.org/documents/packages/layout/titlesec.pdf
%\titleformat{\subsubsection}[runin]{\normalfont\normalsize\bfseries}{}{0pt}{}
%\titlespacing{\subsubsection}{0pt}{5pt}{3\wordsep}
%\titleformat{\subparagraph}[runin]{\normalfont\normalsize\bfseries}{}{0pt}{}
%\titlespacing{\subparagraph}{\parindent}{\parskip}{3\wordsep}
%\titlespacing{\paragraph}{0pt}{3pt}{2\wordsep}

\renewcommand*{\subsubsectionformat}{} % This does not work if cleardoubleempty is given as a class option!
\RedeclareSectionCommand[ % Statement 1.2.3.4
  runin=true,
  afterskip=2ex,
  beforeskip=2.5pt plus 0.3pt minus 0.05pt,
  afterindent=false,
  font={\normalfont\normalsize\bfseries}
]{subsubsection}
\RedeclareSectionCommand[ % Proof
  runin=true,
  font={\normalfont\normalsize\bfseries},
  afterindent=false,
  afterskip=2ex,
  beforeskip=0pt
]{subparagraph}
\RedeclareSectionCommand[
  runin=true,
  font={\normalfont\normalsize\bfseries},
  afterskip=1.3ex,
  beforeskip=0pt
]{paragraph}

% Make page headers and page numbers smaller
\addtokomafont{pagehead}{\small}
\addtokomafont{pagenumber}{\small}

% Double-stroked fonts to replace the non-working \mathbb{1}.
\usepackage{bbold}
\DeclareMathAlphabet{\bbnumcustom}{U}{BOONDOX-ds}{m}{n} % Use BOONDOX-ds or bbold.
\newcommand{\custombb}[1]{\bbnumcustom{#1}}
% The LyX document will define a macro \bbnum{#1} that calls \custombb{#1}.

% Scala syntax highlighting. See https://tex.stackexchange.com/questions/202479/unable-to-define-scala-language-with-listings
%\usepackage[T1]{fontenc}
%\usepackage[utf8]{inputenc}
%\usepackage{beramono}
%\usepackage{listings}
% The listing settings are now supported by LyX in a separate section "Listings".
\usepackage{xcolor}

\definecolor{scalakeyword}{rgb}{0.16,0.07,0.5}
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{aqua}{rgb}{0.9,0.96,0.999}
\definecolor{scalatype}{rgb}{0.2,0.3,0.2}
\definecolor{teal}{rgb}{0,0.6,0}

% These settings are now in the Listings tab in LyX.
%\lstdefinestyle{myScalastyle}{
%  language=scala, % This should be defined first!!! Otherwise it overrides all customization via morekeywords / otherkeywords.
%  otherkeywords={{=,=>,<-,<\%,<:,>:,\#,@,*,+,-,/,::,:,[,]}},
%  frame=tb,
%  aboveskip=2mm,
%  belowskip=2mm,
%  showstringspaces=false,
%  columns=flexible,
%  basicstyle={\small\ttfamily},
%  extendedchars=true,
%  %numbers=none,
%  numberstyle=\tiny\color{gray},
%  keywordstyle=\color{blue},
%  commentstyle=\color{dkgreen},
%  stringstyle=\color{mauve},
%  frame=single,
%  framerule=0.01mm,
%  breaklines=true,
%  breakatwhitespace=true,
%  tabsize=3,
%  framexleftmargin=4mm, framexrightmargin=4mm,
%  xleftmargin=4mm, xrightmargin=4mm, % Making these margins the same has a good effect.
%  framextopmargin=0.5mm, framexbottommargin=.5mm,
%  fillcolor=\color{aqua},
%  rulecolor=\color{aqua},
%  rulesepcolor=\color{aqua},
%  backgroundcolor=\color{aqua},
%  mathescape=true,
%}

% Example usage: \begin{lstlisting}[style=myScalastyle]  object blah \end{lstlisting}
%\newenvironment{scala}{\begin{lstlisting}[style=myScalastyle]}{\end{lstlisting}}
%\lstnewenvironment{scala}{\lstset{style=myScalastyle}}{}

\usepackage[nocenter]{qtree} % simple tree drawing
\usepackage{relsize} % make math symbols larger or smaller; supports \smaller etc.
\usepackage{stmaryrd} % some extra symbols such as \fatsemi
% Note: using \forwardcompose inside a \text{} will cause a LaTeX error!
\newcommand{\forwardcompose}{\hspace{1.2pt}\ensuremath\mathsmaller{\fatsemi}\hspace{1.5pt}}
% this is ugly, I used this before I found \fatsemi:
%\newcommand{\bef}{\hspace{1.0pt}\ensuremath\raisebox{2pt}{$\mathsmaller{\mathsmaller{\circ}}$}\hspace{-2.9pt},}
%\makeatletter
% Macros to assist LyX with XYpic when using scaling.
\newcommand{\xyScaleX}[1]{%
\makeatletter
\xydef@\xymatrixcolsep@{#1}
\makeatother
} % end of \xyScaleX
\makeatletter
\newcommand{\xyScaleY}[1]{%
\makeatletter
\xydef@\xymatrixrowsep@{#1}
\makeatother
} % end of \xyScaleY

% Increase the default vertical space inside table cells.
\renewcommand\arraystretch{1.4}

% Color for PDF hyperlinks.
\definecolor{hlink}{rgb}{0.06, 0.14, 0.48}

% Make underline green.
\definecolor{greenunder}{rgb}{0.1,0.6,0.2}
%\newcommand{\munderline}[1]{{\color{greenunder}\underline{{\color{black}#1}}\color{black}}}
\def\mathunderline#1#2{\color{#1}\underline{{\color{black}#2}}\color{black}}
% The LyX document will define a macro \gunderline{#1} that will use \mathunderline with the color `greenunder`.
%\def\gunderline#1{\mathunderline{greenunder}{#1}} % This is now defined by LyX itself with GUI support.


% Prepare settings for imposing a color background for all displayed math. This will be done by a script later.
\usepackage{empheq} % Background on all displayed equations.
\definecolor{mathbg}{rgb}{1.0, .98, .87}
\newcommand*\mymathbgbox[1]{%
\setlength{\fboxsep}{0pt}%
\colorbox{mathbg}{\hspace{0.5mm}#1\hspace{0.5mm}}}
%\renewenvironment{align}{%
%\begin{empheq}[box=\mymathbgbox]{align}}{%
%\endalign\end{empheq}}
% Run a command such as LC_ALL=C sed -i bak -e 's|\\begin{align}|\\begin{empheq}[box=\\mymathbgbox]{align}|; s|\\end{align}|\\end{empheq}|' sofp-filterable.tex
% This is not used now because the results are not great.

% Better text quotes.
\renewcommand\textquotedblleft{``}
\renewcommand\textquotedblright{''}

% Better symbol for the pair mapper instead of \ogreaterthan and \varogreaterthan.
\newcommand{\boxrightarrow}{\mathbin{\ensuremath{%
\mathchoice%
  {\displaystyle{\boxminus}\kern-5.35pt\raisebox{0.75pt}{$\scriptstyle{\succ}$}}%
  {\boxminus\kern-5.35pt\raisebox{0.75pt}{$\scriptstyle{\succ}$}}%
  {\textstyle{\boxminus}\kern-5.35pt\raisebox{0.75pt}{$\scriptstyle{\succ}$}}%
  {\scriptstyle{\boxminus}\kern-3.7pt\raisebox{0.49pt}{$\scriptscriptstyle{\succ}$}}%
}% end of mathchoice with raisebox
\hspace{1.0pt}}}
\renewcommand{\ogreaterthan}{\boxrightarrow}
\renewcommand{\varogreaterthan}{\boxrightarrow}
\end_preamble
\options openright,numbers=noenddot,index=totoc,bibliography=totoc,listof=totoc,fontsize=12pt
\use_default_options true
\master sofp.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "palatino" "default"
\font_sans "helvet" "default"
\font_typewriter "cmtt" "default"
\font_math "newtxmath" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command makeindex
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "The Science of Functional Programming: A Tutorial, with Examples in Scala"
\pdf_author "Sergei Winitzki"
\pdf_subject "Functional programming"
\pdf_keywords "Functional programming, Scala, Type theory, Category theory, Formal logic, Programming languages"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 2
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref page
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=hlink"
\papersize custom
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification false
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\paperwidth 7.444in
\paperheight 9.68in
\leftmargin 2.4cm
\topmargin 1.3cm
\rightmargin 1.4cm
\bottommargin 1.5cm
\headsep 0.5cm
\footskip 0.8cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\listings_params "language=Scala,morekeywords={{scala}},otherkeywords={=,=>,<-,<\%,<:,>:,\#,@,:,[,],.,???},keywordstyle={\color{scalakeyword}},morekeywords={[2]{String,Short,Int,Long,Char,Boolean,Double,Float,BigDecimal,Seq,Map,Set,Option,Either,Future,Successful,LazyList,Vector,Range,IndexedSeq,true,false,None,List,Nil,Try,Success,Failure,Some,Left,Right,Nothing,Any,Array,Unit,Iterator,Stream,Throwable,Integer,Object}},keywordstyle={[2]{\color{scalatype}}},frame=tb,aboveskip={1.5mm},belowskip={0.5mm},showstringspaces=false,columns=fullflexible,keepspaces=true,basicstyle={\smaller\ttfamily},extendedchars=true,numbers=none,numberstyle={\tiny\color{gray}},commentstyle={\color{dkgreen}},stringstyle={\color{mauve}},frame=single,framerule={0.0mm},breaklines=true,breakatwhitespace=true,tabsize=3,framexleftmargin={0.5mm},framexrightmargin={0.5mm},xleftmargin={1.5mm},xrightmargin={1.5mm},framextopmargin={0.5mm},framexbottommargin={0.5mm},fillcolor={\color{aqua}},rulecolor={\color{aqua}},rulesepcolor={\color{aqua}},backgroundcolor={\color{aqua}},mathescape=false,extendedchars=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Addchap
Preface
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\renewcommand{\gunderline}[1]{\mathunderline{greenunder}{#1}}
{\underline{#1}}
\end_inset


\begin_inset FormulaMacro
\renewcommand{\bef}{\forwardcompose}
{\fatsemi}
\end_inset


\begin_inset FormulaMacro
\renewcommand{\bbnum}[1]{\custombb{#1}}
{\underline{#1}}
\end_inset

This book is a reference text and a tutorial that teaches functional programmers
 how to reason mathematically about types and code, in a manner directly
 relevant to software practice.
 The material ranges from introductory (Part I) to advanced (Part III).
 
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Readers will need to learn some difficult concepts through prolonged mental
 concentration and effort.
 
\end_layout

\end_inset

The book assumes a certain amount of mathematical experience (at about the
 level of undergraduate algebra or calculus) as well as some experience
 writing code in general-purpose programming languages.
\end_layout

\begin_layout Standard
The vision of this book is to explain the mathematical theory that guides
 the practice of functional programming.
 So, all mathematical developments in this book are motivated by practical
 programming issues and are accompanied by Scala code illustrating their
 usage.
 For instance, the laws for standard typeclasses (functors, monads, etc.)
 are first motivated heuristically through code examples.
 Then the laws are formulated as mathematical equations and proved rigorously.
 
\end_layout

\begin_layout Standard
To achieve a clearer presentation of the material, the book uses certain
 non-standard notations (see Appendix
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Appendix-Notations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on page
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "chap:Appendix-Notations"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and terminology (Appendix
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Appendix-Glossary-of-terms"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on page
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "chap:Appendix-Glossary-of-terms"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 The presentation is self-contained, defining and explaining all required
 techniques, notations, and Scala features.
 All code examples have been tested to work but are intended only for explanatio
n and illustration.
 As a rule, the code is not optimized for performance.
 Although the code examples are in Scala, the material in this book also
 applies to many other functional programming languages.
\begin_inset Note Note
status open

\begin_layout Plain Layout
All concepts and techniques are illustrated by examples and explained as
 simply as possible (
\begin_inset Quotes eld
\end_inset

but not simpler
\begin_inset Quotes erd
\end_inset

, as Einstein said).
 Exercises should be attempted after absorbing the preceding material.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A software engineer needs to learn only those few fragments of mathematical
 theory that answer questions arising in the programming practice.
 So, this book keeps theoretical material at the minimum: 
\emph on
vita brevis, ars longa
\emph default
.
 The scope of the required mathematical knowledge is limited to first notions
 of set theory, formal logic, and category theory.
 Concepts such as functors or natural transformations arise from the practice
 of reasoning about code and are first explained without reference to category
 theory.
 
\end_layout

\begin_layout Standard
This book is 
\emph on
not
\emph default
 an introduction to current theoretical research in functional programming.
 Instead, the focus is on material known to be practically useful.
 The book organically develops the scope of theoretical concepts that help
 programmers write code or answer practical questions about code.
 That includes constructions such as 
\begin_inset Quotes eld
\end_inset

filterable functors
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

applicative contrafunctors
\begin_inset Quotes erd
\end_inset

 but excludes a number of theoretical developments that do not appear to
 have significant applications.
 For instance, this book does not talk about introduction/elimination rules,
 strong normalization, complete partial orders, domain theory, model theory,
 adjoint functors, co-ends, pullbacks, or topoi.
\end_layout

\begin_layout Standard
The first part of the book introduces functional programming.
 Readers already familiar with functional programming could skim the glossary
 (Appendix
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Appendix-Glossary-of-terms"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on page
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "chap:Appendix-Glossary-of-terms"
plural "false"
caps "false"
noprefix "false"

\end_inset

) for unfamiliar terminology and then start reading Chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:5-Curry-Howard"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
Participation in the meetup 
\begin_inset Quotes eld
\end_inset

San Francisco Types, Theorems, and Programming Languages
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
\begin_inset CommandInset href
LatexCommand href
target "https://www.meetup.com/sf-types-theorems-and-programming-languages/"
literal "false"

\end_inset


\end_layout

\end_inset

 initially motivated the author to begin working on this book.
 Thanks are due to Adrian King, Hew Wolff, Peter Vanderbilt, and Young-il
 Choo for inspiration and support in that meetup.
 The author appreciates the work of Joseph Kim and Jim Kleck who did many
 of the exercises and reported some errors in earlier versions of this book.
 The author also thanks Bill Venners for many helpful comments on the draft,
 and Harald Gliebe, Andreas R
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\begin_inset Quotes erd
\end_inset

o
\end_layout

\end_inset

hler, and Philip Schwarz for contributing corrections to the text via 
\family typewriter
github
\family default
.
 The author is grateful to Frederick Pitts and several anonymous 
\family typewriter
github
\family default
 contributors who reported errors in the draft and made helpful suggestions,
 and to Barisere Jonathan for valuable assistance with setting up automatic
 builds.
\end_layout

\begin_layout Addsec
Formatting conventions used in this book
\end_layout

\begin_layout Itemize
Text in boldface indicates a new concept or term that is being defined at
 that place in the text.
 Italics means logical emphasis.
 Example:
\end_layout

\begin_layout Quotation
An 
\series bold
aggregation
\begin_inset Index idx
status open

\begin_layout Plain Layout
aggregation
\end_layout

\end_inset


\series default
 is a function from a collection of values to a 
\emph on
single
\emph default
 value.
\end_layout

\begin_layout Itemize
Equations are numbered per chapter: Eq.
\begin_inset space ~
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:prime-formula-function"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Statements, examples, and exercises are numbered per subsection: Example
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:ch1-aggr-Example-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Aggregation-solved-examples"
plural "false"
caps "false"
noprefix "false"

\end_inset

, which belongs to Chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:1-Values,-types,-expressions,"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Itemize
Scala code is written inline using a small monospaced font: 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

val a = 
\begin_inset Quotes eld
\end_inset

xyz
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

.
 Longer code examples are written in separate code blocks and may also show
 the Scala interpreter's output for certain lines:
\begin_inset listings
lstparams "mathescape=true"
inline false
status open

\begin_layout Plain Layout

val s = (1 to 10).toList
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> s.product
\end_layout

\begin_layout Plain Layout

res0: Int = 3628800 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In the introductory chapters, type expressions and code examples are written
 in the Scala syntax.
 In Chapters
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Higher-order-functions"
plural "false"
caps "false"
noprefix "false"

\end_inset

–
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:5-Curry-Howard"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the book introduces a mathematical notation for types: e.g., the Scala type
 expression 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

((A, B)) => Option[A]
\end_layout

\end_inset

 is written as 
\begin_inset Formula $A\times B\rightarrow\bbnum 1+A$
\end_inset

.
 Chapters
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Higher-order-functions"
plural "false"
caps "false"
noprefix "false"

\end_inset

–
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Reasoning-about-code"
plural "false"
caps "false"
noprefix "false"

\end_inset

 also develop a more concise notation for code.
 For example, the functor composition law (in Scala: 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

_.map(f).map(g) == _.map(f andThen g)
\end_layout

\end_inset

) is written in the code notation as:
\begin_inset Formula 
\[
f^{\uparrow L}\bef g^{\uparrow L}=\left(f\bef g\right)^{\uparrow L}\quad,
\]

\end_inset

where 
\begin_inset Formula $L$
\end_inset

 is a functor and 
\begin_inset Formula $f^{:A\rightarrow B}$
\end_inset

 and 
\begin_inset Formula $g^{:B\rightarrow C}$
\end_inset

 are arbitrary functions of the specified types.
 The notation 
\begin_inset Formula $f^{\uparrow L}$
\end_inset

 denotes the function 
\begin_inset Formula $f$
\end_inset

 lifted to the functor 
\begin_inset Formula $L$
\end_inset

 and replaces Scala's syntax 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x.map(f)
\end_layout

\end_inset

 where 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

x
\end_layout

\end_inset

 is of type 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

L[A]
\end_layout

\end_inset

.
 The symbol 
\begin_inset Formula $\bef$
\end_inset

 denotes the forward composition of functions (Scala's method 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

andThen
\end_layout

\end_inset

).
 If the notation still appears hard to follow after going through Chapters
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:5-Curry-Howard"
plural "false"
caps "false"
noprefix "false"

\end_inset

–
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Functors,-contrafunctors,-and"
plural "false"
caps "false"
noprefix "false"

\end_inset

, readers will benefit from working through Chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Reasoning-about-code"
plural "false"
caps "false"
noprefix "false"

\end_inset

, which summarizes the code notation more systematically and clarifies it
 with additional examples.
 Appendix
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Appendix-Notations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on page
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "chap:Appendix-Notations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 summarizes this book's notation for types and code.
\end_layout

\begin_layout Itemize
Frequently used methods of standard typeclasses, such as Scala's 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

, etc., are denoted by shorter words and are labeled by the type constructor
 they belong to.
 For instance, the methods 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pure
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatten
\end_layout

\end_inset

, and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

flatMap
\end_layout

\end_inset

 for a monad 
\begin_inset Formula $M$
\end_inset

 are denoted by 
\begin_inset Formula $\text{pu}_{M}$
\end_inset

, 
\begin_inset Formula $\text{ftn}_{M}$
\end_inset

, and 
\begin_inset Formula $\text{flm}_{M}$
\end_inset

 when writing code formulas and proofs of laws.
\end_layout

\begin_layout Itemize
Derivations are written in a two-column format.
 The right column contains formulas in the code notation.
 The left column gives an explanation or indicates the property or law used
 to derive the expression at right from the previous expression.
 A green underline shows the parts of an expression that will be rewritten
 in the 
\emph on
next
\emph default
 step:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\text{pu}_{M}:\quad & \gunderline{\text{pu}_{M}^{\uparrow\text{Id}}}\bef\text{pu}_{M}\bef\text{ftn}_{M}\\
\text{lifting to the identity functor}:\quad & =\text{pu}_{M}\bef\gunderline{\text{pu}_{M}\bef\text{ftn}_{M}}\\
\text{left identity law of }M:\quad & =\text{pu}_{M}\quad.
\end{align*}

\end_inset

When the two-column presentation becomes too wide to fit the page, the explanati
ons are placed before the next step's line:
\begin_inset Formula 
\begin{align*}
 & \quad\text{expect to equal }\text{pu}_{M}:\quad\\
 & \gunderline{\text{pu}_{M}^{\uparrow\text{Id}}}\bef\text{pu}_{M}\bef\text{ftn}_{M}\\
 & \quad\text{lifting to the identity functor}:\quad\\
 & =\text{pu}_{M}\bef\gunderline{\text{pu}_{M}\bef\text{ftn}_{M}}\\
 & \quad\text{left identity law of }M:\quad\\
 & =\text{pu}_{M}\quad.
\end{align*}

\end_inset

 A green underline is sometimes also used at the last step of a derivation,
 to indicate the sub-expression that resulted from the most recent rewriting.
 Other than providing hints to help clarify the steps, the green text and
 the green underlines 
\emph on
play no role
\emph default
 in symbolic derivations.
\end_layout

\begin_layout Itemize
The symbol 
\begin_inset Formula $\square$
\end_inset

 is used occasionally to indicate more clearly the end of a definition,
 a derivation, or a proof.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cleardoublepage
\end_layout

\end_inset


\begin_inset Note Comment
status open

\begin_layout Plain Layout
Necessary to make 
\begin_inset Quotes eld
\end_inset

Part
\begin_inset Quotes erd
\end_inset

 appear after a blank page.
 We are resetting page numbers in each volume, and this confuses the layout
 engine.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
