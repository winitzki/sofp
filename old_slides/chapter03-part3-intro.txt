Functional programming, chapter 3, part 3: The Curry-Howard correspondence

Functional programming in the mathematical spirit.

Long and difficult, yet boring explanations given in excruciating detail.

Start by reading the slides, go through the worked examples and exercises. Watch the video when you cannot fully understand something in the slides.

Chapter 3, part 3.

How types are interpreted using propositional logic
How to write type expressions in the shorthand notation
The four-point correspondence between propositions/proofs and types/code
How to verify or to refute isomorphism (equivalence) relationships between types
Identities in logic vs. identities in arithmetic: the two sides of the CH correspondence
Deriving the code of functions based on types of those functions
Exponential-polynomial types vs. "algebraic" types
Recursive polynomial type (List) and its type formula
Worked examples and exercises

Slides: https://github.com/winitzki/talks/blob/master/ftt-fp/03-logic-of-types-3.pdf

Code examples: https://github.com/winitzki/scala-examples/tree/master/chapter03/src

The "curryhoward" project: https://github.com/Chymyst/curryhoward
