#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[Chapter 1 - Expressions]{Chapter 1: Values, types, expressions, functions}
\author{Sergei Winitzki}
\date{October 21, 2017}
\institute[ABTB]{Academy by the Bay}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What is 
\begin_inset Quotes eld
\end_inset

Functional Programming
\begin_inset Quotes erd
\end_inset

?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Functional programming...
\end_layout

\begin_layout Itemize
treats programs as mathematical expressions
\end_layout

\begin_layout Itemize
uses age-old mathematical intuition to design software
\end_layout

\begin_layout Itemize
is natural and effective in OCaml, Haskell, F#, Scala, Swift, etc.
\end_layout

\begin_layout Itemize
...
 but not in C, C++, JavaScript, Java (before version 8), or Python!
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset

We will be using Scala for all examples...
\end_layout

\begin_layout Itemize
...but the same material looks very similar in the other languages 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples of functional programs
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Compute the factorial of a natural number:
\begin_inset Formula 
\[
n!=\prod_{k=1}^{n}k
\]

\end_inset


\end_layout

\begin_layout Standard
Check whether a natural number is a prime:
\begin_inset Formula 
\[
prime(n)=\forall i\text{ such that }2\leq i<n\ :\ n\neq0\mod i
\]

\end_inset


\end_layout

\begin_layout Standard
Count how many even numbers there are in a given set 
\begin_inset Formula $S$
\end_inset

 of integers:
\begin_inset Formula 
\begin{align*}
count\_even & =\sum_{k\in S}is\_even(k)\\
\text{where we defined }is\_even(k) & =\begin{cases}
1 & \text{if }k=0\mod2\\
0 & \text{otherwise}
\end{cases}
\end{align*}

\end_inset


\end_layout

\begin_layout Itemize
Scala programs implementing this are similar to the math
\end_layout

\begin_deeper
\begin_layout Itemize
Usual programs in Java or Python are 
\emph on
not
\emph default
 similar to the math!
\end_layout

\end_deeper
\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What exactly is 
\begin_inset Quotes eld
\end_inset

math-like
\begin_inset Quotes erd
\end_inset

 about that code?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The code represents a 
\emph on
mathematical expression
\emph default
 that we want to compute
\end_layout

\begin_layout Itemize
Each value is immutable and has a fixed 
\emph on
type
\emph default
 (integer, set, function, etc.)
\end_layout

\begin_layout Itemize
The code can define new names or new functions 
\emph on
within an expression
\end_layout

\begin_layout Itemize
There are no loops, no 
\begin_inset Quotes eld
\end_inset

goto
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

repeat
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Have you ever seen a math book that says things such as,
\begin_inset Newline newline
\end_inset


\emph on

\begin_inset space ~
\end_inset

 
\begin_inset Quotes eld
\end_inset

now change 
\begin_inset Formula $k$
\end_inset

 to 
\begin_inset Formula $k-1$
\end_inset

 and repeat Equation 123 until 
\begin_inset Formula $k=0$
\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset space ~
\end_inset

?
\begin_inset Newline newline
\end_inset


\emph default
or
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset

 
\emph on

\begin_inset Quotes eld
\end_inset

at this point, if 
\begin_inset Formula $x>0$
\end_inset

 then go back to page 208, else assign 
\begin_inset Formula $x=0$
\end_inset


\begin_inset Quotes erd
\end_inset

?
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Adapting math to programming I
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Values, expressions, and types
\end_layout

\begin_layout Standard
In math, there are two kinds of 
\begin_inset Quotes eld
\end_inset

variables
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Itemize
named constant values,
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
val a = 123
\end_layout

\begin_layout Itemize
function arguments,
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def f(x: Int, y: Int) = x + y - 1
\end_layout

\begin_layout Standard
Math texts never try to 
\begin_inset Quotes eld
\end_inset

modify
\begin_inset Quotes erd
\end_inset

 a value, so...
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset


\family typewriter
\size footnotesize
\color blue
val
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

s and function arguments are immutable
\end_layout

\begin_layout Standard
Each value has a fixed type (
\family typewriter
\size footnotesize
\color blue
Int
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Boolean
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Array[String]
\family default
\size default
\color inherit
, etc.)
\end_layout

\begin_layout Itemize
Type represents the set of possible values of the function argument
\end_layout

\begin_layout Itemize
Type is automatically assigned to named constants
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Adapting math to programming II
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Anonymous functions vs.
\begin_inset space ~
\end_inset

named functions
\end_layout

\begin_layout Standard
There are two ways of defining a function in Scala:
\end_layout

\begin_layout Itemize

\series bold
named
\series default
 function (or 
\begin_inset Quotes eld
\end_inset

method
\begin_inset Quotes erd
\end_inset

) – using 
\family typewriter
\size footnotesize
\color blue
def
\family default
\size default
\color inherit
 with a name
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def sum_sq(x: Int, y: Int): Int = { x * x + y * y }
\end_layout

\begin_layout Itemize

\series bold
anonymous
\series default
 function – in math notation, 
\begin_inset Formula $x\mapsto f(x)$
\end_inset

:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
(x: Int, y: Int) => x * x + y * y
\end_layout

\begin_layout Standard
Anonymous functions are 
\emph on
values
\emph default
:
\end_layout

\begin_layout Itemize
they are immutable and have a fixed type, e.g.
\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
(Int, Int) => Int
\end_layout

\begin_layout Itemize
they can be assigned a name and used later in an expression:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
val double: (Int => Int) = { x => x * 2 }; double(y)
\end_layout

\begin_layout Itemize
or they can be used directly as arguments of other functions:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
(1 to 10).map(x => x * x)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Some collection types available in Scala
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
What is 
\size footnotesize
\color blue
(1 to 10)
\size default
\color inherit
? What type does it have?
\end_layout

\begin_layout LyX-Code

\size footnotesize
scala> (1 to 10)
\end_layout

\begin_layout LyX-Code

\size footnotesize
res0: scala.collection.immutable.Range.Inclusive = Range 1 to 10
\end_layout

\begin_layout Itemize
Sequence: 
\family typewriter
\size footnotesize
\color blue
Seq
\family default
\size default
\color inherit
 and its subtypes: 
\family typewriter
\size footnotesize
\color blue
List
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
IndexedSeq
\family default
\size default
\color inherit
, etc.
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
val a: Seq[Int] = Seq(2, 4, 6, 8)
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
val b = a(0) //
\size default
\color inherit
 now
\size footnotesize
\color blue
 b: Int == 2 
\end_layout

\begin_layout Itemize
Set: 
\family typewriter
\size footnotesize
\color blue
Set
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
val b: Set[String] = Set("x", "y", "z")
\end_layout

\begin_layout Itemize
Dictionary: 
\family typewriter
\size footnotesize
\color blue
Map
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
val c: Map[String, Int] = Map("x" -> 5, "y" -> 3, "z" -> 1)
\end_layout

\begin_layout Standard
Note the 
\series bold
parameterized
\series default
 types 
\family typewriter
\size footnotesize
\color blue
Seq[Int]
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
Map[String, Int]
\end_layout

\begin_layout Standard
Collections can have any element type: 
\family typewriter
\size footnotesize
\color blue
String
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Boolean
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Set[Seq[Int]]
\family default
\size default
\color inherit
, ...
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Adapting math to programming III
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Encoding sums, products, quantifiers using anonymous functions
\end_layout

\begin_layout Standard
The methods 
\size footnotesize
\color blue
map
\size default
\color inherit
, 
\size footnotesize
\color blue
filter
\size default
\color inherit
,
\size footnotesize
\color blue
 forall
\size default
\color inherit
, 
\size footnotesize
\color blue
exists
\size default
\color inherit
 are defined on all collections
\end_layout

\begin_layout Standard
The methods 
\size footnotesize
\color blue
sum
\size default
\color inherit
, 
\size footnotesize
\color blue
product
\size default
\color inherit
 are defined on collections of 
\emph on
numbers
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Mathematical notation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Scala code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x\mapsto\sqrt{x^{2}+1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
x => math.sqrt(x * x + 1)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sequence 
\begin_inset Formula $\left[1,~2,~...,~n\right]$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(1 to n)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sequence 
\begin_inset Formula $\left[f(1),~...,~f(n)\right]$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(1 to n).map(k => f(k))
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sum_{k=1}^{n}k^{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(1 to n).map(k => k*k).sum
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\prod_{k=1}^{n}f(k)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(1 to n).map(f).product
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\forall k\text{ such that }1\leq k\leq n:p(k)~\text{holds}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(1 to n).forall(k => p(k))
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\exists k,\:1\leq k\leq n\text{ such that }p(k)~\text{holds}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(1 to n).exists(k => p(k))
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula ${\displaystyle \sum_{k\in S:\,p(k)\:\text{holds}}}f(k)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
s.filter(p).map(f).sum
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Adapting math to programming IV
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Higher-order functions
\end_layout

\begin_layout Standard
Derivatives and integrals could be implemented as functions:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def deriv(f: Double => Double): (Double => Double) = { ??? }
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def integ(f: Double => Double, range: (Double, Double)): Double = ???
\end_layout

\begin_layout Standard

\series bold
Higher-order functions
\series default
 take function arguments and/or return functions
\end_layout

\begin_layout Itemize
Many computations with sequences, sets, dictionaries can be done using higher-or
der functions, 
\emph on
without loops
\emph default
, concisely and error-free
\end_layout

\begin_layout Itemize
The Scala standard library has many more higher-order methods for collections
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
size
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
reduce
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
concat
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
zip
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
zipWithIndex
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
flatten
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
find
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
fold
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
scan
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
collect
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
distinct
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
groupBy
\family default
\size default
\color inherit
, ...
\end_layout

\end_deeper
\begin_layout Itemize
Write code by expressing the computation 
\emph on
as a mathematical formula
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Using both 
\family typewriter
\size footnotesize
\color blue
def
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
val
\family default
\size default
\color inherit
, define a function that...
\end_layout

\begin_deeper
\begin_layout Enumerate
adds 20 to its integer argument
\end_layout

\begin_layout Enumerate
takes an integer 
\family typewriter
\size footnotesize
\color blue
x
\family default
\size default
\color inherit
, and returns a 
\emph on
function
\emph default
 that adds 
\family typewriter
\size footnotesize
\color blue
x
\family default
\size default
\color inherit
 to 
\emph on
its
\emph default
 argument
\end_layout

\begin_layout Enumerate
takes an integer 
\family typewriter
\size footnotesize
\color blue
x
\family default
\size default
\color inherit
 and returns 
\family typewriter
\size footnotesize
\color blue
true
\family default
\size default
\color inherit
 iff 
\family typewriter
\size footnotesize
\color blue
x + 1
\family default
\size default
\color inherit
 is prime
\end_layout

\end_deeper
\begin_layout Itemize
What are the types of the functions in Examples 1 - 3?
\end_layout

\begin_layout Itemize
Compute the average of all numbers in a sequence of type 
\family typewriter
\size footnotesize
\color blue
Seq[Double]
\family default
\size default
\color inherit
.
 Use 
\family typewriter
\size footnotesize
\color blue
sum
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
size
\family default
\size default
\color inherit
 but no loops.
\end_layout

\begin_layout Itemize
Given 
\begin_inset Formula $n$
\end_inset

, compute 
\begin_inset CommandInset href
LatexCommand href
name "the Wallis product"
target "https://en.wikipedia.org/wiki/Wallis_product"

\end_inset

 truncated up to 
\begin_inset Formula $\frac{2n}{2n+1}$
\end_inset

: 
\begin_inset Formula 
\[
\frac{2}{1}\frac{2}{3}\frac{4}{3}\frac{4}{5}\frac{6}{5}\frac{6}{7}...\frac{2n}{2n+1}.
\]

\end_inset

Use a sequence of 
\family typewriter
\size footnotesize
\color blue
Int
\family default
\size default
\color inherit
 or 
\family typewriter
\size footnotesize
\color blue
Double
\family default
\size default
\color inherit
 numbers, 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
, and 
\family typewriter
\size footnotesize
\color blue
product
\family default
\size default
\color inherit
.
\end_layout

\begin_layout Itemize
Given 
\family typewriter
\size footnotesize
\color blue
s:
\begin_inset space ~
\end_inset

Seq[Set[Int]]
\family default
\size default
\color inherit
, compute the sequence containing the sets of size at least 3.
 Use 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
filter
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
size
\family default
\size default
\color inherit
.
 The result must be again of type 
\family typewriter
\size footnotesize
\color blue
Seq[Set[Int]]
\family default
\size default
\color inherit
.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
What problems can we solve now?
\end_layout

\begin_deeper
\begin_layout Itemize
Compute mathematical expressions involving sums, products, and quantifiers,
 based on integer ranges (such as 
\begin_inset Formula $\sum_{k=1}^{n}f(k)$
\end_inset

 etc.)
\end_layout

\begin_layout Itemize
Implement functions that take or return other functions
\end_layout

\begin_layout Itemize
Work on collections using 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
 and other library methods
\end_layout

\end_deeper
\begin_layout Itemize
What kinds of problems are not solved with these tools?
\end_layout

\begin_deeper
\begin_layout Itemize
Compute the smallest 
\begin_inset Formula $n$
\end_inset

 such that 
\begin_inset Formula $f(f(f(...f(1)...)>1000$
\end_inset

, where the function 
\begin_inset Formula $f$
\end_inset

 is applied 
\begin_inset Formula $n$
\end_inset

 times.
\end_layout

\begin_layout Itemize
Find the 
\begin_inset Formula $k$
\end_inset

-th largest element in an (unsorted) array of integers.
\end_layout

\begin_layout Itemize
Perform binary search over a sorted array.
\end_layout

\end_deeper
\begin_layout Itemize
Why can't we solve such problems yet?
\end_layout

\begin_deeper
\begin_layout Itemize
Because we can't yet put 
\emph on
mathematical induction
\emph default
 into code
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exercises
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Define a function of type 
\family typewriter
\size footnotesize
\color blue
Seq[Double] => Seq[Double]
\family default
\size default
\color inherit
 that 
\begin_inset Quotes eld
\end_inset

normalizes
\begin_inset Quotes erd
\end_inset

 the sequence: it finds the element having the max.
\begin_inset space ~
\end_inset

absolute value and, if that value is nonzero, divides all elements by that
 factor.
\end_layout

\begin_layout Enumerate
Define a function of type 
\family typewriter
\size footnotesize
\color blue
Seq[Seq[Int]] => Seq[Seq[Int]]
\family default
\size default
\color inherit
 that adds 20 to every element of every inner sequence.
\end_layout

\begin_layout Enumerate
An integer 
\begin_inset Formula $n$
\end_inset

 is called 
\begin_inset Quotes eld
\end_inset

3-factor
\begin_inset Quotes erd
\end_inset

 if it is divisible by only three different integers 
\begin_inset Formula $j$
\end_inset

 such that 
\begin_inset Formula $2\leq j<n$
\end_inset

.
 Compute the set of all 
\begin_inset Quotes eld
\end_inset

3-factor
\begin_inset Quotes erd
\end_inset

 integers 
\begin_inset Formula $n$
\end_inset

 among 
\begin_inset Formula $n\in[1,...,1000]$
\end_inset

 .
\end_layout

\begin_layout Enumerate
Given a function 
\begin_inset Formula $f$
\end_inset

 of type 
\family typewriter
\size footnotesize
\color blue
Int => Boolean
\family default
\size default
\color inherit
, an integer 
\begin_inset Formula $n$
\end_inset

 is called 
\begin_inset Quotes eld
\end_inset

3-
\begin_inset Formula $f$
\end_inset


\begin_inset Quotes erd
\end_inset

 if there are only three different integers 
\begin_inset Formula $j\in[1,...,n]$
\end_inset

 such that 
\begin_inset Formula $f(j)$
\end_inset

 returns 
\family typewriter
\size footnotesize
\color blue
true
\family default
\size default
\color inherit
.
 Define a function that takes 
\begin_inset Formula $f$
\end_inset

 as an argument and returns a sequence of all 
\begin_inset Quotes eld
\end_inset

3-
\begin_inset Formula $f$
\end_inset


\begin_inset Quotes erd
\end_inset

 integers among 
\begin_inset Formula $n\in[1,...,1000]$
\end_inset

.
 What is the type of that function? Rewrite Exercise
\begin_inset space ~
\end_inset

3 using that function.
\end_layout

\begin_layout Enumerate
Define a function that takes two functions 
\family typewriter
\size footnotesize
\color blue
f:
\begin_inset space ~
\end_inset

Int => Double
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
g:
\begin_inset space ~
\end_inset

Double => String
\family default
\size default
\color inherit
 as arguments, and returns a new function that computes the functional compositi
on of 
\family typewriter
\size footnotesize
\color blue
f
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
g
\family default
\size default
\color inherit
.
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\end_body
\end_document
