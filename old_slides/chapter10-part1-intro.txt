(Part 1 of 4) Functional programming, chapter 10. Free type constructions

Functional programming in the mathematical spirit.

Long and difficult, yet boring explanations given in excruciating detail.

Start by reading the slides, go through the worked examples and exercises. Watch the video when you cannot fully understand something in the slides.

This part covers slides 1 to 15.

Chapter 10: Free type constructions

The interpreter pattern as translation from program operations in a domain-specific language (DSL) into data structures
Using case classes to implement a DSL program as an unevaluated expression tree
Why using type parameters makes a DSL type-safe
When is it necessary for a DSL to have monadic properties?
Free monad obtained as a refactoring a DSL to separate custom code from common (application-independent) code
Interpreting ("running") the same DSL program into a different type constructor, to provide error handling
Proof that the monad laws hold after running the DSL program (but not necessarily before)
Free constructions in mathematics: what it means to have a "free product" or a "free semigroup"
Tree encoding vs. reduced encoding of a free construction
Examples: free semigroup and free monoid; proof of the laws
Some properties and laws of the free constructions

Slides: https://github.com/winitzki/talks/blob/master/ftt-fp/10-free-constructions.pdf

Code examples: https://github.com/winitzki/scala-examples/tree/master/chapter10/src
