Functional programming, chapter 7. Monads and semimonads. Part 2: Laws and structure of monads

Functional programming in the mathematical spirit.

Long and difficult, yet boring explanations given in excruciating detail.

Start by reading the slides, go through the worked examples and exercises. Watch the video when you cannot fully understand something in the slides.

Chapter 7: Computations in a functor context II. Monads and semimonads. Part 2: Laws and structure of monads

How to derive the laws for flatMap from our intuitions about functor block computations
Deriving the laws for flatten from the laws for flatMap
Why flatten is equivalent to flatMap, and what it means to be "equivalent"
Why flatten has one law fewer than flatMap
How parametricity assures naturality laws
Worked examples showing how to verify the associativity law for all standard monads
Examples of incorrect implementation of flatten that violates the associativity law
Motivation for full monads and laws for the `pure` method
Deriving the laws for `pure` in terms of `flatten`
Reformulating the monad laws in terms of Kleisli functions
A simplified definition of "category" and "morphism"
How category theory provides a conceptual generalization of "lifting"
Deriving the laws of `pure`, `flatten`, and `flatMap` from the laws of Kleisli category
Structure of semigroups and monoids: how to build up semigroups and monoids from parts
Structure of semimonads and monads: building up new monads from previously given monads, functors, and contrafunctors
Worked examples with full derivations of laws for most of the constructions
Why certain constructions can be only semimonads but not full monads
Why there cannot be a contravariant monad
Exercises, with examples and counter-examples of monads

Slides: https://github.com/winitzki/talks/blob/master/ftt-fp/07-monads-part2.pdf

Code examples: https://github.com/winitzki/scala-examples/tree/master/chapter07/src

https://youtu.be/p0fH_adTCnQ

