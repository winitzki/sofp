Functional programming in the mathematical spirit.

Long and difficult, yet boring explanations given in excruciating detail.

Start by reading the slides, go through the worked examples and exercises. Watch the video when you cannot fully understand something in the slides.

Chapter 5. Type-level functions and type classes

Total and partial functions at value level and at type level
GADTs as partial type-to-type functions
Using type evidence values to define partial type-to-value functions (PTVFs)
Type classes understood as PTVFs
Using Scala's implicit value mechanism to define type classes
Examples of type classes: Semigroup, Monoid, Functor
Higher-order type functions; kinds as a "type system for types"
Using Scala's "implicit method" syntax with type classes
Using the Cats library to define type class instances
Using the Scalacheck library to verify type class laws
Worked examples and exercises


Slides: https://github.com/winitzki/talks/blob/master/ftt-fp/05-type-classes.pdf

Code examples: https://github.com/winitzki/scala-examples/tree/master/chapter05/src
