#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[Chapter 2: Functional Collections]{Chapter 2: The Functional Approach to Collections}
\author{Sergei Winitzki}
\date{November 22, 2017}
\institute[ABTB]{Academy by the Bay}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Tuples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Pair of values: 
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

val a:
\begin_inset space \space{}
\end_inset

(Int, String) = (123, 
\begin_inset Quotes eld
\end_inset

xyz
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
Triple of values: 
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

val b:
\begin_inset space \space{}
\end_inset

(Boolean, Int, Int) = (true, 3, 4)
\end_layout

\begin_layout Itemize
Tuples can be nested: 
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

val c:
\begin_inset space \space{}
\end_inset

(Boolean, (String, Int), Boolean) =
\begin_inset Newline newline
\end_inset

 (true, (
\begin_inset Quotes eld
\end_inset

abc
\begin_inset Quotes erd
\end_inset

, 3), false)
\end_layout

\begin_layout Itemize
Parts of the tuple can be accessed by number: 
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

val x:
\begin_inset space \space{}
\end_inset

(String, Int) = c._2
\end_layout

\begin_layout Itemize
Functions on tuples:
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

def f(p:
\begin_inset space \space{}
\end_inset

(Boolean, Int), q:
\begin_inset space \space{}
\end_inset

Int):
\begin_inset space \space{}
\end_inset

Boolean = p._1 && (p._2 > q) 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Pattern-matching syntax for tuples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Scala allows pattern matching in two places:
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
val 
\family default
\emph on
pattern
\family typewriter
\emph default
 = ...

\family default
\size default
\color inherit
 (value assignment)
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
case 
\family default
\emph on
pattern
\family typewriter
\emph default
 
\family default

\begin_inset Formula $\Rightarrow$
\end_inset


\family typewriter
 ...

\family default
\size default
\color inherit
 (partial function)
\end_layout

\begin_layout Standard
Examples:
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
val a = (1, 2, 3); val (x, y, z) = a
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
val f:
\begin_inset space \space{}
\end_inset

((Int, Int, Int)) 
\begin_inset Formula $\Rightarrow$
\end_inset

 Int = { case (x, y, z) 
\begin_inset Formula $\Rightarrow$
\end_inset

 x + y + z }; f(a)
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Combining tuple types with other types
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
We can use tuple types anywhere:
\end_layout

\begin_layout Itemize
Tuple of functions:
\begin_inset Newline newline
\end_inset

 
\family typewriter
\size footnotesize
\color blue
val q:
\begin_inset space \space{}
\end_inset

(Int 
\begin_inset Formula $\Rightarrow$
\end_inset

 Int, Int 
\begin_inset Formula $\Rightarrow$
\end_inset

 Int) = (x 
\begin_inset Formula $\Rightarrow$
\end_inset

 x + 1, x 
\begin_inset Formula $\Rightarrow$
\end_inset

 x - 1)
\end_layout

\begin_layout Itemize
Sequence of tuples:
\begin_inset Newline newline
\end_inset

 
\family typewriter
\size footnotesize
\color blue
val s:
\begin_inset space \space{}
\end_inset

Seq[(String, Int)] =
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}
\end_inset

 Seq((
\begin_inset Quotes eld
\end_inset

apples
\begin_inset Quotes erd
\end_inset

, 3), (
\begin_inset Quotes eld
\end_inset

oranges
\begin_inset Quotes erd
\end_inset

, 2), (
\begin_inset Quotes eld
\end_inset

pears
\begin_inset Quotes erd
\end_inset

, 0))
\end_layout

\begin_layout Itemize
Tuples (esp.
\begin_inset space \space{}
\end_inset

pairs) are used a lot in the Scala standard library...
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
zip:
\begin_inset space \space{}
\end_inset

(Seq[A], Seq[B]) 
\begin_inset Formula $\Rightarrow$
\end_inset

 Seq[(A, B)]
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
map:
\begin_inset space \space{}
\end_inset

(Map[K, V], (K, V) 
\begin_inset Formula $\Rightarrow$
\end_inset

 R) 
\begin_inset Formula $\Rightarrow$
\end_inset

 Seq[R]
\end_layout

\begin_deeper
\begin_layout Itemize
Note: the syntax 
\family typewriter
\size footnotesize
\color blue
(a 
\begin_inset Formula $\rightarrow$
\end_inset

 b)
\family default
\size default
\color inherit
 means the same as the pair 
\family typewriter
\size footnotesize
\color blue
(a, b) 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
toMap:
\begin_inset space \space{}
\end_inset

Seq[(K, V)] 
\begin_inset Formula $\Rightarrow$
\end_inset

 Map[K, V]
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
toSeq:
\begin_inset space \space{}
\end_inset

Map[K, V] 
\begin_inset Formula $\Rightarrow$
\end_inset

 Seq[(K, V)]
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Worked examples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
for a given sequence 
\begin_inset Formula $a_{i}$
\end_inset

, compute the sequence of pairs 
\begin_inset Formula $b_{i}=\left(\cos a_{i},\sin a_{i}\right)$
\end_inset

 – use 
\family typewriter
\size footnotesize
\color blue
.map
\family default
\size default
\color inherit
, assume 
\family typewriter
\size footnotesize
\color blue
a:
\begin_inset space \space{}
\end_inset

Seq[Double]
\end_layout

\begin_layout Enumerate
in a given sequence 
\begin_inset Formula $a_{i}$
\end_inset

, count how many times 
\begin_inset Formula $\cos a_{i}>\sin a_{i}$
\end_inset

 occurs
\begin_inset Newline newline
\end_inset

– use 
\family typewriter
\size footnotesize
\color blue
.count
\family default
\size default
\color inherit
, assume 
\family typewriter
\size footnotesize
\color blue
a:
\begin_inset space \space{}
\end_inset

Seq[Double]
\end_layout

\begin_layout Enumerate
for given sequences 
\begin_inset Formula $a_{i}$
\end_inset

 and 
\begin_inset Formula $b_{i}$
\end_inset

, compute the sequence of differences
\begin_inset Newline newline
\end_inset

 
\begin_inset Formula $c_{i}=a_{i}-b_{i}$
\end_inset

 (use 
\family typewriter
\size footnotesize
\color blue
.zip
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.map
\family default
\size default
\color inherit
, assume 
\family typewriter
\size footnotesize
\color blue
a, b:
\begin_inset space \space{}
\end_inset

Seq[Double]
\family default
\size default
\color inherit
)
\end_layout

\begin_layout Enumerate
in a given sequence 
\begin_inset Formula $a_{i}$
\end_inset

, count how many times 
\begin_inset Formula $a_{i}>a_{i+1}$
\end_inset

 occurs
\end_layout

\begin_layout Enumerate
for a given 
\begin_inset Formula $k>0$
\end_inset

, compute the sequence 
\begin_inset Formula $b_{i}=\max(a_{i-k},...,a_{i+k})$
\end_inset


\begin_inset Newline newline
\end_inset

 – use 
\family typewriter
\size footnotesize
\color blue
.sliding
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Enumerate
create a multiplication table as a value of type 
\family typewriter
\size footnotesize
\color blue
Map[(Int, Int), Int]
\begin_inset Newline newline
\end_inset


\family default
\size default
\color inherit
 – use 
\family typewriter
\size footnotesize
\color blue
.flatMap
\end_layout

\begin_layout Enumerate
for a given sequence 
\begin_inset Formula $a_{i}$
\end_inset

, compute the combined set of the numbers 
\begin_inset Formula $a_{i}$
\end_inset

, 
\begin_inset Formula $\cos a_{i}$
\end_inset

 
\begin_inset Formula $\sin a_{i}$
\end_inset

 and find its maximum value – use 
\family typewriter
\size footnotesize
\color blue
.map, .flatMap, .max
\end_layout

\begin_layout Enumerate
from a 
\family typewriter
\size footnotesize
\color blue
Map[String, String]
\family default
\size default
\color inherit
 mapping names to addresses, and assuming that the addresses do not repeat,
 compute a 
\family typewriter
\size footnotesize
\color blue
Map[String, String]
\family default
\size default
\color inherit
 mapping addresses to names – use 
\family typewriter
\size footnotesize
\color blue
.toMap
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.map
\end_layout

\begin_deeper
\begin_layout Itemize
Write this as a function with type parameters 
\family typewriter
\size footnotesize
\color blue
Name
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
Address
\family default
\size default
\color inherit
 instead of the fixed type 
\family typewriter
\size footnotesize
\color blue
String
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exercises I
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Find all 
\begin_inset Formula $i,j$
\end_inset

 within 
\begin_inset Formula $\left(0,1,...,9\right)$
\end_inset

 such that 
\begin_inset Formula $i+4*j>i*j$
\end_inset

 (use 
\family typewriter
\size footnotesize
\color blue
.flatMap
\family default
\size default
\color inherit
)
\end_layout

\begin_deeper
\begin_layout Itemize
Same task for 
\begin_inset Formula $i,j,k$
\end_inset

 and the condition 
\begin_inset Formula $i+4*j+9*k>i*j*k$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Given two sequences 
\family typewriter
\size footnotesize
\color blue
a:
\family default
\size default
\color inherit

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
Seq[String]
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
b:
\family default
\size default
\color inherit

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
Seq[Boolean]
\family default
\size default
\color inherit
 of equal length, compute a 
\family typewriter
\size footnotesize
\color blue
Seq[String]
\family default
\size default
\color inherit
 with those elements of 
\family typewriter
\size footnotesize
\color blue
a
\family default
\size default
\color inherit
 for which the corresponding element of 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
 is 
\family typewriter
\size footnotesize
\color blue
true
\family default
\size default
\color inherit
 – use 
\family typewriter
\size footnotesize
\color blue
.zip
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.map
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.filter
\end_layout

\begin_layout Enumerate
Convert a 
\family typewriter
\size footnotesize
\color blue
Seq[Int]
\family default
\size default
\color inherit
 into a 
\family typewriter
\size footnotesize
\color blue
Seq[(Int, Boolean)]
\family default
\size default
\color inherit
 where the Boolean value is 
\family typewriter
\size footnotesize
\color blue
true
\family default
\size default
\color inherit
 when the element is followed by a larger value; e.g.
 
\family typewriter
\size footnotesize
\color blue
Seq(1,3,2,4)
\family default
\size default
\color inherit
 is to be converted into 
\family typewriter
\size footnotesize
\color blue
Seq((1,true),(3,false),(2,true))
\end_layout

\begin_layout Enumerate
Given 
\family typewriter
\size footnotesize
\color blue
a:
\family default
\size default
\color inherit

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
Seq[String]
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
b:
\family default
\size default
\color inherit

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
Seq[Int]
\family default
\size default
\color inherit
 of equal length, and assuming that elements of 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
 do not repeat, compute a 
\family typewriter
\size footnotesize
\color blue
Map[Int, String]
\family default
\size default
\color inherit
 that maps numbers from 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
 to their corresponding strings from 
\family typewriter
\size footnotesize
\color blue
a
\end_layout

\begin_deeper
\begin_layout Itemize
Write this as a function with type parameters 
\family typewriter
\size footnotesize
\color blue
S
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
I
\family default
\size default
\color inherit
 instead of the fixed types 
\family typewriter
\size footnotesize
\color blue
String
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
Int
\family default
\size default
\color inherit
; test it with 
\family typewriter
\size footnotesize
\color blue
S=Boolean
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
I=Set[Int]
\end_layout

\end_deeper
\begin_layout Enumerate
Given 
\family typewriter
\size footnotesize
\color blue
a:
\family default
\size default
\color inherit

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
Seq[String]
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
b:
\family default
\size default
\color inherit

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
Seq[Int]
\family default
\size default
\color inherit
 of equal length, compute a 
\family typewriter
\size footnotesize
\color blue
Seq[String]
\family default
\size default
\color inherit
 that contains the strings from 
\family typewriter
\size footnotesize
\color blue
a
\family default
\size default
\color inherit
 ordered according to the corresponding numbers from 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
 – use 
\family typewriter
\size footnotesize
\color blue
.sortBy
\end_layout

\begin_deeper
\begin_layout Itemize
Write this as a function with type parameter 
\family typewriter
\size footnotesize
\color blue
S
\family default
\size default
\color inherit
 instead of 
\family typewriter
\size footnotesize
\color blue
String
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exercises II
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Given a 
\family typewriter
\size footnotesize
\color blue
Seq[(String, Int)]
\family default
\size default
\color inherit
 showing a list of purchased items (names may repeat), compute 
\family typewriter
\size footnotesize
\color blue
Map[String, Int]
\family default
\size default
\color inherit
 showing the total counts: e.g.
\begin_inset space ~
\end_inset

given a 
\family typewriter
\size footnotesize
\color blue
Seq((
\begin_inset Quotes eld
\end_inset

apple
\begin_inset Quotes erd
\end_inset

, 2), (
\begin_inset Quotes eld
\end_inset

pear
\begin_inset Quotes erd
\end_inset

, 3), (
\begin_inset Quotes eld
\end_inset

apple
\begin_inset Quotes erd
\end_inset

, 5))
\family default
\size default
\color inherit
, compute 
\family typewriter
\size footnotesize
\color blue
Map(
\begin_inset Quotes eld
\end_inset

apple
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $\rightarrow$
\end_inset

 7, 
\begin_inset Quotes eld
\end_inset

pear
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $\rightarrow$
\end_inset

 3)
\family default
\size default
\color inherit
 – use 
\family typewriter
\size footnotesize
\color blue
.groupBy
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.map
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.sum
\end_layout

\begin_deeper
\begin_layout Itemize
Write this as a function with type parameter 
\family typewriter
\size footnotesize
\color blue
S
\family default
\size default
\color inherit
 instead of 
\family typewriter
\size footnotesize
\color blue
String
\end_layout

\end_deeper
\begin_layout Enumerate
Given a 
\family typewriter
\size footnotesize
\color blue
Seq[List[Int]]
\family default
\size default
\color inherit
, compute a 
\family typewriter
\size footnotesize
\color blue
Seq[List[Int]]
\family default
\size default
\color inherit
 where each new inner list contains the three largest elements from the
 initial inner list – use 
\family typewriter
\size footnotesize
\color blue
.sortBy
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.take
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.map
\end_layout

\begin_layout Enumerate
Given two sets 
\family typewriter
\size footnotesize
\color blue
a
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
 of type 
\family typewriter
\size footnotesize
\color blue
Set[Int]
\family default
\size default
\color inherit
, compute a 
\family typewriter
\size footnotesize
\color blue
Set[(Int, Int)]
\family default
\size default
\color inherit
 representing the Cartesian product of the sets 
\family typewriter
\size footnotesize
\color blue
a
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
 – use 
\family typewriter
\size footnotesize
\color blue
.flatMap
\end_layout

\begin_deeper
\begin_layout Itemize
Write this as a function with type parameters 
\family typewriter
\size footnotesize
\color blue
I
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
J
\family default
\size default
\color inherit
 instead of 
\family typewriter
\size footnotesize
\color blue
Int
\end_layout

\end_deeper
\begin_layout Enumerate
* Given a 
\family typewriter
\size footnotesize
\color blue
Seq[Map[Person, Amount]]
\family default
\size default
\color inherit
, showing the amounts various people paid on each day, compute a 
\family typewriter
\size footnotesize
\color blue
Map[Person, Seq[Amount]]
\family default
\size default
\color inherit
, showing the sequence of payments for each person (assume 
\family typewriter
\size footnotesize
\color blue
Person
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
Amount
\family default
\size default
\color inherit
 are type parameters; use 
\family typewriter
\size footnotesize
\color blue
.flatMap
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.toSeq
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.groupBy
\family default
\size default
\color inherit
)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mathematical induction I
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Computing a number from a sequence
\end_layout

\begin_layout Standard
Typical problem:
\end_layout

\begin_layout Itemize
Compute an integer value from the sequence of its decimal digits
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def fromDigits(digits: Seq[Int]): Int = ???
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
fromDigits(Seq(1, 3, 0, 0)) == 1300
\end_layout

\begin_layout Standard
Mathematical formulation uses 
\emph on
induction
\end_layout

\begin_layout Itemize
base case: empty sequence: 
\family typewriter
\size footnotesize
\color blue
fromDigits(Seq()) = 0
\end_layout

\begin_layout Itemize
induction step: if 
\family typewriter
\size footnotesize
\color blue
fromDigits
\family default
\size default
\color inherit
 is already computed for a sequence 
\size footnotesize
\emph on
\color blue
previous
\emph default
...
\size default
\color inherit
, how to compute it for a sequence with one more element:
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

fromDigits(Seq(
\family default
\emph on
previous...
\family typewriter
\emph default
, x)) = 10 * fromDigits(
\family default
\emph on
previous...
\family typewriter
\emph default
) + x
\end_layout

\begin_layout Standard
Translating mathematical induction into code:
\end_layout

\begin_layout Itemize
use recursion
\end_layout

\begin_layout Itemize
use standard library functions 
\family typewriter
\size footnotesize
\color blue
fold
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
scan
\family default
\size default
\color inherit
, etc.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mathematical induction II
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Writing a recursive function by hand
\end_layout

\begin_layout Itemize
base case vs.
\begin_inset space ~
\end_inset

inductive step needs to be decided in the code
\end_layout

\begin_layout Itemize
the function calls itself recursively
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def fromDigits(digits: Seq[Int]): Int =
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
 if (digits.isEmpty) 0
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
 else {
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
    val x = digits.last
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
    val rest = digits.take(digits.length - 1)
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
    
\family typewriter
10 * fromDigits(
\family default
rest) + x
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
 }
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
}
\end_layout

\begin_layout Itemize
lots of code...
\end_layout

\begin_deeper
\begin_layout Itemize
not very different from writing a loop
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Tail recursion
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
The 
\begin_inset Quotes eld
\end_inset

accumulator
\begin_inset Quotes erd
\end_inset

 technique
\end_layout

\begin_layout Standard
The code of 
\family typewriter
\size footnotesize
\color blue
fromDigits
\family default
\size default
\color inherit
 calls itself 
\emph on
in the middle
\emph default
 of an expression:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def fromDigits(...) = if (...) 0
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
else f(..., fromDigits(...), ...)
\end_layout

\begin_layout Itemize
The intermediate expression grows, causing expression overflow
\end_layout

\begin_deeper
\begin_layout Itemize
this crashes our program with a 
\begin_inset Quotes eld
\end_inset

stack overflow
\begin_inset Quotes erd
\end_inset

 error
\end_layout

\end_deeper
\begin_layout Itemize
To remedy this: use 
\series bold
tail recursion
\series default
 (
\family typewriter
\size footnotesize
\color blue
fromDigits
\family default
\size default
\color inherit
 is called at the 
\begin_inset Quotes eld
\end_inset

tail
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
@tailrec def fromDigits(...) = if (...) ...
 else {
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  val x = ...
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  fromDigits(...
 x ...)
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
}
\end_layout

\begin_layout Itemize
The 
\begin_inset Quotes eld
\end_inset

accumulator technique
\begin_inset Quotes erd
\end_inset

 makes 
\emph on
some
\emph default
 functions tail-recursive
\end_layout

\begin_deeper
\begin_layout Itemize
add another argument that accumulates the final result
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
@tailrec def fromDigits(digits: Seq[Int], res: Int) =
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  if (digits.isEmpty) res
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  else fromDigits(digits.drop(1), 10 * res + digits.head)
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mathematical induction III
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Computing a number from a sequence
\end_layout

\begin_layout Standard
The library function 
\family typewriter
\size footnotesize
\color blue
foldLeft
\family default
\size default
\color inherit
 implements general induction:
\end_layout

\begin_layout Itemize
base case is the first argument to 
\family typewriter
\size footnotesize
\color blue
foldLeft
\end_layout

\begin_layout Itemize
induction step is represented by a function 
\family typewriter
\size footnotesize
\color blue
(previous, x) 
\begin_inset Formula $\Rightarrow$
\end_inset

 next
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def fromDigits(digits: Seq[Int]): Int =
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  digits.foldLeft(0){ case (prev, x)
\family typewriter
 
\begin_inset Formula $\Rightarrow$
\end_inset

 prev * 10 + x
\family default
 }
\end_layout

\begin_layout Itemize
see other library functions: 
\family typewriter
\size footnotesize
\color blue
.foldRight
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.fold
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.reduce
\end_layout

\begin_layout Itemize
most of these functions are tail-recursive
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mathematical induction IV
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Computing a sequence from a number (
\family typewriter
iterate
\family default
)
\end_layout

\begin_layout Standard
Typical problem:
\end_layout

\begin_layout Itemize
Compute the sequence of decimal digits of a given integer
\end_layout

\begin_deeper
\begin_layout Itemize
we cannot solve this with 
\family typewriter
\size footnotesize
\color blue
.map
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.zip
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.fold
\family default
\size default
\color inherit
 etc., because the length of the resulting sequence is unknown
\end_layout

\begin_layout Itemize
we need to 
\begin_inset Quotes eld
\end_inset

unfold
\begin_inset Quotes erd
\end_inset

 into a sequence of unknown length, and terminate it when some condition
 holds
\end_layout

\end_deeper
\begin_layout Itemize
Inductive definition: given 
\begin_inset Formula $n>0$
\end_inset

, build sequence 
\begin_inset Formula $(m_{k},d_{k})$
\end_inset

 until 
\begin_inset Formula $(0,0)$
\end_inset

:
\begin_inset Formula 
\begin{align*}
(m_{0},d_{0}) & =(n,0)\\
(m_{k},d_{k}) & =\left(\frac{m_{k-1}}{10},(m_{k-1}\text{ mod }10)\right)\ \text{for}\ k>0
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
\size footnotesize
\color blue
Iterator.iterate 
\family default
\size default
\color inherit
method can do this:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
Iterator.iterate((n, 0)) { case (m, _) ⇒ (m / 10, m % 10) }
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
.takeWhile{case (m, d) ⇒ m > 0 || d > 0 }
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
.drop(1).map(p => p._2) 
\family sans
\color gray
// extract the sequence of digits
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mathematical induction V
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Computing a sequence from another sequence (
\family typewriter
scan
\family default
)
\end_layout

\begin_layout Standard
Typical problem:
\end_layout

\begin_layout Itemize
Compute partial sums of the given sequence: 
\begin_inset Formula $b_{k}=\sum_{i=0}^{k}a_{i}$
\end_inset


\end_layout

\begin_layout Itemize
Definition by induction:
\begin_inset Formula 
\begin{align*}
b_{0} & =0\\
b_{k} & =a_{k}+b_{k-1}\ \text{for}\ k>0
\end{align*}

\end_inset


\end_layout

\begin_layout Itemize
Example code:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
val a = Seq(1, 2, 3, 4)
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
val b = a.scan(0) { case (x, y) ⇒ x + y }
\family sans
\color gray
 // yields Seq(0, 1, 3, 6, 10)
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
scanLeft
\family default
\size default
\color inherit
 implements general induction:
\end_layout

\begin_deeper
\begin_layout Itemize
base case is the first argument to 
\family typewriter
\size footnotesize
\color blue
scanLeft
\end_layout

\begin_layout Itemize
induction step is represented by a function 
\family typewriter
\size footnotesize
\color blue
(previous, x) 
\begin_inset Formula $\Rightarrow$
\end_inset

 next
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
What problems can we solve now?
\end_layout

\begin_layout Itemize
Compute mathematical expressions involving arbitrary recursion
\end_layout

\begin_layout Itemize
Use tail recursion when possible
\end_layout

\begin_layout Itemize
Use arbitrary inductive (i.e.
\begin_inset space \space{}
\end_inset

recursive) formulas to:
\end_layout

\begin_deeper
\begin_layout Itemize
convert sequences to numbers (
\begin_inset Quotes eld
\end_inset

aggregate
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
create new sequences from scratch
\end_layout

\begin_layout Itemize
transform existing sequences 
\end_layout

\end_deeper
\begin_layout Standard
What problems are not solved with these tools?
\end_layout

\begin_layout Itemize
Compute non-tail recursive functions without expression overflow
\end_layout

\begin_deeper
\begin_layout Itemize
The accumulator trick does not always work
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Worked examples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Compute the smallest 
\begin_inset Formula $n$
\end_inset

 such that 
\begin_inset Formula $f(f(f(...f(1)...)>1000$
\end_inset

, where the function 
\begin_inset Formula $f$
\end_inset

 is applied 
\begin_inset Formula $n$
\end_inset

 times (use 
\family typewriter
\size footnotesize
\color blue
iterate
\family default
\size default
\color inherit
 and test on 
\begin_inset Formula $f(x)=2x+1$
\end_inset

)
\end_layout

\begin_deeper
\begin_layout Itemize
Write this as a function taking 
\begin_inset Formula $f$
\end_inset

, 
\begin_inset Formula $1$
\end_inset

, and 
\begin_inset Formula $1000$
\end_inset

 as arguments
\end_layout

\end_deeper
\begin_layout Enumerate
Find the 
\begin_inset Formula $k$
\end_inset

-th largest element in an (unsorted) sequence of integers – use 
\family typewriter
\size footnotesize
\color blue
.foldLeft
\end_layout

\begin_layout Enumerate
Find the last element of a nonempty sequence – use pattern matching, 
\family typewriter
\size footnotesize
\color blue
.drop
\family default
\size default
\color inherit
, and tail recursion
\end_layout

\begin_layout Enumerate
Implement binary search over a sorted 
\family typewriter
\size footnotesize
\color blue
Array[Int]
\family default
\size default
\color inherit
 – use tail recursion
\end_layout

\begin_layout Enumerate
For a given 
\family typewriter
\size footnotesize
\color blue
n:
\begin_inset space \space{}
\end_inset

Int
\family default
\size default
\color inherit
, compute the sequence 
\begin_inset Formula $\left(s_{0},s_{1},s_{2},...\right)$
\end_inset

 defined by 
\begin_inset Formula $s_{0}=SD(n)$
\end_inset

 and 
\begin_inset Formula $s_{k}=SD(s_{k-1})$
\end_inset

 for 
\begin_inset Formula $k>0$
\end_inset

, where 
\begin_inset Formula $SD(p)$
\end_inset

 is the sum of the decimal digits of the integer 
\begin_inset Formula $p$
\end_inset

, e.g.
 
\begin_inset Formula $SD(123)=6$
\end_inset

 (use 
\family typewriter
\size footnotesize
\color blue
iterate
\family default
\size default
\color inherit
)
\end_layout

\begin_layout Enumerate
For a given sequence 
\begin_inset Formula $\left(s_{0},s_{1},s_{2},...\right)$
\end_inset

 of type 
\family typewriter
\size footnotesize
\color blue
Iterator[T]
\family default
\size default
\color inherit
, compute the 
\begin_inset Quotes eld
\end_inset

half-speed
\begin_inset Quotes erd
\end_inset

 sequence 
\begin_inset Formula $\left(s_{0},s_{0},s_{1},s_{1},s_{2},s_{2},...\right)$
\end_inset

 – use 
\family typewriter
\size footnotesize
\color blue
.flatMap
\end_layout

\begin_layout Enumerate
Cut off a given sequence 
\begin_inset Formula $\left(s_{0},s_{1},s_{2},...\right)$
\end_inset

 at a place 
\begin_inset Formula $k$
\end_inset

 where an element 
\begin_inset Formula $s_{k}$
\end_inset

 equals some earlier element 
\begin_inset Formula $s_{i}$
\end_inset

 with 
\begin_inset Formula $i<k$
\end_inset

 – use 
\family typewriter
\size footnotesize
\color blue
.zip
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.takeWhile
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exercises III
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Compute the sum of squared digits of a given integer; e.g., 
\family typewriter
\size footnotesize
\color blue
dsq(123)=14
\end_layout

\begin_deeper
\begin_layout Itemize
Same task for an arbitrary function 
\family typewriter
\size footnotesize
\color blue
f:
\begin_inset space \space{}
\end_inset

Int
\begin_inset Formula $\Rightarrow$
\end_inset

Int
\family default
\size default
\color inherit
 instead of squaring
\end_layout

\end_deeper
\begin_layout Enumerate
For a given integer 
\begin_inset Formula $n$
\end_inset

, compute the sum of cubed digits, then the sum of cubed digits of the result,
 etc.; determine whether the resulting sequence starts repeating itself,
 and if so, whether it ever reaches 
\begin_inset Formula $1$
\end_inset


\end_layout

\begin_layout Enumerate
For a given integer 
\begin_inset Formula $n$
\end_inset

, compute the Collatz sequence: 
\begin_inset Formula $c_{0}=n$
\end_inset

 and
\begin_inset Formula 
\[
c_{k+1}=\begin{cases}
c_{k}/2 & \text{if }c_{k}\text{ is even,}\\
3c_{k}+1 & \text{if }c_{k}\text{ is odd}
\end{cases}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Stop the sequence when it reaches 
\begin_inset Formula $1$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
For 
\family typewriter
\size footnotesize
\color blue
a,b,c
\family default
\size default
\color inherit
 of type 
\family typewriter
\size footnotesize
\color blue
Set[Int]
\family default
\size default
\color inherit
, compute the set of all sets of the form 
\family typewriter
\size footnotesize
\color blue
Set(x,y,z)
\family default
\size default
\color inherit
 where 
\family typewriter
\size footnotesize
\color blue
x
\family default
\size default
\color inherit
 is from 
\family typewriter
\size footnotesize
\color blue
a
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
y
\family default
\size default
\color inherit
 from 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
, and 
\family typewriter
\size footnotesize
\color blue
z
\family default
\size default
\color inherit
 from 
\family typewriter
\size footnotesize
\color blue
c
\family default
\size default
\color inherit
 (use 
\family typewriter
\size footnotesize
\color blue
.flatMap
\family default
\size default
\color inherit
)
\end_layout

\begin_layout Enumerate
* Same task for a 
\family typewriter
\size footnotesize
\color blue
Set[Set[Int]]
\family default
\size default
\color inherit
 instead of just three sets 
\family typewriter
\size footnotesize
\color blue
a
\family default
\size default
\color inherit
,
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
,
\family typewriter
\size footnotesize
\color blue
c
\family default
\size default
\color inherit
 – use 
\family typewriter
\size footnotesize
\color blue
.foldLeft
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\end_body
\end_document
