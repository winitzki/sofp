Functional programming, chapter 8. Applicative functors and profunctors. Part 1: Practical examples

Functional programming in the mathematical spirit.

Long and difficult, yet boring explanations given in excruciating detail.

Start by reading the slides, go through the worked examples and exercises. Watch the video when you cannot fully understand something in the slides.

Chapter 8: Applicative functors and profunctors. Part 1: Practical examples

Why monads do not usually describe effects that are independent or commutative
Intuitions behind the `map2` function, coming from monads
Generalize map, map2, to map3 and mapN
How to implement map2 and map3 for `Either` to collect multiple errors from computations
Why the Future and the Reader monads already have commutative and independent effects
How to transpose a matrix by using map2 with `List`
Profunctors and their distinction from functors and contrafunctors
How to use profunctors to combine several `fold` passes into one
The distinction between applicative `fold` combinator and the monadic combinator: running average of running average
The distinction between applicative parser combinator and the monadic parser combinator: stopping at errors
Exercises

Slides: https://github.com/winitzki/talks/blob/master/ftt-fp/08-applicatives-part1.pdf

Code examples: https://github.com/winitzki/scala-examples/tree/master/chapter08/src
