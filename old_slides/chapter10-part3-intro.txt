(Part 3 of 4) Functional programming, chapter 10. Free type constructions

Functional programming in the mathematical spirit.

Long and difficult, yet boring explanations given in excruciating detail.

Start by reading the slides, go through the worked examples and exercises. Watch the video when you cannot fully understand something in the slides.

This part covers slides 20 to 26.

Chapter 10: Free type constructions

Properties of existential types; why ∃Z.Z × (Z ⇒ A) is observationally equivalent to A, and why do we need "observational equivalence" of these values
Free functor in tree encoding
Free functor: Derivation of the reduced encoding from tree encoding
Preparation for Church encoding of a free functor
Church encoding of types and type constructors, in depth
How Church encoding makes recursive types apparently non-recursive
What needs to be done for Church encoding of a parameterized type
Examples: Church-encoded List[Int], Option[A], and List[A]
How the Church encoding of type classes such as Semigroup gives rise to the notion of "inductive typeclass" 
A few general formulas for free typeclass instances in Church encoding
What properties we expect from free type constructions
Recipes for encoding arbitrary inductive type classes
Why the product type and the function type are compatible with inductive type classes (e.g. product of two monads is a monad), but disjunction type is not (e.g. disjunction of two monads is not a monad)
Examples of typeclasses that do not have tree-encoded free instances: non-inductive type classes (e.g. traversables)
The difference between inductive and co-inductive typeclasses
Stack-safe implementations of a free functor in tree and reduced encodings
Why the method `andThen` in standard Scala is not stack-safe, and how to fix that

Slides: https://github.com/winitzki/talks/blob/master/ftt-fp/10-free-constructions.pdf

Code examples: https://github.com/winitzki/scala-examples/tree/master/chapter10/src
