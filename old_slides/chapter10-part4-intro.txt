(Part 4 of 4) Functional programming, chapter 10. Free type constructions

Functional programming in the mathematical spirit.

Long and difficult, yet boring explanations given in excruciating detail.

Start by reading the slides, go through the worked examples and exercises. Watch the video when you cannot fully understand something in the slides.

This part covers slides 27 to 35.

Chapter 10: Free type constructions

Free functor implemented as the Church encoding of the tree encoding is not stack safe
Free functor implemented as the Church encoding of the reduced encoding is stack safe, but slower
Further examples of free type constructions: free contrafunctor, free pointed functor, free monad, free applicative functor
"Final tagless" in plain English (understood as Church encoding of a free monad)
How to simplify a reduced encoding when the generating type constructor is already a functor, in all the above cases
Proofs of the laws for the free type constructions, in the tree encoding
The identity law, the naturality law, the universal property, and the functor property
Definition of a typeclass-preserving map
Why the disjunction of generating types yields the solution for a free typeclass instance generated by several types
Why the disjunction of typeclass method functors yields the solution for a free typeclass instance when combining type classes
The universal formula for Church encoding of a free typeclass instance for a combination of any number of typeclasses and any number of generating types at once
Why functor composition is not a good solution for combining typeclass instances
Example: combined free applicative/free monad, interpreted into the Future monad
How the interpreter preserves parallelism when running the applicative `ap` or `zip` methods, while implementing sequential composition when running the `flatMap` method
Exercises

Slides: https://github.com/winitzki/talks/blob/master/ftt-fp/10-free-constructions.pdf

Code examples: https://github.com/winitzki/scala-examples/tree/master/chapter10/src
