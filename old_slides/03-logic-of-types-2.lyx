#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[Chapter 3: Logic of Types II]{Chapter 3: The Logic of Types, Part II}
\subtitle{Disjunction types}
\author{Sergei Winitzki}
\date{December 8, 2017}
\institute[ABTB]{Academy by the Bay}
\setbeamertemplate{navigation symbols}{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Tuples with names: 
\begin_inset Quotes eld
\end_inset

case classes
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Pair of values: 
\family typewriter
\size footnotesize
\color blue
val a:
\begin_inset space \space{}
\end_inset

(Int, String) = (123, "xyz")
\end_layout

\begin_layout Itemize
For convenience, we can define a name for this type:
\begin_inset Newline newline
\end_inset

 
\family typewriter
\size footnotesize
\color blue
type MyPair = (Int, String); val a:
\begin_inset space \space{}
\end_inset

MyPair = (123, "xyz")
\end_layout

\begin_layout Itemize
We can define a name for each value and also for the type:
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

case class MySocks(size:
\begin_inset space \space{}
\end_inset

Double, color:
\begin_inset space \space{}
\end_inset

String)
\begin_inset Newline newline
\end_inset

val a:
\begin_inset space \space{}
\end_inset

MySocks = MySocks(10.5, "white")
\end_layout

\begin_layout Itemize
Case classes can be nested: 
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

case class BagOfSocks(socks:
\begin_inset space \space{}
\end_inset

MySocks, count:
\begin_inset space \space{}
\end_inset

Int)
\begin_inset Newline newline
\end_inset

val bag = BagOfSocks(MySocks(10.5, "white"), 6)
\end_layout

\begin_layout Itemize
Parts of the case class can be accessed by name: 
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

val c:
\begin_inset space \space{}
\end_inset

String = bag.socks.color
\end_layout

\begin_layout Itemize
Parts can be given in any order by using names:
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

val y = MySocks(color = "black", size = 11.0) 
\end_layout

\begin_layout Itemize
Default values can be defined for parts: 
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

case class Shirt(color:
\begin_inset space \space{}
\end_inset

String = "blue", hasHoles:
\begin_inset space \space{}
\end_inset

Boolean = false)
\begin_inset Newline newline
\end_inset

val shirt = Shirt(hasHoles = true)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Tuples with one element and with zero elements
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A tuple type expression 
\family typewriter
\size footnotesize
\color blue
(Int, String)
\family default
\size default
\color inherit
 is special syntax for parameterized type 
\family typewriter
\size footnotesize
\color blue
Tuple2[Int, String]
\end_layout

\begin_layout Itemize
Case class with no parts is called a 
\begin_inset Quotes eld
\end_inset

case object
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
What are tuples with one element or with zero elements?
\end_layout

\begin_deeper
\begin_layout Itemize
There is no 
\family typewriter
\size footnotesize
\color blue
Tuple0
\family default
\size default
\color inherit
 â€“ it is called 
\family typewriter
\size footnotesize
\color blue
Unit
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tuples
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Case classes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(123, "xyz"):
\begin_inset space \space{}
\end_inset

Tuple2[Int, String]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
case class A(x:
\begin_inset space \space{}
\end_inset

Int, y:
\begin_inset space \space{}
\end_inset

String)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(123,):
\begin_inset space \space{}
\end_inset

Tuple1[Int]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
case class B(z:
\begin_inset space \space{}
\end_inset

Int)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
(): Unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
case class C(); case object C
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
Case classes can have one or more type parameters: 
\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
case class Pairs[A, B](left:
\begin_inset space \space{}
\end_inset

A, right:
\begin_inset space \space{}
\end_inset

B, count:
\begin_inset space \space{}
\end_inset

Int)
\end_layout

\begin_layout Itemize
The 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size footnotesize
\color blue
Tuple
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

 types could be defined by this code:
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

case class Tuple2[A, B](_1:
\begin_inset space \space{}
\end_inset

A, _2:
\begin_inset space \space{}
\end_inset

B)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Pattern-matching syntax for case classes
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Scala allows pattern matching in two places:
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
val 
\family default
\emph on
pattern
\family typewriter
\emph default
 = ...

\family default
\size default
\color inherit
 (value assignment)
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
case 
\family default
\emph on
pattern
\family typewriter
\emph default
 
\family default

\begin_inset Formula $\Rightarrow$
\end_inset


\family typewriter
 ...

\family default
\size default
\color inherit
 (partial function)
\end_layout

\begin_layout Standard
Examples with case classes:
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
val a = MySocks(10.5, "white")
\begin_inset Newline newline
\end_inset

val MySocks(x, y) = a
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
val f:
\begin_inset space \space{}
\end_inset

BagOfSocks
\begin_inset Formula $\Rightarrow$
\end_inset

Int = { case BagOfSocks(MySocks(s, c), z)
\begin_inset Formula $\Rightarrow$
\end_inset

...}
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
def f(b:
\begin_inset space \space{}
\end_inset

BagOfSocks):
\begin_inset space \space{}
\end_inset

String = b match { 
\begin_inset Newline newline
\end_inset


\begin_inset space \space{}
\end_inset

 
\begin_inset space \space{}
\end_inset

case BagOfSocks(MySocks(s, c), z) 
\begin_inset Formula $\Rightarrow$
\end_inset

 c
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Itemize
Note: 
\family typewriter
\size footnotesize
\color blue
s
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
c
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
z
\family default
\size default
\color inherit
 are defined as 
\series bold
pattern variables
\series default
 of correct types
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Disjunction types
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Motivational examples:
\end_layout

\begin_deeper
\begin_layout Itemize
The roots of a quadratic equation can be either a pair, or one, or none
\end_layout

\begin_layout Itemize
Binary search gives either a found value and an index, or nothing
\end_layout

\begin_layout Itemize
Computations that give a value or an error with a text message
\end_layout

\begin_layout Itemize
Computer game states: several kinds of rooms, types of players, etc.
\end_layout

\begin_deeper
\begin_layout Itemize
Each kind of room may have different sets of properties
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
We would like to be able to represent 
\emph on
disjunctions
\emph default
 of domains
\end_layout

\begin_deeper
\begin_layout Itemize
A value that is 
\emph on
either
\emph default
 
\family typewriter
\size footnotesize
\color blue
(Complex, Complex)
\family default
\size default
\color inherit
 or 
\family typewriter
\size footnotesize
\color blue
Complex
\family default
\size default
\color inherit
 or empty 
\family typewriter
\size footnotesize
\color blue
()
\end_layout

\begin_layout Itemize
A value that is 
\emph on
either
\emph default
 
\family typewriter
\size footnotesize
\color blue
(Int, Int)
\family default
\size default
\color inherit
 or empty 
\family typewriter
\size footnotesize
\color blue
()
\end_layout

\begin_layout Itemize
A value that is 
\emph on
either
\emph default
 an 
\family typewriter
\size footnotesize
\color blue
Int
\family default
\size default
\color inherit
 value or a 
\family typewriter
\size footnotesize
\color blue
String
\family default
\size default
\color inherit
 error message
\end_layout

\begin_layout Itemize
A value that is one case class out of a number of case classes
\end_layout

\end_deeper
\begin_layout Itemize
Disjunction types represent such values as types
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Disjunction types: mathematical point of view
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The type of the function's argument represents the function's 
\emph on
domain
\end_layout

\begin_deeper
\begin_layout Itemize
For example: 
\begin_inset Formula $f(x)$
\end_inset

 where 
\begin_inset Formula $x\in\mathbb{R}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
We would like to be able to represent arbitrary 
\emph on
disjoint
\emph default
 domains
\end_layout

\begin_deeper
\begin_layout Itemize
For example: 
\begin_inset Formula $x$
\end_inset

 is either a point on a line or a point on a surface
\end_layout

\end_deeper
\begin_layout Itemize
In functional programming, the disjoint domains are always 
\series bold
labeled
\end_layout

\begin_deeper
\begin_layout Itemize
For example: 
\begin_inset Formula $x\in\left(\text{left},\mathbb{R}\right)\cup\left(\text{right},\mathbb{R}^{2}\right)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The disjoint union is always an 
\emph on
exclusive-or
\end_layout

\begin_layout Itemize
Labels come from a fixed, special set of symbols
\end_layout

\end_deeper
\begin_layout Itemize
Given any such 
\begin_inset Formula $x$
\end_inset

, we can determine its 
\begin_inset Quotes eld
\end_inset

side
\begin_inset Quotes erd
\end_inset

 of the union
\end_layout

\begin_layout Itemize
We can obtain the corresponding value in each case
\end_layout

\end_deeper
\begin_layout Itemize
In Scala, this type is denoted 
\family typewriter
\size footnotesize
\color blue
Either[Double, (Double, Double)]
\end_layout

\begin_layout Itemize
Pattern-matching is used to define expressions with such types
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Disjunction type: 
\family typewriter
Either[A, B]
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Example: 
\family typewriter
\size footnotesize
\color blue
Either[String, Int]
\family default
\size default
\color inherit
 (may be used for error reporting)
\end_layout

\begin_layout Itemize
Represents a value that is 
\emph on
either
\emph default
 a 
\family typewriter
\size footnotesize
\color blue
String
\family default
\size default
\color inherit
 or an 
\family typewriter
\size footnotesize
\color blue
Int
\family default
\size default
\color inherit
 (but not both)
\end_layout

\begin_layout Itemize
Example values: 
\family typewriter
\size footnotesize
\color blue
Left("blah")
\family default
\size default
\color inherit
 or 
\family typewriter
\size footnotesize
\color blue
Right(123)
\end_layout

\begin_layout Itemize
Use pattern matching to distinguish 
\begin_inset Quotes eld
\end_inset

left
\begin_inset Quotes erd
\end_inset

 from 
\begin_inset Quotes eld
\end_inset

right
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def logError(x: Either[String, Int]): Int = x match {
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  case Left(error) 
\begin_inset Formula $\Rightarrow$
\end_inset

 println(s"Got error: $error"); -1
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  case Right(res) 
\begin_inset Formula $\Rightarrow$
\end_inset

 res
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
}
\family sans
\color gray
 // Left(
\begin_inset Quotes eld
\end_inset

blah
\begin_inset Quotes erd
\end_inset

) and Right(123) are possible values of type Either[String, Int]
\end_layout

\begin_layout Itemize
Now 
\family typewriter
\size footnotesize
\color blue
logError(Right(123))
\family default
\size default
\color inherit
 returns 
\family typewriter
\size footnotesize
\color blue
123
\family default
\size default
\color inherit
 while 
\family typewriter
\size footnotesize
\color blue
logError(Left("bad result"))
\family default
\size default
\color inherit
 prints the error and returns 
\family typewriter
\size footnotesize
\color blue
-1
\end_layout

\begin_layout Itemize
The 
\family typewriter
\size footnotesize
\color blue
case
\family default
\size default
\color inherit
 expression chooses among possible values of a given type
\end_layout

\begin_deeper
\begin_layout Itemize
Note the similarity with this code:
\end_layout

\end_deeper
\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def f(x: Int): Int = x match {
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  case 0 
\begin_inset Formula $\Rightarrow$
\end_inset

 println(s"error: must be nonzero"); -1
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  case 1 
\begin_inset Formula $\Rightarrow$
\end_inset

 println(s"error: must be greater than 1"); -1
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  case res 
\begin_inset Formula $\Rightarrow$
\end_inset

 res
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
}
\family sans
\color gray
 // 0 and 1 are possible values of type Int
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
More general disjunction types: trait + case classes
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
A future version of Scala 3 has a short syntax for disjunction types:
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
type MyIntOrStr = Int | String
\end_layout

\begin_layout Itemize
more generally, 
\family typewriter
\size footnotesize
\color blue
type MyType = List[Int] | (Int, Boolean) | MySocks
\end_layout

\begin_deeper
\begin_layout Itemize
Some libraries (scalaz, cats, shapeless) also provide shorter syntax
\end_layout

\end_deeper
\begin_layout Standard
For now, in Scala 2, we use the 
\begin_inset Quotes eld
\end_inset

long syntax
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
(specify names for each case and for each part, use 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size footnotesize
\color blue
trait
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

 / 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size footnotesize
\color blue
extends
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
sealed trait MyType
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
final case class HaveListInt(x: List[Int]) extends MyType
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
final case class HaveIntBool(s: Int, b: Boolean) extends MyType
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
final case class HaveSocks(socks: MySocks) extends MyType
\end_layout

\begin_layout Standard
Pattern-matching example:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
val x: MyType = if (...) HaveSocks(...) else HaveListInt(...)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
...
 
\family sans
\color gray
// some other code here
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
x match {
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  case HaveListInt(lst) 
\begin_inset Formula $\Rightarrow$
\end_inset

 ...
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  case HaveIntBool(p, q) 
\begin_inset Formula $\Rightarrow$
\end_inset

 ...
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  case HaveSocks(s) 
\begin_inset Formula $\Rightarrow$
\end_inset

 ...
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
}
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
The most often used disjunction type: 
\family typewriter
Option[T]
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
A simple implementation: 
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
sealed trait Option[T]
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
final case class Some[T](t: T) extends Option[T]
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
final case object None extends Option[Nothing]
\end_layout

\begin_layout Standard
Pattern-matching example:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
def saveDivide(x: Double, y: Double): Option[Double] = {
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  if (y == 0) None else Some(x / y)
\end_layout

\begin_layout LyX-Code

\family sans
\size footnotesize
\color gray
// Example usage:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
val result = safeDivide(1.0, q) match {
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  case Some(x) 
\begin_inset Formula $\Rightarrow$
\end_inset

 previousResult * x
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  case None 
\begin_inset Formula $\Rightarrow$
\end_inset

 previousResult 
\family sans
\color gray
// provide a default value
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
}
\end_layout

\begin_layout Standard
Many Scala library functions return an 
\family typewriter
\size footnotesize
\color blue
Option[T]
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
find, headOption, reduceOption, get
\family default
\size default
\color inherit
 (for
\family typewriter
\size footnotesize
\color blue
 Map[K, V]
\family default
\size default
\color inherit
), 
\family typewriter
\size footnotesize
\color blue
lift
\family default
\size default
\color inherit
 for 
\family typewriter
\size footnotesize
\color blue
Array[T]
\end_layout

\begin_deeper
\begin_layout Itemize
Note: 
\family typewriter
\size footnotesize
\color blue
Option[T]
\family default
\size default
\color inherit
 is 
\begin_inset Quotes eld
\end_inset

collection-like
\begin_inset Quotes erd
\end_inset

: has 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
filter
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
exists
\family default
\size default
\color inherit
...
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Worked examples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
What problems can we solve now?
\end_layout

\begin_deeper
\begin_layout Itemize
Represent values from disjoint domains as a single type
\end_layout

\begin_layout Itemize
Use such values in collections safely
\end_layout

\end_deeper
\begin_layout Itemize
Define a disjunction type 
\family typewriter
\size footnotesize
\color blue
DayOfWeek
\family default
\size default
\color inherit
 representing the seven days.
\end_layout

\begin_layout Itemize
Modify 
\family typewriter
\size footnotesize
\color blue
DayOfWeek
\family default
\size default
\color inherit
 so that the values additionally represent a restaurant name and total amount
 for Fridays and a wake-up time on Saturdays.
\end_layout

\begin_layout Itemize
Define a disjunction type 
\family typewriter
\size footnotesize
\color blue
RootsOfQuadratic
\family default
\size default
\color inherit
 that represents real-valued roots of the equation 
\begin_inset Formula $x^{2}+bx+c=0$
\end_inset

 for arbitrary real 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $c$
\end_inset

.
 (The cases of interest are: no real roots; two equal roots; two unequal
 roots.) Implement 
\family typewriter
\size footnotesize
\color blue
solve2:
\begin_inset space \space{}
\end_inset

((Double, Double)) 
\begin_inset Formula $\Rightarrow$
\end_inset

 RootsOfQuadratic
\family default
\size default
\color inherit
.
\end_layout

\begin_layout Itemize
Define a function 
\family typewriter
\size footnotesize
\color blue
rootAverage:
\begin_inset space \space{}
\end_inset

RootsOfQuadratic 
\begin_inset Formula $\Rightarrow$
\end_inset

 Option[Double]
\family default
\size default
\color inherit
 that computes the average value of all real roots, returning 
\family typewriter
\size footnotesize
\color blue
None
\family default
\size default
\color inherit
 if the average is undefined.
\end_layout

\begin_layout Itemize
Generate 100 random coefficients 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $c$
\end_inset

 (uniformly distributed between 
\begin_inset Formula $-1$
\end_inset

 and 
\begin_inset Formula $1$
\end_inset

) and compute the mean of 
\family typewriter
\size footnotesize
\color blue
rootAverage
\family default
\size default
\color inherit
 for them.
\end_layout

\begin_layout Itemize
Implement 
\family typewriter
\size footnotesize
\color blue
def f[A, B]:
\begin_inset space \space{}
\end_inset

((Option[A], Option[B])) 
\begin_inset Formula $\Rightarrow$
\end_inset

 Option[(A, B)]
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exercises II
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Define a disjunction type 
\family typewriter
\size footnotesize
\color blue
CellState
\family default
\size default
\color inherit
 representing the visual state of one cell in the 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Minesweeper"
target "https://en.wikipedia.org/wiki/Minesweeper_(video_game)"
literal "false"

\end_inset


\begin_inset Quotes erd
\end_inset

 game: A cell can be either closed, or display a bomb, or be open and display
 the number of neighbor bombs.
\end_layout

\begin_layout Enumerate
Define a function from 
\family typewriter
\size footnotesize
\color blue
Seq[Seq[CellState]]
\family default
\size default
\color inherit
 to 
\family typewriter
\size footnotesize
\color blue
Int
\family default
\size default
\color inherit
, counting the total number of cells with 
\begin_inset Formula $0$
\end_inset

 neighbor bombs shown.
\end_layout

\begin_layout Enumerate
Define a disjunction type 
\family typewriter
\size footnotesize
\color blue
RootOfLinear
\family default
\size default
\color inherit
 representing all possibilities for the solution of the equation 
\begin_inset Formula $ax+b=0$
\end_inset

 for arbitrary real 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

.
 (The cases of interest are: no roots; one root; all 
\begin_inset Formula $x$
\end_inset

 are roots.) Implement the solution as a function 
\family typewriter
\size footnotesize
\color blue
solve1:
\begin_inset space \space{}
\end_inset

((Double, Double)) 
\begin_inset Formula $\Rightarrow$
\end_inset

 RootOfLinear
\family default
\size default
\color inherit
.
\end_layout

\begin_layout Enumerate
Given a 
\family typewriter
\size footnotesize
\color blue
Seq[(Double, Double)]
\family default
\size default
\color inherit
 containing pairs 
\begin_inset Formula $\left(a,b\right)$
\end_inset

 of the coefficients of 
\begin_inset Formula $ax+b=0$
\end_inset

, use 
\family typewriter
\size footnotesize
\color blue
solve1
\family default
\size default
\color inherit
 to produce a 
\family typewriter
\size footnotesize
\color blue
Seq[Double]
\family default
\size default
\color inherit
 containing the roots of that equation when a unique root exists.
\end_layout

\begin_layout Enumerate
Define fully parametric functions having these types: 
\end_layout

\begin_deeper
\begin_layout Enumerate

\family typewriter
\size footnotesize
\color blue
def f1[A, B]:
\begin_inset space \space{}
\end_inset

Option[(A, B)] 
\begin_inset Formula $\Rightarrow$
\end_inset

 (Option[A], Option[B])
\end_layout

\begin_layout Enumerate

\family typewriter
\size footnotesize
\color blue
def f2[A, B]:
\begin_inset space \space{}
\end_inset

Either[A,B] 
\begin_inset Formula $\Rightarrow$
\end_inset

 (Option[A], Option[B])
\end_layout

\begin_layout Enumerate

\family typewriter
\size footnotesize
\color blue
def f3[A,B,C]:
\begin_inset space \space{}
\end_inset

Either[A, Either[B,C]] 
\begin_inset Formula $\Rightarrow$
\end_inset

 Either[Either[A,B], C]
\end_layout

\end_deeper
\end_deeper
\end_body
\end_document
