Functional programming, chapter 9. Traversable functors

Functional programming in the mathematical spirit.

Long and difficult, yet boring explanations given in excruciating detail.

Start by reading the slides, go through the worked examples and exercises. Watch the video when you cannot fully understand something in the slides.

Chapter 9: Traversable functors

Motivation for the `traverse` operation
Deriving the `sequence` operation to simplify `traverse`
How to implement `sequence` for any polynomial functor
Examples of non-traversable functors: infinite list, and non-polynomial functors
Motivation for laws of `traverse` from category theory
Deriving the laws for `sequence`
Constructions for traversable functors and bitraversable bifunctors, with proofs of laws
Why infinite lists fail to satisfy traversable laws
Deriving `foldMap` by specializing to a constant applicative functor
Reasons to introduce the `Foldable` type class
Implementing `foldLeft` via `foldMap`
Traversable contrafunctors and profunctors exist, but are not useful
Examples of using traversable and foldable: decorating trees
Implementing `scanLeft` as a traversal with respect to a State monad
Why breadth-first tree traversal or depth level computation cannot be represented via a traversal with a State monad
Naturality with respect to an applicative functor
Exercises

Slides: https://github.com/winitzki/talks/blob/master/ftt-fp/09-traversables.pdf

Code examples: https://github.com/winitzki/scala-examples/tree/master/chapter09/src
