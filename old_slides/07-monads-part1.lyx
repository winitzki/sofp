#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[Chapter 7: Functor-lifted computations II]{Chapter 7: Computations lifted to a functor context II. Monads and semimonads}
\subtitle{Part 1: Intuitions, examples, use cases}
\author{Sergei Winitzki}
\date{2018-03-25}
\institute[ABTB]{Academy by the Bay}
\setbeamertemplate{headline}{} % disable headline at top
\setbeamertemplate{navigation symbols}{} % disable navigation bar at bottom
\usepackage[all]{xy}
\usepackage[nocenter]{qtree}
\makeatletter
% Macros to assist LyX with XYpic when using scaling.
\newcommand{\xyScaleX}[1]{%
\makeatletter
\xydef@\xymatrixcolsep@{#1}
\makeatother
} % end of \xyScaleX
\makeatletter
\newcommand{\xyScaleY}[1]{%
\makeatletter
\xydef@\xymatrixrowsep@{#1}
\makeatother
} % end of \xyScaleY
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Beginning of slides.
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Computations within a functor context: Semimonads
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Intuitions behind adding more 
\begin_inset Quotes eld
\end_inset

generator arrows
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Example of nested iterations: 
\size footnotesize

\begin_inset Formula 
\[
\sum_{i=1}^{n}\sum_{j=1}^{n}\sum_{k=1}^{n}f(i,j,k)
\]

\end_inset


\end_layout

\begin_layout Standard
Using Scala's 
\family typewriter
\size footnotesize
\color blue
for
\family default
\size default
\color inherit
/
\family typewriter
\size footnotesize
\color blue
yield
\family default
\size default
\color inherit
 syntax (
\begin_inset Quotes eld
\end_inset

functor block
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "49col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
(for { i 
\begin_inset Formula $\leftarrow$
\end_inset

 1 to n
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
    j 
\begin_inset Formula $\leftarrow$
\end_inset

 1 to n
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
    k 
\begin_inset Formula $\leftarrow$
\end_inset

 1 to n
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  } yield f(i, j, k)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
).sum
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "49col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
(1 to n).flatMap { i 
\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
   (1 to n).flatMap { j 
\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
     (1 to n).map { k 
\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
       f(i, j, k)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  }}}.sum
\end_layout

\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
 replaces the last left arrow, 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 replaces other left arrows
\end_layout

\begin_deeper
\begin_layout Itemize
When the functor is 
\emph on
also
\emph default
 filterable, we can use 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size footnotesize
\color blue
if
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

 as well
\end_layout

\end_deeper
\begin_layout Itemize
Standard library defines 
\family typewriter
\size footnotesize
\color blue
flatMap()
\family default
\size default
\color inherit
 as replacement of 
\family typewriter
\size footnotesize
\color blue
map() 
\begin_inset Formula $\circ$
\end_inset

 flatten
\family default
\size default
\color inherit
 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
(1 to n).map(j 
\begin_inset Formula $\Rightarrow$
\end_inset

 ...).flatten
\family default
\size default
\color inherit
 is 
\family typewriter
\size footnotesize
\color blue
(1 to n).flatMap(j 
\begin_inset Formula $\Rightarrow$
\end_inset

 ...)
\family default
\size default
\color inherit
 
\end_layout

\end_deeper
\begin_layout Itemize
Functors having 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
/
\family typewriter
\size footnotesize
\color blue
flatten
\family default
\size default
\color inherit
 are 
\begin_inset Quotes eld
\end_inset

flattenable
\begin_inset Quotes erd
\end_inset

 or 
\series bold
semimonads
\end_layout

\begin_deeper
\begin_layout Itemize
Most of them also have method 
\family typewriter
\size footnotesize
\color blue
pure:
\begin_inset space \space{}
\end_inset

A 
\begin_inset Formula $\Rightarrow$
\end_inset

 F[A]
\family default
\size default
\color inherit
 and so are 
\series bold
monads
\end_layout

\begin_deeper
\begin_layout Itemize
The method 
\family typewriter
\size footnotesize
\color blue
pure
\family default
\size default
\color inherit
 is not relevant in the functor block
\end_layout

\begin_layout Itemize
We will not need 
\family typewriter
\size footnotesize
\color blue
pure
\family default
\size default
\color inherit
 in this part of the tutorial; focus on semimonads
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
How 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 works with lists
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
consider 
\family typewriter
\size footnotesize
\color blue
List(x1, x2, x3).flatMap(x 
\begin_inset Formula $\Rightarrow$
\end_inset

 f(x))
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Itemize
assume that 
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
f: X 
\begin_inset Formula $\Rightarrow$
\end_inset

 List[Y]
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
f(x1) = List(y0, y1)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
f(x2) = List(y2)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
f(x3) = List(y3, y4, y5, y6)
\end_layout

\begin_layout Itemize
then the result is 
\family typewriter
\size footnotesize
\color blue
List(y0, y1, y2, y3, y4, y5, y6)
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Itemize
if we first do 
\family typewriter
\size footnotesize
\color blue
.map(f)
\family default
\size default
\color inherit
 then 
\family typewriter
\size footnotesize
\color blue
flatten
\family default
\size default
\color inherit
:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
List(x1, x2, x3).map(f).flatten =
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  List(List(y0, y1), List(y2), List(y3, y4, y5, y6)).flatten =
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  List(y0, y1, y2, y3, y4, y5, y6)
\family default
\size default
\color inherit
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What is 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 doing with the data in a collection?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Consider this schematic code, using 
\family typewriter
\size footnotesize
\color blue
Seq
\family default
\size default
\color inherit
 as the container type:
\family typewriter
\size footnotesize
\color blue
 
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "49col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
val result = for {
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  i 
\begin_inset Formula $\leftarrow$
\end_inset

 1 to m
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  j 
\begin_inset Formula $\leftarrow$
\end_inset

 1 to n
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  x = f(i, j)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  k 
\begin_inset Formula $\leftarrow$
\end_inset

 1 to p
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  y = g(i, j, k)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
} yield h(x,y)
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "49col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
val result = {
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  (1 to m).flatMap { i 
\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
    (1 to n).flatMap { j 
\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
      val x = f(i, j)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
      (1 to p).map { k 
\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
        val y = g(i, j, k)
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
        h(x,y)  } } } }
\end_layout

\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Computations are repeated for all 
\begin_inset Formula $i$
\end_inset

, for all 
\begin_inset Formula $j$
\end_inset

, etc., from each collection
\end_layout

\begin_layout Itemize
All 
\begin_inset Quotes eld
\end_inset

generator lines
\begin_inset Quotes erd
\end_inset

 must use the same container type
\end_layout

\begin_deeper
\begin_layout Itemize
Each generator line finally computes a container of 
\emph on
that
\emph default
 type
\end_layout

\begin_layout Itemize
The total number of resulting data items is 
\begin_inset Formula $\leq m*n*p$
\end_inset


\family typewriter
\size footnotesize
\color blue
 
\end_layout

\begin_layout Itemize
All the resulting data items must fit within 
\emph on
the same
\emph default
 container type!
\end_layout

\begin_layout Itemize

\size footnotesize
The set of 
\emph on
container capacity counts
\emph default
 must be closed under multiplication
\end_layout

\end_deeper
\begin_layout Itemize
What container types have this property?
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
Seq,
\family default
\size default
\color inherit
 
\family typewriter
\size footnotesize
\color blue
NonEmptyList
\family default
\size default
\color inherit
 – can hold 
\emph on
any
\emph default
 number of elements 
\begin_inset Formula $\geq$
\end_inset

 min.
\begin_inset space \space{}
\end_inset

count
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
Option
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Either
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Try
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Future
\family default
\size default
\color inherit
 – can hold 
\begin_inset Formula $0$
\end_inset

 or 
\begin_inset Formula $1$
\end_inset

 elements (
\begin_inset Quotes eld
\end_inset

pass/fail
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Tree-like
\begin_inset Quotes erd
\end_inset

 containers, e.g.
\begin_inset space \space{}
\end_inset

can hold only 
\begin_inset Formula $3$
\end_inset

, 
\begin_inset Formula $6$
\end_inset

, 
\begin_inset Formula $9$
\end_inset

, 
\begin_inset Formula $12$
\end_inset

, ...
\begin_inset space \space{}
\end_inset

elements
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Non-standard
\begin_inset Quotes erd
\end_inset

 containers: 
\begin_inset Formula $F^{A}\equiv\text{String}\Rightarrow A$
\end_inset

; 
\begin_inset Formula $F^{A}\equiv\left(A\Rightarrow\text{Int}\right)\Rightarrow\text{Int}$
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Worked examples I: List-like monads
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle

\family typewriter
\size footnotesize
\color blue
Seq
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
NonEmptyList
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Iterator
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Stream
\end_layout

\begin_layout Standard
Typical tasks for 
\begin_inset Quotes eld
\end_inset

list-like
\begin_inset Quotes erd
\end_inset

 monads:
\end_layout

\begin_layout Itemize
Create a list of all combinations or all permutations of a sequence
\end_layout

\begin_layout Itemize
Traverse a 
\begin_inset Quotes eld
\end_inset

solution tree
\begin_inset Quotes erd
\end_inset

 with DFS and filter out incorrect solutions
\end_layout

\begin_deeper
\begin_layout Itemize
Can use eager (
\family typewriter
\size footnotesize
\color blue
Seq
\family default
\size default
\color inherit
) or lazy (
\family typewriter
\size footnotesize
\color blue
Iterator
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Stream
\family default
\size default
\color inherit
) evaluation strategies
\end_layout

\begin_layout Itemize
Usually, list-like containers have many additional methods
\end_layout

\begin_deeper
\begin_layout Itemize
append, prepend, concat, fill, fold, scan, etc.
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
Worked examples: see code
\end_layout

\begin_layout Enumerate
All permutations of 
\family typewriter
\size footnotesize
\color blue
Seq("a", "b", "c")
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Enumerate
All subsets of 
\family typewriter
\size footnotesize
\color blue
Set("a", "b", "c")
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Enumerate
All subsequences of length 3 out of a given sequence
\end_layout

\begin_layout Enumerate
Generalize examples 1-3 to support arbitrary length 
\begin_inset Formula $n$
\end_inset

 instead of 3
\end_layout

\begin_layout Enumerate
All solutions of the 
\begin_inset Quotes eld
\end_inset

8 queens
\begin_inset Quotes erd
\end_inset

 problem
\end_layout

\begin_layout Enumerate
Generalize example 5 to solve 
\begin_inset Formula $n$
\end_inset

-queens problem
\end_layout

\begin_layout Enumerate
Transform Boolean formulas between CNF and DNF 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Intuitions for pass/fail monads
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle

\family typewriter
\size footnotesize
\color blue
Option
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Either
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Try
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
Future
\end_layout

\begin_layout Itemize
Container 
\begin_inset Formula $F^{A}$
\end_inset

 can hold 
\begin_inset Formula $n=1$
\end_inset

 or 
\begin_inset Formula $n=0$
\end_inset

 values of type 
\begin_inset Formula $A$
\end_inset


\end_layout

\begin_layout Itemize
Such containers will have methods to create 
\begin_inset Quotes eld
\end_inset

pass
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

fail
\begin_inset Quotes erd
\end_inset

 values
\end_layout

\begin_layout Standard
Schematic example of a functor block program using the 
\family typewriter
\size footnotesize
\color blue
Try
\family default
\size default
\color inherit
 functor:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
val result: Try[A] = for { 
\family roman
\color darkgray
// computations in the 
\family default
Try
\family roman
 functor
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  x 
\begin_inset Formula $\leftarrow$
\end_inset

 Try(...) 
\family roman
\color darkgray
// first computation; may fail
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  y = f(x) 
\family roman
\color darkgray
// no possibility of failure in this line
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  if p(y) 
\family roman
\color darkgray
// the entire expression will fail if this is false
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  z 
\begin_inset Formula $\leftarrow$
\end_inset

 Try(g(x, y))
\family roman
\color darkgray
 // may fail here
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
  r 
\begin_inset Formula $\leftarrow$
\end_inset

 Try(...)
\family roman
\color darkgray
 // may fail here as well
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
} yield r 
\family roman
\color darkgray
//  
\family default
r
\family roman
 is of type 
\family default
A
\family roman
, so 
\family default
result
\family roman
 is of type 
\family default
Try[A]
\end_layout

\begin_layout Itemize
Computations may yield a result (
\begin_inset Formula $n=1$
\end_inset

), or may fail (
\begin_inset Formula $n=0$
\end_inset

)
\end_layout

\begin_layout Itemize
The functor block chains several such computations 
\emph on
sequentially
\end_layout

\begin_deeper
\begin_layout Itemize
Computations are sequential even if using the 
\family typewriter
\size footnotesize
\color blue
Future
\family default
\size default
\color inherit
 functor!
\end_layout

\begin_layout Itemize
Once any computation fails, the entire functor block fails (
\begin_inset Formula $0*n=0$
\end_inset

)
\end_layout

\begin_layout Itemize
Only if 
\emph on
all
\emph default
 computations succeed, the functor block returns 
\emph on
one
\emph default
 value
\end_layout

\begin_layout Itemize
Filtering can also make the entire functor block fail
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Flat
\begin_inset Quotes erd
\end_inset

 functor block replaces a chain of nested 
\family typewriter
\size footnotesize
\color blue
if/else
\family default
\size default
\color inherit
 or 
\family typewriter
\size footnotesize
\color blue
match/case
\family default
\size default
\color inherit
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Worked examples II: Pass/fail monads
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Type constructors:
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
Option[A]
\family default
\size default
\color inherit
 
\begin_inset Formula $\equiv1+A$
\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
Either[Z, A]
\family default
\size default
\color inherit
 
\begin_inset Formula $\equiv Z+A$
\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
Try[A]
\family default
\size default
\color inherit
 
\begin_inset Formula $\equiv$
\end_inset


\family typewriter
\size footnotesize
\color blue
 Either[Throwable, A]
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Typical tasks for pass/fail monads:
\end_layout

\begin_layout Itemize
Perform a linear sequence of computations that may fail
\end_layout

\begin_layout Itemize
Avoid crashing on failure, instead return an 
\emph on
error value
\end_layout

\begin_layout Standard
Worked examples: see code
\end_layout

\begin_layout Enumerate
Read values of Java properties, checking that they all exist
\end_layout

\begin_layout Enumerate
Obtain values from 
\family typewriter
\size footnotesize
\color blue
Future
\family default
\size default
\color inherit
 computations in sequence
\end_layout

\begin_layout Enumerate
Make arithmetic safe by returning error messages in 
\family typewriter
\size footnotesize
\color blue
Either
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Enumerate
Pass/fail chain: sequencing computations that may throw an exception
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Intuitions for tree-like monads
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Examples of tree-like recursive type constructors:
\end_layout

\begin_layout Itemize
\begin_inset Formula $F^{A}\equiv A+F^{A}\times F^{A}$
\end_inset

 (binary tree)
\end_layout

\begin_layout Itemize
\begin_inset Formula $F^{A}\equiv A+S^{F^{A}}$
\end_inset

 (
\begin_inset Formula $S$
\end_inset

-shaped tree, where 
\begin_inset Formula $S$
\end_inset

 is a functor)
\end_layout

\begin_layout Itemize
\begin_inset Formula $F^{A}\equiv A\times A+F^{A}\times F^{A}$
\end_inset

 (binary tree with binary leaves)
\end_layout

\begin_layout Itemize
\begin_inset Formula $F^{A}\equiv S^{A}+S^{F^{A}}$
\end_inset

 (
\begin_inset Formula $S$
\end_inset

-shaped tree with 
\begin_inset Formula $S$
\end_inset

-shaped leaves)
\end_layout

\begin_layout Standard
Implementing 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 for these type constructors is recursive
\end_layout

\begin_layout Itemize
See example code
\end_layout

\begin_deeper
\begin_layout Itemize
Note: trees with 
\begin_inset Formula $S$
\end_inset

-shaped leaves are 
\emph on
semi
\emph default
-monads but not monads
\end_layout

\end_deeper
\begin_layout Standard
Example of a 
\emph on
non-monadic
\emph default
 tree-like functor:
\end_layout

\begin_layout Itemize
\begin_inset Formula $F^{A}\equiv A+A\times A+A\times A\times A\times A+...$
\end_inset

 (powers of 2)
\end_layout

\begin_layout Itemize
Recursive definition: 
\begin_inset Formula $F^{A}=A+F^{A\times A}$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Worked examples III: Tree-like monads
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
How 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 works for a binary tree:
\begin_inset Note Note
status open

\begin_layout Plain Layout
https://tex.stackexchange.com/questions/5447/how-can-i-draw-simple-trees-in-latex
\end_layout

\end_inset

 assume 
\family typewriter
\size footnotesize
\color blue
f:
\begin_inset space \space{}
\end_inset

A 
\begin_inset Formula $\Rightarrow$
\end_inset

 Tree[B]
\family default
\size default
\color inherit
 and
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\color blue
tree1
\family default
\size default
\color inherit
 = 
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
Tree[  [ $a_1$ ] [ [ $a_2$ ] [ $a_3$ ] ] ] 
\end_layout

\end_inset

 ; 
\begin_inset Formula $f(a_{1})=$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
Tree[  [ $b_0$ ] [ $b_1$ ] ] 
\end_layout

\end_inset

; 
\begin_inset Formula $f(a_{2})=b_{2}$
\end_inset

; 
\begin_inset Formula $f(a_{3})=$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
Tree[  [ $b_3$ ] [ $b_4$ ] ] 
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
then 
\family typewriter
\size footnotesize
\color blue
tree1.flatMap(f)
\family default
\size default
\color inherit
 =
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
Tree[  [ [ $b_0$ ] [ $b_1$ ] ] [ [ $b_2$ ] [ [ $b_3$ ] [ $b_4$ ] ] ] ] 
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
grafting subtrees plays the role of 
\begin_inset Quotes eld
\end_inset

flattening
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Typical tasks for tree-like monads:
\end_layout

\begin_layout Itemize
Traverse a tree, graft subtrees at leaves
\end_layout

\begin_layout Itemize
Substitute subexpressions in a syntax tree
\end_layout

\begin_layout Standard
Worked examples: see code
\end_layout

\begin_layout Enumerate
Implement a tree of 
\family typewriter
\size footnotesize
\color blue
String
\family default
\size default
\color inherit
 properties with arbitrary branching
\end_layout

\begin_layout Enumerate
Implement variable substitution for a simple arithmetic language
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Worked examples IV: Single-value monads
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Pretend that container holds exactly 
\begin_inset Formula $1$
\end_inset

 value, together with a 
\begin_inset Quotes eld
\end_inset

context
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Usually, methods exist to insert a value and to work with the 
\begin_inset Quotes eld
\end_inset

context
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Typical tasks for single-value monads:
\end_layout

\begin_layout Itemize
Managing extra information about computations along the way
\end_layout

\begin_layout Itemize
Chaining computations with a nonstandard evaluation strategy
\end_layout

\begin_layout Standard
Examples: see code
\end_layout

\begin_layout Enumerate

\family typewriter
\size footnotesize
\color blue
Writer
\family default
\size default
\color inherit
: Perform computations and log information about each step
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\text{Writer}^{A}\equiv A\times W$
\end_inset

 where 
\begin_inset Formula $W$
\end_inset

 is a monoid or a semigroup
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
\size footnotesize
\color blue
Reader
\family default
\size default
\color inherit
: Read-only context, or dependency injection
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\text{Reader}^{A}\equiv E\Rightarrow A$
\end_inset

 where 
\begin_inset Formula $E$
\end_inset

 represents the 
\begin_inset Quotes eld
\end_inset

environment
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
\size footnotesize
\color blue
Eval
\family default
\size default
\color inherit
: Perform a sequence of lazy or memoized computations
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\text{Eval}^{A}\equiv A+\left(1\Rightarrow A\right)$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
\size footnotesize
\color blue
Cont
\family default
\size default
\color inherit
: A chain of asynchronous operations
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\text{Cont}^{A}\equiv\left(A\Rightarrow R\right)\Rightarrow R$
\end_inset

 where 
\begin_inset Formula $R$
\end_inset

 is the fixed 
\begin_inset Quotes eld
\end_inset

result
\begin_inset Quotes erd
\end_inset

 type
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
\size footnotesize
\color blue
State
\family default
\size default
\color inherit
: A sequence of steps that update state while returning results
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\text{State}^{A}\equiv S\Rightarrow A\times S$
\end_inset

 where 
\begin_inset Formula $S$
\end_inset

 is the fixed 
\begin_inset Quotes eld
\end_inset

state
\begin_inset Quotes erd
\end_inset

 value type
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Deriving the types of single-value monads
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Motivation for the choice of the type constructors 
\begin_inset Formula $\text{Writer}^{A}$
\end_inset

, 
\begin_inset Formula $\text{Reader}^{A}$
\end_inset

, 
\begin_inset Formula $\text{State}^{A}$
\end_inset

, 
\begin_inset Formula $\text{Cont}^{A}$
\end_inset


\end_layout

\begin_layout Standard
We want previous values to be transformed via 
\family typewriter
\size footnotesize
\color blue
flatMap
\family default
\size default
\color inherit
 to next values
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
Writer
\family default
\size default
\color inherit
: a computation 
\begin_inset Formula $\left(A\Rightarrow B\right)$
\end_inset

 and some info (
\begin_inset Formula $W$
\end_inset

) about it
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $x^{A}\Rightarrow f(x):B$
\end_inset

 and 
\begin_inset Formula $x^{A}\Rightarrow g(x):W$
\end_inset

; the type is 
\begin_inset Formula $\left(A\Rightarrow B\right)\times\left(A\Rightarrow W\right)$
\end_inset


\end_layout

\begin_layout Itemize
this function should have type 
\begin_inset Formula $A\Rightarrow\text{Writer}^{B}$
\end_inset

, hence 
\begin_inset Formula $\text{Writer}^{B}\equiv B\times W$
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
use the 
\begin_inset Quotes eld
\end_inset

arithmetic
\begin_inset Quotes erd
\end_inset

 Curry-Howard to transform types: 
\begin_inset Formula $b^{a}w^{a}=(bw)^{a}$
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
Reader
\family default
\size default
\color inherit
: Read-only context, or 
\begin_inset Quotes eld
\end_inset

environment
\begin_inset Quotes erd
\end_inset

 of type 
\begin_inset Formula $E$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $x^{A}\Rightarrow f(r,x):B$
\end_inset

 where 
\begin_inset Formula $r^{E}$
\end_inset

 is fixed; the type is 
\begin_inset Formula $A\times E\Rightarrow B$
\end_inset


\end_layout

\begin_layout Itemize
this function should have type 
\begin_inset Formula $A\Rightarrow\text{Reader}^{B}$
\end_inset

, hence 
\begin_inset Formula $\text{Reader}^{B}\equiv E\Rightarrow B$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
we used the 
\begin_inset Quotes eld
\end_inset

arithmetic
\begin_inset Quotes erd
\end_inset

 Curry-Howard to transform 
\begin_inset Formula $b^{ae}=(b^{e})^{a}$
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
Cont
\family default
\size default
\color inherit
: A computation that registers an asynchronous callback
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $x^{A}\Rightarrow f(cb):1$
\end_inset

 where 
\begin_inset Formula $cb:B\Rightarrow1$
\end_inset

 (usually, callbacks return 
\family typewriter
\size footnotesize
\color blue
Unit
\family default
\size default
\color inherit
)
\end_layout

\begin_layout Itemize
the type is
\size footnotesize
 
\begin_inset Formula $A\Rightarrow\left(B\Rightarrow1\right)\Rightarrow1$
\end_inset


\size default
; this function should have type 
\size footnotesize

\begin_inset Formula $A\Rightarrow\text{Cont}^{B}$
\end_inset


\size default
, hence
\size footnotesize
 
\begin_inset Formula $\text{Cont}^{B}\equiv\left(B\Rightarrow1\right)\Rightarrow1$
\end_inset


\end_layout

\begin_layout Itemize
generalize to 
\size footnotesize

\begin_inset Formula $\text{Cont}^{A}\equiv\left(A\Rightarrow R\right)\Rightarrow R$
\end_inset

 
\size default
where 
\begin_inset Formula $R$
\end_inset

 is a fixed 
\begin_inset Quotes eld
\end_inset

result
\begin_inset Quotes erd
\end_inset

 type
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
State
\family default
\size default
\color inherit
: A computation can update state (
\begin_inset Formula $S$
\end_inset

) while producing a result
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $x^{A}\Rightarrow f(x,s)$
\end_inset

 and 
\begin_inset Formula $s^{S}:=g(x,s)$
\end_inset

; the type is
\size footnotesize
 
\begin_inset Formula $\left(A\times S\Rightarrow B\right)\times\left(A\times S\Rightarrow S\right)$
\end_inset


\end_layout

\begin_layout Itemize
this will be 
\begin_inset Formula $A\Rightarrow\text{State}^{B}$
\end_inset

 if 
\size footnotesize

\begin_inset Formula $\text{State}^{B}\equiv\left(S\Rightarrow B\right)\times\left(S\Rightarrow S\right)\equiv S\Rightarrow B\times S$
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
we used the 
\begin_inset Quotes eld
\end_inset

arithmetic
\begin_inset Quotes erd
\end_inset

 Curry-Howard: 
\begin_inset Formula $b^{as}s^{as}=(b^{s}s^{s})^{a}=\left(\left(bs\right)^{s}\right)^{a}$
\end_inset


\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exercises I
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
For a given 
\family typewriter
\size footnotesize
\color blue
Set[Int]
\family default
\size default
\color inherit
, compute all subsets 
\begin_inset Formula $\left(w,x,y,z\right)$
\end_inset

 of size 4 such that 
\begin_inset Formula $w<x<y<z$
\end_inset

 and 
\begin_inset Formula $w+z=x+y$
\end_inset


\end_layout

\begin_layout Enumerate
Given 3 sequences 
\begin_inset Formula $xs$
\end_inset

, 
\begin_inset Formula $ys$
\end_inset

, 
\begin_inset Formula $zs$
\end_inset

 of type 
\family typewriter
\size footnotesize
\color blue
Seq[Int]
\family default
\size default
\color inherit
, compute all 
\begin_inset Formula $\left(x,y,z\right)$
\end_inset

 such that 
\begin_inset Formula $x\in xs$
\end_inset

, 
\begin_inset Formula $y\in ys$
\end_inset

, 
\begin_inset Formula $z\in zs$
\end_inset

 and 
\begin_inset Formula $x<y<z$
\end_inset

 and 
\begin_inset Formula $x+y+z<10$
\end_inset


\end_layout

\begin_layout Enumerate
Solve the 
\begin_inset Formula $n$
\end_inset

-queens problem on an 
\begin_inset Formula $3\times3\times3$
\end_inset

 cube
\end_layout

\begin_layout Enumerate
Write a tiny library for arithmetic using 
\family typewriter
\size footnotesize
\color blue
Future
\family default
\size default
\color inherit
's; use it to compute 
\begin_inset Formula $1+2+...+100$
\end_inset

 via 
\family typewriter
\size footnotesize
\color blue
for
\family default
\size default
\color inherit
/
\family typewriter
\size footnotesize
\color blue
yield
\family default
\size default
\color inherit
 and verify the result.
 E.g.
\begin_inset space \space{}
\end_inset

implement: 
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
const: Int 
\begin_inset Formula $\Rightarrow$
\end_inset

 Future[Int]
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
add(x: Int): Int 
\begin_inset Formula $\Rightarrow$
\end_inset

 Future[Int]
\end_layout

\begin_layout LyX-Code

\family typewriter
\size footnotesize
\color blue
isEqual(x: Int): Int 
\begin_inset Formula $\Rightarrow$
\end_inset

 Future[Boolean] 
\end_layout

\end_deeper
\begin_layout Enumerate
Read a file into a string and write it to another file using Java 
\family typewriter
\size footnotesize
\color blue
Files
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
Paths
\family default
\size default
\color inherit
 API
\family typewriter
\size footnotesize
\color blue
.
 
\family default
\size default
\color inherit
Use 
\family typewriter
\size footnotesize
\color blue
Try
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
for
\family default
\size default
\color inherit
/
\family typewriter
\size footnotesize
\color blue
yield
\family default
\size default
\color inherit
 to make this safe.
\end_layout

\begin_layout Enumerate
Given a semigroup 
\begin_inset Formula $W$
\end_inset

, make a semimonad out of 
\begin_inset Formula $F^{A}\equiv E\Rightarrow A\times W$
\end_inset

 
\end_layout

\begin_layout Enumerate
Implement a semimonad instance for the (recursive) type constructor 
\begin_inset Formula $F^{A}=A+A\times A+F^{A}+F^{A}\times F^{A}$
\end_inset


\end_layout

\begin_layout Enumerate
Find the largest prime number below 1000 via a simple 
\begin_inset CommandInset href
LatexCommand href
name "Sieve of Eratosthenes"
target "https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"

\end_inset

; use the 
\family typewriter
\size footnotesize
\color blue
State[S, Int]
\family default
\size default
\color inherit
 monad with 
\family typewriter
\size footnotesize
\color blue
S = Array[Boolean]
\family default
\size default
\color inherit
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
End of slides.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
