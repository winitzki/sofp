Functional programming in the mathematical spirit.

Long and difficult, yet boring explanations given in excruciating detail.

Start by reading the slides, go through the worked examples and exercises. Watch the video when you cannot fully understand something in the slides.

Chapter 6: Computations in a functor context I. Filterable functors, their laws and structure. Part 2. Filterable functors in depth

Equivalent definition of filterable type class via `deflate` or `mapOption` instead of `withFilter`
How to simplify the laws of filterable functors by using a Kleisli category
Detailed derivations of laws for `mapOption`
Intuitions behind natural transformations and naturality laws
What category theory does for us, and what it does not do
Constructions of filterable functors from other functors
Intuitions behind filterable contrafunctors vs. filterable functors
Fiilterable contrafunctors: their laws and structure (in brief)
Worked examples and exercises

Slides: https://github.com/winitzki/talks/blob/master/ftt-fp/06-filterable-functors.pdf  (Part 2 covers only slides 9 to end)

Code examples: https://github.com/winitzki/scala-examples/tree/master/chapter06/src
